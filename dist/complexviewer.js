(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["complexviewer"] = factory();
	else
		root["complexviewer"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/css/xinet.css":
/*!*****************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/css/xinet.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"/*you need this to stop horrible looking flickering of text as you drag*/\\nsvg {\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n}\\n\\n.highlight {\\n    stroke: #ffff99;\\n}\\n\\n.link {\\n    stroke-linecap: round;\\n    stroke: black;\\n}\\n\\n.certain-link {\\n    opacity: 0.6;\\n    stroke-opacity: 0.6;\\n}\\n\\n.uncertain-link {\\n    opacity: 0.2;\\n    stroke-opacity: 0.6;\\n}\\n\\n.link-line {\\n    stroke-width: 1;\\n}\\n\\n.link-highlight {\\n    stroke-width: 10;\\n    stroke-opacity: 0;\\n}\\n\\n.complex-outline {\\n    stroke: white;\\n    stroke-linejoin: round;\\n    stroke-width: 7;\\n}\\n\\n.linked-complex {\\n    stroke: black;\\n    stroke-linejoin: round;\\n    stroke-width: 1;\\n}\\n\\nfeature-link {\\n    fill: black;\\n}\\n\\n.protein {\\n    cursor: crosshair;\\n}\\n\\n/*todo - seperate out outline*/\\n.label {\\n    font-size: 10pt;\\n    /*font-weight: bold;*/\\n\\n    /*color: #fff;*/\\n    /*text-shadow: white 0px 0px 1px;*/\\n    -webkit-font-smoothing: antialiased;\\n\\n    /*text-shadow: #fff 0px 0px 1px,   #fff 0px 0px 1px,   #fff 0px 0px 1px,*/\\n    /*#fff 0px 0px 1px,   #fff 0px 0px 1px,   #fff 0px 0px 1px;*/\\n\\n    text-shadow: -1px -1px 0 white,\\n    1px -1px 0 white,\\n    -1px 1px 0 white,\\n    1px 1px 0 white;\\n       /*-2px -1px 0 white,*/\\n       /* 2px -1px 0 white,*/\\n       /* -2px 1px 0 white,*/\\n       /* 2px 1px 0 white;*/\\n    fill: black;\\n    text-anchor: end;\\n}\\n\\n.scale-label{\\n    text-anchor: middle;\\n}\\n\\n.tooltip{\\n    text-anchor: start;\\n}\\n\\n.outline {\\n    stroke: black;\\n    stroke-width: 1;\\n    stroke-opacity: 1;\\n    fill: white;\\n    fill-opacity: 1;\\n}\\n\\n.participant-highlight {\\n    stroke-width: 5;\\n    fill: none;\\n}\\n\\n/*for protein bar scale*/\\n.tick {\\n    stroke: black;\\n}\\n\\n.tick-labels {\\n    font-size: 8pt;\\n    text-anchor: middle;\\n}\\n\\n/*not working right*/\\n.sequence {\\n    font-family: 'Courier New', monospace;\\n    font-size: 10px;\\n    text-anchor: middle;\\n}\\n\\n.custom-menu-margin {\\n    padding: 20px;\\n    display: none;\\n    z-index: 10000;\\n    position: absolute;\\n}\\n\\n.custom-menu {\\n    overflow: hidden;\\n    border: 1px solid #CCC;\\n    white-space: nowrap;\\n    background: #FFF;\\n    color: #333;\\n    list-style: none;\\n    padding: 0;\\n    margin: 0;\\n    pointer-events: all;\\n}\\n\\n.custom-menu li {\\n    padding: 8px 12px;\\n    cursor: pointer;\\n    -webkit-user-select: none;\\n    -moz-user-select: none;\\n    user-select: none;\\n}\\n\\n.custom-menu li:hover {\\n    background-color: #DEF;\\n}\\n\\n.bar-scale {\\n    display: inline;\\n    padding-left: 10px;\\n}\\n\\n.tooltip-background {\\n    fill-opacity: 0.6;\\n    stroke-opacity: 1;\\n    stroke-width: 1;\\n}\\n\\n.tooltip-sub-background {\\n    fill: white;\\n    stroke: white;\\n    opacity: 1;\\n    stroke-width: 1;\\n}\\n\\n@media only screen and (max-width : 1140px) {\\n    .label {\\n        text-shadow: none;\\n    }\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9jc3MveGluZXQuY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9jc3MveGluZXQuY3NzP2Y0YzQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qeW91IG5lZWQgdGhpcyB0byBzdG9wIGhvcnJpYmxlIGxvb2tpbmcgZmxpY2tlcmluZyBvZiB0ZXh0IGFzIHlvdSBkcmFnKi9cXG5zdmcge1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLmhpZ2hsaWdodCB7XFxuICAgIHN0cm9rZTogI2ZmZmY5OTtcXG59XFxuXFxuLmxpbmsge1xcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XFxuICAgIHN0cm9rZTogYmxhY2s7XFxufVxcblxcbi5jZXJ0YWluLWxpbmsge1xcbiAgICBvcGFjaXR5OiAwLjY7XFxuICAgIHN0cm9rZS1vcGFjaXR5OiAwLjY7XFxufVxcblxcbi51bmNlcnRhaW4tbGluayB7XFxuICAgIG9wYWNpdHk6IDAuMjtcXG4gICAgc3Ryb2tlLW9wYWNpdHk6IDAuNjtcXG59XFxuXFxuLmxpbmstbGluZSB7XFxuICAgIHN0cm9rZS13aWR0aDogMTtcXG59XFxuXFxuLmxpbmstaGlnaGxpZ2h0IHtcXG4gICAgc3Ryb2tlLXdpZHRoOiAxMDtcXG4gICAgc3Ryb2tlLW9wYWNpdHk6IDA7XFxufVxcblxcbi5jb21wbGV4LW91dGxpbmUge1xcbiAgICBzdHJva2U6IHdoaXRlO1xcbiAgICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xcbiAgICBzdHJva2Utd2lkdGg6IDc7XFxufVxcblxcbi5saW5rZWQtY29tcGxleCB7XFxuICAgIHN0cm9rZTogYmxhY2s7XFxuICAgIHN0cm9rZS1saW5lam9pbjogcm91bmQ7XFxuICAgIHN0cm9rZS13aWR0aDogMTtcXG59XFxuXFxuZmVhdHVyZS1saW5rIHtcXG4gICAgZmlsbDogYmxhY2s7XFxufVxcblxcbi5wcm90ZWluIHtcXG4gICAgY3Vyc29yOiBjcm9zc2hhaXI7XFxufVxcblxcbi8qdG9kbyAtIHNlcGVyYXRlIG91dCBvdXRsaW5lKi9cXG4ubGFiZWwge1xcbiAgICBmb250LXNpemU6IDEwcHQ7XFxuICAgIC8qZm9udC13ZWlnaHQ6IGJvbGQ7Ki9cXG5cXG4gICAgLypjb2xvcjogI2ZmZjsqL1xcbiAgICAvKnRleHQtc2hhZG93OiB3aGl0ZSAwcHggMHB4IDFweDsqL1xcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG5cXG4gICAgLyp0ZXh0LXNoYWRvdzogI2ZmZiAwcHggMHB4IDFweCwgICAjZmZmIDBweCAwcHggMXB4LCAgICNmZmYgMHB4IDBweCAxcHgsKi9cXG4gICAgLyojZmZmIDBweCAwcHggMXB4LCAgICNmZmYgMHB4IDBweCAxcHgsICAgI2ZmZiAwcHggMHB4IDFweDsqL1xcblxcbiAgICB0ZXh0LXNoYWRvdzogLTFweCAtMXB4IDAgd2hpdGUsXFxuICAgIDFweCAtMXB4IDAgd2hpdGUsXFxuICAgIC0xcHggMXB4IDAgd2hpdGUsXFxuICAgIDFweCAxcHggMCB3aGl0ZTtcXG4gICAgICAgLyotMnB4IC0xcHggMCB3aGl0ZSwqL1xcbiAgICAgICAvKiAycHggLTFweCAwIHdoaXRlLCovXFxuICAgICAgIC8qIC0ycHggMXB4IDAgd2hpdGUsKi9cXG4gICAgICAgLyogMnB4IDFweCAwIHdoaXRlOyovXFxuICAgIGZpbGw6IGJsYWNrO1xcbiAgICB0ZXh0LWFuY2hvcjogZW5kO1xcbn1cXG5cXG4uc2NhbGUtbGFiZWx7XFxuICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7XFxufVxcblxcbi50b29sdGlwe1xcbiAgICB0ZXh0LWFuY2hvcjogc3RhcnQ7XFxufVxcblxcbi5vdXRsaW5lIHtcXG4gICAgc3Ryb2tlOiBibGFjaztcXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xcbiAgICBzdHJva2Utb3BhY2l0eTogMTtcXG4gICAgZmlsbDogd2hpdGU7XFxuICAgIGZpbGwtb3BhY2l0eTogMTtcXG59XFxuXFxuLnBhcnRpY2lwYW50LWhpZ2hsaWdodCB7XFxuICAgIHN0cm9rZS13aWR0aDogNTtcXG4gICAgZmlsbDogbm9uZTtcXG59XFxuXFxuLypmb3IgcHJvdGVpbiBiYXIgc2NhbGUqL1xcbi50aWNrIHtcXG4gICAgc3Ryb2tlOiBibGFjaztcXG59XFxuXFxuLnRpY2stbGFiZWxzIHtcXG4gICAgZm9udC1zaXplOiA4cHQ7XFxuICAgIHRleHQtYW5jaG9yOiBtaWRkbGU7XFxufVxcblxcbi8qbm90IHdvcmtpbmcgcmlnaHQqL1xcbi5zZXF1ZW5jZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XFxuICAgIGZvbnQtc2l6ZTogMTBweDtcXG4gICAgdGV4dC1hbmNob3I6IG1pZGRsZTtcXG59XFxuXFxuLmN1c3RvbS1tZW51LW1hcmdpbiB7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIHotaW5kZXg6IDEwMDAwO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5jdXN0b20tbWVudSB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNDQ0M7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIGJhY2tncm91bmQ6ICNGRkY7XFxuICAgIGNvbG9yOiAjMzMzO1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVxcblxcbi5jdXN0b20tbWVudSBsaSB7XFxuICAgIHBhZGRpbmc6IDhweCAxMnB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4uY3VzdG9tLW1lbnUgbGk6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjREVGO1xcbn1cXG5cXG4uYmFyLXNjYWxlIHtcXG4gICAgZGlzcGxheTogaW5saW5lO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxufVxcblxcbi50b29sdGlwLWJhY2tncm91bmQge1xcbiAgICBmaWxsLW9wYWNpdHk6IDAuNjtcXG4gICAgc3Ryb2tlLW9wYWNpdHk6IDE7XFxuICAgIHN0cm9rZS13aWR0aDogMTtcXG59XFxuXFxuLnRvb2x0aXAtc3ViLWJhY2tncm91bmQge1xcbiAgICBmaWxsOiB3aGl0ZTtcXG4gICAgc3Ryb2tlOiB3aGl0ZTtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGggOiAxMTQwcHgpIHtcXG4gICAgLmxhYmVsIHtcXG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xcbiAgICB9XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/css/xinet.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/color.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/color.js ***!
  \********************************************/
/*! exports provided: Color, darker, brighter, default, rgbConvert, rgb, Rgb, hslConvert, hsl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"darker\", function() { return darker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"brighter\", function() { return brighter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgbConvert\", function() { return rgbConvert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgb\", function() { return rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rgb\", function() { return Rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hslConvert\", function() { return hslConvert; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsl\", function() { return hsl; });\n/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ \"./node_modules/d3-color/src/define.js\");\n\n\nfunction Color() {}\n\nvar darker = 0.7;\nvar brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nfunction color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nfunction rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nfunction rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nfunction Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Rgb, rgb, Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"extend\"])(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nfunction hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nfunction hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Hsl, hsl, Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"extend\"])(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\n        + (this.h || 0) + \", \"\n        + (this.s || 0) * 100 + \"%, \"\n        + (this.l || 0) * 100 + \"%\"\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/color.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/cubehelix.js":
/*!************************************************!*\
  !*** ./node_modules/d3-color/src/cubehelix.js ***!
  \************************************************/
/*! exports provided: default, Cubehelix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return cubehelix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cubehelix\", function() { return Cubehelix; });\n/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ \"./node_modules/d3-color/src/define.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-color/src/color.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"./node_modules/d3-color/src/math.js\");\n\n\n\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof _color_js__WEBPACK_IMPORTED_MODULE_1__[\"Rgb\"])) o = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"rgbConvert\"])(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * _math_js__WEBPACK_IMPORTED_MODULE_2__[\"rad2deg\"] - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nfunction cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Cubehelix, cubehelix, Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"extend\"])(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"Color\"], {\n  brighter: function(k) {\n    k = k == null ? _color_js__WEBPACK_IMPORTED_MODULE_1__[\"brighter\"] : Math.pow(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"brighter\"], k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? _color_js__WEBPACK_IMPORTED_MODULE_1__[\"darker\"] : Math.pow(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"darker\"], k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math_js__WEBPACK_IMPORTED_MODULE_2__[\"deg2rad\"],\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new _color_js__WEBPACK_IMPORTED_MODULE_1__[\"Rgb\"](\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2N1YmVoZWxpeC5qcz8xNWE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/cubehelix.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/define.js":
/*!*********************************************!*\
  !*** ./node_modules/d3-color/src/define.js ***!
  \*********************************************/
/*! exports provided: default, extend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"extend\", function() { return extend; });\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n});\n\nfunction extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcz82M2FkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/define.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/d3-color/src/index.js ***!
  \********************************************/
/*! exports provided: color, rgb, hsl, lab, hcl, lch, gray, cubehelix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-color/src/color.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"color\", function() { return _color_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"rgb\", function() { return _color_js__WEBPACK_IMPORTED_MODULE_0__[\"rgb\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hsl\", function() { return _color_js__WEBPACK_IMPORTED_MODULE_0__[\"hsl\"]; });\n\n/* harmony import */ var _lab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lab.js */ \"./node_modules/d3-color/src/lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lab\", function() { return _lab_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"hcl\", function() { return _lab_js__WEBPACK_IMPORTED_MODULE_1__[\"hcl\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"lch\", function() { return _lab_js__WEBPACK_IMPORTED_MODULE_1__[\"lch\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"gray\", function() { return _lab_js__WEBPACK_IMPORTED_MODULE_1__[\"gray\"]; });\n\n/* harmony import */ var _cubehelix_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cubehelix.js */ \"./node_modules/d3-color/src/cubehelix.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"cubehelix\", function() { return _cubehelix_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvaW5kZXguanM/NDgyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHQgYXMgY29sb3IsIHJnYiwgaHNsfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGxhYiwgaGNsLCBsY2gsIGdyYXl9IGZyb20gXCIuL2xhYi5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGN1YmVoZWxpeH0gZnJvbSBcIi4vY3ViZWhlbGl4LmpzXCI7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/index.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/lab.js":
/*!******************************************!*\
  !*** ./node_modules/d3-color/src/lab.js ***!
  \******************************************/
/*! exports provided: gray, default, Lab, lch, hcl, Hcl */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gray\", function() { return gray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return lab; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Lab\", function() { return Lab; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lch\", function() { return lch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hcl\", function() { return hcl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Hcl\", function() { return Hcl; });\n/* harmony import */ var _define_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./define.js */ \"./node_modules/d3-color/src/define.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-color/src/color.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"./node_modules/d3-color/src/math.js\");\n\n\n\n\n// https://observablehq.com/@mbostock/lab-and-rgb\nvar K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) return hcl2lab(o);\n  if (!(o instanceof _color_js__WEBPACK_IMPORTED_MODULE_1__[\"Rgb\"])) o = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"rgbConvert\"])(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nfunction gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nfunction lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nfunction Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Lab, lab, Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"extend\"])(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"Color\"], {\n  brighter: function(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new _color_js__WEBPACK_IMPORTED_MODULE_1__[\"Rgb\"](\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * _math_js__WEBPACK_IMPORTED_MODULE_2__[\"rad2deg\"];\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nfunction lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nfunction hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nfunction hcl2lab(o) {\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n  var h = o.h * _math_js__WEBPACK_IMPORTED_MODULE_2__[\"deg2rad\"];\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n}\n\nObject(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Hcl, hcl, Object(_define_js__WEBPACK_IMPORTED_MODULE_0__[\"extend\"])(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"Color\"], {\n  brighter: function(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function() {\n    return hcl2lab(this).rgb();\n  }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2xhYi5qcz82MmYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5cbi8vIGh0dHBzOi8vb2JzZXJ2YWJsZWhxLmNvbS9AbWJvc3RvY2svbGFiLWFuZC1yZ2JcbnZhciBLID0gMTgsXG4gICAgWG4gPSAwLjk2NDIyLFxuICAgIFluID0gMSxcbiAgICBabiA9IDAuODI1MjEsXG4gICAgdDAgPSA0IC8gMjksXG4gICAgdDEgPSA2IC8gMjksXG4gICAgdDIgPSAzICogdDEgKiB0MSxcbiAgICB0MyA9IHQxICogdDEgKiB0MTtcblxuZnVuY3Rpb24gbGFiQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgTGFiKSByZXR1cm4gbmV3IExhYihvLmwsIG8uYSwgby5iLCBvLm9wYWNpdHkpO1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIGhjbDJsYWIobyk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcbiAgdmFyIHIgPSByZ2IybHJnYihvLnIpLFxuICAgICAgZyA9IHJnYjJscmdiKG8uZyksXG4gICAgICBiID0gcmdiMmxyZ2Ioby5iKSxcbiAgICAgIHkgPSB4eXoybGFiKCgwLjIyMjUwNDUgKiByICsgMC43MTY4Nzg2ICogZyArIDAuMDYwNjE2OSAqIGIpIC8gWW4pLCB4LCB6O1xuICBpZiAociA9PT0gZyAmJiBnID09PSBiKSB4ID0geiA9IHk7IGVsc2Uge1xuICAgIHggPSB4eXoybGFiKCgwLjQzNjA3NDcgKiByICsgMC4zODUwNjQ5ICogZyArIDAuMTQzMDgwNCAqIGIpIC8gWG4pO1xuICAgIHogPSB4eXoybGFiKCgwLjAxMzkzMjIgKiByICsgMC4wOTcxMDQ1ICogZyArIDAuNzE0MTczMyAqIGIpIC8gWm4pO1xuICB9XG4gIHJldHVybiBuZXcgTGFiKDExNiAqIHkgLSAxNiwgNTAwICogKHggLSB5KSwgMjAwICogKHkgLSB6KSwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXkobCwgb3BhY2l0eSkge1xuICByZXR1cm4gbmV3IExhYihsLCAwLCAwLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMuYSA9ICthO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShMYWIsIGxhYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxuICAgICAgICB4ID0gaXNOYU4odGhpcy5hKSA/IHkgOiB5ICsgdGhpcy5hIC8gNTAwLFxuICAgICAgICB6ID0gaXNOYU4odGhpcy5iKSA/IHkgOiB5IC0gdGhpcy5iIC8gMjAwO1xuICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB6ID0gWm4gKiBsYWIyeHl6KHopO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgbHJnYjJyZ2IoIDMuMTMzODU2MSAqIHggLSAxLjYxNjg2NjcgKiB5IC0gMC40OTA2MTQ2ICogeiksXG4gICAgICBscmdiMnJnYigtMC45Nzg3Njg0ICogeCArIDEuOTE2MTQxNSAqIHkgKyAwLjAzMzQ1NDAgKiB6KSxcbiAgICAgIGxyZ2IycmdiKCAwLjA3MTk0NTMgKiB4IC0gMC4yMjg5OTE0ICogeSArIDEuNDA1MjQyNyAqIHopLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiB4eXoybGFiKHQpIHtcbiAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuXG5mdW5jdGlvbiBsYWIyeHl6KHQpIHtcbiAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5cbmZ1bmN0aW9uIGxyZ2IycmdiKHgpIHtcbiAgcmV0dXJuIDI1NSAqICh4IDw9IDAuMDAzMTMwOCA/IDEyLjkyICogeCA6IDEuMDU1ICogTWF0aC5wb3coeCwgMSAvIDIuNCkgLSAwLjA1NSk7XG59XG5cbmZ1bmN0aW9uIHJnYjJscmdiKHgpIHtcbiAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG59XG5cbmZ1bmN0aW9uIGhjbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhjbCkgcmV0dXJuIG5ldyBIY2woby5oLCBvLmMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xuICBpZiAoby5hID09PSAwICYmIG8uYiA9PT0gMCkgcmV0dXJuIG5ldyBIY2woTmFOLCAwIDwgby5sICYmIG8ubCA8IDEwMCA/IDAgOiBOYU4sIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmZ1bmN0aW9uIGhjbDJsYWIobykge1xuICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xufVxuXG5kZWZpbmUoSGNsLCBoY2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoY2wybGFiKHRoaXMpLnJnYigpO1xuICB9XG59KSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/lab.js\n");

/***/ }),

/***/ "./node_modules/d3-color/src/math.js":
/*!*******************************************!*\
  !*** ./node_modules/d3-color/src/math.js ***!
  \*******************************************/
/*! exports provided: deg2rad, rad2deg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deg2rad\", function() { return deg2rad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rad2deg\", function() { return rad2deg; });\nvar deg2rad = Math.PI / 180;\nvar rad2deg = 180 / Math.PI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzPzUzMGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmV4cG9ydCB2YXIgcmFkMmRlZyA9IDE4MCAvIE1hdGguUEk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-color/src/math.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/array.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/array.js ***!
  \**************************************************/
/*! exports provided: default, genericArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genericArray\", function() { return genericArray; });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"./node_modules/d3-interpolate/src/value.js\");\n/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./numberArray.js */ \"./node_modules/d3-interpolate/src/numberArray.js\");\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  return (Object(_numberArray_js__WEBPACK_IMPORTED_MODULE_1__[\"isNumberArray\"])(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : genericArray)(a, b);\n});\n\nfunction genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = Object(_value_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanM/NjczMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/array.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/basis.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basis.js ***!
  \**************************************************/
/*! exports provided: basis, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"basis\", function() { return basis; });\nfunction basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanM/Yzg0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/basis.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/basisClosed.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/basisClosed.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basis.js */ \"./node_modules/d3-interpolate/src/basis.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return Object(_basis_js__WEBPACK_IMPORTED_MODULE_0__[\"basis\"])((t - i / n) * n, v0, v1, v2, v3);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXNDbG9zZWQuanM/NGJjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/basisClosed.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/color.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/color.js ***!
  \**************************************************/
/*! exports provided: hue, gamma, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hue\", function() { return hue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gamma\", function() { return gamma; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return nogamma; });\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant.js */ \"./node_modules/d3-interpolate/src/constant.js\");\n\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nfunction hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(_constant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(isNaN(a) ? b : a);\n}\n\nfunction gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : Object(_constant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(isNaN(a) ? b : a);\n  };\n}\n\nfunction nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : Object(_constant_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(isNaN(a) ? b : a);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanM/YjA1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/color.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/constant.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/constant.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(x) {\n  return function() {\n    return x;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanM/YzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/constant.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/cubehelix.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-interpolate/src/cubehelix.js ***!
  \******************************************************/
/*! exports provided: default, cubehelixLong */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cubehelixLong\", function() { return cubehelixLong; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(start)).h, (end = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(end)).h),\n          s = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.s, end.s),\n          l = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.l, end.l),\n          opacity = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (cubehelix(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"hue\"]));\nvar cubehelixLong = cubehelix(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcz8zODcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/cubehelix.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/date.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/date.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzPzFiNmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/date.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/discrete.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/discrete.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Rpc2NyZXRlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGlzY3JldGUuanM/NTA2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/discrete.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/hcl.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hcl.js ***!
  \************************************************/
/*! exports provided: default, hclLong */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hclLong\", function() { return hclLong; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"hcl\"])(start)).h, (end = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"hcl\"])(end)).h),\n        c = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.c, end.c),\n        l = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.l, end.l),\n        opacity = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (hcl(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"hue\"]));\nvar hclLong = hcl(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcz81YWNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGNsIGFzIGNvbG9ySGNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gaGNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySGNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySGNsKGVuZCkpLmgpLFxuICAgICAgICBjID0gY29sb3Ioc3RhcnQuYywgZW5kLmMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LmMgPSBjKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoY2woaHVlKTtcbmV4cG9ydCB2YXIgaGNsTG9uZyA9IGhjbChjb2xvcik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/hcl.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/hsl.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hsl.js ***!
  \************************************************/
/*! exports provided: default, hslLong */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hslLong\", function() { return hslLong; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"hsl\"])(start)).h, (end = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"hsl\"])(end)).h),\n        s = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.s, end.s),\n        l = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.l, end.l),\n        opacity = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (hsl(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"hue\"]));\nvar hslLong = hsl(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcz83MGQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/hsl.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/hue.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/hue.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  var i = Object(_color_js__WEBPACK_IMPORTED_MODULE_0__[\"hue\"])(+a, +b);\n  return function(t) {\n    var x = i(t);\n    return x - 360 * Math.floor(x / 360);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2h1ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2h1ZS5qcz81M2EzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aHVlfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0gaHVlKCthLCArYik7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHggPSBpKHQpO1xuICAgIHJldHVybiB4IC0gMzYwICogTWF0aC5mbG9vcih4IC8gMzYwKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/hue.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/index.js ***!
  \**************************************************/
/*! exports provided: interpolate, interpolateArray, interpolateBasis, interpolateBasisClosed, interpolateDate, interpolateDiscrete, interpolateHue, interpolateNumber, interpolateNumberArray, interpolateObject, interpolateRound, interpolateString, interpolateTransformCss, interpolateTransformSvg, interpolateZoom, interpolateRgb, interpolateRgbBasis, interpolateRgbBasisClosed, interpolateHsl, interpolateHslLong, interpolateLab, interpolateHcl, interpolateHclLong, interpolateCubehelix, interpolateCubehelixLong, piecewise, quantize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"./node_modules/d3-interpolate/src/value.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolate\", function() { return _value_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array.js */ \"./node_modules/d3-interpolate/src/array.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateArray\", function() { return _array_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basis.js */ \"./node_modules/d3-interpolate/src/basis.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBasis\", function() { return _basis_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _basisClosed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./basisClosed.js */ \"./node_modules/d3-interpolate/src/basisClosed.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBasisClosed\", function() { return _basisClosed_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date.js */ \"./node_modules/d3-interpolate/src/date.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateDate\", function() { return _date_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _discrete_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./discrete.js */ \"./node_modules/d3-interpolate/src/discrete.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateDiscrete\", function() { return _discrete_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _hue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hue.js */ \"./node_modules/d3-interpolate/src/hue.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateHue\", function() { return _hue_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./number.js */ \"./node_modules/d3-interpolate/src/number.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateNumber\", function() { return _number_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./numberArray.js */ \"./node_modules/d3-interpolate/src/numberArray.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateNumberArray\", function() { return _numberArray_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./object.js */ \"./node_modules/d3-interpolate/src/object.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateObject\", function() { return _object_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _round_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./round.js */ \"./node_modules/d3-interpolate/src/round.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRound\", function() { return _round_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./string.js */ \"./node_modules/d3-interpolate/src/string.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateString\", function() { return _string_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _transform_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transform/index.js */ \"./node_modules/d3-interpolate/src/transform/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateTransformCss\", function() { return _transform_index_js__WEBPACK_IMPORTED_MODULE_12__[\"interpolateTransformCss\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateTransformSvg\", function() { return _transform_index_js__WEBPACK_IMPORTED_MODULE_12__[\"interpolateTransformSvg\"]; });\n\n/* harmony import */ var _zoom_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./zoom.js */ \"./node_modules/d3-interpolate/src/zoom.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateZoom\", function() { return _zoom_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n/* harmony import */ var _rgb_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./rgb.js */ \"./node_modules/d3-interpolate/src/rgb.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRgb\", function() { return _rgb_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRgbBasis\", function() { return _rgb_js__WEBPACK_IMPORTED_MODULE_14__[\"rgbBasis\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRgbBasisClosed\", function() { return _rgb_js__WEBPACK_IMPORTED_MODULE_14__[\"rgbBasisClosed\"]; });\n\n/* harmony import */ var _hsl_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hsl.js */ \"./node_modules/d3-interpolate/src/hsl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateHsl\", function() { return _hsl_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateHslLong\", function() { return _hsl_js__WEBPACK_IMPORTED_MODULE_15__[\"hslLong\"]; });\n\n/* harmony import */ var _lab_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lab.js */ \"./node_modules/d3-interpolate/src/lab.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateLab\", function() { return _lab_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]; });\n\n/* harmony import */ var _hcl_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./hcl.js */ \"./node_modules/d3-interpolate/src/hcl.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateHcl\", function() { return _hcl_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateHclLong\", function() { return _hcl_js__WEBPACK_IMPORTED_MODULE_17__[\"hclLong\"]; });\n\n/* harmony import */ var _cubehelix_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cubehelix.js */ \"./node_modules/d3-interpolate/src/cubehelix.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateCubehelix\", function() { return _cubehelix_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateCubehelixLong\", function() { return _cubehelix_js__WEBPACK_IMPORTED_MODULE_18__[\"cubehelixLong\"]; });\n\n/* harmony import */ var _piecewise_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./piecewise.js */ \"./node_modules/d3-interpolate/src/piecewise.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"piecewise\", function() { return _piecewise_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; });\n\n/* harmony import */ var _quantize_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./quantize.js */ \"./node_modules/d3-interpolate/src/quantize.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"quantize\", function() { return _quantize_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaW5kZXguanM/YTQzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGV9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVBcnJheX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlQmFzaXNDbG9zZWR9IGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVEYXRlfSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVEaXNjcmV0ZX0gZnJvbSBcIi4vZGlzY3JldGUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUh1ZX0gZnJvbSBcIi4vaHVlLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVOdW1iZXJ9IGZyb20gXCIuL251bWJlci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVPYmplY3R9IGZyb20gXCIuL29iamVjdC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUm91bmR9IGZyb20gXCIuL3JvdW5kLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVTdHJpbmd9IGZyb20gXCIuL3N0cmluZy5qc1wiO1xuZXhwb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcywgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Tdmd9IGZyb20gXCIuL3RyYW5zZm9ybS9pbmRleC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlWm9vbX0gZnJvbSBcIi4vem9vbS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUmdiLCByZ2JCYXNpcyBhcyBpbnRlcnBvbGF0ZVJnYkJhc2lzLCByZ2JCYXNpc0Nsb3NlZCBhcyBpbnRlcnBvbGF0ZVJnYkJhc2lzQ2xvc2VkfSBmcm9tIFwiLi9yZ2IuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUhzbCwgaHNsTG9uZyBhcyBpbnRlcnBvbGF0ZUhzbExvbmd9IGZyb20gXCIuL2hzbC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlTGFifSBmcm9tIFwiLi9sYWIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUhjbCwgaGNsTG9uZyBhcyBpbnRlcnBvbGF0ZUhjbExvbmd9IGZyb20gXCIuL2hjbC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlQ3ViZWhlbGl4LCBjdWJlaGVsaXhMb25nIGFzIGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZ30gZnJvbSBcIi4vY3ViZWhlbGl4LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgcGllY2V3aXNlfSBmcm9tIFwiLi9waWVjZXdpc2UuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBxdWFudGl6ZX0gZnJvbSBcIi4vcXVhbnRpemUuanNcIjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/index.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/lab.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/lab.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return lab; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n\nfunction lab(start, end) {\n  var l = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((start = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"lab\"])(start)).l, (end = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"lab\"])(end)).l),\n      a = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.a, end.a),\n      b = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.b, end.b),\n      opacity = Object(_color_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2xhYi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2xhYi5qcz8xMjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bGFiIGFzIGNvbG9yTGFifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIoc3RhcnQsIGVuZCkge1xuICB2YXIgbCA9IGNvbG9yKChzdGFydCA9IGNvbG9yTGFiKHN0YXJ0KSkubCwgKGVuZCA9IGNvbG9yTGFiKGVuZCkpLmwpLFxuICAgICAgYSA9IGNvbG9yKHN0YXJ0LmEsIGVuZC5hKSxcbiAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/lab.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/number.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/number.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcz9lMzE3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/number.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/numberArray.js":
/*!********************************************************!*\
  !*** ./node_modules/d3-interpolate/src/numberArray.js ***!
  \********************************************************/
/*! exports provided: default, isNumberArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNumberArray\", function() { return isNumberArray; });\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n});\n\nfunction isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyQXJyYXkuanM/NTFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/numberArray.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/object.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/object.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"./node_modules/d3-interpolate/src/value.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = Object(_value_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcz83MWJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/object.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/piecewise.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-interpolate/src/piecewise.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return piecewise; });\nfunction piecewise(interpolate, values) {\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\n  return function(t) {\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n    return I[i](t - i);\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcz9hYzBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBpZWNld2lzZShpbnRlcnBvbGF0ZSwgdmFsdWVzKSB7XG4gIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGggLSAxLCB2ID0gdmFsdWVzWzBdLCBJID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xuICB3aGlsZSAoaSA8IG4pIElbaV0gPSBpbnRlcnBvbGF0ZSh2LCB2ID0gdmFsdWVzWysraV0pO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqPSBuKSkpO1xuICAgIHJldHVybiBJW2ldKHQgLSBpKTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/piecewise.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/quantize.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-interpolate/src/quantize.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcXVhbnRpemUuanM/MWFmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnRlcnBvbGF0b3IsIG4pIHtcbiAgdmFyIHNhbXBsZXMgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcbiAgcmV0dXJuIHNhbXBsZXM7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/quantize.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/rgb.js":
/*!************************************************!*\
  !*** ./node_modules/d3-interpolate/src/rgb.js ***!
  \************************************************/
/*! exports provided: default, rgbBasis, rgbBasisClosed */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgbBasis\", function() { return rgbBasis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rgbBasisClosed\", function() { return rgbBasisClosed; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _basis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./basis.js */ \"./node_modules/d3-interpolate/src/basis.js\");\n/* harmony import */ var _basisClosed_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./basisClosed.js */ \"./node_modules/d3-interpolate/src/basisClosed.js\");\n/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color.js */ \"./node_modules/d3-interpolate/src/color.js\");\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function rgbGamma(y) {\n  var color = Object(_color_js__WEBPACK_IMPORTED_MODULE_3__[\"gamma\"])(y);\n\n  function rgb(start, end) {\n    var r = color((start = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"rgb\"])(start)).r, (end = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"rgb\"])(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = Object(_color_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1));\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"rgb\"])(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nvar rgbBasis = rgbSpline(_basis_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\nvar rgbBasisClosed = rgbSpline(_basisClosed_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcz9lMzYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/rgb.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/round.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/round.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanM/NTg1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/round.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/string.js":
/*!***************************************************!*\
  !*** ./node_modules/d3-interpolate/src/string.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number.js */ \"./node_modules/d3-interpolate/src/number.js\");\n\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcz85MGVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/string.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/decompose.js":
/*!****************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/decompose.js ***!
  \****************************************************************/
/*! exports provided: identity, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"identity\", function() { return identity; });\nvar degrees = 180 / Math.PI;\n\nvar identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzPzMyNTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/transform/decompose.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/index.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/index.js ***!
  \************************************************************/
/*! exports provided: interpolateTransformCss, interpolateTransformSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"interpolateTransformCss\", function() { return interpolateTransformCss; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"interpolateTransformSvg\", function() { return interpolateTransformSvg; });\n/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../number.js */ \"./node_modules/d3-interpolate/src/number.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ \"./node_modules/d3-interpolate/src/transform/parse.js\");\n\n\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(xa, xb)}, {i: i - 2, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(xa, xb)}, {i: i - 2, x: Object(_number_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nvar interpolateTransformCss = interpolateTransform(_parse_js__WEBPACK_IMPORTED_MODULE_1__[\"parseCss\"], \"px, \", \"px)\", \"deg)\");\nvar interpolateTransformSvg = interpolateTransform(_parse_js__WEBPACK_IMPORTED_MODULE_1__[\"parseSvg\"], \", \", \")\", \")\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcz80Yjc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/transform/index.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/transform/parse.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-interpolate/src/transform/parse.js ***!
  \************************************************************/
/*! exports provided: parseCss, parseSvg */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseCss\", function() { return parseCss; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseSvg\", function() { return parseSvg; });\n/* harmony import */ var _decompose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decompose.js */ \"./node_modules/d3-interpolate/src/transform/decompose.js\");\n\n\nvar cssNode,\n    cssRoot,\n    cssView,\n    svgNode;\n\nfunction parseCss(value) {\n  if (value === \"none\") return _decompose_js__WEBPACK_IMPORTED_MODULE_0__[\"identity\"];\n  if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n  cssNode.style.transform = value;\n  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n  cssRoot.removeChild(cssNode);\n  value = value.slice(7, -1).split(\",\");\n  return Object(_decompose_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n}\n\nfunction parseSvg(value) {\n  if (value == null) return _decompose_js__WEBPACK_IMPORTED_MODULE_0__[\"identity\"];\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose_js__WEBPACK_IMPORTED_MODULE_0__[\"identity\"];\n  value = value.matrix;\n  return Object(_decompose_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcz9kYTc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/transform/parse.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/value.js":
/*!**************************************************!*\
  !*** ./node_modules/d3-interpolate/src/value.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var _rgb_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgb.js */ \"./node_modules/d3-interpolate/src/rgb.js\");\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./array.js */ \"./node_modules/d3-interpolate/src/array.js\");\n/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./date.js */ \"./node_modules/d3-interpolate/src/date.js\");\n/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./number.js */ \"./node_modules/d3-interpolate/src/number.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./object.js */ \"./node_modules/d3-interpolate/src/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./string.js */ \"./node_modules/d3-interpolate/src/string.js\");\n/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constant.js */ \"./node_modules/d3-interpolate/src/constant.js\");\n/* harmony import */ var _numberArray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./numberArray.js */ \"./node_modules/d3-interpolate/src/numberArray.js\");\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? Object(_constant_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(b)\n      : (t === \"number\" ? _number_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n      : t === \"string\" ? ((c = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"color\"])(b)) ? (b = c, _rgb_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) : _string_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])\n      : b instanceof d3_color__WEBPACK_IMPORTED_MODULE_0__[\"color\"] ? _rgb_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n      : b instanceof Date ? _date_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n      : Object(_numberArray_js__WEBPACK_IMPORTED_MODULE_8__[\"isNumberArray\"])(b) ? _numberArray_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n      : Array.isArray(b) ? _array_js__WEBPACK_IMPORTED_MODULE_2__[\"genericArray\"]\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? _object_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n      : _number_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(a, b);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanM/ZWExZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiLmpzXCI7XG5pbXBvcnQge2dlbmVyaWNBcnJheX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGUuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdC5qc1wiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXlcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGdlbmVyaWNBcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/value.js\n");

/***/ }),

/***/ "./node_modules/d3-interpolate/src/zoom.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-interpolate/src/zoom.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar rho = Math.SQRT2,\n    rho2 = 2,\n    rho4 = 4,\n    epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\n// p0 = [ux0, uy0, w0]\n// p1 = [ux1, uy1, w1]\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(p0, p1) {\n  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n      dx = ux1 - ux0,\n      dy = uy1 - uy0,\n      d2 = dx * dx + dy * dy,\n      i,\n      S;\n\n  // Special case for u0 ≅ u1.\n  if (d2 < epsilon2) {\n    S = Math.log(w1 / w0) / rho;\n    i = function(t) {\n      return [\n        ux0 + t * dx,\n        uy0 + t * dy,\n        w0 * Math.exp(rho * t * S)\n      ];\n    }\n  }\n\n  // General case.\n  else {\n    var d1 = Math.sqrt(d2),\n        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n    S = (r1 - r0) / rho;\n    i = function(t) {\n      var s = t * S,\n          coshr0 = cosh(r0),\n          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n      return [\n        ux0 + u * dx,\n        uy0 + u * dy,\n        w0 * coshr0 / cosh(rho * s + r0)\n      ];\n    }\n  }\n\n  i.duration = S * 1000;\n\n  return i;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzP2NlNzUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocDAsIHAxKSB7XG4gIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIGksXG4gICAgICBTO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAg4omFIHUxLlxuICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgcmV0dXJuIGk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-interpolate/src/zoom.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Accent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Accent.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9BY2NlbnQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvQWNjZW50LmpzPzg3NmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Accent.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Dark2.js":
/*!******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Dark2.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9EYXJrMi5qcz8yNGNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Dark2.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Paired.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Paired.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYWlyZWQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFpcmVkLmpzP2MzOWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImE2Y2VlMzFmNzhiNGIyZGY4YTMzYTAyY2ZiOWE5OWUzMWExY2ZkYmY2ZmZmN2YwMGNhYjJkNjZhM2Q5YWZmZmY5OWIxNTkyOFwiKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Paired.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwxLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanM/YWIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZmJiNGFlYjNjZGUzY2NlYmM1ZGVjYmU0ZmVkOWE2ZmZmZmNjZTVkOGJkZmRkYWVjZjJmMmYyXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDIuanM/YjI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYjNlMmNkZmRjZGFjY2JkNWU4ZjRjYWU0ZTZmNWM5ZmZmMmFlZjFlMmNjY2NjY2NjXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Set1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set1.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQxLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDEuanM/ZDYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Set1.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Set2.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set2.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDIuanM/ODFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNjZjMmE1ZmM4ZDYyOGRhMGNiZTc4YWMzYTZkODU0ZmZkOTJmZTVjNDk0YjNiM2IzXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Set2.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Set3.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Set3.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDMuanM/MGI3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiOGRkM2M3ZmZmZmIzYmViYWRhZmI4MDcyODBiMWQzZmRiNDYyYjNkZTY5ZmNjZGU1ZDlkOWQ5YmM4MGJkY2NlYmM1ZmZlZDZmXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Set3.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9UYWJsZWF1MTAuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvVGFibGVhdTEwLmpzP2M2NDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjRlNzlhN2YyOGUyY2UxNTc1OTc2YjdiMjU5YTE0ZmVkYzk0OWFmN2FhMWZmOWRhNzljNzU1ZmJhYjBhYlwiKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/categorical/category10.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/categorical/category10.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL2NhdGVnb3J5MTAuanM/YTk2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/categorical/category10.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/colors.js":
/*!*******************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/colors.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jb2xvcnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY29sb3JzLmpzPzY2ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gIHZhciBuID0gc3BlY2lmaWVyLmxlbmd0aCAvIDYgfCAwLCBjb2xvcnMgPSBuZXcgQXJyYXkobiksIGkgPSAwO1xuICB3aGlsZSAoaSA8IG4pIGNvbG9yc1tpXSA9IFwiI1wiICsgc3BlY2lmaWVyLnNsaWNlKGkgKiA2LCArK2kgKiA2KTtcbiAgcmV0dXJuIGNvbG9ycztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/colors.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/BrBG.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/BrBG.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcz80YjFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImQ4YjM2NWY1ZjVmNTVhYjRhY1wiLFxuICBcImE2NjExYWRmYzI3ZDgwY2RjMTAxODU3MVwiLFxuICBcImE2NjExYWRmYzI3ZGY1ZjVmNTgwY2RjMTAxODU3MVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2M3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWQ4YjM2NWY2ZThjM2Y1ZjVmNWM3ZWFlNTVhYjRhYzAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjhjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZVwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2M3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiLFxuICBcIjU0MzAwNThjNTEwYWJmODEyZGRmYzI3ZGY2ZThjM2Y1ZjVmNWM3ZWFlNTgwY2RjMTM1OTc4ZjAxNjY1ZTAwM2MzMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/BrBG.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/PRGn.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PRGn.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcz9iMjdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImFmOGRjM2Y3ZjdmNzdmYmY3YlwiLFxuICBcIjdiMzI5NGMyYTVjZmE2ZGJhMDAwODgzN1wiLFxuICBcIjdiMzI5NGMyYTVjZmY3ZjdmN2E2ZGJhMDAwODgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGQ5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGY3ZjdmN2Q5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/PRGn.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/PiYG.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PiYG.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcz81NGMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU5YTNjOWY3ZjdmN2ExZDc2YVwiLFxuICBcImQwMWM4YmYxYjZkYWI4ZTE4NjRkYWMyNlwiLFxuICBcImQwMWM4YmYxYjZkYWY3ZjdmN2I4ZTE4NjRkYWMyNlwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmU2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGU5YTNjOWZkZTBlZmY3ZjdmN2U2ZjVkMGExZDc2YTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcImM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmU2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiLFxuICBcIjhlMDE1MmM1MWI3ZGRlNzdhZWYxYjZkYWZkZTBlZmY3ZjdmN2U2ZjVkMGI4ZTE4NjdmYmM0MTRkOTIyMTI3NjQxOVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/PiYG.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/PuOr.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/PuOr.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcz8wMDdjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcIjk5OGVjM2Y3ZjdmN2YxYTM0MFwiLFxuICBcIjVlM2M5OWIyYWJkMmZkYjg2M2U2NjEwMVwiLFxuICBcIjVlM2M5OWIyYWJkMmY3ZjdmN2ZkYjg2M2U2NjEwMVwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODk5OGVjM2Q4ZGFlYmY3ZjdmN2ZlZTBiNmYxYTM0MGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNlwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiLFxuICBcIjJkMDA0YjU0Mjc4ODgwNzNhY2IyYWJkMmQ4ZGFlYmY3ZjdmN2ZlZTBiNmZkYjg2M2UwODIxNGIzNTgwNjdmM2IwOFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/PuOr.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/RdBu.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdBu.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcz82MjdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmY3ZjdmNzY3YTljZlwiLFxuICBcImNhMDAyMGY0YTU4MjkyYzVkZTA1NzFiMFwiLFxuICBcImNhMDAyMGY0YTU4MmY3ZjdmNzkyYzVkZTA1NzFiMFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2Y3ZjdmN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/RdBu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/RdGy.js":
/*!***************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdGy.js ***!
  \***************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcz8yZDI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmZmZmZmZjk5OTk5OVwiLFxuICBcImNhMDAyMGY0YTU4MmJhYmFiYTQwNDA0MFwiLFxuICBcImNhMDAyMGY0YTU4MmZmZmZmZmJhYmFiYTQwNDA0MFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2UwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2ZmZmZmZmUwZTBlMDk5OTk5OTRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZFwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2UwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2ZmZmZmZmUwZTBlMGJhYmFiYTg3ODc4NzRkNGQ0ZDFhMWExYVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/RdGy.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js ***!
  \*****************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsQnUuanM/YzNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWJmZGJcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmQ5ZTkyYzdiYjZcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOTBmZmZmYmZlMGYzZjg5MWJmZGI0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjRcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOTBmZmZmYmZlMGYzZjhhYmQ5ZTk3NGFkZDE0NTc1YjQzMTM2OTVcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js":
/*!*****************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js ***!
  \*****************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEduLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanM/YjI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5MWNmNjBcIixcbiAgXCJkNzE5MWNmZGFlNjFhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhNmQ5NmExYTk2NDFcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmYzhkNTlmZWUwOGJmZmZmYmZkOWVmOGI5MWNmNjAxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTBcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIixcbiAgXCJhNTAwMjZkNzMwMjdmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZkOWVmOGJhNmQ5NmE2NmJkNjMxYTk4NTAwMDY4MzdcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/diverging/Spectral.js":
/*!*******************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/diverging/Spectral.js ***!
  \*******************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvU3BlY3RyYWwuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzPzA4YTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTlkNTk0XCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkZGE0MmI4M2JhXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZmM4ZDU5ZmVlMDhiZmZmZmJmZTZmNTk4OTlkNTk0MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCIsXG4gIFwiOWUwMTQyZDUzZTRmZjQ2ZDQzZmRhZTYxZmVlMDhiZmZmZmJmZTZmNTk4YWJkZGE0NjZjMmE1MzI4OGJkNWU0ZmEyXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/diverging/Spectral.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/index.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/index.js ***!
  \******************************************************/
/*! exports provided: schemeCategory10, schemeAccent, schemeDark2, schemePaired, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3, schemeTableau10, interpolateBrBG, schemeBrBG, interpolatePRGn, schemePRGn, interpolatePiYG, schemePiYG, interpolatePuOr, schemePuOr, interpolateRdBu, schemeRdBu, interpolateRdGy, schemeRdGy, interpolateRdYlBu, schemeRdYlBu, interpolateRdYlGn, schemeRdYlGn, interpolateSpectral, schemeSpectral, interpolateBuGn, schemeBuGn, interpolateBuPu, schemeBuPu, interpolateGnBu, schemeGnBu, interpolateOrRd, schemeOrRd, interpolatePuBuGn, schemePuBuGn, interpolatePuBu, schemePuBu, interpolatePuRd, schemePuRd, interpolateRdPu, schemeRdPu, interpolateYlGnBu, schemeYlGnBu, interpolateYlGn, schemeYlGn, interpolateYlOrBr, schemeYlOrBr, interpolateYlOrRd, schemeYlOrRd, interpolateBlues, schemeBlues, interpolateGreens, schemeGreens, interpolateGreys, schemeGreys, interpolatePurples, schemePurples, interpolateReds, schemeReds, interpolateOranges, schemeOranges, interpolateCividis, interpolateCubehelixDefault, interpolateRainbow, interpolateWarm, interpolateCool, interpolateSinebow, interpolateTurbo, interpolateViridis, interpolateMagma, interpolateInferno, interpolatePlasma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _categorical_category10_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./categorical/category10.js */ \"./node_modules/d3-scale-chromatic/src/categorical/category10.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeCategory10\", function() { return _categorical_category10_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _categorical_Accent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./categorical/Accent.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Accent.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeAccent\", function() { return _categorical_Accent_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _categorical_Dark2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./categorical/Dark2.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Dark2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeDark2\", function() { return _categorical_Dark2_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _categorical_Paired_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./categorical/Paired.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Paired.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePaired\", function() { return _categorical_Paired_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _categorical_Pastel1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./categorical/Pastel1.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Pastel1.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePastel1\", function() { return _categorical_Pastel1_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _categorical_Pastel2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./categorical/Pastel2.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Pastel2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePastel2\", function() { return _categorical_Pastel2_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _categorical_Set1_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./categorical/Set1.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Set1.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeSet1\", function() { return _categorical_Set1_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _categorical_Set2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./categorical/Set2.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Set2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeSet2\", function() { return _categorical_Set2_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _categorical_Set3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./categorical/Set3.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Set3.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeSet3\", function() { return _categorical_Set3_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _categorical_Tableau10_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./categorical/Tableau10.js */ \"./node_modules/d3-scale-chromatic/src/categorical/Tableau10.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeTableau10\", function() { return _categorical_Tableau10_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _diverging_BrBG_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./diverging/BrBG.js */ \"./node_modules/d3-scale-chromatic/src/diverging/BrBG.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBrBG\", function() { return _diverging_BrBG_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeBrBG\", function() { return _diverging_BrBG_js__WEBPACK_IMPORTED_MODULE_10__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_PRGn_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./diverging/PRGn.js */ \"./node_modules/d3-scale-chromatic/src/diverging/PRGn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePRGn\", function() { return _diverging_PRGn_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePRGn\", function() { return _diverging_PRGn_js__WEBPACK_IMPORTED_MODULE_11__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_PiYG_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./diverging/PiYG.js */ \"./node_modules/d3-scale-chromatic/src/diverging/PiYG.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePiYG\", function() { return _diverging_PiYG_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePiYG\", function() { return _diverging_PiYG_js__WEBPACK_IMPORTED_MODULE_12__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_PuOr_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./diverging/PuOr.js */ \"./node_modules/d3-scale-chromatic/src/diverging/PuOr.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePuOr\", function() { return _diverging_PuOr_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePuOr\", function() { return _diverging_PuOr_js__WEBPACK_IMPORTED_MODULE_13__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_RdBu_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./diverging/RdBu.js */ \"./node_modules/d3-scale-chromatic/src/diverging/RdBu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRdBu\", function() { return _diverging_RdBu_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeRdBu\", function() { return _diverging_RdBu_js__WEBPACK_IMPORTED_MODULE_14__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_RdGy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./diverging/RdGy.js */ \"./node_modules/d3-scale-chromatic/src/diverging/RdGy.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRdGy\", function() { return _diverging_RdGy_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeRdGy\", function() { return _diverging_RdGy_js__WEBPACK_IMPORTED_MODULE_15__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_RdYlBu_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./diverging/RdYlBu.js */ \"./node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRdYlBu\", function() { return _diverging_RdYlBu_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeRdYlBu\", function() { return _diverging_RdYlBu_js__WEBPACK_IMPORTED_MODULE_16__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_RdYlGn_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./diverging/RdYlGn.js */ \"./node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRdYlGn\", function() { return _diverging_RdYlGn_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeRdYlGn\", function() { return _diverging_RdYlGn_js__WEBPACK_IMPORTED_MODULE_17__[\"scheme\"]; });\n\n/* harmony import */ var _diverging_Spectral_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./diverging/Spectral.js */ \"./node_modules/d3-scale-chromatic/src/diverging/Spectral.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateSpectral\", function() { return _diverging_Spectral_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeSpectral\", function() { return _diverging_Spectral_js__WEBPACK_IMPORTED_MODULE_18__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_BuGn_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./sequential-multi/BuGn.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBuGn\", function() { return _sequential_multi_BuGn_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeBuGn\", function() { return _sequential_multi_BuGn_js__WEBPACK_IMPORTED_MODULE_19__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_BuPu_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./sequential-multi/BuPu.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBuPu\", function() { return _sequential_multi_BuPu_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeBuPu\", function() { return _sequential_multi_BuPu_js__WEBPACK_IMPORTED_MODULE_20__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_GnBu_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./sequential-multi/GnBu.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateGnBu\", function() { return _sequential_multi_GnBu_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeGnBu\", function() { return _sequential_multi_GnBu_js__WEBPACK_IMPORTED_MODULE_21__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_OrRd_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./sequential-multi/OrRd.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateOrRd\", function() { return _sequential_multi_OrRd_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeOrRd\", function() { return _sequential_multi_OrRd_js__WEBPACK_IMPORTED_MODULE_22__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_PuBuGn_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./sequential-multi/PuBuGn.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePuBuGn\", function() { return _sequential_multi_PuBuGn_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePuBuGn\", function() { return _sequential_multi_PuBuGn_js__WEBPACK_IMPORTED_MODULE_23__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_PuBu_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./sequential-multi/PuBu.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePuBu\", function() { return _sequential_multi_PuBu_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePuBu\", function() { return _sequential_multi_PuBu_js__WEBPACK_IMPORTED_MODULE_24__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_PuRd_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./sequential-multi/PuRd.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePuRd\", function() { return _sequential_multi_PuRd_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePuRd\", function() { return _sequential_multi_PuRd_js__WEBPACK_IMPORTED_MODULE_25__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_RdPu_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./sequential-multi/RdPu.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRdPu\", function() { return _sequential_multi_RdPu_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeRdPu\", function() { return _sequential_multi_RdPu_js__WEBPACK_IMPORTED_MODULE_26__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_YlGnBu_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./sequential-multi/YlGnBu.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateYlGnBu\", function() { return _sequential_multi_YlGnBu_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeYlGnBu\", function() { return _sequential_multi_YlGnBu_js__WEBPACK_IMPORTED_MODULE_27__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_YlGn_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./sequential-multi/YlGn.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateYlGn\", function() { return _sequential_multi_YlGn_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeYlGn\", function() { return _sequential_multi_YlGn_js__WEBPACK_IMPORTED_MODULE_28__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_YlOrBr_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./sequential-multi/YlOrBr.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateYlOrBr\", function() { return _sequential_multi_YlOrBr_js__WEBPACK_IMPORTED_MODULE_29__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeYlOrBr\", function() { return _sequential_multi_YlOrBr_js__WEBPACK_IMPORTED_MODULE_29__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_YlOrRd_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./sequential-multi/YlOrRd.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateYlOrRd\", function() { return _sequential_multi_YlOrRd_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeYlOrRd\", function() { return _sequential_multi_YlOrRd_js__WEBPACK_IMPORTED_MODULE_30__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Blues_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./sequential-single/Blues.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateBlues\", function() { return _sequential_single_Blues_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeBlues\", function() { return _sequential_single_Blues_js__WEBPACK_IMPORTED_MODULE_31__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Greens_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./sequential-single/Greens.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateGreens\", function() { return _sequential_single_Greens_js__WEBPACK_IMPORTED_MODULE_32__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeGreens\", function() { return _sequential_single_Greens_js__WEBPACK_IMPORTED_MODULE_32__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Greys_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./sequential-single/Greys.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateGreys\", function() { return _sequential_single_Greys_js__WEBPACK_IMPORTED_MODULE_33__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeGreys\", function() { return _sequential_single_Greys_js__WEBPACK_IMPORTED_MODULE_33__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Purples_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./sequential-single/Purples.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePurples\", function() { return _sequential_single_Purples_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemePurples\", function() { return _sequential_single_Purples_js__WEBPACK_IMPORTED_MODULE_34__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Reds_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./sequential-single/Reds.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateReds\", function() { return _sequential_single_Reds_js__WEBPACK_IMPORTED_MODULE_35__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeReds\", function() { return _sequential_single_Reds_js__WEBPACK_IMPORTED_MODULE_35__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_single_Oranges_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./sequential-single/Oranges.js */ \"./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateOranges\", function() { return _sequential_single_Oranges_js__WEBPACK_IMPORTED_MODULE_36__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"schemeOranges\", function() { return _sequential_single_Oranges_js__WEBPACK_IMPORTED_MODULE_36__[\"scheme\"]; });\n\n/* harmony import */ var _sequential_multi_cividis_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./sequential-multi/cividis.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateCividis\", function() { return _sequential_multi_cividis_js__WEBPACK_IMPORTED_MODULE_37__[\"default\"]; });\n\n/* harmony import */ var _sequential_multi_cubehelix_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./sequential-multi/cubehelix.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateCubehelixDefault\", function() { return _sequential_multi_cubehelix_js__WEBPACK_IMPORTED_MODULE_38__[\"default\"]; });\n\n/* harmony import */ var _sequential_multi_rainbow_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./sequential-multi/rainbow.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateRainbow\", function() { return _sequential_multi_rainbow_js__WEBPACK_IMPORTED_MODULE_39__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateWarm\", function() { return _sequential_multi_rainbow_js__WEBPACK_IMPORTED_MODULE_39__[\"warm\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateCool\", function() { return _sequential_multi_rainbow_js__WEBPACK_IMPORTED_MODULE_39__[\"cool\"]; });\n\n/* harmony import */ var _sequential_multi_sinebow_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./sequential-multi/sinebow.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateSinebow\", function() { return _sequential_multi_sinebow_js__WEBPACK_IMPORTED_MODULE_40__[\"default\"]; });\n\n/* harmony import */ var _sequential_multi_turbo_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./sequential-multi/turbo.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateTurbo\", function() { return _sequential_multi_turbo_js__WEBPACK_IMPORTED_MODULE_41__[\"default\"]; });\n\n/* harmony import */ var _sequential_multi_viridis_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./sequential-multi/viridis.js */ \"./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateViridis\", function() { return _sequential_multi_viridis_js__WEBPACK_IMPORTED_MODULE_42__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateMagma\", function() { return _sequential_multi_viridis_js__WEBPACK_IMPORTED_MODULE_42__[\"magma\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolateInferno\", function() { return _sequential_multi_viridis_js__WEBPACK_IMPORTED_MODULE_42__[\"inferno\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"interpolatePlasma\", function() { return _sequential_multi_viridis_js__WEBPACK_IMPORTED_MODULE_42__[\"plasma\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9pbmRleC5qcz9hMWViIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVDYXRlZ29yeTEwfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9jYXRlZ29yeTEwLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lQWNjZW50fSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9BY2NlbnQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVEYXJrMn0gZnJvbSBcIi4vY2F0ZWdvcmljYWwvRGFyazIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVQYWlyZWR9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1BhaXJlZC5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNjaGVtZVBhc3RlbDF9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVQYXN0ZWwyfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9QYXN0ZWwyLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lU2V0MX0gZnJvbSBcIi4vY2F0ZWdvcmljYWwvU2V0MS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIHNjaGVtZVNldDJ9IGZyb20gXCIuL2NhdGVnb3JpY2FsL1NldDIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBzY2hlbWVTZXQzfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9TZXQzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgc2NoZW1lVGFibGVhdTEwfSBmcm9tIFwiLi9jYXRlZ29yaWNhbC9UYWJsZWF1MTAuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJyQkcsIHNjaGVtZSBhcyBzY2hlbWVCckJHfSBmcm9tIFwiLi9kaXZlcmdpbmcvQnJCRy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUFJHbiwgc2NoZW1lIGFzIHNjaGVtZVBSR259IGZyb20gXCIuL2RpdmVyZ2luZy9QUkduLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVQaVlHLCBzY2hlbWUgYXMgc2NoZW1lUGlZR30gZnJvbSBcIi4vZGl2ZXJnaW5nL1BpWUcuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1T3IsIHNjaGVtZSBhcyBzY2hlbWVQdU9yfSBmcm9tIFwiLi9kaXZlcmdpbmcvUHVPci5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUmRCdSwgc2NoZW1lIGFzIHNjaGVtZVJkQnV9IGZyb20gXCIuL2RpdmVyZ2luZy9SZEJ1LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVSZEd5LCBzY2hlbWUgYXMgc2NoZW1lUmRHeX0gZnJvbSBcIi4vZGl2ZXJnaW5nL1JkR3kuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJkWWxCdSwgc2NoZW1lIGFzIHNjaGVtZVJkWWxCdX0gZnJvbSBcIi4vZGl2ZXJnaW5nL1JkWWxCdS5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlUmRZbEduLCBzY2hlbWUgYXMgc2NoZW1lUmRZbEdufSBmcm9tIFwiLi9kaXZlcmdpbmcvUmRZbEduLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVTcGVjdHJhbCwgc2NoZW1lIGFzIHNjaGVtZVNwZWN0cmFsfSBmcm9tIFwiLi9kaXZlcmdpbmcvU3BlY3RyYWwuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJ1R24sIHNjaGVtZSBhcyBzY2hlbWVCdUdufSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0J1R24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJ1UHUsIHNjaGVtZSBhcyBzY2hlbWVCdVB1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUduQnUsIHNjaGVtZSBhcyBzY2hlbWVHbkJ1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL0duQnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZU9yUmQsIHNjaGVtZSBhcyBzY2hlbWVPclJkfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL09yUmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1QnVHbiwgc2NoZW1lIGFzIHNjaGVtZVB1QnVHbn0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9QdUJ1R24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1QnUsIHNjaGVtZSBhcyBzY2hlbWVQdUJ1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1UmQsIHNjaGVtZSBhcyBzY2hlbWVQdVJkfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJkUHUsIHNjaGVtZSBhcyBzY2hlbWVSZFB1fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsR25CdSwgc2NoZW1lIGFzIHNjaGVtZVlsR25CdX0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbEduQnUuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsR24sIHNjaGVtZSBhcyBzY2hlbWVZbEdufSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL1lsR24uanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsT3JCciwgc2NoZW1lIGFzIHNjaGVtZVlsT3JCcn0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVlsT3JSZCwgc2NoZW1lIGFzIHNjaGVtZVlsT3JSZH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUJsdWVzLCBzY2hlbWUgYXMgc2NoZW1lQmx1ZXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL0JsdWVzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVHcmVlbnMsIHNjaGVtZSBhcyBzY2hlbWVHcmVlbnN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL0dyZWVucy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlR3JleXMsIHNjaGVtZSBhcyBzY2hlbWVHcmV5c30gZnJvbSBcIi4vc2VxdWVudGlhbC1zaW5nbGUvR3JleXMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVB1cnBsZXMsIHNjaGVtZSBhcyBzY2hlbWVQdXJwbGVzfSBmcm9tIFwiLi9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVSZWRzLCBzY2hlbWUgYXMgc2NoZW1lUmVkc30gZnJvbSBcIi4vc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlT3Jhbmdlcywgc2NoZW1lIGFzIHNjaGVtZU9yYW5nZXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZUNpdmlkaXN9IGZyb20gXCIuL3NlcXVlbnRpYWwtbXVsdGkvY2l2aWRpcy5qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGludGVycG9sYXRlQ3ViZWhlbGl4RGVmYXVsdH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9jdWJlaGVsaXguanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVJhaW5ib3csIHdhcm0gYXMgaW50ZXJwb2xhdGVXYXJtLCBjb29sIGFzIGludGVycG9sYXRlQ29vbH0gZnJvbSBcIi4vc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVTaW5lYm93fSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBpbnRlcnBvbGF0ZVR1cmJvfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3R1cmJvLmpzXCI7XG5leHBvcnQge2RlZmF1bHQgYXMgaW50ZXJwb2xhdGVWaXJpZGlzLCBtYWdtYSBhcyBpbnRlcnBvbGF0ZU1hZ21hLCBpbmZlcm5vIGFzIGludGVycG9sYXRlSW5mZXJubywgcGxhc21hIGFzIGludGVycG9sYXRlUGxhc21hfSBmcm9tIFwiLi9zZXF1ZW50aWFsLW11bHRpL3ZpcmlkaXMuanNcIjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/index.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/ramp.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/ramp.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-interpolate */ \"./node_modules/d3-interpolate/src/index.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(scheme) {\n  return Object(d3_interpolate__WEBPACK_IMPORTED_MODULE_0__[\"interpolateRgbBasis\"])(scheme[scheme.length - 1]);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9yYW1wLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3JhbXAuanM/OGQwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ludGVycG9sYXRlUmdiQmFzaXN9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzY2hlbWUpIHtcbiAgcmV0dXJuIGludGVycG9sYXRlUmdiQmFzaXMoc2NoZW1lW3NjaGVtZS5sZW5ndGggLSAxXSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/ramp.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1R24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdUduLmpzPzk4YjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWY5OTlkOGM5MmNhMjVmXCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MjM4YjQ1XCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9CdVB1LmpzPzYzNzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBlY2Y0OWViY2RhODg1NmE3XCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg0MTlkXCIsXG4gIFwiZWRmOGZiYjNjZGUzOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2ODg1NmE3ODEwZjdjXCIsXG4gIFwiZWRmOGZiYmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkNmUwMTZiXCIsXG4gIFwiZjdmY2ZkZTBlY2Y0YmZkM2U2OWViY2RhOGM5NmM2OGM2YmIxODg0MTlkODEwZjdjNGQwMDRiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0duQnUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9HbkJ1LmpzP2YwNWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTBmM2RiYThkZGI1NDNhMmNhXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0MmI4Y2JlXCIsXG4gIFwiZjBmOWU4YmFlNGJjN2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NDNhMmNhMDg2OGFjXCIsXG4gIFwiZjBmOWU4Y2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg1ODllXCIsXG4gIFwiZjdmY2YwZTBmM2RiY2NlYmM1YThkZGI1N2JjY2M0NGViM2QzMmI4Y2JlMDg2OGFjMDg0MDgxXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL09yUmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9PclJkLmpzP2M5NGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlOGM4ZmRiYjg0ZTM0YTMzXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZDczMDFmXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmYjMwMDAwN2YwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdUJ1LmpzP2I5MGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWNlN2YyYTZiZGRiMmI4Y2JlXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMDU3MGIwXCIsXG4gIFwiZjFlZWY2YmRjOWUxNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMmI4Y2JlMDQ1YThkXCIsXG4gIFwiZjFlZWY2ZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDM0ZTdiXCIsXG4gIFwiZmZmN2ZiZWNlN2YyZDBkMWU2YTZiZGRiNzRhOWNmMzY5MGMwMDU3MGIwMDQ1YThkMDIzODU4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcz8wYzc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTJmMGE2YmRkYjFjOTA5OVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjAyODE4YVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNmM1OTAxNDYzNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1UmQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzPzc5NmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTdlMWVmYzk5NGM3ZGQxYzc3XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwY2UxMjU2XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTgwMDQzNjcwMDFmXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1JkUHUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9SZFB1LmpzPzYyMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmRlMGRkZmE5ZmI1YzUxYjhhXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYWUwMTdlXCIsXG4gIFwiZmVlYmUyZmJiNGI5Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExYzUxYjhhN2EwMTc3XCIsXG4gIFwiZmVlYmUyZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3XCIsXG4gIFwiZmZmN2YzZmRlMGRkZmNjNWMwZmE5ZmI1Zjc2OGExZGQzNDk3YWUwMTdlN2EwMTc3NDkwMDZhXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js ***!
  \**********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbEduLmpzP2Q5OGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjdmY2I5YWRkZDhlMzFhMzU0XCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MjM4NDQzXCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA2ODM3MDA0NTI5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcz8xM2ZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVkZjhiMTdmY2RiYjJjN2ZiOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDIyNWVhOFwiLFxuICBcImZmZmZjY2ExZGFiNDQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDJjN2ZiODI1MzQ5NFwiLFxuICBcImZmZmZjY2M3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODBjMmM4NFwiLFxuICBcImZmZmZkOWVkZjhiMWM3ZTliNDdmY2RiYjQxYjZjNDFkOTFjMDIyNWVhODI1MzQ5NDA4MWQ1OFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JCci5qcz9kYTQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZjdiY2ZlYzQ0ZmQ5NWYwZVwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWNjNGMwMlwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjk5MzQwNDY2MjUwNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsT3JSZC5qcz84ZDM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZWRhMGZlYjI0Y2YwM2IyMFwiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2UzMWExY1wiLFxuICBcImZmZmZiMmZlY2M1Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2YwM2IyMGJkMDAyNlwiLFxuICBcImZmZmZiMmZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2IxMDAyNlwiLFxuICBcImZmZmZjY2ZmZWRhMGZlZDk3NmZlYjI0Y2ZkOGQzY2ZjNGUyYWUzMWExY2JkMDAyNjgwMDAyNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\n      + \")\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2NpdmlkaXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9jaXZpZGlzLmpzPzVkMzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpO1xuICByZXR1cm4gXCJyZ2IoXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKC00LjU0IC0gdCAqICgzNS4zNCAtIHQgKiAoMjM4MS43MyAtIHQgKiAoNjQwMi43IC0gdCAqICg3MDI0LjcyIC0gdCAqIDI3MTAuNTcpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgzMi40OSArIHQgKiAoMTcwLjczICsgdCAqICg1Mi44MiAtIHQgKiAoMTMxLjQ2IC0gdCAqICgxNzYuNTggLSB0ICogNjcuMzcpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCg4MS4yNCArIHQgKiAoNDQyLjM2IC0gdCAqICgyNDgyLjQzIC0gdCAqICg2MTY3LjI0IC0gdCAqICg2NjE0Ljk0IC0gdCAqIDI0NzUuNjcpKSkpKSkpXG4gICAgICArIFwiKVwiO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-interpolate */ \"./node_modules/d3-interpolate/src/index.js\");\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(d3_interpolate__WEBPACK_IMPORTED_MODULE_1__[\"interpolateCubehelixLong\"])(Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(300, 0.5, 0.0), Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(-240, 0.5, 1.0)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcz81ZGYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgzMDAsIDAuNSwgMC4wKSwgY3ViZWhlbGl4KC0yNDAsIDAuNSwgMS4wKSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js ***!
  \*************************************************************************/
/*! exports provided: warm, cool, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"warm\", function() { return warm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cool\", function() { return cool; });\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-interpolate */ \"./node_modules/d3-interpolate/src/index.js\");\n\n\n\nvar warm = Object(d3_interpolate__WEBPACK_IMPORTED_MODULE_1__[\"interpolateCubehelixLong\"])(Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(-100, 0.75, 0.35), Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(80, 1.50, 0.8));\n\nvar cool = Object(d3_interpolate__WEBPACK_IMPORTED_MODULE_1__[\"interpolateCubehelixLong\"])(Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(260, 0.75, 0.35), Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])(80, 1.50, 0.8));\n\nvar c = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"cubehelix\"])();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3JhaW5ib3cuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9yYWluYm93LmpzPzVmYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG5leHBvcnQgdmFyIGNvb2wgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDI2MCwgMC43NSwgMC4zNSksIGN1YmVoZWxpeCg4MCwgMS41MCwgMC44KSk7XG5cbnZhciBjID0gY3ViZWhlbGl4KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHQpIHtcbiAgaWYgKHQgPCAwIHx8IHQgPiAxKSB0IC09IE1hdGguZmxvb3IodCk7XG4gIHZhciB0cyA9IE1hdGguYWJzKHQgLSAwLjUpO1xuICBjLmggPSAzNjAgKiB0IC0gMTAwO1xuICBjLnMgPSAxLjUgLSAxLjUgKiB0cztcbiAgYy5sID0gMC44IC0gMC45ICogdHM7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-color */ \"./node_modules/d3-color/src/index.js\");\n\n\nvar c = Object(d3_color__WEBPACK_IMPORTED_MODULE_0__[\"rgb\"])(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3NpbmVib3cuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9zaW5lYm93LmpzPzA2ZjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuXG52YXIgYyA9IHJnYigpLFxuICAgIHBpXzFfMyA9IE1hdGguUEkgLyAzLFxuICAgIHBpXzJfMyA9IE1hdGguUEkgKiAyIC8gMztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB2YXIgeDtcbiAgdCA9ICgwLjUgLSB0KSAqIE1hdGguUEk7XG4gIGMuciA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCkpICogeDtcbiAgYy5nID0gMjU1ICogKHggPSBNYXRoLnNpbih0ICsgcGlfMV8zKSkgKiB4O1xuICBjLmIgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8yXzMpKSAqIHg7XG4gIHJldHVybiBjICsgXCJcIjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n      + \")\";\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3R1cmJvLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdHVyYm8uanM/YzEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7XG4gIHJldHVybiBcInJnYihcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMzQuNjEgKyB0ICogKDExNzIuMzMgLSB0ICogKDEwNzkzLjU2IC0gdCAqICgzMzMwMC4xMiAtIHQgKiAoMzgzOTQuNDkgLSB0ICogMTQ4MjUuMDUpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgyMy4zMSArIHQgKiAoNTU3LjMzICsgdCAqICgxMjI1LjMzIC0gdCAqICgzNTc0Ljk2IC0gdCAqICgxMDczLjc3ICsgdCAqIDcwNy41NikpKSkpKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDI3LjIgKyB0ICogKDMyMTEuMSAtIHQgKiAoMTUzMjcuOTcgLSB0ICogKDI3ODE0IC0gdCAqICgyMjU2OS4xOCAtIHQgKiA2ODM4LjY2KSkpKSkpKVxuICAgICAgKyBcIilcIjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js ***!
  \*************************************************************************/
/*! exports provided: default, magma, inferno, plasma */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"magma\", function() { return magma; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inferno\", function() { return inferno; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"plasma\", function() { return plasma; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ramp(Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")));\n\nvar magma = ramp(Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nvar inferno = ramp(Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nvar plasma = ramp(Object(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9CbHVlcy5qcz84N2RhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImRlZWJmNzllY2FlMTMxODJiZFwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjIxNzFiNVwiLFxuICBcImVmZjNmZmJkZDdlNzZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjMxODJiZDA4NTE5Y1wiLFxuICBcImVmZjNmZmM2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NDU5NFwiLFxuICBcImY3ZmJmZmRlZWJmN2M2ZGJlZjllY2FlMTZiYWVkNjQyOTJjNjIxNzFiNTA4NTE5YzA4MzA2YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Blues.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js":
/*!*************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js ***!
  \*************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmVlbnMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzP2JjYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWUwYTFkOTliMzFhMzU0XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MjM4YjQ1XCIsXG4gIFwiZWRmOGU5YmFlNGIzNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2MzFhMzU0MDA2ZDJjXCIsXG4gIFwiZWRmOGU5YzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA1YTMyXCIsXG4gIFwiZjdmY2Y1ZTVmNWUwYzdlOWMwYTFkOTliNzRjNDc2NDFhYjVkMjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Greens.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js":
/*!************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js ***!
  \************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9HcmV5cy5qcz9hOGE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImYwZjBmMGJkYmRiZDYzNjM2M1wiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjUyNTI1MlwiLFxuICBcImY3ZjdmN2NjY2NjYzk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjYzNjM2MzI1MjUyNVwiLFxuICBcImY3ZjdmN2Q5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNVwiLFxuICBcImZmZmZmZmYwZjBmMGQ5ZDlkOWJkYmRiZDk2OTY5NjczNzM3MzUyNTI1MjI1MjUyNTAwMDAwMFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Greys.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js":
/*!**************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js ***!
  \**************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9PcmFuZ2VzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL09yYW5nZXMuanM/YWNlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU2Y2VmZGFlNmJlNjU1MGRcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NkOTQ3MDFcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDFhNjM2MDM3ZjI3MDRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js":
/*!**************************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js ***!
  \**************************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9QdXJwbGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanM/NDQxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZmVkZjViY2JkZGM3NTZiYjFcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg2YTUxYTNcIixcbiAgXCJmMmYwZjdjYmM5ZTI5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg3NTZiYjE1NDI3OGZcIixcbiAgXCJmMmYwZjdkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM0YTE0ODZcIixcbiAgXCJmY2ZiZmRlZmVkZjVkYWRhZWJiY2JkZGM5ZTlhYzg4MDdkYmE2YTUxYTM1NDI3OGYzZjAwN2RcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Purples.js\n");

/***/ }),

/***/ "./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js":
/*!***********************************************************************!*\
  !*** ./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js ***!
  \***********************************************************************/
/*! exports provided: scheme, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scheme\", function() { return scheme; });\n/* harmony import */ var _colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../colors.js */ \"./node_modules/d3-scale-chromatic/src/colors.js\");\n/* harmony import */ var _ramp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ramp.js */ \"./node_modules/d3-scale-chromatic/src/ramp.js\");\n\n\n\nvar scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(_colors_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_ramp_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(scheme));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9SZWRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1JlZHMuanM/ZTc0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWUwZDJmYzkyNzJkZTJkMjZcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFjYjE4MWRcIixcbiAgXCJmZWU1ZDlmY2FlOTFmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFkZTJkMjZhNTBmMTVcIixcbiAgXCJmZWU1ZDlmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWQ5OTAwMGRcIixcbiAgXCJmZmY1ZjBmZWUwZDJmY2JiYTFmYzkyNzJmYjZhNGFlZjNiMmNjYjE4MWRhNTBmMTU2NzAwMGRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3-scale-chromatic/src/sequential-single/Reds.js\n");

/***/ }),

/***/ "./node_modules/d3/d3.js":
/*!*******************************!*\
  !*** ./node_modules/d3/d3.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else {}\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZDMvZDMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vbm9kZV9tb2R1bGVzL2QzL2QzLmpzPzZlNTgiXSwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKCkge1xuICB2YXIgZDMgPSB7XG4gICAgdmVyc2lvbjogXCIzLjUuMTdcIlxuICB9O1xuICB2YXIgZDNfYXJyYXlTbGljZSA9IFtdLnNsaWNlLCBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICByZXR1cm4gZDNfYXJyYXlTbGljZS5jYWxsKGxpc3QpO1xuICB9O1xuICB2YXIgZDNfZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50O1xuICBmdW5jdGlvbiBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIChub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZS5kb2N1bWVudCB8fCBub2RlKS5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfd2luZG93KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSAmJiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCBub2RlLmRvY3VtZW50ICYmIG5vZGUgfHwgbm9kZS5kZWZhdWx0Vmlldyk7XG4gIH1cbiAgaWYgKGQzX2RvY3VtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGQzX2FycmF5KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jaGlsZE5vZGVzKVswXS5ub2RlVHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkM19hcnJheSA9IGZ1bmN0aW9uKGxpc3QpIHtcbiAgICAgICAgdmFyIGkgPSBsaXN0Lmxlbmd0aCwgYXJyYXkgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgIHdoaWxlIChpLS0pIGFycmF5W2ldID0gbGlzdFtpXTtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCFEYXRlLm5vdykgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gK25ldyBEYXRlKCk7XG4gIH07XG4gIGlmIChkM19kb2N1bWVudCkge1xuICAgIHRyeSB7XG4gICAgICBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLnN0eWxlLnNldFByb3BlcnR5KFwib3BhY2l0eVwiLCAwLCBcIlwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdmFyIGQzX2VsZW1lbnRfcHJvdG90eXBlID0gdGhpcy5FbGVtZW50LnByb3RvdHlwZSwgZDNfZWxlbWVudF9zZXRBdHRyaWJ1dGUgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUsIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMgPSBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUywgZDNfc3R5bGVfcHJvdG90eXBlID0gdGhpcy5DU1NTdHlsZURlY2xhcmF0aW9uLnByb3RvdHlwZSwgZDNfc3R5bGVfc2V0UHJvcGVydHkgPSBkM19zdHlsZV9wcm90b3R5cGUuc2V0UHJvcGVydHk7XG4gICAgICBkM19lbGVtZW50X3Byb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBkM19lbGVtZW50X3NldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfZWxlbWVudF9wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMgPSBmdW5jdGlvbihzcGFjZSwgbG9jYWwsIHZhbHVlKSB7XG4gICAgICAgIGQzX2VsZW1lbnRfc2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBzcGFjZSwgbG9jYWwsIHZhbHVlICsgXCJcIik7XG4gICAgICB9O1xuICAgICAgZDNfc3R5bGVfcHJvdG90eXBlLnNldFByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgICAgIGQzX3N0eWxlX3NldFByb3BlcnR5LmNhbGwodGhpcywgbmFtZSwgdmFsdWUgKyBcIlwiLCBwcmlvcml0eSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBkMy5hc2NlbmRpbmcgPSBkM19hc2NlbmRpbmc7XG4gIGZ1bmN0aW9uIGQzX2FzY2VuZGluZyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xuICB9XG4gIGQzLmRlc2NlbmRpbmcgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xuICB9O1xuICBkMy5taW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGEsIGI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpICE9IG51bGwgJiYgYSA+IGIpIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfTtcbiAgZDMubWF4ID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBiO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gYXJyYXlbaV0pICE9IG51bGwgJiYgYiA+PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID4gYSkgYSA9IGI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYuY2FsbChhcnJheSwgYXJyYXlbaV0sIGkpKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH07XG4gIGQzLmV4dGVudCA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgYiwgYztcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikge1xuICAgICAgICBhID0gYyA9IGI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhID4gYikgYSA9IGI7XG4gICAgICAgIGlmIChjIDwgYikgYyA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCAmJiBiID49IGIpIHtcbiAgICAgICAgYSA9IGMgPSBiO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xuICAgICAgICBpZiAoYyA8IGIpIGMgPSBiO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWyBhLCBjIF07XG4gIH07XG4gIGZ1bmN0aW9uIGQzX251bWJlcih4KSB7XG4gICAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbiAgfVxuICBmdW5jdGlvbiBkM19udW1lcmljKHgpIHtcbiAgICByZXR1cm4gIWlzTmFOKHgpO1xuICB9XG4gIGQzLnN1bSA9IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gICAgdmFyIHMgPSAwLCBuID0gYXJyYXkubGVuZ3RoLCBhLCBpID0gLTE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoZDNfbnVtZXJpYyhhID0gK2FycmF5W2ldKSkgcyArPSBhO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9ICtmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpIHMgKz0gYTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH07XG4gIGQzLm1lYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBzID0gMCwgbiA9IGFycmF5Lmxlbmd0aCwgYSwgaSA9IC0xLCBqID0gbjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoZi5jYWxsKGFycmF5LCBhcnJheVtpXSwgaSkpKSkgcyArPSBhOyBlbHNlIC0tajtcbiAgICB9XG4gICAgaWYgKGopIHJldHVybiBzIC8gajtcbiAgfTtcbiAgZDMucXVhbnRpbGUgPSBmdW5jdGlvbih2YWx1ZXMsIHApIHtcbiAgICB2YXIgSCA9ICh2YWx1ZXMubGVuZ3RoIC0gMSkgKiBwICsgMSwgaCA9IE1hdGguZmxvb3IoSCksIHYgPSArdmFsdWVzW2ggLSAxXSwgZSA9IEggLSBoO1xuICAgIHJldHVybiBlID8gdiArIGUgKiAodmFsdWVzW2hdIC0gdikgOiB2O1xuICB9O1xuICBkMy5tZWRpYW4gPSBmdW5jdGlvbihhcnJheSwgZikge1xuICAgIHZhciBudW1iZXJzID0gW10sIG4gPSBhcnJheS5sZW5ndGgsIGEsIGkgPSAtMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChkM19udW1lcmljKGEgPSBkM19udW1iZXIoYXJyYXlbaV0pKSkgbnVtYmVycy5wdXNoKGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSBudW1iZXJzLnB1c2goYSk7XG4gICAgfVxuICAgIGlmIChudW1iZXJzLmxlbmd0aCkgcmV0dXJuIGQzLnF1YW50aWxlKG51bWJlcnMuc29ydChkM19hc2NlbmRpbmcpLCAuNSk7XG4gIH07XG4gIGQzLnZhcmlhbmNlID0gZnVuY3Rpb24oYXJyYXksIGYpIHtcbiAgICB2YXIgbiA9IGFycmF5Lmxlbmd0aCwgbSA9IDAsIGEsIGQsIHMgPSAwLCBpID0gLTEsIGogPSAwO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoZDNfbnVtZXJpYyhhID0gZDNfbnVtYmVyKGFycmF5W2ldKSkpIHtcbiAgICAgICAgICBkID0gYSAtIG07XG4gICAgICAgICAgbSArPSBkIC8gKytqO1xuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGQzX251bWVyaWMoYSA9IGQzX251bWJlcihmLmNhbGwoYXJyYXksIGFycmF5W2ldLCBpKSkpKSB7XG4gICAgICAgICAgZCA9IGEgLSBtO1xuICAgICAgICAgIG0gKz0gZCAvICsrajtcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChqID4gMSkgcmV0dXJuIHMgLyAoaiAtIDEpO1xuICB9O1xuICBkMy5kZXZpYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IGQzLnZhcmlhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHYgPyBNYXRoLnNxcnQodikgOiB2O1xuICB9O1xuICBmdW5jdGlvbiBkM19iaXNlY3Rvcihjb21wYXJlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGxvID0gMDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSBoaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7IGVsc2UgaGkgPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvO1xuICAgICAgfSxcbiAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBsbyA9IDA7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgNCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7IGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsbztcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19iaXNlY3QgPSBkM19iaXNlY3RvcihkM19hc2NlbmRpbmcpO1xuICBkMy5iaXNlY3RMZWZ0ID0gZDNfYmlzZWN0LmxlZnQ7XG4gIGQzLmJpc2VjdCA9IGQzLmJpc2VjdFJpZ2h0ID0gZDNfYmlzZWN0LnJpZ2h0O1xuICBkMy5iaXNlY3RvciA9IGZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gZDNfYmlzZWN0b3IoZi5sZW5ndGggPT09IDEgPyBmdW5jdGlvbihkLCB4KSB7XG4gICAgICByZXR1cm4gZDNfYXNjZW5kaW5nKGYoZCksIHgpO1xuICAgIH0gOiBmKTtcbiAgfTtcbiAgZDMuc2h1ZmZsZSA9IGZ1bmN0aW9uKGFycmF5LCBpMCwgaTEpIHtcbiAgICBpZiAoKG0gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDMpIHtcbiAgICAgIGkxID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKG0gPCAyKSBpMCA9IDA7XG4gICAgfVxuICAgIHZhciBtID0gaTEgLSBpMCwgdCwgaTtcbiAgICB3aGlsZSAobSkge1xuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xuICAgICAgdCA9IGFycmF5W20gKyBpMF0sIGFycmF5W20gKyBpMF0gPSBhcnJheVtpICsgaTBdLCBhcnJheVtpICsgaTBdID0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuICBkMy5wZXJtdXRlID0gZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSBwZXJtdXRlc1tpXSA9IGFycmF5W2luZGV4ZXNbaV1dO1xuICAgIHJldHVybiBwZXJtdXRlcztcbiAgfTtcbiAgZDMucGFpcnMgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBpID0gMCwgbiA9IGFycmF5Lmxlbmd0aCAtIDEsIHAwLCBwMSA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgICB3aGlsZSAoaSA8IG4pIHBhaXJzW2ldID0gWyBwMCA9IHAxLCBwMSA9IGFycmF5WysraV0gXTtcbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG4gIGQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uKG1hdHJpeCkge1xuICAgIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICAgIGZvciAodmFyIGkgPSAtMSwgbSA9IGQzLm1pbihtYXRyaXgsIGQzX3RyYW5zcG9zZUxlbmd0aCksIHRyYW5zcG9zZSA9IG5ldyBBcnJheShtKTsgKytpIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBqID0gLTEsIG4sIHJvdyA9IHRyYW5zcG9zZVtpXSA9IG5ldyBBcnJheShuKTsgKytqIDwgbjsgKSB7XG4gICAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zcG9zZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNwb3NlTGVuZ3RoKGQpIHtcbiAgICByZXR1cm4gZC5sZW5ndGg7XG4gIH1cbiAgZDMuemlwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnRyYW5zcG9zZShhcmd1bWVudHMpO1xuICB9O1xuICBkMy5rZXlzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgZDMudmFsdWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBtYXApIHZhbHVlcy5wdXNoKG1hcFtrZXldKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuICBkMy5lbnRyaWVzID0gZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe1xuICAgICAga2V5OiBrZXksXG4gICAgICB2YWx1ZTogbWFwW2tleV1cbiAgICB9KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfTtcbiAgZDMubWVyZ2UgPSBmdW5jdGlvbihhcnJheXMpIHtcbiAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsIG0sIGkgPSAtMSwgaiA9IDAsIG1lcmdlZCwgYXJyYXk7XG4gICAgd2hpbGUgKCsraSA8IG4pIGogKz0gYXJyYXlzW2ldLmxlbmd0aDtcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG4gICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICBhcnJheSA9IGFycmF5c1tuXTtcbiAgICAgIG0gPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgICAgbWVyZ2VkWy0tal0gPSBhcnJheVttXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfTtcbiAgdmFyIGFicyA9IE1hdGguYWJzO1xuICBkMy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICBzdGVwID0gMTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChzdG9wIC0gc3RhcnQpIC8gc3RlcCA9PT0gSW5maW5pdHkpIHRocm93IG5ldyBFcnJvcihcImluZmluaXRlIHJhbmdlXCIpO1xuICAgIHZhciByYW5nZSA9IFtdLCBrID0gZDNfcmFuZ2VfaW50ZWdlclNjYWxlKGFicyhzdGVwKSksIGkgPSAtMSwgajtcbiAgICBzdGFydCAqPSBrLCBzdG9wICo9IGssIHN0ZXAgKj0gaztcbiAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPiBzdG9wKSByYW5nZS5wdXNoKGogLyBrKTsgZWxzZSB3aGlsZSAoKGogPSBzdGFydCArIHN0ZXAgKiArK2kpIDwgc3RvcCkgcmFuZ2UucHVzaChqIC8gayk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuICBmdW5jdGlvbiBkM19yYW5nZV9pbnRlZ2VyU2NhbGUoeCkge1xuICAgIHZhciBrID0gMTtcbiAgICB3aGlsZSAoeCAqIGsgJSAxKSBrICo9IDEwO1xuICAgIHJldHVybiBrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2NsYXNzKGN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IucHJvdG90eXBlLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHByb3BlcnRpZXNba2V5XSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBkMy5tYXAgPSBmdW5jdGlvbihvYmplY3QsIGYpIHtcbiAgICB2YXIgbWFwID0gbmV3IGQzX01hcCgpO1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBkM19NYXApIHtcbiAgICAgIG9iamVjdC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gb2JqZWN0Lmxlbmd0aCwgbztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pOyBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYuY2FsbChvYmplY3QsIG8gPSBvYmplY3RbaV0sIGkpLCBvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkgbWFwLnNldChrZXksIG9iamVjdFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfTWFwKCkge1xuICAgIHRoaXMuXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgdmFyIGQzX21hcF9wcm90byA9IFwiX19wcm90b19fXCIsIGQzX21hcF96ZXJvID0gXCJcXHgwMFwiO1xuICBkM19jbGFzcyhkM19NYXAsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9bZDNfbWFwX2VzY2FwZShrZXkpXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSldID0gdmFsdWU7XG4gICAgfSxcbiAgICByZW1vdmU6IGQzX21hcF9yZW1vdmUsXG4gICAga2V5czogZDNfbWFwX2tleXMsXG4gICAgdmFsdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHZhbHVlcy5wdXNoKHRoaXMuX1trZXldKTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBlbnRyaWVzLnB1c2goe1xuICAgICAgICBrZXk6IGQzX21hcF91bmVzY2FwZShrZXkpLFxuICAgICAgICB2YWx1ZTogdGhpcy5fW2tleV1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgfSxcbiAgICBzaXplOiBkM19tYXBfc2l6ZSxcbiAgICBlbXB0eTogZDNfbWFwX2VtcHR5LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIGYuY2FsbCh0aGlzLCBkM19tYXBfdW5lc2NhcGUoa2V5KSwgdGhpcy5fW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX21hcF9lc2NhcGUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgKz0gXCJcIikgPT09IGQzX21hcF9wcm90byB8fCBrZXlbMF0gPT09IGQzX21hcF96ZXJvID8gZDNfbWFwX3plcm8gKyBrZXkgOiBrZXk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX3VuZXNjYXBlKGtleSkge1xuICAgIHJldHVybiAoa2V5ICs9IFwiXCIpWzBdID09PSBkM19tYXBfemVybyA/IGtleS5zbGljZSgxKSA6IGtleTtcbiAgfVxuICBmdW5jdGlvbiBkM19tYXBfaGFzKGtleSkge1xuICAgIHJldHVybiBkM19tYXBfZXNjYXBlKGtleSkgaW4gdGhpcy5fO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9yZW1vdmUoa2V5KSB7XG4gICAgcmV0dXJuIChrZXkgPSBkM19tYXBfZXNjYXBlKGtleSkpIGluIHRoaXMuXyAmJiBkZWxldGUgdGhpcy5fW2tleV07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2tleXMoKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSBrZXlzLnB1c2goZDNfbWFwX3VuZXNjYXBlKGtleSkpO1xuICAgIHJldHVybiBrZXlzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX21hcF9zaXplKCkge1xuICAgIHZhciBzaXplID0gMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5fKSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbWFwX2VtcHR5KCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl8pIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkMy5uZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5lc3QgPSB7fSwga2V5cyA9IFtdLCBzb3J0S2V5cyA9IFtdLCBzb3J0VmFsdWVzLCByb2xsdXA7XG4gICAgZnVuY3Rpb24gbWFwKG1hcFR5cGUsIGFycmF5LCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gcm9sbHVwID8gcm9sbHVwLmNhbGwobmVzdCwgYXJyYXkpIDogc29ydFZhbHVlcyA/IGFycmF5LnNvcnQoc29ydFZhbHVlcykgOiBhcnJheTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBhcnJheS5sZW5ndGgsIGtleSA9IGtleXNbZGVwdGgrK10sIGtleVZhbHVlLCBvYmplY3QsIHNldHRlciwgdmFsdWVzQnlLZXkgPSBuZXcgZDNfTWFwKCksIHZhbHVlcztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkob2JqZWN0ID0gYXJyYXlbaV0pKSkge1xuICAgICAgICAgIHZhbHVlcy5wdXNoKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzQnlLZXkuc2V0KGtleVZhbHVlLCBbIG9iamVjdCBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1hcFR5cGUpIHtcbiAgICAgICAgb2JqZWN0ID0gbWFwVHlwZSgpO1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0LnNldChrZXlWYWx1ZSwgbWFwKG1hcFR5cGUsIHZhbHVlcywgZGVwdGgpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdCA9IHt9O1xuICAgICAgICBzZXR0ZXIgPSBmdW5jdGlvbihrZXlWYWx1ZSwgdmFsdWVzKSB7XG4gICAgICAgICAgb2JqZWN0W2tleVZhbHVlXSA9IG1hcChtYXBUeXBlLCB2YWx1ZXMsIGRlcHRoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHZhbHVlc0J5S2V5LmZvckVhY2goc2V0dGVyKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVudHJpZXMobWFwLCBkZXB0aCkge1xuICAgICAgaWYgKGRlcHRoID49IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgICAgdmFyIGFycmF5ID0gW10sIHNvcnRLZXkgPSBzb3J0S2V5c1tkZXB0aCsrXTtcbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKGtleSwga2V5TWFwKSB7XG4gICAgICAgIGFycmF5LnB1c2goe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlczogZW50cmllcyhrZXlNYXAsIGRlcHRoKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvcnRLZXkgPyBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRLZXkoYS5rZXksIGIua2V5KTtcbiAgICAgIH0pIDogYXJyYXk7XG4gICAgfVxuICAgIG5lc3QubWFwID0gZnVuY3Rpb24oYXJyYXksIG1hcFR5cGUpIHtcbiAgICAgIHJldHVybiBtYXAobWFwVHlwZSwgYXJyYXksIDApO1xuICAgIH07XG4gICAgbmVzdC5lbnRyaWVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzKG1hcChkMy5tYXAsIGFycmF5LCAwKSwgMCk7XG4gICAgfTtcbiAgICBuZXN0LmtleSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGtleXMucHVzaChkKTtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgbmVzdC5zb3J0S2V5cyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0S2V5c1trZXlzLmxlbmd0aCAtIDFdID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Quc29ydFZhbHVlcyA9IGZ1bmN0aW9uKG9yZGVyKSB7XG4gICAgICBzb3J0VmFsdWVzID0gb3JkZXI7XG4gICAgICByZXR1cm4gbmVzdDtcbiAgICB9O1xuICAgIG5lc3Qucm9sbHVwID0gZnVuY3Rpb24oZikge1xuICAgICAgcm9sbHVwID0gZjtcbiAgICAgIHJldHVybiBuZXN0O1xuICAgIH07XG4gICAgcmV0dXJuIG5lc3Q7XG4gIH07XG4gIGQzLnNldCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHNldCA9IG5ldyBkM19TZXQoKTtcbiAgICBpZiAoYXJyYXkpIGZvciAodmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoOyBpIDwgbjsgKytpKSBzZXQuYWRkKGFycmF5W2ldKTtcbiAgICByZXR1cm4gc2V0O1xuICB9O1xuICBmdW5jdGlvbiBkM19TZXQoKSB7XG4gICAgdGhpcy5fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICBkM19jbGFzcyhkM19TZXQsIHtcbiAgICBoYXM6IGQzX21hcF9oYXMsXG4gICAgYWRkOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHRoaXMuX1tkM19tYXBfZXNjYXBlKGtleSArPSBcIlwiKV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9LFxuICAgIHJlbW92ZTogZDNfbWFwX3JlbW92ZSxcbiAgICB2YWx1ZXM6IGQzX21hcF9rZXlzLFxuICAgIHNpemU6IGQzX21hcF9zaXplLFxuICAgIGVtcHR5OiBkM19tYXBfZW1wdHksXG4gICAgZm9yRWFjaDogZnVuY3Rpb24oZikge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuXykgZi5jYWxsKHRoaXMsIGQzX21hcF91bmVzY2FwZShrZXkpKTtcbiAgICB9XG4gIH0pO1xuICBkMy5iZWhhdmlvciA9IHt9O1xuICBmdW5jdGlvbiBkM19pZGVudGl0eShkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgZDMucmViaW5kID0gZnVuY3Rpb24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgICB2YXIgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZXRob2Q7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRhcmdldFttZXRob2QgPSBhcmd1bWVudHNbaV1dID0gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBzb3VyY2VbbWV0aG9kXSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfcmViaW5kKHRhcmdldCwgc291cmNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBtZXRob2QuYXBwbHkoc291cmNlLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBzb3VyY2UgPyB0YXJnZXQgOiB2YWx1ZTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3ZlbmRvclN5bWJvbChvYmplY3QsIG5hbWUpIHtcbiAgICBpZiAobmFtZSBpbiBvYmplY3QpIHJldHVybiBuYW1lO1xuICAgIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGQzX3ZlbmRvclByZWZpeGVzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHByZWZpeE5hbWUgPSBkM192ZW5kb3JQcmVmaXhlc1tpXSArIG5hbWU7XG4gICAgICBpZiAocHJlZml4TmFtZSBpbiBvYmplY3QpIHJldHVybiBwcmVmaXhOYW1lO1xuICAgIH1cbiAgfVxuICB2YXIgZDNfdmVuZG9yUHJlZml4ZXMgPSBbIFwid2Via2l0XCIsIFwibXNcIiwgXCJtb3pcIiwgXCJNb3pcIiwgXCJvXCIsIFwiT1wiIF07XG4gIGZ1bmN0aW9uIGQzX25vb3AoKSB7fVxuICBkMy5kaXNwYXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXNwYXRjaCA9IG5ldyBkM19kaXNwYXRjaCgpLCBpID0gLTEsIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkaXNwYXRjaFthcmd1bWVudHNbaV1dID0gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpO1xuICAgIHJldHVybiBkaXNwYXRjaDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2goKSB7fVxuICBkM19kaXNwYXRjaC5wcm90b3R5cGUub24gPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBpID0gdHlwZS5pbmRleE9mKFwiLlwiKSwgbmFtZSA9IFwiXCI7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgbmFtZSA9IHR5cGUuc2xpY2UoaSArIDEpO1xuICAgICAgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSk7XG4gICAgfVxuICAgIGlmICh0eXBlKSByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB0aGlzW3R5cGVdLm9uKG5hbWUpIDogdGhpc1t0eXBlXS5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSBmb3IgKHR5cGUgaW4gdGhpcykge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhpc1t0eXBlXS5vbihuYW1lLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZGlzcGF0Y2hfZXZlbnQoZGlzcGF0Y2gpIHtcbiAgICB2YXIgbGlzdGVuZXJzID0gW10sIGxpc3RlbmVyQnlOYW1lID0gbmV3IGQzX01hcCgpO1xuICAgIGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgICAgdmFyIHogPSBsaXN0ZW5lcnMsIGkgPSAtMSwgbiA9IHoubGVuZ3RoLCBsO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChsID0geltpXS5vbikgbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIGRpc3BhdGNoO1xuICAgIH1cbiAgICBldmVudC5vbiA9IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbCA9IGxpc3RlbmVyQnlOYW1lLmdldChuYW1lKSwgaTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGwgJiYgbC5vbjtcbiAgICAgIGlmIChsKSB7XG4gICAgICAgIGwub24gPSBudWxsO1xuICAgICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoMCwgaSA9IGxpc3RlbmVycy5pbmRleE9mKGwpKS5jb25jYXQobGlzdGVuZXJzLnNsaWNlKGkgKyAxKSk7XG4gICAgICAgIGxpc3RlbmVyQnlOYW1lLnJlbW92ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChsaXN0ZW5lcikgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXJCeU5hbWUuc2V0KG5hbWUsIHtcbiAgICAgICAgb246IGxpc3RlbmVyXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gZGlzcGF0Y2g7XG4gICAgfTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgZDMuZXZlbnQgPSBudWxsO1xuICBmdW5jdGlvbiBkM19ldmVudFByZXZlbnREZWZhdWx0KCkge1xuICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZXZlbnRTb3VyY2UoKSB7XG4gICAgdmFyIGUgPSBkMy5ldmVudCwgcztcbiAgICB3aGlsZSAocyA9IGUuc291cmNlRXZlbnQpIGUgPSBzO1xuICAgIHJldHVybiBlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2V2ZW50RGlzcGF0Y2godGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoID0gbmV3IGQzX2Rpc3BhdGNoKCksIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgZGlzcGF0Y2hbYXJndW1lbnRzW2ldXSA9IGQzX2Rpc3BhdGNoX2V2ZW50KGRpc3BhdGNoKTtcbiAgICBkaXNwYXRjaC5vZiA9IGZ1bmN0aW9uKHRoaXosIGFyZ3VtZW50eikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUxKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGUwID0gZTEuc291cmNlRXZlbnQgPSBkMy5ldmVudDtcbiAgICAgICAgICBlMS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgZDMuZXZlbnQgPSBlMTtcbiAgICAgICAgICBkaXNwYXRjaFtlMS50eXBlXS5hcHBseSh0aGl6LCBhcmd1bWVudHopO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGQzLmV2ZW50ID0gZTA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gZGlzcGF0Y2g7XG4gIH1cbiAgZDMucmVxdW90ZSA9IGZ1bmN0aW9uKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKGQzX3JlcXVvdGVfcmUsIFwiXFxcXCQmXCIpO1xuICB9O1xuICB2YXIgZDNfcmVxdW90ZV9yZSA9IC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcfFxcW1xcXVxcKFxcKVxcLlxce1xcfV0vZztcbiAgdmFyIGQzX3N1YmNsYXNzID0ge30uX19wcm90b19fID8gZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICB9IDogZnVuY3Rpb24ob2JqZWN0LCBwcm90b3R5cGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm90b3R5cGUpIG9iamVjdFtwcm9wZXJ0eV0gPSBwcm90b3R5cGVbcHJvcGVydHldO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb24oZ3JvdXBzKSB7XG4gICAgZDNfc3ViY2xhc3MoZ3JvdXBzLCBkM19zZWxlY3Rpb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICByZXR1cm4gbi5xdWVyeVNlbGVjdG9yKHMpO1xuICB9LCBkM19zZWxlY3RBbGwgPSBmdW5jdGlvbihzLCBuKSB7XG4gICAgcmV0dXJuIG4ucXVlcnlTZWxlY3RvckFsbChzKTtcbiAgfSwgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICB2YXIgZDNfc2VsZWN0TWF0Y2hlciA9IG4ubWF0Y2hlcyB8fCBuW2QzX3ZlbmRvclN5bWJvbChuLCBcIm1hdGNoZXNTZWxlY3RvclwiKV07XG4gICAgZDNfc2VsZWN0TWF0Y2hlcyA9IGZ1bmN0aW9uKG4sIHMpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVyLmNhbGwobiwgcyk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2VsZWN0TWF0Y2hlcyhuLCBzKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBTaXp6bGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGQzX3NlbGVjdCA9IGZ1bmN0aW9uKHMsIG4pIHtcbiAgICAgIHJldHVybiBTaXp6bGUocywgbilbMF0gfHwgbnVsbDtcbiAgICB9O1xuICAgIGQzX3NlbGVjdEFsbCA9IFNpenpsZTtcbiAgICBkM19zZWxlY3RNYXRjaGVzID0gU2l6emxlLm1hdGNoZXNTZWxlY3RvcjtcbiAgfVxuICBkMy5zZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2VsZWN0KGQzX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25Qcm90b3R5cGUgPSBkMy5zZWxlY3Rpb24ucHJvdG90eXBlID0gW107XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgIHZhciBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIGdyb3VwLCBub2RlO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIHN1Ymdyb3VwLnBhcmVudE5vZGUgPSAoZ3JvdXAgPSB0aGlzW2pdKS5wYXJlbnROb2RlO1xuICAgICAgZm9yICh2YXIgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSA9IHNlbGVjdG9yLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpO1xuICAgICAgICAgIGlmIChzdWJub2RlICYmIFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3NlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0b3IgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3Qoc2VsZWN0b3IsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgbm9kZTtcbiAgICBzZWxlY3RvciA9IGQzX3NlbGVjdGlvbl9zZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBtID0gdGhpcy5sZW5ndGg7ICsraiA8IG07ICkge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBkM19hcnJheShzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihzdWJncm91cHMpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc2VsZWN0b3JBbGwoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3RvciA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NlbGVjdEFsbChzZWxlY3RvciwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfbnNYaHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICB2YXIgZDNfbnNQcmVmaXggPSB7XG4gICAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeGh0bWw6IGQzX25zWGh0bWwsXG4gICAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG4gIH07XG4gIGQzLm5zID0ge1xuICAgIHByZWZpeDogZDNfbnNQcmVmaXgsXG4gICAgcXVhbGlmeTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGkgPSBuYW1lLmluZGV4T2YoXCI6XCIpLCBwcmVmaXggPSBuYW1lO1xuICAgICAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICAgICAgcmV0dXJuIGQzX25zUHJlZml4Lmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7XG4gICAgICAgIHNwYWNlOiBkM19uc1ByZWZpeFtwcmVmaXhdLFxuICAgICAgICBsb2NhbDogbmFtZVxuICAgICAgfSA6IG5hbWU7XG4gICAgfVxuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICAgICAgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lLmxvY2FsID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSA6IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2F0dHIodmFsdWUsIG5hbWVbdmFsdWVdKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWFjaChkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fYXR0cihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBkMy5ucy5xdWFsaWZ5KG5hbWUpO1xuICAgIGZ1bmN0aW9uIGF0dHJOdWxsKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJOdWxsTlMoKSB7XG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKCkge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbigpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyRnVuY3Rpb25OUygpIHtcbiAgICAgIHZhciB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCk7IGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCB4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBuYW1lLmxvY2FsID8gYXR0ck51bGxOUyA6IGF0dHJOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24gOiBuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfY29sbGFwc2Uocykge1xuICAgIHJldHVybiBzLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuY2xhc3NlZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKSwgbiA9IChuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkpLmxlbmd0aCwgaSA9IC0xO1xuICAgICAgICBpZiAodmFsdWUgPSBub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIXZhbHVlLmNvbnRhaW5zKG5hbWVbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWQzX3NlbGVjdGlvbl9jbGFzc2VkUmUobmFtZVtpXSkudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9jbGFzc2VkKHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWRSZShuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpefFxcXFxzKylcIiArIGQzLnJlcXVvdGUobmFtZSkgKyBcIig/OlxcXFxzK3wkKVwiLCBcImdcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkge1xuICAgIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gZDNfc2VsZWN0aW9uX2NsYXNzZXMobmFtZSkubWFwKGQzX3NlbGVjdGlvbl9jbGFzc2VkTmFtZSk7XG4gICAgdmFyIG4gPSBuYW1lLmxlbmd0aDtcbiAgICBmdW5jdGlvbiBjbGFzc2VkQ29uc3RhbnQoKSB7XG4gICAgICB2YXIgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIG5hbWVbaV0odGhpcywgdmFsdWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IC0xLCB4ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBuYW1lW2ldKHRoaXMsIHgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc2VkRnVuY3Rpb24gOiBjbGFzc2VkQ29uc3RhbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2NsYXNzZWROYW1lKG5hbWUpIHtcbiAgICB2YXIgcmUgPSBkM19zZWxlY3Rpb25fY2xhc3NlZFJlKG5hbWUpO1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgaWYgKGMgPSBub2RlLmNsYXNzTGlzdCkgcmV0dXJuIHZhbHVlID8gYy5hZGQobmFtZSkgOiBjLnJlbW92ZShuYW1lKTtcbiAgICAgIHZhciBjID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGlmICghcmUudGVzdChjKSkgbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBkM19jb2xsYXBzZShjICsgXCIgXCIgKyBuYW1lKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGQzX2NvbGxhcHNlKGMucmVwbGFjZShyZSwgXCIgXCIpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc3R5bGUgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIGZvciAocHJpb3JpdHkgaW4gbmFtZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShwcmlvcml0eSwgbmFtZVtwcmlvcml0eV0sIHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgaWYgKG4gPCAyKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgICAgIHJldHVybiBkM193aW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xuICAgICAgfVxuICAgICAgcHJpb3JpdHkgPSBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX3N0eWxlKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIGZ1bmN0aW9uIHN0eWxlTnVsbCgpIHtcbiAgICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQoKSB7XG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoeCA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpOyBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgeCwgcHJpb3JpdHkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVGdW5jdGlvbiA6IHN0eWxlQ29uc3RhbnQ7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHRoaXMubm9kZSgpW25hbWVdO1xuICAgICAgZm9yICh2YWx1ZSBpbiBuYW1lKSB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KHZhbHVlLCBuYW1lW3ZhbHVlXSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9wcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5TnVsbCgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KCkge1xuICAgICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHggPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHggPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07IGVsc2UgdGhpc1tuYW1lXSA9IHg7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gcHJvcGVydHlOdWxsIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBwcm9wZXJ0eUZ1bmN0aW9uIDogcHJvcGVydHlDb25zdGFudDtcbiAgfVxuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLmVhY2godHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH0pIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuZWFjaCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgICB9IDogdmFsdWUgPT0gbnVsbCA/IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgfSkgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgbmFtZSA9IGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKG5hbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9jcmVhdG9yKG5hbWUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsIG5hbWVzcGFjZSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgICAgcmV0dXJuIG5hbWVzcGFjZSA9PT0gZDNfbnNYaHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBkM19uc1hodG1sID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVOUygpIHtcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiAobmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZSkpLmxvY2FsID8gY3JlYXRlTlMgOiBjcmVhdGU7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICAgIG5hbWUgPSBkM19zZWxlY3Rpb25fY3JlYXRvcihuYW1lKTtcbiAgICBiZWZvcmUgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3IoYmVmb3JlKTtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiZWZvcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgICB9KTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZDNfc2VsZWN0aW9uUmVtb3ZlKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uUmVtb3ZlKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXRhID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHZhciBpID0gLTEsIG4gPSB0aGlzLmxlbmd0aCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2YWx1ZSA9IG5ldyBBcnJheShuID0gKGdyb3VwID0gdGhpc1swXSkubGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB2YWx1ZVtpXSA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZChncm91cCwgZ3JvdXBEYXRhKSB7XG4gICAgICB2YXIgaSwgbiA9IGdyb3VwLmxlbmd0aCwgbSA9IGdyb3VwRGF0YS5sZW5ndGgsIG4wID0gTWF0aC5taW4obiwgbSksIHVwZGF0ZU5vZGVzID0gbmV3IEFycmF5KG0pLCBlbnRlck5vZGVzID0gbmV3IEFycmF5KG0pLCBleGl0Tm9kZXMgPSBuZXcgQXJyYXkobiksIG5vZGUsIG5vZGVEYXRhO1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgZDNfTWFwKCksIGtleVZhbHVlcyA9IG5ldyBBcnJheShuKSwga2V5VmFsdWU7XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBuOyApIHtcbiAgICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpKSB7XG4gICAgICAgICAgICAgIGV4aXROb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBub2RlQnlLZXlWYWx1ZS5zZXQoa2V5VmFsdWUsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IC0xOyArK2kgPCBtOyApIHtcbiAgICAgICAgICBpZiAoIShub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlID0ga2V5LmNhbGwoZ3JvdXBEYXRhLCBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXSwgaSkpKSkge1xuICAgICAgICAgICAgZW50ZXJOb2Rlc1tpXSA9IGQzX3NlbGVjdGlvbl9kYXRhTm9kZShub2RlRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB1cGRhdGVOb2Rlc1tpXSA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLl9fZGF0YV9fID0gbm9kZURhdGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gLTE7ICsraSA8IG47ICkge1xuICAgICAgICAgIGlmIChpIGluIGtleVZhbHVlcyAmJiBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAtMTsgKytpIDwgbjA7ICkge1xuICAgICAgICAgIG5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgICBub2RlRGF0YSA9IGdyb3VwRGF0YVtpXTtcbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgbm9kZS5fX2RhdGFfXyA9IG5vZGVEYXRhO1xuICAgICAgICAgICAgdXBkYXRlTm9kZXNbaV0gPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnRlck5vZGVzW2ldID0gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKG5vZGVEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7aSA8IG07ICsraSkge1xuICAgICAgICAgIGVudGVyTm9kZXNbaV0gPSBkM19zZWxlY3Rpb25fZGF0YU5vZGUoZ3JvdXBEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZXhpdE5vZGVzW2ldID0gZ3JvdXBbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVudGVyTm9kZXMudXBkYXRlID0gdXBkYXRlTm9kZXM7XG4gICAgICBlbnRlck5vZGVzLnBhcmVudE5vZGUgPSB1cGRhdGVOb2Rlcy5wYXJlbnROb2RlID0gZXhpdE5vZGVzLnBhcmVudE5vZGUgPSBncm91cC5wYXJlbnROb2RlO1xuICAgICAgZW50ZXIucHVzaChlbnRlck5vZGVzKTtcbiAgICAgIHVwZGF0ZS5wdXNoKHVwZGF0ZU5vZGVzKTtcbiAgICAgIGV4aXQucHVzaChleGl0Tm9kZXMpO1xuICAgIH1cbiAgICB2YXIgZW50ZXIgPSBkM19zZWxlY3Rpb25fZW50ZXIoW10pLCB1cGRhdGUgPSBkM19zZWxlY3Rpb24oW10pLCBleGl0ID0gZDNfc2VsZWN0aW9uKFtdKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZS5jYWxsKGdyb3VwLCBncm91cC5wYXJlbnROb2RlLl9fZGF0YV9fLCBpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGJpbmQoZ3JvdXAgPSB0aGlzW2ldLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZS5lbnRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVudGVyO1xuICAgIH07XG4gICAgdXBkYXRlLmV4aXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleGl0O1xuICAgIH07XG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2RhdGFOb2RlKGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19kYXRhX186IGRhdGFcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5kYXR1bSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpIDogdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgdmFyIHN1Ymdyb3VwcyA9IFtdLCBzdWJncm91cCwgZ3JvdXAsIG5vZGU7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgIT09IFwiZnVuY3Rpb25cIikgZmlsdGVyID0gZDNfc2VsZWN0aW9uX2ZpbHRlcihmaWx0ZXIpO1xuICAgIGZvciAodmFyIGogPSAwLCBtID0gdGhpcy5sZW5ndGg7IGogPCBtOyBqKyspIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgc3ViZ3JvdXAucGFyZW50Tm9kZSA9IChncm91cCA9IHRoaXNbal0pLnBhcmVudE5vZGU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgZmlsdGVyLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaikpIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oc3ViZ3JvdXBzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2ZpbHRlcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zZWxlY3RNYXRjaGVzKHRoaXMsIHNlbGVjdG9yKTtcbiAgICB9O1xuICB9XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5vcmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7ICkge1xuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gbm9kZS5uZXh0U2libGluZykgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gICAgY29tcGFyYXRvciA9IGQzX3NlbGVjdGlvbl9zb3J0Q29tcGFyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHRoaXNbal0uc29ydChjb21wYXJhdG9yKTtcbiAgICByZXR1cm4gdGhpcy5vcmRlcigpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fc29ydENvbXBhcmF0b3IoY29tcGFyYXRvcikge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgY29tcGFyYXRvciA9IGQzX2FzY2VuZGluZztcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmF0b3IoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICAgIH07XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopO1xuICAgIH0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIGNhbGxiYWNrKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2sobm9kZSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBhcmdzID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICBjYWxsYmFjay5hcHBseShhcmdzWzBdID0gdGhpcywgYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XG4gIH07XG4gIGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuID0gMDtcbiAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbigpIHtcbiAgICAgICsrbjtcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX2VudGVyKHNlbGVjdGlvbikge1xuICAgIGQzX3N1YmNsYXNzKHNlbGVjdGlvbiwgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlKTtcbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG4gIHZhciBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUgPSBbXTtcbiAgZDMuc2VsZWN0aW9uLmVudGVyID0gZDNfc2VsZWN0aW9uX2VudGVyO1xuICBkMy5zZWxlY3Rpb24uZW50ZXIucHJvdG90eXBlID0gZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuYXBwZW5kID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmFwcGVuZDtcbiAgZDNfc2VsZWN0aW9uX2VudGVyUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUubm9kZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5ub2RlO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2l6ZSA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5zaXplO1xuICBkM19zZWxlY3Rpb25fZW50ZXJQcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBzdWJub2RlLCB1cGdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICB1cGdyb3VwID0gKGdyb3VwID0gdGhpc1tqXSkudXBkYXRlO1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBzdWJncm91cC5wYXJlbnROb2RlID0gZ3JvdXAucGFyZW50Tm9kZTtcbiAgICAgIGZvciAodmFyIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICBzdWJncm91cC5wdXNoKHVwZ3JvdXBbaV0gPSBzdWJub2RlID0gc2VsZWN0b3IuY2FsbChncm91cC5wYXJlbnROb2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSk7XG4gICAgICAgICAgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uKHN1Ymdyb3Vwcyk7XG4gIH07XG4gIGQzX3NlbGVjdGlvbl9lbnRlclByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGJlZm9yZSA9IGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZSh0aGlzKTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmluc2VydC5jYWxsKHRoaXMsIG5hbWUsIGJlZm9yZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9lbnRlckluc2VydEJlZm9yZShlbnRlcikge1xuICAgIHZhciBpMCwgajA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGopIHtcbiAgICAgIHZhciBncm91cCA9IGVudGVyW2pdLnVwZGF0ZSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTtcbiAgICAgIGlmIChqICE9IGowKSBqMCA9IGosIGkwID0gMDtcbiAgICAgIGlmIChpID49IGkwKSBpMCA9IGkgKyAxO1xuICAgICAgd2hpbGUgKCEobm9kZSA9IGdyb3VwW2kwXSkgJiYgKytpMCA8IG4pIDtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gIH1cbiAgZDMuc2VsZWN0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGdyb3VwID0gWyBkM19zZWxlY3Qobm9kZSwgZDNfZG9jdW1lbnQpIF07XG4gICAgICBncm91cC5wYXJlbnROb2RlID0gZDNfZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cCA9IFsgbm9kZSBdO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IGQzX2RvY3VtZW50RWxlbWVudChub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbihbIGdyb3VwIF0pO1xuICB9O1xuICBkMy5zZWxlY3RBbGwgPSBmdW5jdGlvbihub2Rlcykge1xuICAgIHZhciBncm91cDtcbiAgICBpZiAodHlwZW9mIG5vZGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBncm91cCA9IGQzX2FycmF5KGQzX3NlbGVjdEFsbChub2RlcywgZDNfZG9jdW1lbnQpKTtcbiAgICAgIGdyb3VwLnBhcmVudE5vZGUgPSBkM19kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwID0gZDNfYXJyYXkobm9kZXMpO1xuICAgICAgZ3JvdXAucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkM19zZWxlY3Rpb24oWyBncm91cCBdKTtcbiAgfTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYgKG4gPCAzKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKG4gPCAyKSBsaXN0ZW5lciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNhcHR1cmUgaW4gdHlwZSkgdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbihjYXB0dXJlLCB0eXBlW2NhcHR1cmVdLCBsaXN0ZW5lcikpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGlmIChuIDwgMikgcmV0dXJuIChuID0gdGhpcy5ub2RlKClbXCJfX29uXCIgKyB0eXBlXSkgJiYgbi5fO1xuICAgICAgY2FwdHVyZSA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lYWNoKGQzX3NlbGVjdGlvbl9vbih0eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19zZWxlY3Rpb25fb24odHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICB2YXIgbmFtZSA9IFwiX19vblwiICsgdHlwZSwgaSA9IHR5cGUuaW5kZXhPZihcIi5cIiksIHdyYXAgPSBkM19zZWxlY3Rpb25fb25MaXN0ZW5lcjtcbiAgICBpZiAoaSA+IDApIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpO1xuICAgIHZhciBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmdldCh0eXBlKTtcbiAgICBpZiAoZmlsdGVyKSB0eXBlID0gZmlsdGVyLCB3cmFwID0gZDNfc2VsZWN0aW9uX29uRmlsdGVyO1xuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKCkge1xuICAgICAgdmFyIGwgPSB0aGlzW25hbWVdO1xuICAgICAgaWYgKGwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGwsIGwuJCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFkZCgpIHtcbiAgICAgIHZhciBsID0gd3JhcChsaXN0ZW5lciwgZDNfYXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICBvblJlbW92ZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHRoaXNbbmFtZV0gPSBsLCBsLiQgPSBjYXB0dXJlKTtcbiAgICAgIGwuXyA9IGxpc3RlbmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGwoKSB7XG4gICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiXl9fb24oW14uXSspXCIgKyBkMy5yZXF1b3RlKHR5cGUpICsgXCIkXCIpLCBtYXRjaDtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICBpZiAobWF0Y2ggPSBuYW1lLm1hdGNoKHJlKSkge1xuICAgICAgICAgIHZhciBsID0gdGhpc1tuYW1lXTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIobWF0Y2hbMV0sIGwsIGwuJCk7XG4gICAgICAgICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGkgPyBsaXN0ZW5lciA/IG9uQWRkIDogb25SZW1vdmUgOiBsaXN0ZW5lciA/IGQzX25vb3AgOiByZW1vdmVBbGw7XG4gIH1cbiAgdmFyIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMgPSBkMy5tYXAoe1xuICAgIG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG4gICAgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiXG4gIH0pO1xuICBpZiAoZDNfZG9jdW1lbnQpIHtcbiAgICBkM19zZWxlY3Rpb25fb25GaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgaWYgKFwib25cIiArIGsgaW4gZDNfZG9jdW1lbnQpIGQzX3NlbGVjdGlvbl9vbkZpbHRlcnMucmVtb3ZlKGspO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG8gPSBkMy5ldmVudDtcbiAgICAgIGQzLmV2ZW50ID0gZTtcbiAgICAgIGFyZ3VtZW50elswXSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0cnkge1xuICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHopO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDMuZXZlbnQgPSBvO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2VsZWN0aW9uX29uRmlsdGVyKGxpc3RlbmVyLCBhcmd1bWVudHopIHtcbiAgICB2YXIgbCA9IGQzX3NlbGVjdGlvbl9vbkxpc3RlbmVyKGxpc3RlbmVyLCBhcmd1bWVudHopO1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGUucmVsYXRlZFRhcmdldDtcbiAgICAgIGlmICghcmVsYXRlZCB8fCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRhcmdldCkgJiA4KSkge1xuICAgICAgICBsLmNhbGwodGFyZ2V0LCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBkM19ldmVudF9kcmFnU2VsZWN0LCBkM19ldmVudF9kcmFnSWQgPSAwO1xuICBmdW5jdGlvbiBkM19ldmVudF9kcmFnU3VwcHJlc3Mobm9kZSkge1xuICAgIHZhciBuYW1lID0gXCIuZHJhZ3N1cHByZXNzLVwiICsgKytkM19ldmVudF9kcmFnSWQsIGNsaWNrID0gXCJjbGlja1wiICsgbmFtZSwgdyA9IGQzLnNlbGVjdChkM193aW5kb3cobm9kZSkpLm9uKFwidG91Y2htb3ZlXCIgKyBuYW1lLCBkM19ldmVudFByZXZlbnREZWZhdWx0KS5vbihcImRyYWdzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCkub24oXCJzZWxlY3RzdGFydFwiICsgbmFtZSwgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCk7XG4gICAgaWYgKGQzX2V2ZW50X2RyYWdTZWxlY3QgPT0gbnVsbCkge1xuICAgICAgZDNfZXZlbnRfZHJhZ1NlbGVjdCA9IFwib25zZWxlY3RzdGFydFwiIGluIG5vZGUgPyBmYWxzZSA6IGQzX3ZlbmRvclN5bWJvbChub2RlLnN0eWxlLCBcInVzZXJTZWxlY3RcIik7XG4gICAgfVxuICAgIGlmIChkM19ldmVudF9kcmFnU2VsZWN0KSB7XG4gICAgICB2YXIgc3R5bGUgPSBkM19kb2N1bWVudEVsZW1lbnQobm9kZSkuc3R5bGUsIHNlbGVjdCA9IHN0eWxlW2QzX2V2ZW50X2RyYWdTZWxlY3RdO1xuICAgICAgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN1cHByZXNzQ2xpY2spIHtcbiAgICAgIHcub24obmFtZSwgbnVsbCk7XG4gICAgICBpZiAoZDNfZXZlbnRfZHJhZ1NlbGVjdCkgc3R5bGVbZDNfZXZlbnRfZHJhZ1NlbGVjdF0gPSBzZWxlY3Q7XG4gICAgICBpZiAoc3VwcHJlc3NDbGljaykge1xuICAgICAgICB2YXIgb2ZmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdy5vbihjbGljaywgbnVsbCk7XG4gICAgICAgIH07XG4gICAgICAgIHcub24oY2xpY2ssIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBvZmYoKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQob2ZmLCAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLm1vdXNlID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGQzX21vdXNlUG9pbnQoY29udGFpbmVyLCBkM19ldmVudFNvdXJjZSgpKTtcbiAgfTtcbiAgdmFyIGQzX21vdXNlX2J1ZzQ0MDgzID0gdGhpcy5uYXZpZ2F0b3IgJiYgL1dlYktpdC8udGVzdCh0aGlzLm5hdmlnYXRvci51c2VyQWdlbnQpID8gLTEgOiAwO1xuICBmdW5jdGlvbiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgZSkge1xuICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSBlID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICB2YXIgc3ZnID0gY29udGFpbmVyLm93bmVyU1ZHRWxlbWVudCB8fCBjb250YWluZXI7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBpZiAoZDNfbW91c2VfYnVnNDQwODMgPCAwKSB7XG4gICAgICAgIHZhciB3aW5kb3cgPSBkM193aW5kb3coY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHdpbmRvdy5zY3JvbGxYIHx8IHdpbmRvdy5zY3JvbGxZKSB7XG4gICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KFwiYm9keVwiKS5hcHBlbmQoXCJzdmdcIikuc3R5bGUoe1xuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIlxuICAgICAgICAgIH0sIFwiaW1wb3J0YW50XCIpO1xuICAgICAgICAgIHZhciBjdG0gPSBzdmdbMF1bMF0uZ2V0U2NyZWVuQ1RNKCk7XG4gICAgICAgICAgZDNfbW91c2VfYnVnNDQwODMgPSAhKGN0bS5mIHx8IGN0bS5lKTtcbiAgICAgICAgICBzdmcucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkM19tb3VzZV9idWc0NDA4MykgcG9pbnQueCA9IGUucGFnZVgsIHBvaW50LnkgPSBlLnBhZ2VZOyBlbHNlIHBvaW50LnggPSBlLmNsaWVudFgsIFxuICAgICAgcG9pbnQueSA9IGUuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKGNvbnRhaW5lci5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkpO1xuICAgICAgcmV0dXJuIFsgcG9pbnQueCwgcG9pbnQueSBdO1xuICAgIH1cbiAgICB2YXIgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gWyBlLmNsaWVudFggLSByZWN0LmxlZnQgLSBjb250YWluZXIuY2xpZW50TGVmdCwgZS5jbGllbnRZIC0gcmVjdC50b3AgLSBjb250YWluZXIuY2xpZW50VG9wIF07XG4gIH1cbiAgZDMudG91Y2ggPSBmdW5jdGlvbihjb250YWluZXIsIHRvdWNoZXMsIGlkZW50aWZpZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gZDNfZXZlbnRTb3VyY2UoKS5jaGFuZ2VkVG91Y2hlcztcbiAgICBpZiAodG91Y2hlcykgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzLmxlbmd0aCwgdG91Y2g7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgIHJldHVybiBkM19tb3VzZVBvaW50KGNvbnRhaW5lciwgdG91Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZDMuYmVoYXZpb3IuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goZHJhZywgXCJkcmFnXCIsIFwiZHJhZ3N0YXJ0XCIsIFwiZHJhZ2VuZFwiKSwgb3JpZ2luID0gbnVsbCwgbW91c2Vkb3duID0gZHJhZ3N0YXJ0KGQzX25vb3AsIGQzLm1vdXNlLCBkM193aW5kb3csIFwibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiKSwgdG91Y2hzdGFydCA9IGRyYWdzdGFydChkM19iZWhhdmlvcl9kcmFnVG91Y2hJZCwgZDMudG91Y2gsIGQzX2lkZW50aXR5LCBcInRvdWNobW92ZVwiLCBcInRvdWNoZW5kXCIpO1xuICAgIGZ1bmN0aW9uIGRyYWcoKSB7XG4gICAgICB0aGlzLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duKS5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZHJhZ3N0YXJ0KGlkLCBwb3NpdGlvbiwgc3ViamVjdCwgbW92ZSwgZW5kKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcywgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdFbGVtZW50IHx8IGQzLmV2ZW50LnRhcmdldCwgcGFyZW50ID0gdGhhdC5wYXJlbnROb2RlLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBkcmFnSWQgPSBpZCgpLCBkcmFnTmFtZSA9IFwiLmRyYWdcIiArIChkcmFnSWQgPT0gbnVsbCA/IFwiXCIgOiBcIi1cIiArIGRyYWdJZCksIGRyYWdPZmZzZXQsIGRyYWdTdWJqZWN0ID0gZDMuc2VsZWN0KHN1YmplY3QodGFyZ2V0KSkub24obW92ZSArIGRyYWdOYW1lLCBtb3ZlZCkub24oZW5kICsgZHJhZ05hbWUsIGVuZGVkKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgcG9zaXRpb24wID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpO1xuICAgICAgICBpZiAob3JpZ2luKSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IG9yaWdpbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICAgICAgICAgIGRyYWdPZmZzZXQgPSBbIGRyYWdPZmZzZXQueCAtIHBvc2l0aW9uMFswXSwgZHJhZ09mZnNldC55IC0gcG9zaXRpb24wWzFdIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHJhZ09mZnNldCA9IFsgMCwgMCBdO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcImRyYWdzdGFydFwiXG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb24xID0gcG9zaXRpb24ocGFyZW50LCBkcmFnSWQpLCBkeCwgZHk7XG4gICAgICAgICAgaWYgKCFwb3NpdGlvbjEpIHJldHVybjtcbiAgICAgICAgICBkeCA9IHBvc2l0aW9uMVswXSAtIHBvc2l0aW9uMFswXTtcbiAgICAgICAgICBkeSA9IHBvc2l0aW9uMVsxXSAtIHBvc2l0aW9uMFsxXTtcbiAgICAgICAgICBkcmFnZ2VkIHw9IGR4IHwgZHk7XG4gICAgICAgICAgcG9zaXRpb24wID0gcG9zaXRpb24xO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ1wiLFxuICAgICAgICAgICAgeDogcG9zaXRpb24xWzBdICsgZHJhZ09mZnNldFswXSxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uMVsxXSArIGRyYWdPZmZzZXRbMV0sXG4gICAgICAgICAgICBkeDogZHgsXG4gICAgICAgICAgICBkeTogZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmRlZCgpIHtcbiAgICAgICAgICBpZiAoIXBvc2l0aW9uKHBhcmVudCwgZHJhZ0lkKSkgcmV0dXJuO1xuICAgICAgICAgIGRyYWdTdWJqZWN0Lm9uKG1vdmUgKyBkcmFnTmFtZSwgbnVsbCkub24oZW5kICsgZHJhZ05hbWUsIG51bGwpO1xuICAgICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZHJhZ2VuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRyYWcub3JpZ2luID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JpZ2luO1xuICAgICAgb3JpZ2luID0geDtcbiAgICAgIHJldHVybiBkcmFnO1xuICAgIH07XG4gICAgcmV0dXJuIGQzLnJlYmluZChkcmFnLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfYmVoYXZpb3JfZHJhZ1RvdWNoSWQoKSB7XG4gICAgcmV0dXJuIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gIH1cbiAgZDMudG91Y2hlcyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgdG91Y2hlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgdG91Y2hlcyA9IGQzX2V2ZW50U291cmNlKCkudG91Y2hlcztcbiAgICByZXR1cm4gdG91Y2hlcyA/IGQzX2FycmF5KHRvdWNoZXMpLm1hcChmdW5jdGlvbih0b3VjaCkge1xuICAgICAgdmFyIHBvaW50ID0gZDNfbW91c2VQb2ludChjb250YWluZXIsIHRvdWNoKTtcbiAgICAgIHBvaW50LmlkZW50aWZpZXIgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0pIDogW107XG4gIH07XG4gIHZhciDOtSA9IDFlLTYsIM61MiA9IM61ICogzrUsIM+AID0gTWF0aC5QSSwgz4QgPSAyICogz4AsIM+EzrUgPSDPhCAtIM61LCBoYWxmz4AgPSDPgCAvIDIsIGQzX3JhZGlhbnMgPSDPgCAvIDE4MCwgZDNfZGVncmVlcyA9IDE4MCAvIM+AO1xuICBmdW5jdGlvbiBkM19zZ24oeCkge1xuICAgIHJldHVybiB4ID4gMCA/IDEgOiB4IDwgMCA/IC0xIDogMDtcbiAgfVxuICBmdW5jdGlvbiBkM19jcm9zczJkKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19hY29zKHgpIHtcbiAgICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gz4AgOiBNYXRoLmFjb3MoeCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfYXNpbih4KSB7XG4gICAgcmV0dXJuIHggPiAxID8gaGFsZs+AIDogeCA8IC0xID8gLWhhbGbPgCA6IE1hdGguYXNpbih4KTtcbiAgfVxuICBmdW5jdGlvbiBkM19zaW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19jb3NoKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM190YW5oKHgpIHtcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbiAgfVxuICBmdW5jdGlvbiBkM19oYXZlcnNpbih4KSB7XG4gICAgcmV0dXJuICh4ID0gTWF0aC5zaW4oeCAvIDIpKSAqIHg7XG4gIH1cbiAgdmFyIM+BID0gTWF0aC5TUVJUMiwgz4EyID0gMiwgz4E0ID0gNDtcbiAgZDMuaW50ZXJwb2xhdGVab29tID0gZnVuY3Rpb24ocDAsIHAxKSB7XG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSwgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLCBkeCA9IHV4MSAtIHV4MCwgZHkgPSB1eTEgLSB1eTAsIGQyID0gZHggKiBkeCArIGR5ICogZHksIGksIFM7XG4gICAgaWYgKGQyIDwgzrUyKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyDPgTtcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbIHV4MCArIHQgKiBkeCwgdXkwICsgdCAqIGR5LCB3MCAqIE1hdGguZXhwKM+BICogdCAqIFMpIF07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLCBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIM+BNCAqIGQyKSAvICgyICogdzAgKiDPgTIgKiBkMSksIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gz4E0ICogZDIpIC8gKDIgKiB3MSAqIM+BMiAqIGQxKSwgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLCByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gz4E7XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLCBjb3NocjAgPSBkM19jb3NoKHIwKSwgdSA9IHcwIC8gKM+BMiAqIGQxKSAqIChjb3NocjAgKiBkM190YW5oKM+BICogcyArIHIwKSAtIGQzX3NpbmgocjApKTtcbiAgICAgICAgcmV0dXJuIFsgdXgwICsgdSAqIGR4LCB1eTAgKyB1ICogZHksIHcwICogY29zaHIwIC8gZDNfY29zaCjPgSAqIHMgKyByMCkgXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGkuZHVyYXRpb24gPSBTICogMWUzO1xuICAgIHJldHVybiBpO1xuICB9O1xuICBkMy5iZWhhdmlvci56b29tID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXcgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIGs6IDFcbiAgICB9LCB0cmFuc2xhdGUwLCBjZW50ZXIwLCBjZW50ZXIsIHNpemUgPSBbIDk2MCwgNTAwIF0sIHNjYWxlRXh0ZW50ID0gZDNfYmVoYXZpb3Jfem9vbUluZmluaXR5LCBkdXJhdGlvbiA9IDI1MCwgem9vbWluZyA9IDAsIG1vdXNlZG93biA9IFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vtb3ZlID0gXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZXVwID0gXCJtb3VzZXVwLnpvb21cIiwgbW91c2V3aGVlbFRpbWVyLCB0b3VjaHN0YXJ0ID0gXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2h0aW1lLCBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goem9vbSwgXCJ6b29tc3RhcnRcIiwgXCJ6b29tXCIsIFwiem9vbWVuZFwiKSwgeDAsIHgxLCB5MCwgeTE7XG4gICAgaWYgKCFkM19iZWhhdmlvcl96b29tV2hlZWwpIHtcbiAgICAgIGQzX2JlaGF2aW9yX3pvb21XaGVlbCA9IFwib253aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLWQzLmV2ZW50LmRlbHRhWSAqIChkMy5ldmVudC5kZWx0YU1vZGUgPyAxMjAgOiAxKTtcbiAgICAgIH0sIFwid2hlZWxcIikgOiBcIm9ubW91c2V3aGVlbFwiIGluIGQzX2RvY3VtZW50ID8gKGQzX2JlaGF2aW9yX3pvb21EZWx0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZDMuZXZlbnQud2hlZWxEZWx0YTtcbiAgICAgIH0sIFwibW91c2V3aGVlbFwiKSA6IChkM19iZWhhdmlvcl96b29tRGVsdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC1kMy5ldmVudC5kZXRhaWw7XG4gICAgICB9LCBcIk1vek1vdXNlUGl4ZWxTY3JvbGxcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb20oZykge1xuICAgICAgZy5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbihkM19iZWhhdmlvcl96b29tV2hlZWwgKyBcIi56b29tXCIsIG1vdXNld2hlZWxlZCkub24oXCJkYmxjbGljay56b29tXCIsIGRibGNsaWNrZWQpLm9uKHRvdWNoc3RhcnQsIHRvdWNoc3RhcnRlZCk7XG4gICAgfVxuICAgIHpvb20uZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoaXMsIGFyZ3VtZW50cyksIHZpZXcxID0gdmlldztcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXMuX19jaGFydF9fIHx8IHtcbiAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgeTogMCxcbiAgICAgICAgICAgICAgazogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KS50d2VlbihcInpvb206em9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHNpemVbMF0sIGR5ID0gc2l6ZVsxXSwgY3ggPSBjZW50ZXIwID8gY2VudGVyMFswXSA6IGR4IC8gMiwgY3kgPSBjZW50ZXIwID8gY2VudGVyMFsxXSA6IGR5IC8gMiwgaSA9IGQzLmludGVycG9sYXRlWm9vbShbIChjeCAtIHZpZXcueCkgLyB2aWV3LmssIChjeSAtIHZpZXcueSkgLyB2aWV3LmssIGR4IC8gdmlldy5rIF0sIFsgKGN4IC0gdmlldzEueCkgLyB2aWV3MS5rLCAoY3kgLSB2aWV3MS55KSAvIHZpZXcxLmssIGR4IC8gdmlldzEuayBdKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgIHZhciBsID0gaSh0KSwgayA9IGR4IC8gbFsyXTtcbiAgICAgICAgICAgICAgdGhpcy5fX2NoYXJ0X18gPSB2aWV3ID0ge1xuICAgICAgICAgICAgICAgIHg6IGN4IC0gbFswXSAqIGssXG4gICAgICAgICAgICAgICAgeTogY3kgLSBsWzFdICogayxcbiAgICAgICAgICAgICAgICBrOiBrXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pLmVhY2goXCJpbnRlcnJ1cHQuem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHpvb21lbmRlZChkaXNwYXRjaCk7XG4gICAgICAgICAgfSkuZWFjaChcImVuZC56b29tXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9fY2hhcnRfXyA9IHZpZXc7XG4gICAgICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB6b29tLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgdmlldy54LCB2aWV3LnkgXTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6ICtfWzBdLFxuICAgICAgICB5OiArX1sxXSxcbiAgICAgICAgazogdmlldy5rXG4gICAgICB9O1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmlldy5rO1xuICAgICAgdmlldyA9IHtcbiAgICAgICAgeDogdmlldy54LFxuICAgICAgICB5OiB2aWV3LnksXG4gICAgICAgIGs6IG51bGxcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKCtfKTtcbiAgICAgIHJlc2NhbGUoKTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNjYWxlRXh0ZW50O1xuICAgICAgc2NhbGVFeHRlbnQgPSBfID09IG51bGwgPyBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgOiBbICtfWzBdLCArX1sxXSBdO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB6b29tLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNlbnRlcjtcbiAgICAgIGNlbnRlciA9IF8gJiYgWyArX1swXSwgK19bMV0gXTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgem9vbS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBfICYmIFsgK19bMF0sICtfWzFdIF07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIGR1cmF0aW9uID0gK187XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHgxO1xuICAgICAgeDEgPSB6O1xuICAgICAgeDAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHpvb20ueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkxO1xuICAgICAgeTEgPSB6O1xuICAgICAgeTAgPSB6LmNvcHkoKTtcbiAgICAgIHZpZXcgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGs6IDFcbiAgICAgIH07XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uKHApIHtcbiAgICAgIHJldHVybiBbIChwWzBdIC0gdmlldy54KSAvIHZpZXcuaywgKHBbMV0gLSB2aWV3LnkpIC8gdmlldy5rIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50KGwpIHtcbiAgICAgIHJldHVybiBbIGxbMF0gKiB2aWV3LmsgKyB2aWV3LngsIGxbMV0gKiB2aWV3LmsgKyB2aWV3LnkgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGVUbyhzKSB7XG4gICAgICB2aWV3LmsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHMpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8ocCwgbCkge1xuICAgICAgbCA9IHBvaW50KGwpO1xuICAgICAgdmlldy54ICs9IHBbMF0gLSBsWzBdO1xuICAgICAgdmlldy55ICs9IHBbMV0gLSBsWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tVG8odGhhdCwgcCwgbCwgaykge1xuICAgICAgdGhhdC5fX2NoYXJ0X18gPSB7XG4gICAgICAgIHg6IHZpZXcueCxcbiAgICAgICAgeTogdmlldy55LFxuICAgICAgICBrOiB2aWV3LmtcbiAgICAgIH07XG4gICAgICBzY2FsZVRvKE1hdGgucG93KDIsIGspKTtcbiAgICAgIHRyYW5zbGF0ZVRvKGNlbnRlcjAgPSBwLCBsKTtcbiAgICAgIHRoYXQgPSBkMy5zZWxlY3QodGhhdCk7XG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSB0aGF0ID0gdGhhdC50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgdGhhdC5jYWxsKHpvb20uZXZlbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgaWYgKHgxKSB4MS5kb21haW4oeDAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gKHggLSB2aWV3LngpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHgwLmludmVydCkpO1xuICAgICAgaWYgKHkxKSB5MS5kb21haW4oeTAucmFuZ2UoKS5tYXAoZnVuY3Rpb24oeSkge1xuICAgICAgICByZXR1cm4gKHkgLSB2aWV3LnkpIC8gdmlldy5rO1xuICAgICAgfSkubWFwKHkwLmludmVydCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tc3RhcnRlZChkaXNwYXRjaCkge1xuICAgICAgaWYgKCF6b29taW5nKyspIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogXCJ6b29tc3RhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHpvb21lZChkaXNwYXRjaCkge1xuICAgICAgcmVzY2FsZSgpO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBcInpvb21cIixcbiAgICAgICAgc2NhbGU6IHZpZXcuayxcbiAgICAgICAgdHJhbnNsYXRlOiBbIHZpZXcueCwgdmlldy55IF1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB6b29tZW5kZWQoZGlzcGF0Y2gpIHtcbiAgICAgIGlmICghLS16b29taW5nKSBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IFwiem9vbWVuZFwiXG4gICAgICB9KSwgY2VudGVyMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdXNlZG93bmVkKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzLCBkaXNwYXRjaCA9IGV2ZW50Lm9mKHRoYXQsIGFyZ3VtZW50cyksIGRyYWdnZWQgPSAwLCBzdWJqZWN0ID0gZDMuc2VsZWN0KGQzX3dpbmRvdyh0aGF0KSkub24obW91c2Vtb3ZlLCBtb3ZlZCkub24obW91c2V1cCwgZW5kZWQpLCBsb2NhdGlvbjAgPSBsb2NhdGlvbihkMy5tb3VzZSh0aGF0KSksIGRyYWdSZXN0b3JlID0gZDNfZXZlbnRfZHJhZ1N1cHByZXNzKHRoYXQpO1xuICAgICAgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoYXQpO1xuICAgICAgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgZnVuY3Rpb24gbW92ZWQoKSB7XG4gICAgICAgIGRyYWdnZWQgPSAxO1xuICAgICAgICB0cmFuc2xhdGVUbyhkMy5tb3VzZSh0aGF0KSwgbG9jYXRpb24wKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBzdWJqZWN0Lm9uKG1vdXNlbW92ZSwgbnVsbCkub24obW91c2V1cCwgbnVsbCk7XG4gICAgICAgIGRyYWdSZXN0b3JlKGRyYWdnZWQpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXMsIGRpc3BhdGNoID0gZXZlbnQub2YodGhhdCwgYXJndW1lbnRzKSwgbG9jYXRpb25zMCA9IHt9LCBkaXN0YW5jZTAgPSAwLCBzY2FsZTAsIHpvb21OYW1lID0gXCIuem9vbS1cIiArIGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIsIHRvdWNobW92ZSA9IFwidG91Y2htb3ZlXCIgKyB6b29tTmFtZSwgdG91Y2hlbmQgPSBcInRvdWNoZW5kXCIgKyB6b29tTmFtZSwgdGFyZ2V0cyA9IFtdLCBzdWJqZWN0ID0gZDMuc2VsZWN0KHRoYXQpLCBkcmFnUmVzdG9yZSA9IGQzX2V2ZW50X2RyYWdTdXBwcmVzcyh0aGF0KTtcbiAgICAgIHN0YXJ0ZWQoKTtcbiAgICAgIHpvb21zdGFydGVkKGRpc3BhdGNoKTtcbiAgICAgIHN1YmplY3Qub24obW91c2Vkb3duLCBudWxsKS5vbih0b3VjaHN0YXJ0LCBzdGFydGVkKTtcbiAgICAgIGZ1bmN0aW9uIHJlbG9jYXRlKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCk7XG4gICAgICAgIHNjYWxlMCA9IHZpZXcuaztcbiAgICAgICAgdG91Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICBpZiAodC5pZGVudGlmaWVyIGluIGxvY2F0aW9uczApIGxvY2F0aW9uczBbdC5pZGVudGlmaWVyXSA9IGxvY2F0aW9uKHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdWNoZXM7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZDMuZXZlbnQudGFyZ2V0O1xuICAgICAgICBkMy5zZWxlY3QodGFyZ2V0KS5vbih0b3VjaG1vdmUsIG1vdmVkKS5vbih0b3VjaGVuZCwgZW5kZWQpO1xuICAgICAgICB0YXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBkMy5ldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjaGFuZ2VkLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGxvY2F0aW9uczBbY2hhbmdlZFtpXS5pZGVudGlmaWVyXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoZXMgPSByZWxvY2F0ZSgpLCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAodG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBpZiAobm93IC0gdG91Y2h0aW1lIDwgNTAwKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHRvdWNoZXNbMF07XG4gICAgICAgICAgICB6b29tVG8odGhhdCwgcCwgbG9jYXRpb25zMFtwLmlkZW50aWZpZXJdLCBNYXRoLmZsb29yKE1hdGgubG9nKHZpZXcuaykgLyBNYXRoLkxOMikgKyAxKTtcbiAgICAgICAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG91Y2h0aW1lID0gbm93O1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBwID0gdG91Y2hlc1swXSwgcSA9IHRvdWNoZXNbMV0sIGR4ID0gcFswXSAtIHFbMF0sIGR5ID0gcFsxXSAtIHFbMV07XG4gICAgICAgICAgZGlzdGFuY2UwID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGQzLnRvdWNoZXModGhhdCksIHAwLCBsMCwgcDEsIGwxO1xuICAgICAgICBkM19zZWxlY3Rpb25faW50ZXJydXB0LmNhbGwodGhhdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdG91Y2hlcy5sZW5ndGg7IGkgPCBuOyArK2ksIGwxID0gbnVsbCkge1xuICAgICAgICAgIHAxID0gdG91Y2hlc1tpXTtcbiAgICAgICAgICBpZiAobDEgPSBsb2NhdGlvbnMwW3AxLmlkZW50aWZpZXJdKSB7XG4gICAgICAgICAgICBpZiAobDApIGJyZWFrO1xuICAgICAgICAgICAgcDAgPSBwMSwgbDAgPSBsMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwxKSB7XG4gICAgICAgICAgdmFyIGRpc3RhbmNlMSA9IChkaXN0YW5jZTEgPSBwMVswXSAtIHAwWzBdKSAqIGRpc3RhbmNlMSArIChkaXN0YW5jZTEgPSBwMVsxXSAtIHAwWzFdKSAqIGRpc3RhbmNlMSwgc2NhbGUxID0gZGlzdGFuY2UwICYmIE1hdGguc3FydChkaXN0YW5jZTEgLyBkaXN0YW5jZTApO1xuICAgICAgICAgIHAwID0gWyAocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyIF07XG4gICAgICAgICAgbDAgPSBbIChsMFswXSArIGwxWzBdKSAvIDIsIChsMFsxXSArIGwxWzFdKSAvIDIgXTtcbiAgICAgICAgICBzY2FsZVRvKHNjYWxlMSAqIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdG91Y2h0aW1lID0gbnVsbDtcbiAgICAgICAgdHJhbnNsYXRlVG8ocDAsIGwwKTtcbiAgICAgICAgem9vbWVkKGRpc3BhdGNoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgICBpZiAoZDMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgY2hhbmdlZCA9IGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gY2hhbmdlZC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhdGlvbnMwW2NoYW5nZWRbaV0uaWRlbnRpZmllcl07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGlkZW50aWZpZXIgaW4gbG9jYXRpb25zMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgcmVsb2NhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZDMuc2VsZWN0QWxsKHRhcmdldHMpLm9uKHpvb21OYW1lLCBudWxsKTtcbiAgICAgICAgc3ViamVjdC5vbihtb3VzZWRvd24sIG1vdXNlZG93bmVkKS5vbih0b3VjaHN0YXJ0LCB0b3VjaHN0YXJ0ZWQpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICB6b29tZW5kZWQoZGlzcGF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VzZXdoZWVsZWQoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2ggPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKG1vdXNld2hlZWxUaW1lcikgY2xlYXJUaW1lb3V0KG1vdXNld2hlZWxUaW1lcik7IGVsc2UgZDNfc2VsZWN0aW9uX2ludGVycnVwdC5jYWxsKHRoaXMpLCBcbiAgICAgIHRyYW5zbGF0ZTAgPSBsb2NhdGlvbihjZW50ZXIwID0gY2VudGVyIHx8IGQzLm1vdXNlKHRoaXMpKSwgem9vbXN0YXJ0ZWQoZGlzcGF0Y2gpO1xuICAgICAgbW91c2V3aGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgbW91c2V3aGVlbFRpbWVyID0gbnVsbDtcbiAgICAgICAgem9vbWVuZGVkKGRpc3BhdGNoKTtcbiAgICAgIH0sIDUwKTtcbiAgICAgIGQzX2V2ZW50UHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjYWxlVG8oTWF0aC5wb3coMiwgZDNfYmVoYXZpb3Jfem9vbURlbHRhKCkgKiAuMDAyKSAqIHZpZXcuayk7XG4gICAgICB0cmFuc2xhdGVUbyhjZW50ZXIwLCB0cmFuc2xhdGUwKTtcbiAgICAgIHpvb21lZChkaXNwYXRjaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgICB2YXIgcCA9IGQzLm1vdXNlKHRoaXMpLCBrID0gTWF0aC5sb2codmlldy5rKSAvIE1hdGguTE4yO1xuICAgICAgem9vbVRvKHRoaXMsIHAsIGxvY2F0aW9uKHApLCBkMy5ldmVudC5zaGlmdEtleSA/IE1hdGguY2VpbChrKSAtIDEgOiBNYXRoLmZsb29yKGspICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBkMy5yZWJpbmQoem9vbSwgZXZlbnQsIFwib25cIik7XG4gIH07XG4gIHZhciBkM19iZWhhdmlvcl96b29tSW5maW5pdHkgPSBbIDAsIEluZmluaXR5IF0sIGQzX2JlaGF2aW9yX3pvb21EZWx0YSwgZDNfYmVoYXZpb3Jfem9vbVdoZWVsO1xuICBkMy5jb2xvciA9IGQzX2NvbG9yO1xuICBmdW5jdGlvbiBkM19jb2xvcigpIHt9XG4gIGQzX2NvbG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfTtcbiAgZDMuaHNsID0gZDNfaHNsO1xuICBmdW5jdGlvbiBkM19oc2woaCwgcywgbCkge1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgZDNfaHNsID8gdm9pZCAodGhpcy5oID0gK2gsIHRoaXMucyA9ICtzLCB0aGlzLmwgPSArbCkgOiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGggaW5zdGFuY2VvZiBkM19oc2wgPyBuZXcgZDNfaHNsKGguaCwgaC5zLCBoLmwpIDogZDNfcmdiX3BhcnNlKFwiXCIgKyBoLCBkM19yZ2JfaHNsLCBkM19oc2wpIDogbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICB2YXIgZDNfaHNsUHJvdG90eXBlID0gZDNfaHNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oc2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgayA9IE1hdGgucG93KC43LCBhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpO1xuICAgIHJldHVybiBuZXcgZDNfaHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgLyBrKTtcbiAgfTtcbiAgZDNfaHNsUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgcmV0dXJuIG5ldyBkM19oc2wodGhpcy5oLCB0aGlzLnMsIGsgKiB0aGlzLmwpO1xuICB9O1xuICBkM19oc2xQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2hzbF9yZ2IodGhpcy5oLCB0aGlzLnMsIHRoaXMubCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2hzbF9yZ2IoaCwgcywgbCkge1xuICAgIHZhciBtMSwgbTI7XG4gICAgaCA9IGlzTmFOKGgpID8gMCA6IChoICU9IDM2MCkgPCAwID8gaCArIDM2MCA6IGg7XG4gICAgcyA9IGlzTmFOKHMpID8gMCA6IHMgPCAwID8gMCA6IHMgPiAxID8gMSA6IHM7XG4gICAgbCA9IGwgPCAwID8gMCA6IGwgPiAxID8gMSA6IGw7XG4gICAgbTIgPSBsIDw9IC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICBmdW5jdGlvbiB2KGgpIHtcbiAgICAgIGlmIChoID4gMzYwKSBoIC09IDM2MDsgZWxzZSBpZiAoaCA8IDApIGggKz0gMzYwO1xuICAgICAgaWYgKGggPCA2MCkgcmV0dXJuIG0xICsgKG0yIC0gbTEpICogaCAvIDYwO1xuICAgICAgaWYgKGggPCAxODApIHJldHVybiBtMjtcbiAgICAgIGlmIChoIDwgMjQwKSByZXR1cm4gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MDtcbiAgICAgIHJldHVybiBtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdnYoaCkge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQodihoKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDNfcmdiKHZ2KGggKyAxMjApLCB2dihoKSwgdnYoaCAtIDEyMCkpO1xuICB9XG4gIGQzLmhjbCA9IGQzX2hjbDtcbiAgZnVuY3Rpb24gZDNfaGNsKGgsIGMsIGwpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2hjbCA/IHZvaWQgKHRoaXMuaCA9ICtoLCB0aGlzLmMgPSArYywgdGhpcy5sID0gK2wpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBoIGluc3RhbmNlb2YgZDNfaGNsID8gbmV3IGQzX2hjbChoLmgsIGguYywgaC5sKSA6IGggaW5zdGFuY2VvZiBkM19sYWIgPyBkM19sYWJfaGNsKGgubCwgaC5hLCBoLmIpIDogZDNfbGFiX2hjbCgoaCA9IGQzX3JnYl9sYWIoKGggPSBkMy5yZ2IoaCkpLnIsIGguZywgaC5iKSkubCwgaC5hLCBoLmIpIDogbmV3IGQzX2hjbChoLCBjLCBsKTtcbiAgfVxuICB2YXIgZDNfaGNsUHJvdG90eXBlID0gZDNfaGNsLnByb3RvdHlwZSA9IG5ldyBkM19jb2xvcigpO1xuICBkM19oY2xQcm90b3R5cGUuYnJpZ2h0ZXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBkM19oY2wodGhpcy5oLCB0aGlzLmMsIE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSkpO1xuICB9O1xuICBkM19oY2xQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfaGNsKHRoaXMuaCwgdGhpcy5jLCBNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSk7XG4gIH07XG4gIGQzX2hjbFByb3RvdHlwZS5yZ2IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfaGNsX2xhYih0aGlzLmgsIHRoaXMuYywgdGhpcy5sKS5yZ2IoKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaGNsX2xhYihoLCBjLCBsKSB7XG4gICAgaWYgKGlzTmFOKGgpKSBoID0gMDtcbiAgICBpZiAoaXNOYU4oYykpIGMgPSAwO1xuICAgIHJldHVybiBuZXcgZDNfbGFiKGwsIE1hdGguY29zKGggKj0gZDNfcmFkaWFucykgKiBjLCBNYXRoLnNpbihoKSAqIGMpO1xuICB9XG4gIGQzLmxhYiA9IGQzX2xhYjtcbiAgZnVuY3Rpb24gZDNfbGFiKGwsIGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGQzX2xhYiA/IHZvaWQgKHRoaXMubCA9ICtsLCB0aGlzLmEgPSArYSwgdGhpcy5iID0gK2IpIDogYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBsIGluc3RhbmNlb2YgZDNfbGFiID8gbmV3IGQzX2xhYihsLmwsIGwuYSwgbC5iKSA6IGwgaW5zdGFuY2VvZiBkM19oY2wgPyBkM19oY2xfbGFiKGwuaCwgbC5jLCBsLmwpIDogZDNfcmdiX2xhYigobCA9IGQzX3JnYihsKSkuciwgbC5nLCBsLmIpIDogbmV3IGQzX2xhYihsLCBhLCBiKTtcbiAgfVxuICB2YXIgZDNfbGFiX0sgPSAxODtcbiAgdmFyIGQzX2xhYl9YID0gLjk1MDQ3LCBkM19sYWJfWSA9IDEsIGQzX2xhYl9aID0gMS4wODg4MztcbiAgdmFyIGQzX2xhYlByb3RvdHlwZSA9IGQzX2xhYi5wcm90b3R5cGUgPSBuZXcgZDNfY29sb3IoKTtcbiAgZDNfbGFiUHJvdG90eXBlLmJyaWdodGVyID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgZDNfbGFiKE1hdGgubWluKDEwMCwgdGhpcy5sICsgZDNfbGFiX0sgKiAoYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKSksIHRoaXMuYSwgdGhpcy5iKTtcbiAgfTtcbiAgZDNfbGFiUHJvdG90eXBlLmRhcmtlciA9IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IGQzX2xhYihNYXRoLm1heCgwLCB0aGlzLmwgLSBkM19sYWJfSyAqIChhcmd1bWVudHMubGVuZ3RoID8gayA6IDEpKSwgdGhpcy5hLCB0aGlzLmIpO1xuICB9O1xuICBkM19sYWJQcm90b3R5cGUucmdiID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2xhYl9yZ2IodGhpcy5sLCB0aGlzLmEsIHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xhYl9yZ2IobCwgYSwgYikge1xuICAgIHZhciB5ID0gKGwgKyAxNikgLyAxMTYsIHggPSB5ICsgYSAvIDUwMCwgeiA9IHkgLSBiIC8gMjAwO1xuICAgIHggPSBkM19sYWJfeHl6KHgpICogZDNfbGFiX1g7XG4gICAgeSA9IGQzX2xhYl94eXooeSkgKiBkM19sYWJfWTtcbiAgICB6ID0gZDNfbGFiX3h5eih6KSAqIGQzX2xhYl9aO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKGQzX3h5el9yZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAuNDk4NTMxNCAqIHopLCBkM194eXpfcmdiKC0uOTY5MjY2ICogeCArIDEuODc2MDEwOCAqIHkgKyAuMDQxNTU2ICogeiksIGQzX3h5el9yZ2IoLjA1NTY0MzQgKiB4IC0gLjIwNDAyNTkgKiB5ICsgMS4wNTcyMjUyICogeikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xhYl9oY2wobCwgYSwgYikge1xuICAgIHJldHVybiBsID4gMCA/IG5ldyBkM19oY2woTWF0aC5hdGFuMihiLCBhKSAqIGQzX2RlZ3JlZXMsIE1hdGguc3FydChhICogYSArIGIgKiBiKSwgbCkgOiBuZXcgZDNfaGNsKE5hTiwgTmFOLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYWJfeHl6KHgpIHtcbiAgICByZXR1cm4geCA+IC4yMDY4OTMwMzQgPyB4ICogeCAqIHggOiAoeCAtIDQgLyAyOSkgLyA3Ljc4NzAzNztcbiAgfVxuICBmdW5jdGlvbiBkM194eXpfbGFiKHgpIHtcbiAgICByZXR1cm4geCA+IC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiA3Ljc4NzAzNyAqIHggKyA0IC8gMjk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfeHl6X3JnYihyKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMjU1ICogKHIgPD0gLjAwMzA0ID8gMTIuOTIgKiByIDogMS4wNTUgKiBNYXRoLnBvdyhyLCAxIC8gMi40KSAtIC4wNTUpKTtcbiAgfVxuICBkMy5yZ2IgPSBkM19yZ2I7XG4gIGZ1bmN0aW9uIGQzX3JnYihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBkM19yZ2IgPyB2b2lkICh0aGlzLnIgPSB+fnIsIHRoaXMuZyA9IH5+ZywgdGhpcy5iID0gfn5iKSA6IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gciBpbnN0YW5jZW9mIGQzX3JnYiA/IG5ldyBkM19yZ2Ioci5yLCByLmcsIHIuYikgOiBkM19yZ2JfcGFyc2UoXCJcIiArIHIsIGQzX3JnYiwgZDNfaHNsX3JnYikgOiBuZXcgZDNfcmdiKHIsIGcsIGIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYk51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZDNfcmdiKHZhbHVlID4+IDE2LCB2YWx1ZSA+PiA4ICYgMjU1LCB2YWx1ZSAmIDI1NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfcmdiU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGQzX3JnYk51bWJlcih2YWx1ZSkgKyBcIlwiO1xuICB9XG4gIHZhciBkM19yZ2JQcm90b3R5cGUgPSBkM19yZ2IucHJvdG90eXBlID0gbmV3IGQzX2NvbG9yKCk7XG4gIGQzX3JnYlByb3RvdHlwZS5icmlnaHRlciA9IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gTWF0aC5wb3coLjcsIGFyZ3VtZW50cy5sZW5ndGggPyBrIDogMSk7XG4gICAgdmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmIsIGkgPSAzMDtcbiAgICBpZiAoIXIgJiYgIWcgJiYgIWIpIHJldHVybiBuZXcgZDNfcmdiKGksIGksIGkpO1xuICAgIGlmIChyICYmIHIgPCBpKSByID0gaTtcbiAgICBpZiAoZyAmJiBnIDwgaSkgZyA9IGk7XG4gICAgaWYgKGIgJiYgYiA8IGkpIGIgPSBpO1xuICAgIHJldHVybiBuZXcgZDNfcmdiKE1hdGgubWluKDI1NSwgciAvIGspLCBNYXRoLm1pbigyNTUsIGcgLyBrKSwgTWF0aC5taW4oMjU1LCBiIC8gaykpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUuZGFya2VyID0gZnVuY3Rpb24oaykge1xuICAgIGsgPSBNYXRoLnBvdyguNywgYXJndW1lbnRzLmxlbmd0aCA/IGsgOiAxKTtcbiAgICByZXR1cm4gbmV3IGQzX3JnYihrICogdGhpcy5yLCBrICogdGhpcy5nLCBrICogdGhpcy5iKTtcbiAgfTtcbiAgZDNfcmdiUHJvdG90eXBlLmhzbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19yZ2JfaHNsKHRoaXMuciwgdGhpcy5nLCB0aGlzLmIpO1xuICB9O1xuICBkM19yZ2JQcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KHRoaXMucikgKyBkM19yZ2JfaGV4KHRoaXMuZykgKyBkM19yZ2JfaGV4KHRoaXMuYik7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3JnYl9oZXgodikge1xuICAgIHJldHVybiB2IDwgMTYgPyBcIjBcIiArIE1hdGgubWF4KDAsIHYpLnRvU3RyaW5nKDE2KSA6IE1hdGgubWluKDI1NSwgdikudG9TdHJpbmcoMTYpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl9wYXJzZShmb3JtYXQsIHJnYiwgaHNsKSB7XG4gICAgdmFyIHIgPSAwLCBnID0gMCwgYiA9IDAsIG0xLCBtMiwgY29sb3I7XG4gICAgbTEgPSAvKFthLXpdKylcXCgoLiopXFwpLy5leGVjKGZvcm1hdCA9IGZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcbiAgICBpZiAobTEpIHtcbiAgICAgIG0yID0gbTFbMl0uc3BsaXQoXCIsXCIpO1xuICAgICAgc3dpdGNoIChtMVsxXSkge1xuICAgICAgIGNhc2UgXCJoc2xcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBoc2wocGFyc2VGbG9hdChtMlswXSksIHBhcnNlRmxvYXQobTJbMV0pIC8gMTAwLCBwYXJzZUZsb2F0KG0yWzJdKSAvIDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgIGNhc2UgXCJyZ2JcIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiByZ2IoZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzBdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzFdKSwgZDNfcmdiX3BhcnNlTnVtYmVyKG0yWzJdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbG9yID0gZDNfcmdiX25hbWVzLmdldChmb3JtYXQpKSB7XG4gICAgICByZXR1cm4gcmdiKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ICE9IG51bGwgJiYgZm9ybWF0LmNoYXJBdCgwKSA9PT0gXCIjXCIgJiYgIWlzTmFOKGNvbG9yID0gcGFyc2VJbnQoZm9ybWF0LnNsaWNlKDEpLCAxNikpKSB7XG4gICAgICBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICByID0gKGNvbG9yICYgMzg0MCkgPj4gNDtcbiAgICAgICAgciA9IHIgPj4gNCB8IHI7XG4gICAgICAgIGcgPSBjb2xvciAmIDI0MDtcbiAgICAgICAgZyA9IGcgPj4gNCB8IGc7XG4gICAgICAgIGIgPSBjb2xvciAmIDE1O1xuICAgICAgICBiID0gYiA8PCA0IHwgYjtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0Lmxlbmd0aCA9PT0gNykge1xuICAgICAgICByID0gKGNvbG9yICYgMTY3MTE2ODApID4+IDE2O1xuICAgICAgICBnID0gKGNvbG9yICYgNjUyODApID4+IDg7XG4gICAgICAgIGIgPSBjb2xvciAmIDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJnYihyLCBnLCBiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfaHNsKHIsIGcsIGIpIHtcbiAgICB2YXIgbWluID0gTWF0aC5taW4ociAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NSksIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBkID0gbWF4IC0gbWluLCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuICAgIGlmIChkKSB7XG4gICAgICBzID0gbCA8IC41ID8gZCAvIChtYXggKyBtaW4pIDogZCAvICgyIC0gbWF4IC0gbWluKTtcbiAgICAgIGlmIChyID09IG1heCkgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBlbHNlIGlmIChnID09IG1heCkgaCA9IChiIC0gcikgLyBkICsgMjsgZWxzZSBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgaCAqPSA2MDtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IE5hTjtcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGQzX2hzbChoLCBzLCBsKTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfbGFiKHIsIGcsIGIpIHtcbiAgICByID0gZDNfcmdiX3h5eihyKTtcbiAgICBnID0gZDNfcmdiX3h5eihnKTtcbiAgICBiID0gZDNfcmdiX3h5eihiKTtcbiAgICB2YXIgeCA9IGQzX3h5el9sYWIoKC40MTI0NTY0ICogciArIC4zNTc1NzYxICogZyArIC4xODA0Mzc1ICogYikgLyBkM19sYWJfWCksIHkgPSBkM194eXpfbGFiKCguMjEyNjcyOSAqIHIgKyAuNzE1MTUyMiAqIGcgKyAuMDcyMTc1ICogYikgLyBkM19sYWJfWSksIHogPSBkM194eXpfbGFiKCguMDE5MzMzOSAqIHIgKyAuMTE5MTkyICogZyArIC45NTAzMDQxICogYikgLyBkM19sYWJfWik7XG4gICAgcmV0dXJuIGQzX2xhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3JnYl94eXoocikge1xuICAgIHJldHVybiAociAvPSAyNTUpIDw9IC4wNDA0NSA/IHIgLyAxMi45MiA6IE1hdGgucG93KChyICsgLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfVxuICBmdW5jdGlvbiBkM19yZ2JfcGFyc2VOdW1iZXIoYykge1xuICAgIHZhciBmID0gcGFyc2VGbG9hdChjKTtcbiAgICByZXR1cm4gYy5jaGFyQXQoYy5sZW5ndGggLSAxKSA9PT0gXCIlXCIgPyBNYXRoLnJvdW5kKGYgKiAyLjU1KSA6IGY7XG4gIH1cbiAgdmFyIGQzX3JnYl9uYW1lcyA9IGQzLm1hcCh7XG4gICAgYWxpY2VibHVlOiAxNTc5MjM4MyxcbiAgICBhbnRpcXVld2hpdGU6IDE2NDQ0Mzc1LFxuICAgIGFxdWE6IDY1NTM1LFxuICAgIGFxdWFtYXJpbmU6IDgzODg1NjQsXG4gICAgYXp1cmU6IDE1Nzk0MTc1LFxuICAgIGJlaWdlOiAxNjExOTI2MCxcbiAgICBiaXNxdWU6IDE2NzcwMjQ0LFxuICAgIGJsYWNrOiAwLFxuICAgIGJsYW5jaGVkYWxtb25kOiAxNjc3MjA0NSxcbiAgICBibHVlOiAyNTUsXG4gICAgYmx1ZXZpb2xldDogOTA1NTIwMixcbiAgICBicm93bjogMTA4MjQyMzQsXG4gICAgYnVybHl3b29kOiAxNDU5NjIzMSxcbiAgICBjYWRldGJsdWU6IDYyNjY1MjgsXG4gICAgY2hhcnRyZXVzZTogODM4ODM1MixcbiAgICBjaG9jb2xhdGU6IDEzNzg5NDcwLFxuICAgIGNvcmFsOiAxNjc0NDI3MixcbiAgICBjb3JuZmxvd2VyYmx1ZTogNjU5MTk4MSxcbiAgICBjb3Juc2lsazogMTY3NzUzODgsXG4gICAgY3JpbXNvbjogMTQ0MjMxMDAsXG4gICAgY3lhbjogNjU1MzUsXG4gICAgZGFya2JsdWU6IDEzOSxcbiAgICBkYXJrY3lhbjogMzU3MjMsXG4gICAgZGFya2dvbGRlbnJvZDogMTIwOTI5MzksXG4gICAgZGFya2dyYXk6IDExMTE5MDE3LFxuICAgIGRhcmtncmVlbjogMjU2MDAsXG4gICAgZGFya2dyZXk6IDExMTE5MDE3LFxuICAgIGRhcmtraGFraTogMTI0MzMyNTksXG4gICAgZGFya21hZ2VudGE6IDkxMDk2NDMsXG4gICAgZGFya29saXZlZ3JlZW46IDU1OTc5OTksXG4gICAgZGFya29yYW5nZTogMTY3NDc1MjAsXG4gICAgZGFya29yY2hpZDogMTAwNDAwMTIsXG4gICAgZGFya3JlZDogOTEwOTUwNCxcbiAgICBkYXJrc2FsbW9uOiAxNTMwODQxMCxcbiAgICBkYXJrc2VhZ3JlZW46IDk0MTk5MTksXG4gICAgZGFya3NsYXRlYmx1ZTogNDczNDM0NyxcbiAgICBkYXJrc2xhdGVncmF5OiAzMTAwNDk1LFxuICAgIGRhcmtzbGF0ZWdyZXk6IDMxMDA0OTUsXG4gICAgZGFya3R1cnF1b2lzZTogNTI5NDUsXG4gICAgZGFya3Zpb2xldDogOTY5OTUzOSxcbiAgICBkZWVwcGluazogMTY3MTY5NDcsXG4gICAgZGVlcHNreWJsdWU6IDQ5MTUxLFxuICAgIGRpbWdyYXk6IDY5MDgyNjUsXG4gICAgZGltZ3JleTogNjkwODI2NSxcbiAgICBkb2RnZXJibHVlOiAyMDAzMTk5LFxuICAgIGZpcmVicmljazogMTE2NzQxNDYsXG4gICAgZmxvcmFsd2hpdGU6IDE2Nzc1OTIwLFxuICAgIGZvcmVzdGdyZWVuOiAyMjYzODQyLFxuICAgIGZ1Y2hzaWE6IDE2NzExOTM1LFxuICAgIGdhaW5zYm9ybzogMTQ0NzQ0NjAsXG4gICAgZ2hvc3R3aGl0ZTogMTYzMTY2NzEsXG4gICAgZ29sZDogMTY3NjY3MjAsXG4gICAgZ29sZGVucm9kOiAxNDMyOTEyMCxcbiAgICBncmF5OiA4NDIxNTA0LFxuICAgIGdyZWVuOiAzMjc2OCxcbiAgICBncmVlbnllbGxvdzogMTE0MDMwNTUsXG4gICAgZ3JleTogODQyMTUwNCxcbiAgICBob25leWRldzogMTU3OTQxNjAsXG4gICAgaG90cGluazogMTY3Mzg3NDAsXG4gICAgaW5kaWFucmVkOiAxMzQ1ODUyNCxcbiAgICBpbmRpZ286IDQ5MTUzMzAsXG4gICAgaXZvcnk6IDE2Nzc3MjAwLFxuICAgIGtoYWtpOiAxNTc4NzY2MCxcbiAgICBsYXZlbmRlcjogMTUxMzI0MTAsXG4gICAgbGF2ZW5kZXJibHVzaDogMTY3NzMzNjUsXG4gICAgbGF3bmdyZWVuOiA4MTkwOTc2LFxuICAgIGxlbW9uY2hpZmZvbjogMTY3NzU4ODUsXG4gICAgbGlnaHRibHVlOiAxMTM5MzI1NCxcbiAgICBsaWdodGNvcmFsOiAxNTc2MTUzNixcbiAgICBsaWdodGN5YW46IDE0NzQ1NTk5LFxuICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAxNjQ0ODIxMCxcbiAgICBsaWdodGdyYXk6IDEzODgyMzIzLFxuICAgIGxpZ2h0Z3JlZW46IDk0OTgyNTYsXG4gICAgbGlnaHRncmV5OiAxMzg4MjMyMyxcbiAgICBsaWdodHBpbms6IDE2NzU4NDY1LFxuICAgIGxpZ2h0c2FsbW9uOiAxNjc1Mjc2MixcbiAgICBsaWdodHNlYWdyZWVuOiAyMTQyODkwLFxuICAgIGxpZ2h0c2t5Ymx1ZTogODkwMDM0NixcbiAgICBsaWdodHNsYXRlZ3JheTogNzgzMzc1MyxcbiAgICBsaWdodHNsYXRlZ3JleTogNzgzMzc1MyxcbiAgICBsaWdodHN0ZWVsYmx1ZTogMTE1ODQ3MzQsXG4gICAgbGlnaHR5ZWxsb3c6IDE2Nzc3MTg0LFxuICAgIGxpbWU6IDY1MjgwLFxuICAgIGxpbWVncmVlbjogMzMyOTMzMCxcbiAgICBsaW5lbjogMTY0NDU2NzAsXG4gICAgbWFnZW50YTogMTY3MTE5MzUsXG4gICAgbWFyb29uOiA4Mzg4NjA4LFxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDY3MzczMjIsXG4gICAgbWVkaXVtYmx1ZTogMjA1LFxuICAgIG1lZGl1bW9yY2hpZDogMTIyMTE2NjcsXG4gICAgbWVkaXVtcHVycGxlOiA5NjYyNjgzLFxuICAgIG1lZGl1bXNlYWdyZWVuOiAzOTc4MDk3LFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogODA4Nzc5MCxcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogNjQxNTQsXG4gICAgbWVkaXVtdHVycXVvaXNlOiA0NzcyMzAwLFxuICAgIG1lZGl1bXZpb2xldHJlZDogMTMwNDcxNzMsXG4gICAgbWlkbmlnaHRibHVlOiAxNjQ0OTEyLFxuICAgIG1pbnRjcmVhbTogMTYxMjE4NTAsXG4gICAgbWlzdHlyb3NlOiAxNjc3MDI3MyxcbiAgICBtb2NjYXNpbjogMTY3NzAyMjksXG4gICAgbmF2YWpvd2hpdGU6IDE2NzY4Njg1LFxuICAgIG5hdnk6IDEyOCxcbiAgICBvbGRsYWNlOiAxNjY0MzU1OCxcbiAgICBvbGl2ZTogODQyMTM3NixcbiAgICBvbGl2ZWRyYWI6IDcwNDg3MzksXG4gICAgb3JhbmdlOiAxNjc1MzkyMCxcbiAgICBvcmFuZ2VyZWQ6IDE2NzI5MzQ0LFxuICAgIG9yY2hpZDogMTQzMTU3MzQsXG4gICAgcGFsZWdvbGRlbnJvZDogMTU2NTcxMzAsXG4gICAgcGFsZWdyZWVuOiAxMDAyNTg4MCxcbiAgICBwYWxldHVycXVvaXNlOiAxMTUyOTk2NixcbiAgICBwYWxldmlvbGV0cmVkOiAxNDM4MTIwMyxcbiAgICBwYXBheWF3aGlwOiAxNjc3MzA3NyxcbiAgICBwZWFjaHB1ZmY6IDE2NzY3NjczLFxuICAgIHBlcnU6IDEzNDY4OTkxLFxuICAgIHBpbms6IDE2NzYxMDM1LFxuICAgIHBsdW06IDE0NTI0NjM3LFxuICAgIHBvd2RlcmJsdWU6IDExNTkxOTEwLFxuICAgIHB1cnBsZTogODM4ODczNixcbiAgICByZWJlY2NhcHVycGxlOiA2Njk3ODgxLFxuICAgIHJlZDogMTY3MTE2ODAsXG4gICAgcm9zeWJyb3duOiAxMjM1NzUxOSxcbiAgICByb3lhbGJsdWU6IDQyODY5NDUsXG4gICAgc2FkZGxlYnJvd246IDkxMjcxODcsXG4gICAgc2FsbW9uOiAxNjQxNjg4MixcbiAgICBzYW5keWJyb3duOiAxNjAzMjg2NCxcbiAgICBzZWFncmVlbjogMzA1MDMyNyxcbiAgICBzZWFzaGVsbDogMTY3NzQ2MzgsXG4gICAgc2llbm5hOiAxMDUwNjc5NyxcbiAgICBzaWx2ZXI6IDEyNjMyMjU2LFxuICAgIHNreWJsdWU6IDg5MDAzMzEsXG4gICAgc2xhdGVibHVlOiA2OTcwMDYxLFxuICAgIHNsYXRlZ3JheTogNzM3Mjk0NCxcbiAgICBzbGF0ZWdyZXk6IDczNzI5NDQsXG4gICAgc25vdzogMTY3NzU5MzAsXG4gICAgc3ByaW5nZ3JlZW46IDY1NDA3LFxuICAgIHN0ZWVsYmx1ZTogNDYyMDk4MCxcbiAgICB0YW46IDEzODA4NzgwLFxuICAgIHRlYWw6IDMyODk2LFxuICAgIHRoaXN0bGU6IDE0MjA0ODg4LFxuICAgIHRvbWF0bzogMTY3MzcwOTUsXG4gICAgdHVycXVvaXNlOiA0MjUxODU2LFxuICAgIHZpb2xldDogMTU2MzEwODYsXG4gICAgd2hlYXQ6IDE2MTEzMzMxLFxuICAgIHdoaXRlOiAxNjc3NzIxNSxcbiAgICB3aGl0ZXNtb2tlOiAxNjExOTI4NSxcbiAgICB5ZWxsb3c6IDE2Nzc2OTYwLFxuICAgIHllbGxvd2dyZWVuOiAxMDE0NTA3NFxuICB9KTtcbiAgZDNfcmdiX25hbWVzLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGQzX3JnYl9uYW1lcy5zZXQoa2V5LCBkM19yZ2JOdW1iZXIodmFsdWUpKTtcbiAgfSk7XG4gIGZ1bmN0aW9uIGQzX2Z1bmN0b3Iodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdiA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbiAgfVxuICBkMy5mdW5jdG9yID0gZDNfZnVuY3RvcjtcbiAgZDMueGhyID0gZDNfeGhyVHlwZShkM19pZGVudGl0eSk7XG4gIGZ1bmN0aW9uIGQzX3hoclR5cGUocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBtaW1lVHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBtaW1lVHlwZSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsYmFjayA9IG1pbWVUeXBlLCBcbiAgICAgIG1pbWVUeXBlID0gbnVsbDtcbiAgICAgIHJldHVybiBkM194aHIodXJsLCBtaW1lVHlwZSwgcmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hocih1cmwsIG1pbWVUeXBlLCByZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0ge30sIGRpc3BhdGNoID0gZDMuZGlzcGF0Y2goXCJiZWZvcmVzZW5kXCIsIFwicHJvZ3Jlc3NcIiwgXCJsb2FkXCIsIFwiZXJyb3JcIiksIGhlYWRlcnMgPSB7fSwgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCByZXNwb25zZVR5cGUgPSBudWxsO1xuICAgIGlmICh0aGlzLlhEb21haW5SZXF1ZXN0ICYmICEoXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiByZXF1ZXN0KSAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSByZXF1ZXN0ID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgXCJvbmxvYWRcIiBpbiByZXF1ZXN0ID8gcmVxdWVzdC5vbmxvYWQgPSByZXF1ZXN0Lm9uZXJyb3IgPSByZXNwb25kIDogcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlcXVlc3QucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZCgpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVzcG9uZCgpIHtcbiAgICAgIHZhciBzdGF0dXMgPSByZXF1ZXN0LnN0YXR1cywgcmVzdWx0O1xuICAgICAgaWYgKCFzdGF0dXMgJiYgZDNfeGhySGFzUmVzcG9uc2UocmVxdWVzdCkgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoLmxvYWQuY2FsbCh4aHIsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaC5lcnJvci5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgbyA9IGQzLmV2ZW50O1xuICAgICAgZDMuZXZlbnQgPSBldmVudDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpc3BhdGNoLnByb2dyZXNzLmNhbGwoeGhyLCByZXF1ZXN0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzLmV2ZW50ID0gbztcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5oZWFkZXIgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgbmFtZSA9IChuYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIGhlYWRlcnNbbmFtZV07XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIGhlYWRlcnNbbmFtZV07IGVsc2UgaGVhZGVyc1tuYW1lXSA9IHZhbHVlICsgXCJcIjtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfTtcbiAgICB4aHIubWltZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWltZVR5cGU7XG4gICAgICBtaW1lVHlwZSA9IHZhbHVlID09IG51bGwgPyBudWxsIDogdmFsdWUgKyBcIlwiO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmVzcG9uc2VUeXBlO1xuICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgeGhyLnJlc3BvbnNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3BvbnNlID0gdmFsdWU7XG4gICAgICByZXR1cm4geGhyO1xuICAgIH07XG4gICAgWyBcImdldFwiLCBcInBvc3RcIiBdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICB4aHJbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4geGhyLnNlbmQuYXBwbHkoeGhyLCBbIG1ldGhvZCBdLmNvbmNhdChkM19hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHhoci5zZW5kID0gZnVuY3Rpb24obWV0aG9kLCBkYXRhLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgICAgIHJlcXVlc3Qub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhKFwiYWNjZXB0XCIgaW4gaGVhZGVycykpIGhlYWRlcnNbXCJhY2NlcHRcIl0gPSBtaW1lVHlwZSArIFwiLCovKlwiO1xuICAgICAgaWYgKHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcikgZm9yICh2YXIgbmFtZSBpbiBoZWFkZXJzKSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIobmFtZSwgaGVhZGVyc1tuYW1lXSk7XG4gICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XG4gICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHhoci5vbihcImVycm9yXCIsIGNhbGxiYWNrKS5vbihcImxvYWRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2guYmVmb3Jlc2VuZC5jYWxsKHhociwgcmVxdWVzdCk7XG4gICAgICByZXF1ZXN0LnNlbmQoZGF0YSA9PSBudWxsID8gbnVsbCA6IGRhdGEpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgcmV0dXJuIHhocjtcbiAgICB9O1xuICAgIGQzLnJlYmluZCh4aHIsIGRpc3BhdGNoLCBcIm9uXCIpO1xuICAgIHJldHVybiBjYWxsYmFjayA9PSBudWxsID8geGhyIDogeGhyLmdldChkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spKTtcbiAgfVxuICBmdW5jdGlvbiBkM194aHJfZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gY2FsbGJhY2subGVuZ3RoID09PSAxID8gZnVuY3Rpb24oZXJyb3IsIHJlcXVlc3QpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyByZXF1ZXN0IDogbnVsbCk7XG4gICAgfSA6IGNhbGxiYWNrO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3hockhhc1Jlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICB2YXIgdHlwZSA9IHJlcXVlc3QucmVzcG9uc2VUeXBlO1xuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiID8gcmVxdWVzdC5yZXNwb25zZSA6IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9XG4gIGQzLmRzdiA9IGZ1bmN0aW9uKGRlbGltaXRlciwgbWltZVR5cGUpIHtcbiAgICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKCdbXCInICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLCBkZWxpbWl0ZXJDb2RlID0gZGVsaW1pdGVyLmNoYXJDb2RlQXQoMCk7XG4gICAgZnVuY3Rpb24gZHN2KHVybCwgcm93LCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSBjYWxsYmFjayA9IHJvdywgcm93ID0gbnVsbDtcbiAgICAgIHZhciB4aHIgPSBkM194aHIodXJsLCBtaW1lVHlwZSwgcm93ID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2Uocm93KSwgY2FsbGJhY2spO1xuICAgICAgeGhyLnJvdyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB4aHIucmVzcG9uc2UoKHJvdyA9IF8pID09IG51bGwgPyByZXNwb25zZSA6IHR5cGVkUmVzcG9uc2UoXykpIDogcm93O1xuICAgICAgfTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc3BvbnNlKHJlcXVlc3QpIHtcbiAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0eXBlZFJlc3BvbnNlKGYpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBkc3YucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQsIGYpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZHN2LnBhcnNlID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIG87XG4gICAgICByZXR1cm4gZHN2LnBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgICAgaWYgKG8pIHJldHVybiBvKHJvdywgaSAtIDEpO1xuICAgICAgICB2YXIgYSA9IG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgcm93Lm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgXCI6IGRbXCIgKyBpICsgXCJdXCI7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCIpO1xuICAgICAgICBvID0gZiA/IGZ1bmN0aW9uKHJvdywgaSkge1xuICAgICAgICAgIHJldHVybiBmKGEocm93KSwgaSk7XG4gICAgICAgIH0gOiBhO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBkc3YucGFyc2VSb3dzID0gZnVuY3Rpb24odGV4dCwgZikge1xuICAgICAgdmFyIEVPTCA9IHt9LCBFT0YgPSB7fSwgcm93cyA9IFtdLCBOID0gdGV4dC5sZW5ndGgsIEkgPSAwLCBuID0gMCwgdCwgZW9sO1xuICAgICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7XG4gICAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuICAgICAgICB2YXIgaiA9IEk7XG4gICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IDM0KSB7XG4gICAgICAgICAgdmFyIGkgPSBqO1xuICAgICAgICAgIHdoaWxlIChpKysgPCBOKSB7XG4gICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkpID09PSAzNCkge1xuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xuICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIEkgPSBpICsgMjtcbiAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgaWYgKGMgPT09IDEzKSB7XG4gICAgICAgICAgICBlb2wgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAxMCkge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkpLnJlcGxhY2UoL1wiXCIvZywgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgICAgdmFyIGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSwgayA9IDE7XG4gICAgICAgICAgaWYgKGMgPT09IDEwKSBlb2wgPSB0cnVlOyBlbHNlIGlmIChjID09PSAxMykge1xuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoSSkgPT09IDEwKSArK0ksICsraztcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIEkgLSBrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgodCA9IHRva2VuKCkpICE9PSBFT0YpIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcbiAgICAgICAgICBhLnB1c2godCk7XG4gICAgICAgICAgdCA9IHRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGYgJiYgKGEgPSBmKGEsIG4rKykpID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICByb3dzLnB1c2goYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm93cztcbiAgICB9O1xuICAgIGRzdi5mb3JtYXQgPSBmdW5jdGlvbihyb3dzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dzWzBdKSkgcmV0dXJuIGRzdi5mb3JtYXRSb3dzKHJvd3MpO1xuICAgICAgdmFyIGZpZWxkU2V0ID0gbmV3IGQzX1NldCgpLCBmaWVsZHMgPSBbXTtcbiAgICAgIHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgZm9yICh2YXIgZmllbGQgaW4gcm93KSB7XG4gICAgICAgICAgaWYgKCFmaWVsZFNldC5oYXMoZmllbGQpKSB7XG4gICAgICAgICAgICBmaWVsZHMucHVzaChmaWVsZFNldC5hZGQoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFsgZmllbGRzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpIF0uY29uY2F0KHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICByZXR1cm4gZmllbGRzLm1hcChmdW5jdGlvbihmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRWYWx1ZShyb3dbZmllbGRdKTtcbiAgICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBkc3YuZm9ybWF0Um93cyA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBmb3JtYXRSb3cocm93KSB7XG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh0ZXh0KSB7XG4gICAgICByZXR1cm4gcmVGb3JtYXQudGVzdCh0ZXh0KSA/ICdcIicgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgJ1wiXCInKSArICdcIicgOiB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZHN2O1xuICB9O1xuICBkMy5jc3YgPSBkMy5kc3YoXCIsXCIsIFwidGV4dC9jc3ZcIik7XG4gIGQzLnRzdiA9IGQzLmRzdihcIlx0XCIsIFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiKTtcbiAgdmFyIGQzX3RpbWVyX3F1ZXVlSGVhZCwgZDNfdGltZXJfcXVldWVUYWlsLCBkM190aW1lcl9pbnRlcnZhbCwgZDNfdGltZXJfdGltZW91dCwgZDNfdGltZXJfZnJhbWUgPSB0aGlzW2QzX3ZlbmRvclN5bWJvbCh0aGlzLCBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiKV0gfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxNyk7XG4gIH07XG4gIGQzLnRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aGVuKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChuIDwgMikgZGVsYXkgPSAwO1xuICAgIGlmIChuIDwgMykgdGhlbiA9IERhdGUubm93KCk7XG4gICAgdmFyIHRpbWUgPSB0aGVuICsgZGVsYXksIHRpbWVyID0ge1xuICAgICAgYzogY2FsbGJhY2ssXG4gICAgICB0OiB0aW1lLFxuICAgICAgbjogbnVsbFxuICAgIH07XG4gICAgaWYgKGQzX3RpbWVyX3F1ZXVlVGFpbCkgZDNfdGltZXJfcXVldWVUYWlsLm4gPSB0aW1lcjsgZWxzZSBkM190aW1lcl9xdWV1ZUhlYWQgPSB0aW1lcjtcbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0aW1lcjtcbiAgICBpZiAoIWQzX3RpbWVyX2ludGVydmFsKSB7XG4gICAgICBkM190aW1lcl90aW1lb3V0ID0gY2xlYXJUaW1lb3V0KGQzX3RpbWVyX3RpbWVvdXQpO1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcjtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lcl9zdGVwKCkge1xuICAgIHZhciBub3cgPSBkM190aW1lcl9tYXJrKCksIGRlbGF5ID0gZDNfdGltZXJfc3dlZXAoKSAtIG5vdztcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xuICAgICAgaWYgKGlzRmluaXRlKGRlbGF5KSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoZDNfdGltZXJfdGltZW91dCk7XG4gICAgICAgIGQzX3RpbWVyX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGQzX3RpbWVyX3N0ZXAsIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGQzX3RpbWVyX2ludGVydmFsID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfdGltZXJfaW50ZXJ2YWwgPSAxO1xuICAgICAgZDNfdGltZXJfZnJhbWUoZDNfdGltZXJfc3RlcCk7XG4gICAgfVxuICB9XG4gIGQzLnRpbWVyLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgZDNfdGltZXJfbWFyaygpO1xuICAgIGQzX3RpbWVyX3N3ZWVwKCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX21hcmsoKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCksIHRpbWVyID0gZDNfdGltZXJfcXVldWVIZWFkO1xuICAgIHdoaWxlICh0aW1lcikge1xuICAgICAgaWYgKG5vdyA+PSB0aW1lci50ICYmIHRpbWVyLmMobm93IC0gdGltZXIudCkpIHRpbWVyLmMgPSBudWxsO1xuICAgICAgdGltZXIgPSB0aW1lci5uO1xuICAgIH1cbiAgICByZXR1cm4gbm93O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVyX3N3ZWVwKCkge1xuICAgIHZhciB0MCwgdDEgPSBkM190aW1lcl9xdWV1ZUhlYWQsIHRpbWUgPSBJbmZpbml0eTtcbiAgICB3aGlsZSAodDEpIHtcbiAgICAgIGlmICh0MS5jKSB7XG4gICAgICAgIGlmICh0MS50IDwgdGltZSkgdGltZSA9IHQxLnQ7XG4gICAgICAgIHQxID0gKHQwID0gdDEpLm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0MSA9IHQwID8gdDAubiA9IHQxLm4gOiBkM190aW1lcl9xdWV1ZUhlYWQgPSB0MS5uO1xuICAgICAgfVxuICAgIH1cbiAgICBkM190aW1lcl9xdWV1ZVRhaWwgPSB0MDtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICBmdW5jdGlvbiBkM19mb3JtYXRfcHJlY2lzaW9uKHgsIHApIHtcbiAgICByZXR1cm4gcCAtICh4ID8gTWF0aC5jZWlsKE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwKSA6IDEpO1xuICB9XG4gIGQzLnJvdW5kID0gZnVuY3Rpb24oeCwgbikge1xuICAgIHJldHVybiBuID8gTWF0aC5yb3VuZCh4ICogKG4gPSBNYXRoLnBvdygxMCwgbikpKSAvIG4gOiBNYXRoLnJvdW5kKHgpO1xuICB9O1xuICB2YXIgZDNfZm9ybWF0UHJlZml4ZXMgPSBbIFwieVwiLCBcInpcIiwgXCJhXCIsIFwiZlwiLCBcInBcIiwgXCJuXCIsIFwiwrVcIiwgXCJtXCIsIFwiXCIsIFwia1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiLCBcIlBcIiwgXCJFXCIsIFwiWlwiLCBcIllcIiBdLm1hcChkM19mb3JtYXRQcmVmaXgpO1xuICBkMy5mb3JtYXRQcmVmaXggPSBmdW5jdGlvbih2YWx1ZSwgcHJlY2lzaW9uKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh2YWx1ZSA9ICt2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgKj0gLTE7XG4gICAgICBpZiAocHJlY2lzaW9uKSB2YWx1ZSA9IGQzLnJvdW5kKHZhbHVlLCBkM19mb3JtYXRfcHJlY2lzaW9uKHZhbHVlLCBwcmVjaXNpb24pKTtcbiAgICAgIGkgPSAxICsgTWF0aC5mbG9vcigxZS0xMiArIE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4xMCk7XG4gICAgICBpID0gTWF0aC5tYXgoLTI0LCBNYXRoLm1pbigyNCwgTWF0aC5mbG9vcigoaSAtIDEpIC8gMykgKiAzKSk7XG4gICAgfVxuICAgIHJldHVybiBkM19mb3JtYXRQcmVmaXhlc1s4ICsgaSAvIDNdO1xuICB9O1xuICBmdW5jdGlvbiBkM19mb3JtYXRQcmVmaXgoZCwgaSkge1xuICAgIHZhciBrID0gTWF0aC5wb3coMTAsIGFicyg4IC0gaSkgKiAzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGU6IGkgPiA4ID8gZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAvIGs7XG4gICAgICB9IDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZCAqIGs7XG4gICAgICB9LFxuICAgICAgc3ltYm9sOiBkXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsLCBsb2NhbGVfdGhvdXNhbmRzID0gbG9jYWxlLnRob3VzYW5kcywgbG9jYWxlX2dyb3VwaW5nID0gbG9jYWxlLmdyb3VwaW5nLCBsb2NhbGVfY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksIGZvcm1hdEdyb3VwID0gbG9jYWxlX2dyb3VwaW5nICYmIGxvY2FsZV90aG91c2FuZHMgPyBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLCB0ID0gW10sIGogPSAwLCBnID0gbG9jYWxlX2dyb3VwaW5nWzBdLCBsZW5ndGggPSAwO1xuICAgICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgICBnID0gbG9jYWxlX2dyb3VwaW5nW2ogPSAoaiArIDEpICUgbG9jYWxlX2dyb3VwaW5nLmxlbmd0aF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbihsb2NhbGVfdGhvdXNhbmRzKTtcbiAgICB9IDogZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIG1hdGNoID0gZDNfZm9ybWF0X3JlLmV4ZWMoc3BlY2lmaWVyKSwgZmlsbCA9IG1hdGNoWzFdIHx8IFwiIFwiLCBhbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiLCBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsIHN5bWJvbCA9IG1hdGNoWzRdIHx8IFwiXCIsIHpmaWxsID0gbWF0Y2hbNV0sIHdpZHRoID0gK21hdGNoWzZdLCBjb21tYSA9IG1hdGNoWzddLCBwcmVjaXNpb24gPSBtYXRjaFs4XSwgdHlwZSA9IG1hdGNoWzldLCBzY2FsZSA9IDEsIHByZWZpeCA9IFwiXCIsIHN1ZmZpeCA9IFwiXCIsIGludGVnZXIgPSBmYWxzZSwgZXhwb25lbnQgPSB0cnVlO1xuICAgICAgaWYgKHByZWNpc2lvbikgcHJlY2lzaW9uID0gK3ByZWNpc2lvbi5zdWJzdHJpbmcoMSk7XG4gICAgICBpZiAoemZpbGwgfHwgZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSB7XG4gICAgICAgIHpmaWxsID0gZmlsbCA9IFwiMFwiO1xuICAgICAgICBhbGlnbiA9IFwiPVwiO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgY29tbWEgPSB0cnVlO1xuICAgICAgICB0eXBlID0gXCJnXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJmXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcInBcIjpcbiAgICAgICAgc2NhbGUgPSAxMDA7XG4gICAgICAgIHN1ZmZpeCA9IFwiJVwiO1xuICAgICAgICB0eXBlID0gXCJyXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgY2FzZSBcImJcIjpcbiAgICAgICBjYXNlIFwib1wiOlxuICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgaWYgKHN5bWJvbCA9PT0gXCIjXCIpIHByZWZpeCA9IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgZXhwb25lbnQgPSBmYWxzZTtcblxuICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIGludGVnZXIgPSB0cnVlO1xuICAgICAgICBwcmVjaXNpb24gPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHNjYWxlID0gLTE7XG4gICAgICAgIHR5cGUgPSBcInJcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc3ltYm9sID09PSBcIiRcIikgcHJlZml4ID0gbG9jYWxlX2N1cnJlbmN5WzBdLCBzdWZmaXggPSBsb2NhbGVfY3VycmVuY3lbMV07XG4gICAgICBpZiAodHlwZSA9PSBcInJcIiAmJiAhcHJlY2lzaW9uKSB0eXBlID0gXCJnXCI7XG4gICAgICBpZiAocHJlY2lzaW9uICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJnXCIpIHByZWNpc2lvbiA9IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKTsgZWxzZSBpZiAodHlwZSA9PSBcImVcIiB8fCB0eXBlID09IFwiZlwiKSBwcmVjaXNpb24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG4gICAgICB9XG4gICAgICB0eXBlID0gZDNfZm9ybWF0X3R5cGVzLmdldCh0eXBlKSB8fCBkM19mb3JtYXRfdHlwZURlZmF1bHQ7XG4gICAgICB2YXIgemNvbW1hID0gemZpbGwgJiYgY29tbWE7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGZ1bGxTdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIGlmIChpbnRlZ2VyICYmIHZhbHVlICUgMSkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHZhciBuZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gKHZhbHVlID0gLXZhbHVlLCBcIi1cIikgOiBzaWduID09PSBcIi1cIiA/IFwiXCIgOiBzaWduO1xuICAgICAgICBpZiAoc2NhbGUgPCAwKSB7XG4gICAgICAgICAgdmFyIHVuaXQgPSBkMy5mb3JtYXRQcmVmaXgodmFsdWUsIHByZWNpc2lvbik7XG4gICAgICAgICAgdmFsdWUgPSB1bml0LnNjYWxlKHZhbHVlKTtcbiAgICAgICAgICBmdWxsU3VmZml4ID0gdW5pdC5zeW1ib2wgKyBzdWZmaXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKj0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB0eXBlKHZhbHVlLCBwcmVjaXNpb24pO1xuICAgICAgICB2YXIgaSA9IHZhbHVlLmxhc3RJbmRleE9mKFwiLlwiKSwgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgdmFyIGogPSBleHBvbmVudCA/IHZhbHVlLmxhc3RJbmRleE9mKFwiZVwiKSA6IC0xO1xuICAgICAgICAgIGlmIChqIDwgMCkgYmVmb3JlID0gdmFsdWUsIGFmdGVyID0gXCJcIjsgZWxzZSBiZWZvcmUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgaiksIGFmdGVyID0gdmFsdWUuc3Vic3RyaW5nKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IHZhbHVlLnN1YnN0cmluZygwLCBpKTtcbiAgICAgICAgICBhZnRlciA9IGxvY2FsZV9kZWNpbWFsICsgdmFsdWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXpmaWxsICYmIGNvbW1hKSBiZWZvcmUgPSBmb3JtYXRHcm91cChiZWZvcmUsIEluZmluaXR5KTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHByZWZpeC5sZW5ndGggKyBiZWZvcmUubGVuZ3RoICsgYWZ0ZXIubGVuZ3RoICsgKHpjb21tYSA/IDAgOiBuZWdhdGl2ZS5sZW5ndGgpLCBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkobGVuZ3RoID0gd2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcbiAgICAgICAgaWYgKHpjb21tYSkgYmVmb3JlID0gZm9ybWF0R3JvdXAocGFkZGluZyArIGJlZm9yZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIGFmdGVyLmxlbmd0aCA6IEluZmluaXR5KTtcbiAgICAgICAgbmVnYXRpdmUgKz0gcHJlZml4O1xuICAgICAgICB2YWx1ZSA9IGJlZm9yZSArIGFmdGVyO1xuICAgICAgICByZXR1cm4gKGFsaWduID09PSBcIjxcIiA/IG5lZ2F0aXZlICsgdmFsdWUgKyBwYWRkaW5nIDogYWxpZ24gPT09IFwiPlwiID8gcGFkZGluZyArIG5lZ2F0aXZlICsgdmFsdWUgOiBhbGlnbiA9PT0gXCJeXCIgPyBwYWRkaW5nLnN1YnN0cmluZygwLCBsZW5ndGggPj49IDEpICsgbmVnYXRpdmUgKyB2YWx1ZSArIHBhZGRpbmcuc3Vic3RyaW5nKGxlbmd0aCkgOiBuZWdhdGl2ZSArICh6Y29tbWEgPyB2YWx1ZSA6IHBhZGRpbmcgKyB2YWx1ZSkpICsgZnVsbFN1ZmZpeDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZm9ybWF0X3JlID0gLyg/OihbXntdKT8oWzw+PV5dKSk/KFsrXFwtIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuLT9cXGQrKT8oW2EteiVdKT8vaTtcbiAgdmFyIGQzX2Zvcm1hdF90eXBlcyA9IGQzLm1hcCh7XG4gICAgYjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMik7XG4gICAgfSxcbiAgICBjOiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICB9LFxuICAgIG86IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4LnRvU3RyaW5nKDgpO1xuICAgIH0sXG4gICAgeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpO1xuICAgIH0sXG4gICAgWDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHgudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcbiAgICBnOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b1ByZWNpc2lvbihwKTtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uKHgsIHApIHtcbiAgICAgIHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbih4LCBwKSB7XG4gICAgICByZXR1cm4geC50b0ZpeGVkKHApO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24oeCwgcCkge1xuICAgICAgcmV0dXJuICh4ID0gZDMucm91bmQoeCwgZDNfZm9ybWF0X3ByZWNpc2lvbih4LCBwKSkpLnRvRml4ZWQoTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIGQzX2Zvcm1hdF9wcmVjaXNpb24oeCAqICgxICsgMWUtMTUpLCBwKSkpKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBkM19mb3JtYXRfdHlwZURlZmF1bHQoeCkge1xuICAgIHJldHVybiB4ICsgXCJcIjtcbiAgfVxuICB2YXIgZDNfdGltZSA9IGQzLnRpbWUgPSB7fSwgZDNfZGF0ZSA9IERhdGU7XG4gIGZ1bmN0aW9uIGQzX2RhdGVfdXRjKCkge1xuICAgIHRoaXMuXyA9IG5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gRGF0ZS5VVEMuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGFyZ3VtZW50c1swXSk7XG4gIH1cbiAgZDNfZGF0ZV91dGMucHJvdG90eXBlID0ge1xuICAgIGdldERhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXRlKCk7XG4gICAgfSxcbiAgICBnZXREYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENEYXkoKTtcbiAgICB9LFxuICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKTtcbiAgICB9LFxuICAgIGdldEhvdXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDSG91cnMoKTtcbiAgICB9LFxuICAgIGdldE1pbGxpc2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH0sXG4gICAgZ2V0TWludXRlczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKTtcbiAgICB9LFxuICAgIGdldE1vbnRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VVRDTW9udGgoKTtcbiAgICB9LFxuICAgIGdldFNlY29uZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuXy5nZXRVVENTZWNvbmRzKCk7XG4gICAgfSxcbiAgICBnZXRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8uZ2V0VGltZSgpO1xuICAgIH0sXG4gICAgZ2V0VGltZXpvbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICB2YWx1ZU9mOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl8udmFsdWVPZigpO1xuICAgIH0sXG4gICAgc2V0RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldERheTogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENEYXkuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0RnVsbFllYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0SG91cnM6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TWlsbGlzZWNvbmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzZXRNaW51dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX3RpbWVfcHJvdG90eXBlLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0TW9udGg6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgc2V0U2Vjb25kczogZnVuY3Rpb24oKSB7XG4gICAgICBkM190aW1lX3Byb3RvdHlwZS5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNldFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfdGltZV9wcm90b3R5cGUuc2V0VGltZS5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xuICB2YXIgZDNfdGltZV9wcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9pbnRlcnZhbChsb2NhbCwgc3RlcCwgbnVtYmVyKSB7XG4gICAgZnVuY3Rpb24gcm91bmQoZGF0ZSkge1xuICAgICAgdmFyIGQwID0gbG9jYWwoZGF0ZSksIGQxID0gb2Zmc2V0KGQwLCAxKTtcbiAgICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjZWlsKGRhdGUpIHtcbiAgICAgIHN0ZXAoZGF0ZSA9IGxvY2FsKG5ldyBkM19kYXRlKGRhdGUgLSAxKSksIDEpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9mZnNldChkYXRlLCBrKSB7XG4gICAgICBzdGVwKGRhdGUgPSBuZXcgZDNfZGF0ZSgrZGF0ZSksIGspO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlKHQwLCB0MSwgZHQpIHtcbiAgICAgIHZhciB0aW1lID0gY2VpbCh0MCksIHRpbWVzID0gW107XG4gICAgICBpZiAoZHQgPiAxKSB7XG4gICAgICAgIHdoaWxlICh0aW1lIDwgdDEpIHtcbiAgICAgICAgICBpZiAoIShudW1iZXIodGltZSkgJSBkdCkpIHRpbWVzLnB1c2gobmV3IERhdGUoK3RpbWUpKTtcbiAgICAgICAgICBzdGVwKHRpbWUsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAodGltZSA8IHQxKSB0aW1lcy5wdXNoKG5ldyBEYXRlKCt0aW1lKSksIHN0ZXAodGltZSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGltZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlX3V0Yyh0MCwgdDEsIGR0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkM19kYXRlID0gZDNfZGF0ZV91dGM7XG4gICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZV91dGMoKTtcbiAgICAgICAgdXRjLl8gPSB0MDtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHV0YywgdDEsIGR0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGQzX2RhdGUgPSBEYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbC5mbG9vciA9IGxvY2FsO1xuICAgIGxvY2FsLnJvdW5kID0gcm91bmQ7XG4gICAgbG9jYWwuY2VpbCA9IGNlaWw7XG4gICAgbG9jYWwub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIGxvY2FsLnJhbmdlID0gcmFuZ2U7XG4gICAgdmFyIHV0YyA9IGxvY2FsLnV0YyA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKGxvY2FsKTtcbiAgICB1dGMuZmxvb3IgPSB1dGM7XG4gICAgdXRjLnJvdW5kID0gZDNfdGltZV9pbnRlcnZhbF91dGMocm91bmQpO1xuICAgIHV0Yy5jZWlsID0gZDNfdGltZV9pbnRlcnZhbF91dGMoY2VpbCk7XG4gICAgdXRjLm9mZnNldCA9IGQzX3RpbWVfaW50ZXJ2YWxfdXRjKG9mZnNldCk7XG4gICAgdXRjLnJhbmdlID0gcmFuZ2VfdXRjO1xuICAgIHJldHVybiBsb2NhbDtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2ludGVydmFsX3V0YyhtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICB2YXIgdXRjID0gbmV3IGQzX2RhdGVfdXRjKCk7XG4gICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgcmV0dXJuIG1ldGhvZCh1dGMsIGspLl87XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzX3RpbWUueWVhciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUgPSBkM190aW1lLmRheShkYXRlKTtcbiAgICBkYXRlLnNldE1vbnRoKDAsIDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9KTtcbiAgZDNfdGltZS55ZWFycyA9IGQzX3RpbWUueWVhci5yYW5nZTtcbiAgZDNfdGltZS55ZWFycy51dGMgPSBkM190aW1lLnllYXIudXRjLnJhbmdlO1xuICBkM190aW1lLmRheSA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciBkYXkgPSBuZXcgZDNfZGF0ZSgyZTMsIDApO1xuICAgIGRheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgIHJldHVybiBkYXk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIG9mZnNldCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCkgLSAxO1xuICB9KTtcbiAgZDNfdGltZS5kYXlzID0gZDNfdGltZS5kYXkucmFuZ2U7XG4gIGQzX3RpbWUuZGF5cy51dGMgPSBkM190aW1lLmRheS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuZGF5T2ZZZWFyID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB5ZWFyID0gZDNfdGltZS55ZWFyKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKChkYXRlIC0geWVhciAtIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSB5ZWFyLmdldFRpbWV6b25lT2Zmc2V0KCkpICogNmU0KSAvIDg2NGU1KTtcbiAgfTtcbiAgWyBcInN1bmRheVwiLCBcIm1vbmRheVwiLCBcInR1ZXNkYXlcIiwgXCJ3ZWRuZXNkYXlcIiwgXCJ0aHVyc2RheVwiLCBcImZyaWRheVwiLCBcInNhdHVyZGF5XCIgXS5mb3JFYWNoKGZ1bmN0aW9uKGRheSwgaSkge1xuICAgIGkgPSA3IC0gaTtcbiAgICB2YXIgaW50ZXJ2YWwgPSBkM190aW1lW2RheV0gPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIChkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSkpLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSAoZGF0ZS5nZXREYXkoKSArIGkpICUgNyk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIE1hdGguZmxvb3Iob2Zmc2V0KSAqIDcpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpIC0gKGRheSAhPT0gaSk7XG4gICAgfSk7XG4gICAgZDNfdGltZVtkYXkgKyBcInNcIl0gPSBpbnRlcnZhbC5yYW5nZTtcbiAgICBkM190aW1lW2RheSArIFwic1wiXS51dGMgPSBpbnRlcnZhbC51dGMucmFuZ2U7XG4gICAgZDNfdGltZVtkYXkgKyBcIk9mWWVhclwiXSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBkYXkgPSBkM190aW1lLnllYXIoZGF0ZSkuZ2V0RGF5KCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoZDNfdGltZS5kYXlPZlllYXIoZGF0ZSkgKyAoZGF5ICsgaSkgJSA3KSAvIDcpO1xuICAgIH07XG4gIH0pO1xuICBkM190aW1lLndlZWsgPSBkM190aW1lLnN1bmRheTtcbiAgZDNfdGltZS53ZWVrcyA9IGQzX3RpbWUuc3VuZGF5LnJhbmdlO1xuICBkM190aW1lLndlZWtzLnV0YyA9IGQzX3RpbWUuc3VuZGF5LnV0Yy5yYW5nZTtcbiAgZDNfdGltZS53ZWVrT2ZZZWFyID0gZDNfdGltZS5zdW5kYXlPZlllYXI7XG4gIGZ1bmN0aW9uIGQzX2xvY2FsZV90aW1lRm9ybWF0KGxvY2FsZSkge1xuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsIGxvY2FsZV9kYXRlID0gbG9jYWxlLmRhdGUsIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsIGxvY2FsZV9kYXlzID0gbG9jYWxlLmRheXMsIGxvY2FsZV9zaG9ydERheXMgPSBsb2NhbGUuc2hvcnREYXlzLCBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocywgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKSB7XG4gICAgICB2YXIgbiA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHZhciBzdHJpbmcgPSBbXSwgaSA9IC0xLCBqID0gMCwgYywgcCwgZjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICAgIHN0cmluZy5wdXNoKHRlbXBsYXRlLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICAgIGlmICgocCA9IGQzX3RpbWVfZm9ybWF0UGFkc1tjID0gdGVtcGxhdGUuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gdGVtcGxhdGUuY2hhckF0KCsraSk7XG4gICAgICAgICAgICBpZiAoZiA9IGQzX3RpbWVfZm9ybWF0c1tjXSkgYyA9IGYoZGF0ZSwgcCA9PSBudWxsID8gYyA9PT0gXCJlXCIgPyBcIiBcIiA6IFwiMFwiIDogcCk7XG4gICAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nLnB1c2godGVtcGxhdGUuc2xpY2UoaiwgaSkpO1xuICAgICAgICByZXR1cm4gc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB9XG4gICAgICBmb3JtYXQucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgdmFyIGQgPSB7XG4gICAgICAgICAgeTogMTkwMCxcbiAgICAgICAgICBtOiAwLFxuICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgSDogMCxcbiAgICAgICAgICBNOiAwLFxuICAgICAgICAgIFM6IDAsXG4gICAgICAgICAgTDogMCxcbiAgICAgICAgICBaOiBudWxsXG4gICAgICAgIH0sIGkgPSBkM190aW1lX3BhcnNlKGQsIHRlbXBsYXRlLCBzdHJpbmcsIDApO1xuICAgICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG4gICAgICAgIHZhciBsb2NhbFogPSBkLlogIT0gbnVsbCAmJiBkM19kYXRlICE9PSBkM19kYXRlX3V0YywgZGF0ZSA9IG5ldyAobG9jYWxaID8gZDNfZGF0ZV91dGMgOiBkM19kYXRlKSgpO1xuICAgICAgICBpZiAoXCJqXCIgaW4gZCkgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIGQuaik7IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkLnksIDAsIDEpO1xuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55LCAwLCBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNyk7XG4gICAgICAgIH0gZWxzZSBkYXRlLnNldEZ1bGxZZWFyKGQueSwgZC5tLCBkLmQpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKGQuSCArIChkLlogLyAxMDAgfCAwKSwgZC5NICsgZC5aICUgMTAwLCBkLlMsIGQuTCk7XG4gICAgICAgIHJldHVybiBsb2NhbFogPyBkYXRlLl8gOiBkYXRlO1xuICAgICAgfTtcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZShkYXRlLCB0ZW1wbGF0ZSwgc3RyaW5nLCBqKSB7XG4gICAgICB2YXIgYywgcCwgdCwgaSA9IDAsIG4gPSB0ZW1wbGF0ZS5sZW5ndGgsIG0gPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgICAgYyA9IHRlbXBsYXRlLmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgICAgdCA9IHRlbXBsYXRlLmNoYXJBdChpKyspO1xuICAgICAgICAgIHAgPSBkM190aW1lX3BhcnNlcnNbdCBpbiBkM190aW1lX2Zvcm1hdFBhZHMgPyB0ZW1wbGF0ZS5jaGFyQXQoaSsrKSA6IHRdO1xuICAgICAgICAgIGlmICghcCB8fCAoaiA9IHAoZGF0ZSwgc3RyaW5nLCBqKSkgPCAwKSByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgZDNfdGltZV9mb3JtYXQudXRjID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICAgIHZhciBsb2NhbCA9IGQzX3RpbWVfZm9ybWF0KHRlbXBsYXRlKTtcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdChkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciB1dGMgPSBuZXcgZDNfZGF0ZSgpO1xuICAgICAgICAgIHV0Yy5fID0gZGF0ZTtcbiAgICAgICAgICByZXR1cm4gbG9jYWwodXRjKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBkM19kYXRlID0gRGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9ybWF0LnBhcnNlID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IGQzX2RhdGVfdXRjO1xuICAgICAgICAgIHZhciBkYXRlID0gbG9jYWwucGFyc2Uoc3RyaW5nKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLl87XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgZDNfZGF0ZSA9IERhdGU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmb3JtYXQudG9TdHJpbmcgPSBsb2NhbC50b1N0cmluZztcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICBkM190aW1lX2Zvcm1hdC5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0LnV0Yy5tdWx0aSA9IGQzX3RpbWVfZm9ybWF0TXVsdGk7XG4gICAgdmFyIGQzX3RpbWVfcGVyaW9kTG9va3VwID0gZDMubWFwKCksIGQzX3RpbWVfZGF5UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9kYXlzKSwgZDNfdGltZV9kYXlMb29rdXAgPSBkM190aW1lX2Zvcm1hdExvb2t1cChsb2NhbGVfZGF5cyksIGQzX3RpbWVfZGF5QWJicmV2UmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX2RheUFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydERheXMpLCBkM190aW1lX21vbnRoUmUgPSBkM190aW1lX2Zvcm1hdFJlKGxvY2FsZV9tb250aHMpLCBkM190aW1lX21vbnRoTG9va3VwID0gZDNfdGltZV9mb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksIGQzX3RpbWVfbW9udGhBYmJyZXZSZSA9IGQzX3RpbWVfZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSwgZDNfdGltZV9tb250aEFiYnJldkxvb2t1cCA9IGQzX3RpbWVfZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydE1vbnRocyk7XG4gICAgbG9jYWxlX3BlcmlvZHMuZm9yRWFjaChmdW5jdGlvbihwLCBpKSB7XG4gICAgICBkM190aW1lX3BlcmlvZExvb2t1cC5zZXQocC50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICB9KTtcbiAgICB2YXIgZDNfdGltZV9mb3JtYXRzID0ge1xuICAgICAgYTogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3Nob3J0RGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBBOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfZGF5c1tkLmdldERheSgpXTtcbiAgICAgIH0sXG4gICAgICBiOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgICAgIH0sXG4gICAgICBCOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XG4gICAgICB9LFxuICAgICAgYzogZDNfdGltZV9mb3JtYXQobG9jYWxlX2RhdGVUaW1lKSxcbiAgICAgIGQ6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBlOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldERhdGUoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgSDogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBJOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgcCwgMik7XG4gICAgICB9LFxuICAgICAgajogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoMSArIGQzX3RpbWUuZGF5T2ZZZWFyKGQpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBMOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbGxpc2Vjb25kcygpLCBwLCAzKTtcbiAgICAgIH0sXG4gICAgICBtOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1vbnRoKCkgKyAxLCBwLCAyKTtcbiAgICAgIH0sXG4gICAgICBNOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgcDogZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgICAgIH0sXG4gICAgICBTOiBmdW5jdGlvbihkLCBwKSB7XG4gICAgICAgIHJldHVybiBkM190aW1lX2Zvcm1hdFBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XG4gICAgICB9LFxuICAgICAgVTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5zdW5kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHc6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuZ2V0RGF5KCk7XG4gICAgICB9LFxuICAgICAgVzogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZDNfdGltZS5tb25kYXlPZlllYXIoZCksIHAsIDIpO1xuICAgICAgfSxcbiAgICAgIHg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV9kYXRlKSxcbiAgICAgIFg6IGQzX3RpbWVfZm9ybWF0KGxvY2FsZV90aW1lKSxcbiAgICAgIHk6IGZ1bmN0aW9uKGQsIHApIHtcbiAgICAgICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0UGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG4gICAgICB9LFxuICAgICAgWTogZnVuY3Rpb24oZCwgcCkge1xuICAgICAgICByZXR1cm4gZDNfdGltZV9mb3JtYXRQYWQoZC5nZXRGdWxsWWVhcigpICUgMWU0LCBwLCA0KTtcbiAgICAgIH0sXG4gICAgICBaOiBkM190aW1lX3pvbmUsXG4gICAgICBcIiVcIjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIiVcIjtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBkM190aW1lX3BhcnNlcnMgPSB7XG4gICAgICBhOiBkM190aW1lX3BhcnNlV2Vla2RheUFiYnJldixcbiAgICAgIEE6IGQzX3RpbWVfcGFyc2VXZWVrZGF5LFxuICAgICAgYjogZDNfdGltZV9wYXJzZU1vbnRoQWJicmV2LFxuICAgICAgQjogZDNfdGltZV9wYXJzZU1vbnRoLFxuICAgICAgYzogZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwsXG4gICAgICBkOiBkM190aW1lX3BhcnNlRGF5LFxuICAgICAgZTogZDNfdGltZV9wYXJzZURheSxcbiAgICAgIEg6IGQzX3RpbWVfcGFyc2VIb3VyMjQsXG4gICAgICBJOiBkM190aW1lX3BhcnNlSG91cjI0LFxuICAgICAgajogZDNfdGltZV9wYXJzZURheU9mWWVhcixcbiAgICAgIEw6IGQzX3RpbWVfcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgICBtOiBkM190aW1lX3BhcnNlTW9udGhOdW1iZXIsXG4gICAgICBNOiBkM190aW1lX3BhcnNlTWludXRlcyxcbiAgICAgIHA6IGQzX3RpbWVfcGFyc2VBbVBtLFxuICAgICAgUzogZDNfdGltZV9wYXJzZVNlY29uZHMsXG4gICAgICBVOiBkM190aW1lX3BhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICAgIHc6IGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyLFxuICAgICAgVzogZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXksXG4gICAgICB4OiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZSxcbiAgICAgIFg6IGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lLFxuICAgICAgeTogZDNfdGltZV9wYXJzZVllYXIsXG4gICAgICBZOiBkM190aW1lX3BhcnNlRnVsbFllYXIsXG4gICAgICBaOiBkM190aW1lX3BhcnNlWm9uZSxcbiAgICAgIFwiJVwiOiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5QWJicmV2KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheUFiYnJldlJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5QWJicmV2TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgZDNfdGltZV9kYXlSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUudyA9IGQzX3RpbWVfZGF5TG9va3VwLmdldChuWzBdLnRvTG93ZXJDYXNlKCkpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aEFiYnJldihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIGQzX3RpbWVfbW9udGhBYmJyZXZSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIG4gPSBkM190aW1lX21vbnRoQWJicmV2UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gZDNfdGltZV9tb250aEFiYnJldkxvb2t1cC5nZXQoblswXS50b0xvd2VyQ2FzZSgpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTW9udGgoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICBkM190aW1lX21vbnRoUmUubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBuID0gZDNfdGltZV9tb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICAgIHJldHVybiBuID8gKGRhdGUubSA9IGQzX3RpbWVfbW9udGhMb29rdXAuZ2V0KG5bMF0udG9Mb3dlckNhc2UoKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUxvY2FsZUZ1bGwoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICByZXR1cm4gZDNfdGltZV9wYXJzZShkYXRlLCBkM190aW1lX2Zvcm1hdHMuYy50b1N0cmluZygpLCBzdHJpbmcsIGkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTG9jYWxlRGF0ZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3BhcnNlKGRhdGUsIGQzX3RpbWVfZm9ybWF0cy54LnRvU3RyaW5nKCksIHN0cmluZywgaSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VMb2NhbGVUaW1lKGRhdGUsIHN0cmluZywgaSkge1xuICAgICAgcmV0dXJuIGQzX3RpbWVfcGFyc2UoZGF0ZSwgZDNfdGltZV9mb3JtYXRzLlgudG9TdHJpbmcoKSwgc3RyaW5nLCBpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUFtUG0oZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgICB2YXIgbiA9IGQzX3RpbWVfcGVyaW9kTG9va3VwLmdldChzdHJpbmcuc2xpY2UoaSwgaSArPSAyKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuID09IG51bGwgPyAtMSA6IChkYXRlLnAgPSBuLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RpbWVfZm9ybWF0O1xuICB9XG4gIHZhciBkM190aW1lX2Zvcm1hdFBhZHMgPSB7XG4gICAgXCItXCI6IFwiXCIsXG4gICAgXzogXCIgXCIsXG4gICAgXCIwXCI6IFwiMFwiXG4gIH0sIGQzX3RpbWVfbnVtYmVyUmUgPSAvXlxccypcXGQrLywgZDNfdGltZV9wZXJjZW50UmUgPSAvXiUvO1xuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdFBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIiwgc3RyaW5nID0gKHNpZ24gPyAtdmFsdWUgOiB2YWx1ZSkgKyBcIlwiLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRSZShuYW1lcykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKGQzLnJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdExvb2t1cChuYW1lcykge1xuICAgIHZhciBtYXAgPSBuZXcgZDNfTWFwKCksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwLnNldChuYW1lc1tpXS50b0xvd2VyQ2FzZSgpLCBpKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrZGF5TnVtYmVyKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGRhdGUuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVdlZWtOdW1iZXJNb25kYXkoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRnVsbFllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZVllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICAgIHJldHVybiBuID8gKGRhdGUueSA9IGQzX3RpbWVfZXhwYW5kWWVhcigrblswXSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlWm9uZShkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gL15bKy1dXFxkezR9JC8udGVzdChzdHJpbmcgPSBzdHJpbmcuc2xpY2UoaSwgaSArIDUpKSA/IChkYXRlLlogPSAtc3RyaW5nLCBcbiAgICBpICsgNSkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2V4cGFuZFllYXIoZCkge1xuICAgIHJldHVybiBkICsgKGQgPiA2OCA/IDE5MDAgOiAyZTMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VNb250aE51bWJlcihkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlRGF5KGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfcGFyc2VEYXlPZlllYXIoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9udW1iZXJSZS5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBuID0gZDNfdGltZV9udW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICAgIHJldHVybiBuID8gKGRhdGUuaiA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdGltZV9wYXJzZUhvdXIyNChkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWludXRlcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlU2Vjb25kcyhkYXRlLCBzdHJpbmcsIGkpIHtcbiAgICBkM190aW1lX251bWJlclJlLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIG4gPSBkM190aW1lX251bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gICAgcmV0dXJuIG4gPyAoZGF0ZS5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTWlsbGlzZWNvbmRzKGRhdGUsIHN0cmluZywgaSkge1xuICAgIGQzX3RpbWVfbnVtYmVyUmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgICByZXR1cm4gbiA/IChkYXRlLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfem9uZShkKSB7XG4gICAgdmFyIHogPSBkLmdldFRpbWV6b25lT2Zmc2V0KCksIHpzID0geiA+IDAgPyBcIi1cIiA6IFwiK1wiLCB6aCA9IGFicyh6KSAvIDYwIHwgMCwgem0gPSBhYnMoeikgJSA2MDtcbiAgICByZXR1cm4genMgKyBkM190aW1lX2Zvcm1hdFBhZCh6aCwgXCIwXCIsIDIpICsgZDNfdGltZV9mb3JtYXRQYWQoem0sIFwiMFwiLCAyKTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX3BhcnNlTGl0ZXJhbFBlcmNlbnQoZGF0ZSwgc3RyaW5nLCBpKSB7XG4gICAgZDNfdGltZV9wZXJjZW50UmUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbiA9IGQzX3RpbWVfcGVyY2VudFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gICAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbiAgfVxuICBmdW5jdGlvbiBkM190aW1lX2Zvcm1hdE11bHRpKGZvcm1hdHMpIHtcbiAgICB2YXIgbiA9IGZvcm1hdHMubGVuZ3RoLCBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IG4pIGZvcm1hdHNbaV1bMF0gPSB0aGlzKGZvcm1hdHNbaV1bMF0pO1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgaSA9IDAsIGYgPSBmb3JtYXRzW2ldO1xuICAgICAgd2hpbGUgKCFmWzFdKGRhdGUpKSBmID0gZm9ybWF0c1srK2ldO1xuICAgICAgcmV0dXJuIGZbMF0oZGF0ZSk7XG4gICAgfTtcbiAgfVxuICBkMy5sb2NhbGUgPSBmdW5jdGlvbihsb2NhbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyRm9ybWF0OiBkM19sb2NhbGVfbnVtYmVyRm9ybWF0KGxvY2FsZSksXG4gICAgICB0aW1lRm9ybWF0OiBkM19sb2NhbGVfdGltZUZvcm1hdChsb2NhbGUpXG4gICAgfTtcbiAgfTtcbiAgdmFyIGQzX2xvY2FsZV9lblVTID0gZDMubG9jYWxlKHtcbiAgICBkZWNpbWFsOiBcIi5cIixcbiAgICB0aG91c2FuZHM6IFwiLFwiLFxuICAgIGdyb3VwaW5nOiBbIDMgXSxcbiAgICBjdXJyZW5jeTogWyBcIiRcIiwgXCJcIiBdLFxuICAgIGRhdGVUaW1lOiBcIiVhICViICVlICVYICVZXCIsXG4gICAgZGF0ZTogXCIlbS8lZC8lWVwiLFxuICAgIHRpbWU6IFwiJUg6JU06JVNcIixcbiAgICBwZXJpb2RzOiBbIFwiQU1cIiwgXCJQTVwiIF0sXG4gICAgZGF5czogWyBcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCIgXSxcbiAgICBzaG9ydERheXM6IFsgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIiBdLFxuICAgIG1vbnRoczogWyBcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCIgXSxcbiAgICBzaG9ydE1vbnRoczogWyBcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiIF1cbiAgfSk7XG4gIGQzLmZvcm1hdCA9IGQzX2xvY2FsZV9lblVTLm51bWJlckZvcm1hdDtcbiAgZDMuZ2VvID0ge307XG4gIGZ1bmN0aW9uIGQzX2FkZGVyKCkge31cbiAgZDNfYWRkZXIucHJvdG90eXBlID0ge1xuICAgIHM6IDAsXG4gICAgdDogMCxcbiAgICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIGQzX2FkZGVyU3VtKHksIHRoaXMudCwgZDNfYWRkZXJUZW1wKTtcbiAgICAgIGQzX2FkZGVyU3VtKGQzX2FkZGVyVGVtcC5zLCB0aGlzLnMsIHRoaXMpO1xuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IGQzX2FkZGVyVGVtcC50OyBlbHNlIHRoaXMucyA9IGQzX2FkZGVyVGVtcC50O1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zID0gdGhpcy50ID0gMDtcbiAgICB9LFxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucztcbiAgICB9XG4gIH07XG4gIHZhciBkM19hZGRlclRlbXAgPSBuZXcgZDNfYWRkZXIoKTtcbiAgZnVuY3Rpb24gZDNfYWRkZXJTdW0oYSwgYiwgbykge1xuICAgIHZhciB4ID0gby5zID0gYSArIGIsIGJ2ID0geCAtIGEsIGF2ID0geCAtIGJ2O1xuICAgIG8udCA9IGEgLSBhdiArIChiIC0gYnYpO1xuICB9XG4gIGQzLmdlby5zdHJlYW0gPSBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgaWYgKG9iamVjdCAmJiBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KG9iamVjdCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBsaXN0ZW5lcikge1xuICAgIGlmIChnZW9tZXRyeSAmJiBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgICBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBsaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIHZhciBkM19nZW9fc3RyZWFtT2JqZWN0VHlwZSA9IHtcbiAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBsaXN0ZW5lcikge1xuICAgICAgZDNfZ2VvX3N0cmVhbUdlb21ldHJ5KGZlYXR1cmUuZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIEZlYXR1cmVDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBkM19nZW9fc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICAgIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIuc3BoZXJlKCk7XG4gICAgfSxcbiAgICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgb2JqZWN0ID0gb2JqZWN0LmNvb3JkaW5hdGVzO1xuICAgICAgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gICAgfSxcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICBkM19nZW9fc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikgZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLCAwKTtcbiAgICB9LFxuICAgIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgbGlzdGVuZXIpIHtcbiAgICAgIGQzX2dlb19zdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIpO1xuICAgIH0sXG4gICAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgZ2VvbWV0cmllcyA9IG9iamVjdC5nZW9tZXRyaWVzLCBpID0gLTEsIG4gPSBnZW9tZXRyaWVzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX3N0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIGxpc3RlbmVyLCBjbG9zZWQpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIGxpc3RlbmVyLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgbGlzdGVuZXIpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpO1xuICAgIHdoaWxlICgrK2kgPCBuKSBkM19nZW9fc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgbGlzdGVuZXIsIDEpO1xuICAgIGxpc3RlbmVyLnBvbHlnb25FbmQoKTtcbiAgfVxuICBkMy5nZW8uYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19hcmVhU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2FyZWEpO1xuICAgIHJldHVybiBkM19nZW9fYXJlYVN1bTtcbiAgfTtcbiAgdmFyIGQzX2dlb19hcmVhU3VtLCBkM19nZW9fYXJlYVJpbmdTdW0gPSBuZXcgZDNfYWRkZXIoKTtcbiAgdmFyIGQzX2dlb19hcmVhID0ge1xuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fYXJlYVN1bSArPSA0ICogz4A7XG4gICAgfSxcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgICBkM19nZW9fYXJlYS5saW5lU3RhcnQgPSBkM19nZW9fYXJlYVJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZWEgPSAyICogZDNfZ2VvX2FyZWFSaW5nU3VtO1xuICAgICAgZDNfZ2VvX2FyZWFTdW0gKz0gYXJlYSA8IDAgPyA0ICogz4AgKyBhcmVhIDogYXJlYTtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCA9IGQzX2dlb19hcmVhLmxpbmVFbmQgPSBkM19nZW9fYXJlYS5wb2ludCA9IGQzX25vb3A7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fYXJlYVJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgzrswLCBjb3PPhjAsIHNpbs+GMDtcbiAgICBkM19nZW9fYXJlYS5wb2ludCA9IGZ1bmN0aW9uKM67LCDPhikge1xuICAgICAgZDNfZ2VvX2FyZWEucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICDOuzAgPSAozrswMCA9IM67KSAqIGQzX3JhZGlhbnMsIGNvc8+GMCA9IE1hdGguY29zKM+GID0gKM+GMDAgPSDPhikgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNCksIFxuICAgICAgc2luz4YwID0gTWF0aC5zaW4oz4YpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIM+GID0gz4YgKiBkM19yYWRpYW5zIC8gMiArIM+AIC8gNDtcbiAgICAgIHZhciBkzrsgPSDOuyAtIM67MCwgc2TOuyA9IGTOuyA+PSAwID8gMSA6IC0xLCBhZM67ID0gc2TOuyAqIGTOuywgY29zz4YgPSBNYXRoLmNvcyjPhiksIHNpbs+GID0gTWF0aC5zaW4oz4YpLCBrID0gc2luz4YwICogc2luz4YsIHUgPSBjb3PPhjAgKiBjb3PPhiArIGsgKiBNYXRoLmNvcyhhZM67KSwgdiA9IGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyk7XG4gICAgICBkM19nZW9fYXJlYVJpbmdTdW0uYWRkKE1hdGguYXRhbjIodiwgdSkpO1xuICAgICAgzrswID0gzrssIGNvc8+GMCA9IGNvc8+GLCBzaW7PhjAgPSBzaW7PhjtcbiAgICB9XG4gICAgZDNfZ2VvX2FyZWEubGluZUVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgbmV4dFBvaW50KM67MDAsIM+GMDApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbihzcGhlcmljYWwpIHtcbiAgICB2YXIgzrsgPSBzcGhlcmljYWxbMF0sIM+GID0gc3BoZXJpY2FsWzFdLCBjb3PPhiA9IE1hdGguY29zKM+GKTtcbiAgICByZXR1cm4gWyBjb3PPhiAqIE1hdGguY29zKM67KSwgY29zz4YgKiBNYXRoLnNpbijOuyksIE1hdGguc2luKM+GKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgICByZXR1cm4gWyBhWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhbkFkZChhLCBiKSB7XG4gICAgYVswXSArPSBiWzBdO1xuICAgIGFbMV0gKz0gYlsxXTtcbiAgICBhWzJdICs9IGJbMl07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xuICAgIHJldHVybiBbIHZlY3RvclswXSAqIGssIHZlY3RvclsxXSAqIGssIHZlY3RvclsyXSAqIGsgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2FydGVzaWFuTm9ybWFsaXplKGQpIHtcbiAgICB2YXIgbCA9IE1hdGguc3FydChkWzBdICogZFswXSArIGRbMV0gKiBkWzFdICsgZFsyXSAqIGRbMl0pO1xuICAgIGRbMF0gLz0gbDtcbiAgICBkWzFdIC89IGw7XG4gICAgZFsyXSAvPSBsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gICAgcmV0dXJuIFsgTWF0aC5hdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGQzX2FzaW4oY2FydGVzaWFuWzJdKSBdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19zcGhlcmljYWxFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGFicyhhWzBdIC0gYlswXSkgPCDOtSAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgzrU7XG4gIH1cbiAgZDMuZ2VvLmJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciDOuzAsIM+GMCwgzrsxLCDPhjEsIM67XywgzrtfXywgz4ZfXywgcDAsIGTOu1N1bSwgcmFuZ2VzLCByYW5nZTtcbiAgICB2YXIgYm91bmQgPSB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBib3VuZC5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gcmluZ0VuZDtcbiAgICAgICAgZM67U3VtID0gMDtcbiAgICAgICAgZDNfZ2VvX2FyZWEucG9seWdvblN0YXJ0KCk7XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGQzX2dlb19hcmVhLnBvbHlnb25FbmQoKTtcbiAgICAgICAgYm91bmQucG9pbnQgPSBwb2ludDtcbiAgICAgICAgYm91bmQubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICBib3VuZC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgaWYgKGQzX2dlb19hcmVhUmluZ1N1bSA8IDApIM67MCA9IC0ozrsxID0gMTgwKSwgz4YwID0gLSjPhjEgPSA5MCk7IGVsc2UgaWYgKGTOu1N1bSA+IM61KSDPhjEgPSA5MDsgZWxzZSBpZiAoZM67U3VtIDwgLc61KSDPhjAgPSAtOTA7XG4gICAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBvaW50KM67LCDPhikge1xuICAgICAgcmFuZ2VzLnB1c2gocmFuZ2UgPSBbIM67MCA9IM67LCDOuzEgPSDOuyBdKTtcbiAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICBpZiAoz4YgPiDPhjEpIM+GMSA9IM+GO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQozrssIM+GKSB7XG4gICAgICB2YXIgcCA9IGQzX2dlb19jYXJ0ZXNpYW4oWyDOuyAqIGQzX3JhZGlhbnMsIM+GICogZDNfcmFkaWFucyBdKTtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgbm9ybWFsID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKHAwLCBwKSwgZXF1YXRvcmlhbCA9IFsgbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwIF0sIGluZmxlY3Rpb24gPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcbiAgICAgICAgZDNfZ2VvX2NhcnRlc2lhbk5vcm1hbGl6ZShpbmZsZWN0aW9uKTtcbiAgICAgICAgaW5mbGVjdGlvbiA9IGQzX2dlb19zcGhlcmljYWwoaW5mbGVjdGlvbik7XG4gICAgICAgIHZhciBkzrsgPSDOuyAtIM67XywgcyA9IGTOuyA+IDAgPyAxIDogLTEsIM67aSA9IGluZmxlY3Rpb25bMF0gKiBkM19kZWdyZWVzICogcywgYW50aW1lcmlkaWFuID0gYWJzKGTOuykgPiAxODA7XG4gICAgICAgIGlmIChhbnRpbWVyaWRpYW4gXiAocyAqIM67XyA8IM67aSAmJiDOu2kgPCBzICogzrspKSB7XG4gICAgICAgICAgdmFyIM+GaSA9IGluZmxlY3Rpb25bMV0gKiBkM19kZWdyZWVzO1xuICAgICAgICAgIGlmICjPhmkgPiDPhjEpIM+GMSA9IM+GaTtcbiAgICAgICAgfSBlbHNlIGlmICjOu2kgPSAozrtpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHMgKiDOu18gPCDOu2kgJiYgzrtpIDwgcyAqIM67KSkge1xuICAgICAgICAgIHZhciDPhmkgPSAtaW5mbGVjdGlvblsxXSAqIGQzX2RlZ3JlZXM7XG4gICAgICAgICAgaWYgKM+GaSA8IM+GMCkgz4YwID0gz4ZpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICjPhiA8IM+GMCkgz4YwID0gz4Y7XG4gICAgICAgICAgaWYgKM+GID4gz4YxKSDPhjEgPSDPhjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICAgICAgaWYgKM67IDwgzrtfKSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYW5nbGUozrssIM67MSkgPiBhbmdsZSjOuzAsIM67MSkpIM67MCA9IM67O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAozrsxID49IM67MCkge1xuICAgICAgICAgICAgaWYgKM67IDwgzrswKSDOuzAgPSDOuztcbiAgICAgICAgICAgIGlmICjOuyA+IM67MSkgzrsxID0gzrs7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICjOuyA+IM67Xykge1xuICAgICAgICAgICAgICBpZiAoYW5nbGUozrswLCDOuykgPiBhbmdsZSjOuzAsIM67MSkpIM67MSA9IM67O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ2xlKM67LCDOuzEpID4gYW5nbGUozrswLCDOuzEpKSDOuzAgPSDOuztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBwMCA9IHAsIM67XyA9IM67O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBib3VuZC5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIGJvdW5kLnBvaW50ID0gcG9pbnQ7XG4gICAgICBwMCA9IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludCjOuywgz4YpIHtcbiAgICAgIGlmIChwMCkge1xuICAgICAgICB2YXIgZM67ID0gzrsgLSDOu187XG4gICAgICAgIGTOu1N1bSArPSBhYnMoZM67KSA+IDE4MCA/IGTOuyArIChkzrsgPiAwID8gMzYwIDogLTM2MCkgOiBkzrs7XG4gICAgICB9IGVsc2UgzrtfXyA9IM67LCDPhl9fID0gz4Y7XG4gICAgICBkM19nZW9fYXJlYS5wb2ludCjOuywgz4YpO1xuICAgICAgbGluZVBvaW50KM67LCDPhik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGQzX2dlb19hcmVhLmxpbmVTdGFydCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmluZ1BvaW50KM67X18sIM+GX18pO1xuICAgICAgZDNfZ2VvX2FyZWEubGluZUVuZCgpO1xuICAgICAgaWYgKGFicyhkzrtTdW0pID4gzrUpIM67MCA9IC0ozrsxID0gMTgwKTtcbiAgICAgIHJhbmdlWzBdID0gzrswLCByYW5nZVsxXSA9IM67MTtcbiAgICAgIHAwID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW5nbGUozrswLCDOuzEpIHtcbiAgICAgIHJldHVybiAozrsxIC09IM67MCkgPCAwID8gzrsxICsgMzYwIDogzrsxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aGluUmFuZ2UoeCwgcmFuZ2UpIHtcbiAgICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICDPhjEgPSDOuzEgPSAtKM67MCA9IM+GMCA9IEluZmluaXR5KTtcbiAgICAgIHJhbmdlcyA9IFtdO1xuICAgICAgZDMuZ2VvLnN0cmVhbShmZWF0dXJlLCBib3VuZCk7XG4gICAgICB2YXIgbiA9IHJhbmdlcy5sZW5ndGg7XG4gICAgICBpZiAobikge1xuICAgICAgICByYW5nZXMuc29ydChjb21wYXJlUmFuZ2VzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGEgPSByYW5nZXNbMF0sIGIsIG1lcmdlZCA9IFsgYSBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgYiA9IHJhbmdlc1tpXTtcbiAgICAgICAgICBpZiAod2l0aGluUmFuZ2UoYlswXSwgYSkgfHwgd2l0aGluUmFuZ2UoYlsxXSwgYSkpIHtcbiAgICAgICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgICAgIGlmIChhbmdsZShiWzBdLCBhWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzBdID0gYlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVzdCA9IC1JbmZpbml0eSwgZM67O1xuICAgICAgICBmb3IgKHZhciBuID0gbWVyZ2VkLmxlbmd0aCAtIDEsIGkgPSAwLCBhID0gbWVyZ2VkW25dLCBiOyBpIDw9IG47IGEgPSBiLCArK2kpIHtcbiAgICAgICAgICBiID0gbWVyZ2VkW2ldO1xuICAgICAgICAgIGlmICgoZM67ID0gYW5nbGUoYVsxXSwgYlswXSkpID4gYmVzdCkgYmVzdCA9IGTOuywgzrswID0gYlswXSwgzrsxID0gYVsxXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFuZ2VzID0gcmFuZ2UgPSBudWxsO1xuICAgICAgcmV0dXJuIM67MCA9PT0gSW5maW5pdHkgfHwgz4YwID09PSBJbmZpbml0eSA/IFsgWyBOYU4sIE5hTiBdLCBbIE5hTiwgTmFOIF0gXSA6IFsgWyDOuzAsIM+GMCBdLCBbIM67MSwgz4YxIF0gXTtcbiAgICB9O1xuICB9KCk7XG4gIGQzLmdlby5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGQzX2dlb19jZW50cm9pZFcwID0gZDNfZ2VvX2NlbnRyb2lkVzEgPSBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgIGQzLmdlby5zdHJlYW0ob2JqZWN0LCBkM19nZW9fY2VudHJvaWQpO1xuICAgIHZhciB4ID0gZDNfZ2VvX2NlbnRyb2lkWDIsIHkgPSBkM19nZW9fY2VudHJvaWRZMiwgeiA9IGQzX2dlb19jZW50cm9pZFoyLCBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgIGlmIChtIDwgzrUyKSB7XG4gICAgICB4ID0gZDNfZ2VvX2NlbnRyb2lkWDEsIHkgPSBkM19nZW9fY2VudHJvaWRZMSwgeiA9IGQzX2dlb19jZW50cm9pZFoxO1xuICAgICAgaWYgKGQzX2dlb19jZW50cm9pZFcxIDwgzrUpIHggPSBkM19nZW9fY2VudHJvaWRYMCwgeSA9IGQzX2dlb19jZW50cm9pZFkwLCB6ID0gZDNfZ2VvX2NlbnRyb2lkWjA7XG4gICAgICBtID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuICAgICAgaWYgKG0gPCDOtTIpIHJldHVybiBbIE5hTiwgTmFOIF07XG4gICAgfVxuICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSwgeCkgKiBkM19kZWdyZWVzLCBkM19hc2luKHogLyBNYXRoLnNxcnQobSkpICogZDNfZGVncmVlcyBdO1xuICB9O1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkVzAsIGQzX2dlb19jZW50cm9pZFcxLCBkM19nZW9fY2VudHJvaWRYMCwgZDNfZ2VvX2NlbnRyb2lkWTAsIGQzX2dlb19jZW50cm9pZFowLCBkM19nZW9fY2VudHJvaWRYMSwgZDNfZ2VvX2NlbnRyb2lkWTEsIGQzX2dlb19jZW50cm9pZFoxLCBkM19nZW9fY2VudHJvaWRYMiwgZDNfZ2VvX2NlbnRyb2lkWTIsIGQzX2dlb19jZW50cm9pZFoyO1xuICB2YXIgZDNfZ2VvX2NlbnRyb2lkID0ge1xuICAgIHNwaGVyZTogZDNfbm9vcCxcbiAgICBwb2ludDogZDNfZ2VvX2NlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fY2VudHJvaWRMaW5lU3RhcnQsXG4gICAgbGluZUVuZDogZDNfZ2VvX2NlbnRyb2lkTGluZUVuZCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZFJpbmdTdGFydDtcbiAgICB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19jZW50cm9pZExpbmVTdGFydDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50KM67LCDPhikge1xuICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgdmFyIGNvc8+GID0gTWF0aC5jb3Moz4YgKj0gZDNfcmFkaWFucyk7XG4gICAgZDNfZ2VvX2NlbnRyb2lkUG9pbnRYWVooY29zz4YgKiBNYXRoLmNvcyjOuyksIGNvc8+GICogTWF0aC5zaW4ozrspLCBNYXRoLnNpbijPhikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgsIHksIHopIHtcbiAgICArK2QzX2dlb19jZW50cm9pZFcwO1xuICAgIGQzX2dlb19jZW50cm9pZFgwICs9ICh4IC0gZDNfZ2VvX2NlbnRyb2lkWDApIC8gZDNfZ2VvX2NlbnRyb2lkVzA7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWTAgKz0gKHkgLSBkM19nZW9fY2VudHJvaWRZMCkgLyBkM19nZW9fY2VudHJvaWRXMDtcbiAgICBkM19nZW9fY2VudHJvaWRaMCArPSAoeiAtIGQzX2dlb19jZW50cm9pZFowKSAvIGQzX2dlb19jZW50cm9pZFcwO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKTtcbiAgICAgIHgwID0gY29zz4YgKiBNYXRoLmNvcyjOuyk7XG4gICAgICB5MCA9IGNvc8+GICogTWF0aC5zaW4ozrspO1xuICAgICAgejAgPSBNYXRoLnNpbijPhik7XG4gICAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBuZXh0UG9pbnQ7XG4gICAgICBkM19nZW9fY2VudHJvaWRQb2ludFhZWih4MCwgeTAsIHowKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIM67ICo9IGQzX3JhZGlhbnM7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiAqPSBkM19yYWRpYW5zKSwgeCA9IGNvc8+GICogTWF0aC5jb3MozrspLCB5ID0gY29zz4YgKiBNYXRoLnNpbijOuyksIHogPSBNYXRoLnNpbijPhiksIHcgPSBNYXRoLmF0YW4yKE1hdGguc3FydCgodyA9IHkwICogeiAtIHowICogeSkgKiB3ICsgKHcgPSB6MCAqIHggLSB4MCAqIHopICogdyArICh3ID0geDAgKiB5IC0geTAgKiB4KSAqIHcpLCB4MCAqIHggKyB5MCAqIHkgKyB6MCAqIHopO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgzrswMCwgz4YwMCwgeDAsIHkwLCB6MDtcbiAgICBkM19nZW9fY2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIM67MDAgPSDOuywgz4YwMCA9IM+GO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpO1xuICAgICAgeDAgPSBjb3PPhiAqIE1hdGguY29zKM67KTtcbiAgICAgIHkwID0gY29zz4YgKiBNYXRoLnNpbijOuyk7XG4gICAgICB6MCA9IE1hdGguc2luKM+GKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH07XG4gICAgZDNfZ2VvX2NlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCjOuzAwLCDPhjAwKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5saW5lRW5kID0gZDNfZ2VvX2NlbnRyb2lkTGluZUVuZDtcbiAgICAgIGQzX2dlb19jZW50cm9pZC5wb2ludCA9IGQzX2dlb19jZW50cm9pZFBvaW50O1xuICAgIH07XG4gICAgZnVuY3Rpb24gbmV4dFBvaW50KM67LCDPhikge1xuICAgICAgzrsgKj0gZDNfcmFkaWFucztcbiAgICAgIHZhciBjb3PPhiA9IE1hdGguY29zKM+GICo9IGQzX3JhZGlhbnMpLCB4ID0gY29zz4YgKiBNYXRoLmNvcyjOuyksIHkgPSBjb3PPhiAqIE1hdGguc2luKM67KSwgeiA9IE1hdGguc2luKM+GKSwgY3ggPSB5MCAqIHogLSB6MCAqIHksIGN5ID0gejAgKiB4IC0geDAgKiB6LCBjeiA9IHgwICogeSAtIHkwICogeCwgbSA9IE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSArIGN6ICogY3opLCB1ID0geDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6LCB2ID0gbSAmJiAtZDNfYWNvcyh1KSAvIG0sIHcgPSBNYXRoLmF0YW4yKG0sIHUpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0gdiAqIGN4O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0gdiAqIGN5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0gdiAqIGN6O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkVzEgKz0gdztcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFBvaW50WFlaKHgwLCB5MCwgejApO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29tcG9zZShhLCBiKSB7XG4gICAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gICAgfVxuICAgIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJ1ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGNvbXBhcmUsIGNsaXBTdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHN1YmplY3QgPSBbXSwgY2xpcCA9IFtdO1xuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgICB2YXIgbiwgcDAgPSBzZWdtZW50WzBdLCBwMSA9IHNlZ21lbnRbbl07XG4gICAgICBpZiAoZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBhID0gbmV3IGQzX2dlb19jbGlwUG9seWdvbkludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSksIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAwLCBudWxsLCBhLCBmYWxzZSk7XG4gICAgICBhLm8gPSBiO1xuICAgICAgc3ViamVjdC5wdXNoKGEpO1xuICAgICAgY2xpcC5wdXNoKGIpO1xuICAgICAgYSA9IG5ldyBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKTtcbiAgICAgIGIgPSBuZXcgZDNfZ2VvX2NsaXBQb2x5Z29uSW50ZXJzZWN0aW9uKHAxLCBudWxsLCBhLCB0cnVlKTtcbiAgICAgIGEubyA9IGI7XG4gICAgICBzdWJqZWN0LnB1c2goYSk7XG4gICAgICBjbGlwLnB1c2goYik7XG4gICAgfSk7XG4gICAgY2xpcC5zb3J0KGNvbXBhcmUpO1xuICAgIGQzX2dlb19jbGlwUG9seWdvbkxpbmtDaXJjdWxhcihzdWJqZWN0KTtcbiAgICBkM19nZW9fY2xpcFBvbHlnb25MaW5rQ2lyY3VsYXIoY2xpcCk7XG4gICAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuICAgIGZvciAodmFyIGkgPSAwLCBlbnRyeSA9IGNsaXBTdGFydEluc2lkZSwgbiA9IGNsaXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjbGlwW2ldLmUgPSBlbnRyeSA9ICFlbnRyeTtcbiAgICB9XG4gICAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSwgcG9pbnRzLCBwb2ludDtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydCwgaXNTdWJqZWN0ID0gdHJ1ZTtcbiAgICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC52ID0gY3VycmVudC5vLnYgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBsaXN0ZW5lci5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICAgIGlzU3ViamVjdCA9ICFpc1N1YmplY3Q7XG4gICAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBQb2x5Z29uTGlua0NpcmN1bGFyKGFycmF5KSB7XG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbiwgaSA9IDAsIGEgPSBhcnJheVswXSwgYjtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgICAgYi5wID0gYTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XG4gICAgYi5wID0gYTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFBvbHlnb25JbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gICAgdGhpcy54ID0gcG9pbnQ7XG4gICAgdGhpcy56ID0gcG9pbnRzO1xuICAgIHRoaXMubyA9IG90aGVyO1xuICAgIHRoaXMuZSA9IGVudHJ5O1xuICAgIHRoaXMudiA9IGZhbHNlO1xuICAgIHRoaXMubiA9IHRoaXMucCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIGNsaXBTdGFydCkge1xuICAgIHJldHVybiBmdW5jdGlvbihyb3RhdGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGluZSA9IGNsaXBMaW5lKGxpc3RlbmVyKSwgcm90YXRlZENsaXBTdGFydCA9IHJvdGF0ZS5pbnZlcnQoY2xpcFN0YXJ0WzBdLCBjbGlwU3RhcnRbMV0pO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcbiAgICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgICBzZWdtZW50cyA9IGQzLm1lcmdlKHNlZ21lbnRzKTtcbiAgICAgICAgICB2YXIgY2xpcFN0YXJ0SW5zaWRlID0gZDNfZ2VvX3BvaW50SW5Qb2x5Z29uKHJvdGF0ZWRDbGlwU3RhcnQsIHBvbHlnb24pO1xuICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIGxpc3RlbmVyLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkM19nZW9fY2xpcFBvbHlnb24oc2VnbWVudHMsIGQzX2dlb19jbGlwU29ydCwgY2xpcFN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgbGlzdGVuZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xpcFN0YXJ0SW5zaWRlKSB7XG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgbGlzdGVuZXIpO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmdW5jdGlvbiBwb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKM67LCDPhik7XG4gICAgICAgIGlmIChwb2ludFZpc2libGUozrsgPSBwb2ludFswXSwgz4YgPSBwb2ludFsxXSkpIGxpc3RlbmVyLnBvaW50KM67LCDPhik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUozrssIM+GKSB7XG4gICAgICAgIHZhciBwb2ludCA9IHJvdGF0ZSjOuywgz4YpO1xuICAgICAgICBsaW5lLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICAgIGxpbmUubGluZVN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGxpbmUubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHNlZ21lbnRzO1xuICAgICAgdmFyIGJ1ZmZlciA9IGQzX2dlb19jbGlwQnVmZmVyTGlzdGVuZXIoKSwgcmluZ0xpc3RlbmVyID0gY2xpcExpbmUoYnVmZmVyKSwgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSwgcG9seWdvbiwgcmluZztcbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyjOuywgz4YpIHtcbiAgICAgICAgcmluZy5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUozrssIM+GKTtcbiAgICAgICAgcmluZ0xpc3RlbmVyLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICAgIHJpbmdMaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgcmluZyA9IFtdO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgICByaW5nTGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICB2YXIgY2xlYW4gPSByaW5nTGlzdGVuZXIuY2xlYW4oKSwgcmluZ1NlZ21lbnRzID0gYnVmZmVyLmJ1ZmZlcigpLCBzZWdtZW50LCBuID0gcmluZ1NlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmluZy5wb3AoKTtcbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgICAgICByaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKCFuKSByZXR1cm47XG4gICAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgICBzZWdtZW50ID0gcmluZ1NlZ21lbnRzWzBdO1xuICAgICAgICAgIHZhciBuID0gc2VnbWVudC5sZW5ndGggLSAxLCBpID0gLTEsIHBvaW50O1xuICAgICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgbGlzdGVuZXIucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIGxpc3RlbmVyLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+IDEgJiYgY2xlYW4gJiAyKSByaW5nU2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMucG9wKCkuY29uY2F0KHJpbmdTZWdtZW50cy5zaGlmdCgpKSk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLmZpbHRlcihkM19nZW9fY2xpcFNlZ21lbnRMZW5ndGgxKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwU2VnbWVudExlbmd0aDEoc2VnbWVudCkge1xuICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBCdWZmZXJMaXN0ZW5lcigpIHtcbiAgICB2YXIgbGluZXMgPSBbXSwgbGluZTtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lID0gW10pO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgICAgbGluZS5wdXNoKFsgzrssIM+GIF0pO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgICBidWZmZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gbGluZXM7XG4gICAgICAgIGxpbmVzID0gW107XG4gICAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgfSxcbiAgICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcFNvcnQoYSwgYikge1xuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmz4AgLSDOtSA6IGhhbGbPgCAtIGFbMV0pIC0gKChiID0gYi54KVswXSA8IDAgPyBiWzFdIC0gaGFsZs+AIC0gzrUgOiBoYWxmz4AgLSBiWzFdKTtcbiAgfVxuICB2YXIgZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4gPSBkM19nZW9fY2xpcChkM190cnVlLCBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUsIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsIFsgLc+ALCAtz4AgLyAyIF0pO1xuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkxpbmUobGlzdGVuZXIpIHtcbiAgICB2YXIgzrswID0gTmFOLCDPhjAgPSBOYU4sIHPOuzAgPSBOYU4sIGNsZWFuO1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbijOuzEsIM+GMSkge1xuICAgICAgICB2YXIgc867MSA9IM67MSA+IDAgPyDPgCA6IC3PgCwgZM67ID0gYWJzKM67MSAtIM67MCk7XG4gICAgICAgIGlmIChhYnMoZM67IC0gz4ApIDwgzrUpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludCjOuzAsIM+GMCA9ICjPhjAgKyDPhjEpIC8gMiA+IDAgPyBoYWxmz4AgOiAtaGFsZs+AKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrswLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICBsaXN0ZW5lci5wb2ludChzzrsxLCDPhjApO1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KM67MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoc867MCAhPT0gc867MSAmJiBkzrsgPj0gz4ApIHtcbiAgICAgICAgICBpZiAoYWJzKM67MCAtIHPOuzApIDwgzrUpIM67MCAtPSBzzrswICogzrU7XG4gICAgICAgICAgaWYgKGFicyjOuzEgLSBzzrsxKSA8IM61KSDOuzEgLT0gc867MSAqIM61O1xuICAgICAgICAgIM+GMCA9IGQzX2dlb19jbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KM67MCwgz4YwLCDOuzEsIM+GMSk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MCwgz4YwKTtcbiAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgbGlzdGVuZXIucG9pbnQoc867MSwgz4YwKTtcbiAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGlzdGVuZXIucG9pbnQozrswID0gzrsxLCDPhjAgPSDPhjEpO1xuICAgICAgICBzzrswID0gc867MTtcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICDOuzAgPSDPhjAgPSBOYU47XG4gICAgICB9LFxuICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMiAtIGNsZWFuO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QozrswLCDPhjAsIM67MSwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCwgY29zz4YxLCBzaW7OuzBfzrsxID0gTWF0aC5zaW4ozrswIC0gzrsxKTtcbiAgICByZXR1cm4gYWJzKHNpbs67MF/OuzEpID4gzrUgPyBNYXRoLmF0YW4oKE1hdGguc2luKM+GMCkgKiAoY29zz4YxID0gTWF0aC5jb3Moz4YxKSkgKiBNYXRoLnNpbijOuzEpIC0gTWF0aC5zaW4oz4YxKSAqIChjb3PPhjAgPSBNYXRoLmNvcyjPhjApKSAqIE1hdGguc2luKM67MCkpIC8gKGNvc8+GMCAqIGNvc8+GMSAqIHNpbs67MF/OuzEpKSA6ICjPhjAgKyDPhjEpIC8gMjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2xpcEFudGltZXJpZGlhbkludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIGxpc3RlbmVyKSB7XG4gICAgdmFyIM+GO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogaGFsZs+AO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCDPhik7XG4gICAgICBsaXN0ZW5lci5wb2ludCjPgCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIDApO1xuICAgICAgbGlzdGVuZXIucG9pbnQoz4AsIC3Phik7XG4gICAgICBsaXN0ZW5lci5wb2ludCgwLCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAtz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoLc+ALCAwKTtcbiAgICAgIGxpc3RlbmVyLnBvaW50KC3PgCwgz4YpO1xuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiDOtSkge1xuICAgICAgdmFyIHMgPSBmcm9tWzBdIDwgdG9bMF0gPyDPgCA6IC3PgDtcbiAgICAgIM+GID0gZGlyZWN0aW9uICogcyAvIDI7XG4gICAgICBsaXN0ZW5lci5wb2ludCgtcywgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQoMCwgz4YpO1xuICAgICAgbGlzdGVuZXIucG9pbnQocywgz4YpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0ZW5lci5wb2ludCh0b1swXSwgdG9bMV0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcG9pbnRJblBvbHlnb24ocG9pbnQsIHBvbHlnb24pIHtcbiAgICB2YXIgbWVyaWRpYW4gPSBwb2ludFswXSwgcGFyYWxsZWwgPSBwb2ludFsxXSwgbWVyaWRpYW5Ob3JtYWwgPSBbIE1hdGguc2luKG1lcmlkaWFuKSwgLU1hdGguY29zKG1lcmlkaWFuKSwgMCBdLCBwb2xhckFuZ2xlID0gMCwgd2luZGluZyA9IDA7XG4gICAgZDNfZ2VvX2FyZWFSaW5nU3VtLnJlc2V0KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHJpbmcgPSBwb2x5Z29uW2ldLCBtID0gcmluZy5sZW5ndGg7XG4gICAgICBpZiAoIW0pIGNvbnRpbnVlO1xuICAgICAgdmFyIHBvaW50MCA9IHJpbmdbMF0sIM67MCA9IHBvaW50MFswXSwgz4YwID0gcG9pbnQwWzFdIC8gMiArIM+AIC8gNCwgc2luz4YwID0gTWF0aC5zaW4oz4YwKSwgY29zz4YwID0gTWF0aC5jb3Moz4YwKSwgaiA9IDE7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoaiA9PT0gbSkgaiA9IDA7XG4gICAgICAgIHBvaW50ID0gcmluZ1tqXTtcbiAgICAgICAgdmFyIM67ID0gcG9pbnRbMF0sIM+GID0gcG9pbnRbMV0gLyAyICsgz4AgLyA0LCBzaW7PhiA9IE1hdGguc2luKM+GKSwgY29zz4YgPSBNYXRoLmNvcyjPhiksIGTOuyA9IM67IC0gzrswLCBzZM67ID0gZM67ID49IDAgPyAxIDogLTEsIGFkzrsgPSBzZM67ICogZM67LCBhbnRpbWVyaWRpYW4gPSBhZM67ID4gz4AsIGsgPSBzaW7PhjAgKiBzaW7PhjtcbiAgICAgICAgZDNfZ2VvX2FyZWFSaW5nU3VtLmFkZChNYXRoLmF0YW4yKGsgKiBzZM67ICogTWF0aC5zaW4oYWTOuyksIGNvc8+GMCAqIGNvc8+GICsgayAqIE1hdGguY29zKGFkzrspKSk7XG4gICAgICAgIHBvbGFyQW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZM67ICsgc2TOuyAqIM+EIDogZM67O1xuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gzrswID49IG1lcmlkaWFuIF4gzrsgPj0gbWVyaWRpYW4pIHtcbiAgICAgICAgICB2YXIgYXJjID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKGQzX2dlb19jYXJ0ZXNpYW4ocG9pbnQwKSwgZDNfZ2VvX2NhcnRlc2lhbihwb2ludCkpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYXJjKTtcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZDNfZ2VvX2NhcnRlc2lhbkNyb3NzKG1lcmlkaWFuTm9ybWFsLCBhcmMpO1xuICAgICAgICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoaW50ZXJzZWN0aW9uKTtcbiAgICAgICAgICB2YXIgz4ZhcmMgPSAoYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAtMSA6IDEpICogZDNfYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICAgIGlmIChwYXJhbGxlbCA+IM+GYXJjIHx8IHBhcmFsbGVsID09PSDPhmFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcbiAgICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZM67ID49IDAgPyAxIDogLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaisrKSBicmVhaztcbiAgICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhiwgcG9pbnQwID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAocG9sYXJBbmdsZSA8IC3OtSB8fCBwb2xhckFuZ2xlIDwgzrUgJiYgZDNfZ2VvX2FyZWFSaW5nU3VtIDwgLc61KSBeIHdpbmRpbmcgJiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19jbGlwQ2lyY2xlKHJhZGl1cykge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNtYWxsUmFkaXVzID0gY3IgPiAwLCBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IM61LCBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIDYgKiBkM19yYWRpYW5zKTtcbiAgICByZXR1cm4gZDNfZ2VvX2NsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFsgMCwgLXJhZGl1cyBdIDogWyAtz4AsIHJhZGl1cyAtIM+AIF0pO1xuICAgIGZ1bmN0aW9uIHZpc2libGUozrssIM+GKSB7XG4gICAgICByZXR1cm4gTWF0aC5jb3MozrspICogTWF0aC5jb3Moz4YpID4gY3I7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgcG9pbnQwLCBjMCwgdjAsIHYwMCwgY2xlYW47XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHYwMCA9IHYwID0gZmFsc2U7XG4gICAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgICB9LFxuICAgICAgICBwb2ludDogZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICAgICAgdmFyIHBvaW50MSA9IFsgzrssIM+GIF0sIHBvaW50MiwgdiA9IHZpc2libGUozrssIM+GKSwgYyA9IHNtYWxsUmFkaXVzID8gdiA/IDAgOiBjb2RlKM67LCDPhikgOiB2ID8gY29kZSjOuyArICjOuyA8IDAgPyDPgCA6IC3PgCksIM+GKSA6IDA7XG4gICAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIGlmIChkM19nZW9fc3BoZXJpY2FsRXF1YWwocG9pbnQwLCBwb2ludDIpIHx8IGQzX2dlb19zcGhlcmljYWxFcXVhbChwb2ludDEsIHBvaW50MikpIHtcbiAgICAgICAgICAgICAgcG9pbnQxWzBdICs9IM61O1xuICAgICAgICAgICAgICBwb2ludDFbMV0gKz0gzrU7XG4gICAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgICBjbGVhbiA9IDA7XG4gICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChub3RIZW1pc3BoZXJlICYmIHBvaW50MCAmJiBzbWFsbFJhZGl1cyBeIHYpIHtcbiAgICAgICAgICAgIHZhciB0O1xuICAgICAgICAgICAgaWYgKCEoYyAmIGMwKSAmJiAodCA9IGludGVyc2VjdChwb2ludDEsIHBvaW50MCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgICAgaWYgKHNtYWxsUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFswXVswXSwgdFswXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQodFsxXVswXSwgdFsxXVsxXSk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhZDNfZ2VvX3NwaGVyaWNhbEVxdWFsKHBvaW50MCwgcG9pbnQxKSkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHYwKSBsaXN0ZW5lci5saW5lRW5kKCk7XG4gICAgICAgICAgcG9pbnQwID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjbGVhbiB8ICh2MDAgJiYgdjApIDw8IDE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludGVyc2VjdChhLCBiLCB0d28pIHtcbiAgICAgIHZhciBwYSA9IGQzX2dlb19jYXJ0ZXNpYW4oYSksIHBiID0gZDNfZ2VvX2NhcnRlc2lhbihiKTtcbiAgICAgIHZhciBuMSA9IFsgMSwgMCwgMCBdLCBuMiA9IGQzX2dlb19jYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLCBuMm4yID0gZDNfZ2VvX2NhcnRlc2lhbkRvdChuMiwgbjIpLCBuMW4yID0gbjJbMF0sIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuICAgICAgaWYgKCFkZXRlcm1pbmFudCkgcmV0dXJuICF0d28gJiYgYTtcbiAgICAgIHZhciBjMSA9IGNyICogbjJuMiAvIGRldGVybWluYW50LCBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCwgbjF4bjIgPSBkM19nZW9fY2FydGVzaWFuQ3Jvc3MobjEsIG4yKSwgQSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZShuMSwgYzEpLCBCID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgICBkM19nZW9fY2FydGVzaWFuQWRkKEEsIEIpO1xuICAgICAgdmFyIHUgPSBuMXhuMiwgdyA9IGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgdSksIHV1ID0gZDNfZ2VvX2NhcnRlc2lhbkRvdCh1LCB1KSwgdDIgPSB3ICogdyAtIHV1ICogKGQzX2dlb19jYXJ0ZXNpYW5Eb3QoQSwgQSkgLSAxKTtcbiAgICAgIGlmICh0MiA8IDApIHJldHVybjtcbiAgICAgIHZhciB0ID0gTWF0aC5zcXJ0KHQyKSwgcSA9IGQzX2dlb19jYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgLSB0KSAvIHV1KTtcbiAgICAgIGQzX2dlb19jYXJ0ZXNpYW5BZGQocSwgQSk7XG4gICAgICBxID0gZDNfZ2VvX3NwaGVyaWNhbChxKTtcbiAgICAgIGlmICghdHdvKSByZXR1cm4gcTtcbiAgICAgIHZhciDOuzAgPSBhWzBdLCDOuzEgPSBiWzBdLCDPhjAgPSBhWzFdLCDPhjEgPSBiWzFdLCB6O1xuICAgICAgaWYgKM67MSA8IM67MCkgeiA9IM67MCwgzrswID0gzrsxLCDOuzEgPSB6O1xuICAgICAgdmFyIM60zrsgPSDOuzEgLSDOuzAsIHBvbGFyID0gYWJzKM60zrsgLSDPgCkgPCDOtSwgbWVyaWRpYW4gPSBwb2xhciB8fCDOtM67IDwgzrU7XG4gICAgICBpZiAoIXBvbGFyICYmIM+GMSA8IM+GMCkgeiA9IM+GMCwgz4YwID0gz4YxLCDPhjEgPSB6O1xuICAgICAgaWYgKG1lcmlkaWFuID8gcG9sYXIgPyDPhjAgKyDPhjEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIM67MCkgPCDOtSA/IM+GMCA6IM+GMSkgOiDPhjAgPD0gcVsxXSAmJiBxWzFdIDw9IM+GMSA6IM60zrsgPiDPgCBeICjOuzAgPD0gcVswXSAmJiBxWzBdIDw9IM67MSkpIHtcbiAgICAgICAgdmFyIHExID0gZDNfZ2VvX2NhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgICBkM19nZW9fY2FydGVzaWFuQWRkKHExLCBBKTtcbiAgICAgICAgcmV0dXJuIFsgcSwgZDNfZ2VvX3NwaGVyaWNhbChxMSkgXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY29kZSjOuywgz4YpIHtcbiAgICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiDPgCAtIHJhZGl1cywgY29kZSA9IDA7XG4gICAgICBpZiAozrsgPCAtcikgY29kZSB8PSAxOyBlbHNlIGlmICjOuyA+IHIpIGNvZGUgfD0gMjtcbiAgICAgIGlmICjPhiA8IC1yKSBjb2RlIHw9IDQ7IGVsc2UgaWYgKM+GID4gcikgY29kZSB8PSA4O1xuICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fY2xpcExpbmUoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIGEgPSBsaW5lLmEsIGIgPSBsaW5lLmIsIGF4ID0gYS54LCBheSA9IGEueSwgYnggPSBiLngsIGJ5ID0gYi55LCB0MCA9IDAsIHQxID0gMSwgZHggPSBieCAtIGF4LCBkeSA9IGJ5IC0gYXksIHI7XG4gICAgICByID0geDAgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geDEgLSBheDtcbiAgICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHg7XG4gICAgICBpZiAoZHggPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICByID0geTAgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA+IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyIDwgdDApIHJldHVybjtcbiAgICAgICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgICAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gICAgICB9XG4gICAgICByID0geTEgLSBheTtcbiAgICAgIGlmICghZHkgJiYgciA8IDApIHJldHVybjtcbiAgICAgIHIgLz0gZHk7XG4gICAgICBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICAgICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgICAgICBpZiAociA8IHQxKSB0MSA9IHI7XG4gICAgICB9XG4gICAgICBpZiAodDAgPiAwKSBsaW5lLmEgPSB7XG4gICAgICAgIHg6IGF4ICsgdDAgKiBkeCxcbiAgICAgICAgeTogYXkgKyB0MCAqIGR5XG4gICAgICB9O1xuICAgICAgaWYgKHQxIDwgMSkgbGluZS5iID0ge1xuICAgICAgICB4OiBheCArIHQxICogZHgsXG4gICAgICAgIHk6IGF5ICsgdDEgKiBkeVxuICAgICAgfTtcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2dlb19jbGlwRXh0ZW50TUFYID0gMWU5O1xuICBkMy5nZW8uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgc3RyZWFtLCBjbGlwLCBjbGlwRXh0ZW50ID0ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2U7XG4gICAgICAgIHN0cmVhbSA9IGNsaXAob3V0cHV0KTtcbiAgICAgICAgc3RyZWFtLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICAgIH0sXG4gICAgICBleHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIHgwLCB5MCBdLCBbIHgxLCB5MSBdIF07XG4gICAgICAgIGNsaXAgPSBkM19nZW9fY2xpcEV4dGVudCh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKTtcbiAgICAgICAgaWYgKHN0cmVhbSkgc3RyZWFtLnZhbGlkID0gZmFsc2UsIHN0cmVhbSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQuZXh0ZW50KFsgWyAwLCAwIF0sIFsgOTYwLCA1MDAgXSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2NsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0ZW5lcl8gPSBsaXN0ZW5lciwgYnVmZmVyTGlzdGVuZXIgPSBkM19nZW9fY2xpcEJ1ZmZlckxpc3RlbmVyKCksIGNsaXBMaW5lID0gZDNfZ2VvbV9jbGlwTGluZSh4MCwgeTAsIHgxLCB5MSksIHNlZ21lbnRzLCBwb2x5Z29uLCByaW5nO1xuICAgICAgdmFyIGNsaXAgPSB7XG4gICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbGlzdGVuZXIgPSBidWZmZXJMaXN0ZW5lcjtcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgICAgICBjbGVhbiA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXJfO1xuICAgICAgICAgIHNlZ21lbnRzID0gZDMubWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICAgIHZhciBjbGlwU3RhcnRJbnNpZGUgPSBpbnNpZGVQb2x5Z29uKFsgeDAsIHkxIF0pLCBpbnNpZGUgPSBjbGVhbiAmJiBjbGlwU3RhcnRJbnNpZGUsIHZpc2libGUgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgICAgaWYgKGluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICAgIGlmIChpbnNpZGUpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvX2NsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlLCBjbGlwU3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0ZW5lci5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gaW5zaWRlUG9seWdvbihwKSB7XG4gICAgICAgIHZhciB3biA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aCwgeSA9IHBbMV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDEsIHYgPSBwb2x5Z29uW2ldLCBtID0gdi5sZW5ndGgsIGEgPSB2WzBdLCBiOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgICBiID0gdltqXTtcbiAgICAgICAgICAgIGlmIChhWzFdIDw9IHkpIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPiB5ICYmIGQzX2Nyb3NzMmQoYSwgYiwgcCkgPiAwKSArK3duO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJbMV0gPD0geSAmJiBkM19jcm9zczJkKGEsIGIsIHApIDwgMCkgLS13bjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSBiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd24gIT09IDA7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICAgICAgaWYgKGZyb20gPT0gbnVsbCB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKSB8fCBjb21wYXJlUG9pbnRzKGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoYSA9PT0gMCB8fCBhID09PSAzID8geDAgOiB4MSwgYSA+IDEgPyB5MSA6IHkwKTtcbiAgICAgICAgICB9IHdoaWxlICgoYSA9IChhICsgZGlyZWN0aW9uICsgNCkgJSA0KSAhPT0gYTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3RlbmVyLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHBvaW50VmlzaWJsZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB4MCA8PSB4ICYmIHggPD0geDEgJiYgeTAgPD0geSAmJiB5IDw9IHkxO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICBpZiAocG9pbnRWaXNpYmxlKHgsIHkpKSBsaXN0ZW5lci5wb2ludCh4LCB5KTtcbiAgICAgIH1cbiAgICAgIHZhciB4X18sIHlfXywgdl9fLCB4XywgeV8sIHZfLCBmaXJzdCwgY2xlYW47XG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIGlmIChwb2x5Z29uKSBwb2x5Z29uLnB1c2gocmluZyA9IFtdKTtcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgICB2XyA9IGZhbHNlO1xuICAgICAgICB4XyA9IHlfID0gTmFOO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgICAgaWYgKHNlZ21lbnRzKSB7XG4gICAgICAgICAgbGluZVBvaW50KHhfXywgeV9fKTtcbiAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJMaXN0ZW5lci5yZWpvaW4oKTtcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlckxpc3RlbmVyLmJ1ZmZlcigpKTtcbiAgICAgICAgfVxuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGlmICh2XykgbGlzdGVuZXIubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVBvaW50KHgsIHkpIHtcbiAgICAgICAgeCA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHgpKTtcbiAgICAgICAgeSA9IE1hdGgubWF4KC1kM19nZW9fY2xpcEV4dGVudE1BWCwgTWF0aC5taW4oZDNfZ2VvX2NsaXBFeHRlbnRNQVgsIHkpKTtcbiAgICAgICAgdmFyIHYgPSBwb2ludFZpc2libGUoeCwgeSk7XG4gICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goWyB4LCB5IF0pO1xuICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICB4X18gPSB4LCB5X18gPSB5LCB2X18gPSB2O1xuICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2ICYmIHZfKSBsaXN0ZW5lci5wb2ludCh4LCB5KTsgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbCA9IHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIHg6IHhfLFxuICAgICAgICAgICAgICAgIHk6IHlfXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgICAgIHk6IHlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjbGlwTGluZShsKSkge1xuICAgICAgICAgICAgICBpZiAoIXZfKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQobC5hLngsIGwuYS55KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsaXN0ZW5lci5wb2ludChsLmIueCwgbC5iLnkpO1xuICAgICAgICAgICAgICBpZiAoIXYpIGxpc3RlbmVyLmxpbmVFbmQoKTtcbiAgICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saW5lU3RhcnQoKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXIucG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xpcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNvcm5lcihwLCBkaXJlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IM61ID8gZGlyZWN0aW9uID4gMCA/IDAgOiAzIDogYWJzKHBbMF0gLSB4MSkgPCDOtSA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMSA6IGFicyhwWzFdIC0geTApIDwgzrUgPyBkaXJlY3Rpb24gPiAwID8gMSA6IDAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMoYS54LCBiLngpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKGEsIGIpIHtcbiAgICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSwgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgICByZXR1cm4gY2EgIT09IGNiID8gY2EgLSBjYiA6IGNhID09PSAwID8gYlsxXSAtIGFbMV0gOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdIDogY2EgPT09IDIgPyBhWzFdIC0gYlsxXSA6IGJbMF0gLSBhWzBdO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY29uaWMocHJvamVjdEF0KSB7XG4gICAgdmFyIM+GMCA9IDAsIM+GMSA9IM+AIC8gMywgbSA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLCBwID0gbSjPhjAsIM+GMSk7XG4gICAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIM+GMCAvIM+AICogMTgwLCDPhjEgLyDPgCAqIDE4MCBdO1xuICAgICAgcmV0dXJuIG0oz4YwID0gX1swXSAqIM+AIC8gMTgwLCDPhjEgPSBfWzFdICogz4AgLyAxODApO1xuICAgIH07XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2NvbmljRXF1YWxBcmVhKM+GMCwgz4YxKSB7XG4gICAgdmFyIHNpbs+GMCA9IE1hdGguc2luKM+GMCksIG4gPSAoc2luz4YwICsgTWF0aC5zaW4oz4YxKSkgLyAyLCBDID0gMSArIHNpbs+GMCAqICgyICogbiAtIHNpbs+GMCksIM+BMCA9IE1hdGguc3FydChDKSAvIG47XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydChDIC0gMiAqIG4gKiBNYXRoLnNpbijPhikpIC8gbjtcbiAgICAgIHJldHVybiBbIM+BICogTWF0aC5zaW4ozrsgKj0gbiksIM+BMCAtIM+BICogTWF0aC5jb3MozrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gz4EwIC0geTtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeCwgz4EwX3kpIC8gbiwgZDNfYXNpbigoQyAtICh4ICogeCArIM+BMF95ICogz4EwX3kpICogbiAqIG4pIC8gKDIgKiBuKSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9XG4gIChkMy5nZW8uY29uaWNFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX2NvbmljKGQzX2dlb19jb25pY0VxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWFsQXJlYTtcbiAgZDMuZ2VvLmFsYmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyA5NiwgMCBdKS5jZW50ZXIoWyAtLjYsIDM4LjcgXSkucGFyYWxsZWxzKFsgMjkuNSwgNDUuNSBdKS5zY2FsZSgxMDcwKTtcbiAgfTtcbiAgZDMuZ2VvLmFsYmVyc1VzYSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsb3dlcjQ4ID0gZDMuZ2VvLmFsYmVycygpO1xuICAgIHZhciBhbGFza2EgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTQsIDAgXSkuY2VudGVyKFsgLTIsIDU4LjUgXSkucGFyYWxsZWxzKFsgNTUsIDY1IF0pO1xuICAgIHZhciBoYXdhaWkgPSBkMy5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWyAxNTcsIDAgXSkuY2VudGVyKFsgLTMsIDE5LjkgXSkucGFyYWxsZWxzKFsgOCwgMTggXSk7XG4gICAgdmFyIHBvaW50LCBwb2ludFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHBvaW50ID0gWyB4LCB5IF07XG4gICAgICB9XG4gICAgfSwgbG93ZXI0OFBvaW50LCBhbGFza2FQb2ludCwgaGF3YWlpUG9pbnQ7XG4gICAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzWzBdLCB5ID0gY29vcmRpbmF0ZXNbMV07XG4gICAgICBwb2ludCA9IG51bGw7XG4gICAgICAobG93ZXI0OFBvaW50KHgsIHkpLCBwb2ludCkgfHwgKGFsYXNrYVBvaW50KHgsIHkpLCBwb2ludCkgfHwgaGF3YWlpUG9pbnQoeCwgeSk7XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICAgIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHQgPSBsb3dlcjQ4LnRyYW5zbGF0ZSgpLCB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLCB5ID0gKGNvb3JkaW5hdGVzWzFdIC0gdFsxXSkgLyBrO1xuICAgICAgcmV0dXJuICh5ID49IC4xMiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uNDI1ICYmIHggPCAtLjIxNCA/IGFsYXNrYSA6IHkgPj0gLjE2NiAmJiB5IDwgLjIzNCAmJiB4ID49IC0uMjE0ICYmIHggPCAtLjExNSA/IGhhd2FpaSA6IGxvd2VyNDgpLmludmVydChjb29yZGluYXRlcyk7XG4gICAgfTtcbiAgICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICB2YXIgbG93ZXI0OFN0cmVhbSA9IGxvd2VyNDguc3RyZWFtKHN0cmVhbSksIGFsYXNrYVN0cmVhbSA9IGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpU3RyZWFtID0gaGF3YWlpLnN0cmVhbShzdHJlYW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICBsb3dlcjQ4U3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgIGFsYXNrYVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9pbnQoeCwgeSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5zcGhlcmUoKTtcbiAgICAgICAgICBhbGFza2FTdHJlYW0uc3BoZXJlKCk7XG4gICAgICAgICAgaGF3YWlpU3RyZWFtLnNwaGVyZSgpO1xuICAgICAgICB9LFxuICAgICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvd2VyNDhTdHJlYW0ucG9seWdvblN0YXJ0KCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgICAgICAgIGhhd2FpaVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbG93ZXI0OFN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgYWxhc2thU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgICAgICBoYXdhaWlTdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDgucHJlY2lzaW9uKCk7XG4gICAgICBsb3dlcjQ4LnByZWNpc2lvbihfKTtcbiAgICAgIGFsYXNrYS5wcmVjaXNpb24oXyk7XG4gICAgICBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxvd2VyNDguc2NhbGUoKTtcbiAgICAgIGxvd2VyNDguc2NhbGUoXyk7XG4gICAgICBhbGFza2Euc2NhbGUoXyAqIC4zNSk7XG4gICAgICBoYXdhaWkuc2NhbGUoXyk7XG4gICAgICByZXR1cm4gYWxiZXJzVXNhLnRyYW5zbGF0ZShsb3dlcjQ4LnRyYW5zbGF0ZSgpKTtcbiAgICB9O1xuICAgIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xuICAgICAgdmFyIGsgPSBsb3dlcjQ4LnNjYWxlKCksIHggPSArX1swXSwgeSA9ICtfWzFdO1xuICAgICAgbG93ZXI0OFBvaW50ID0gbG93ZXI0OC50cmFuc2xhdGUoXykuY2xpcEV4dGVudChbIFsgeCAtIC40NTUgKiBrLCB5IC0gLjIzOCAqIGsgXSwgWyB4ICsgLjQ1NSAqIGssIHkgKyAuMjM4ICogayBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBhbGFza2FQb2ludCA9IGFsYXNrYS50cmFuc2xhdGUoWyB4IC0gLjMwNyAqIGssIHkgKyAuMjAxICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjQyNSAqIGsgKyDOtSwgeSArIC4xMiAqIGsgKyDOtSBdLCBbIHggLSAuMjE0ICogayAtIM61LCB5ICsgLjIzNCAqIGsgLSDOtSBdIF0pLnN0cmVhbShwb2ludFN0cmVhbSkucG9pbnQ7XG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaS50cmFuc2xhdGUoWyB4IC0gLjIwNSAqIGssIHkgKyAuMjEyICogayBdKS5jbGlwRXh0ZW50KFsgWyB4IC0gLjIxNCAqIGsgKyDOtSwgeSArIC4xNjYgKiBrICsgzrUgXSwgWyB4IC0gLjExNSAqIGsgLSDOtSwgeSArIC4yMzQgKiBrIC0gzrUgXSBdKS5zdHJlYW0ocG9pbnRTdHJlYW0pLnBvaW50O1xuICAgICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgICB9O1xuICAgIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG4gIH07XG4gIHZhciBkM19nZW9fcGF0aEFyZWFTdW0sIGQzX2dlb19wYXRoQXJlYVBvbHlnb24sIGQzX2dlb19wYXRoQXJlYSA9IHtcbiAgICBwb2ludDogZDNfbm9vcCxcbiAgICBsaW5lU3RhcnQ6IGQzX25vb3AsXG4gICAgbGluZUVuZDogZDNfbm9vcCxcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiA9IDA7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhUmluZ1N0YXJ0O1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aEFyZWEubGluZVN0YXJ0ID0gZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBkM19nZW9fcGF0aEFyZWEucG9pbnQgPSBkM19ub29wO1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhU3VtICs9IGFicyhkM19nZW9fcGF0aEFyZWFQb2x5Z29uIC8gMik7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aEFyZWFSaW5nU3RhcnQoKSB7XG4gICAgdmFyIHgwMCwgeTAwLCB4MCwgeTA7XG4gICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhBcmVhUG9seWdvbiArPSB5MCAqIHggLSB4MCAqIHk7XG4gICAgICB4MCA9IHgsIHkwID0geTtcbiAgICB9XG4gICAgZDNfZ2VvX3BhdGhBcmVhLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICB2YXIgZDNfZ2VvX3BhdGhCb3VuZHNYMCwgZDNfZ2VvX3BhdGhCb3VuZHNZMCwgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMTtcbiAgdmFyIGQzX2dlb19wYXRoQm91bmRzID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aEJvdW5kc1BvaW50LFxuICAgIGxpbmVTdGFydDogZDNfbm9vcCxcbiAgICBsaW5lRW5kOiBkM19ub29wLFxuICAgIHBvbHlnb25TdGFydDogZDNfbm9vcCxcbiAgICBwb2x5Z29uRW5kOiBkM19ub29wXG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQm91bmRzUG9pbnQoeCwgeSkge1xuICAgIGlmICh4IDwgZDNfZ2VvX3BhdGhCb3VuZHNYMCkgZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IHg7XG4gICAgaWYgKHggPiBkM19nZW9fcGF0aEJvdW5kc1gxKSBkM19nZW9fcGF0aEJvdW5kc1gxID0geDtcbiAgICBpZiAoeSA8IGQzX2dlb19wYXRoQm91bmRzWTApIGQzX2dlb19wYXRoQm91bmRzWTAgPSB5O1xuICAgIGlmICh5ID4gZDNfZ2VvX3BhdGhCb3VuZHNZMSkgZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IHk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhCdWZmZXIoKSB7XG4gICAgdmFyIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoNC41KSwgYnVmZmVyID0gW107XG4gICAgdmFyIHN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXG4gICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xuICAgICAgfSxcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgICAgIHBvaW50Q2lyY2xlID0gZDNfZ2VvX3BhdGhCdWZmZXJDaXJjbGUoXyk7XG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICB9LFxuICAgICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVyLmpvaW4oXCJcIik7XG4gICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgYnVmZmVyLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGJ1ZmZlci5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZSh4LCB5KSB7XG4gICAgICBidWZmZXIucHVzaChcIkxcIiwgeCwgXCIsXCIsIHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xuICAgICAgYnVmZmVyLnB1c2goXCJaXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQnVmZmVyQ2lyY2xlKHJhZGl1cykge1xuICAgIHJldHVybiBcIm0wLFwiICsgcmFkaXVzICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1cyArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1cyArIFwielwiO1xuICB9XG4gIHZhciBkM19nZW9fcGF0aENlbnRyb2lkID0ge1xuICAgIHBvaW50OiBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fcGF0aENlbnRyb2lkTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kLFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRSaW5nU3RhcnQ7XG4gICAgfSxcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVTdGFydCA9IGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBkM19nZW9fcGF0aENlbnRyb2lkTGluZUVuZDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4LCB5KSB7XG4gICAgZDNfZ2VvX2NlbnRyb2lkWDAgKz0geDtcbiAgICBkM19nZW9fY2VudHJvaWRZMCArPSB5O1xuICAgICsrZDNfZ2VvX2NlbnRyb2lkWjA7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZExpbmVTdGFydCgpIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gbmV4dFBvaW50O1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCh4LCB5KSB7XG4gICAgICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgIGQzX2dlb19jZW50cm9pZFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gICAgICBkM19nZW9fY2VudHJvaWRZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjEgKz0gejtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wYXRoQ2VudHJvaWRMaW5lRW5kKCkge1xuICAgIGQzX2dlb19wYXRoQ2VudHJvaWQucG9pbnQgPSBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX3BhdGhDZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgICB2YXIgeDAwLCB5MDAsIHgwLCB5MDtcbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLnBvaW50ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgZDNfZ2VvX3BhdGhDZW50cm9pZC5wb2ludCA9IG5leHRQb2ludDtcbiAgICAgIGQzX2dlb19wYXRoQ2VudHJvaWRQb2ludCh4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBuZXh0UG9pbnQoeCwgeSkge1xuICAgICAgdmFyIGR4ID0geCAtIHgwLCBkeSA9IHkgLSB5MCwgeiA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgICAgIGQzX2dlb19jZW50cm9pZFoxICs9IHo7XG4gICAgICB6ID0geTAgKiB4IC0geDAgKiB5O1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWDIgKz0geiAqICh4MCArIHgpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWTIgKz0geiAqICh5MCArIHkpO1xuICAgICAgZDNfZ2VvX2NlbnRyb2lkWjIgKz0geiAqIDM7XG4gICAgICBkM19nZW9fcGF0aENlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xuICAgIH1cbiAgICBkM19nZW9fcGF0aENlbnRyb2lkLmxpbmVFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIG5leHRQb2ludCh4MDAsIHkwMCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcGF0aENvbnRleHQoY29udGV4dCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNTtcbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lU3RhcnQ7XG4gICAgICB9LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZFBvbHlnb247XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICB9LFxuICAgICAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgICAgcG9pbnRSYWRpdXMgPSBfO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgfSxcbiAgICAgIHJlc3VsdDogZDNfbm9vcFxuICAgIH07XG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgY29udGV4dC5tb3ZlVG8oeCArIHBvaW50UmFkaXVzLCB5KTtcbiAgICAgIGNvbnRleHQuYXJjKHgsIHksIHBvaW50UmFkaXVzLCAwLCDPhCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGluZUVuZFBvbHlnb24oKSB7XG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yZXNhbXBsZShwcm9qZWN0KSB7XG4gICAgdmFyIM60MiA9IC41LCBjb3NNaW5EaXN0YW5jZSA9IE1hdGguY29zKDMwICogZDNfcmFkaWFucyksIG1heERlcHRoID0gMTY7XG4gICAgZnVuY3Rpb24gcmVzYW1wbGUoc3RyZWFtKSB7XG4gICAgICByZXR1cm4gKG1heERlcHRoID8gcmVzYW1wbGVSZWN1cnNpdmUgOiByZXNhbXBsZU5vbmUpKHN0cmVhbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShzdHJlYW0pIHtcbiAgICAgIHJldHVybiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeFswXSwgeFsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVSZWN1cnNpdmUoc3RyZWFtKSB7XG4gICAgICB2YXIgzrswMCwgz4YwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIM67MCwgeDAsIHkwLCBhMCwgYjAsIGMwO1xuICAgICAgdmFyIHJlc2FtcGxlID0ge1xuICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgICByZXNhbXBsZS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgICAgICAgcmVzYW1wbGUubGluZVN0YXJ0ID0gbGluZVN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xuICAgICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xuICAgICAgICB4MCA9IE5hTjtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCjOuywgz4YpIHtcbiAgICAgICAgdmFyIGMgPSBkM19nZW9fY2FydGVzaWFuKFsgzrssIM+GIF0pLCBwID0gcHJvamVjdCjOuywgz4YpO1xuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIM67MCA9IM67LCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgICByZXNhbXBsZS5wb2ludCA9IHBvaW50O1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgICBsaW5lU3RhcnQoKTtcbiAgICAgICAgcmVzYW1wbGUucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICAgIHJlc2FtcGxlLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ1BvaW50KM67LCDPhikge1xuICAgICAgICBsaW5lUG9pbnQozrswMCA9IM67LCDPhjAwID0gz4YpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICAgIHJlc2FtcGxlLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgwMCwgeTAwLCDOuzAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgcmVzYW1wbGUubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIGxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCDOuzAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgzrsxLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgICB2YXIgZHggPSB4MSAtIHgwLCBkeSA9IHkxIC0geTAsIGQyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICBpZiAoZDIgPiA0ICogzrQyICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFyIGEgPSBhMCArIGExLCBiID0gYjAgKyBiMSwgYyA9IGMwICsgYzEsIG0gPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSwgz4YyID0gTWF0aC5hc2luKGMgLz0gbSksIM67MiA9IGFicyhhYnMoYykgLSAxKSA8IM61IHx8IGFicyjOuzAgLSDOuzEpIDwgzrUgPyAozrswICsgzrsxKSAvIDIgOiBNYXRoLmF0YW4yKGIsIGEpLCBwID0gcHJvamVjdCjOuzIsIM+GMiksIHgyID0gcFswXSwgeTIgPSBwWzFdLCBkeDIgPSB4MiAtIHgwLCBkeTIgPSB5MiAtIHkwLCBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XG4gICAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiDOtDIgfHwgYWJzKChkeCAqIGR4MiArIGR5ICogZHkyKSAvIGQyIC0gLjUpID4gLjMgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIM67MCwgYTAsIGIwLCBjMCwgeDIsIHkyLCDOuzIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIM67MiwgYSwgYiwgYywgeDEsIHkxLCDOuzEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc2FtcGxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCjOtDIpO1xuICAgICAgbWF4RGVwdGggPSAozrQyID0gXyAqIF8pID4gMCAmJiAxNjtcbiAgICAgIHJldHVybiByZXNhbXBsZTtcbiAgICB9O1xuICAgIHJldHVybiByZXNhbXBsZTtcbiAgfVxuICBkMy5nZW8ucGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb2ludFJhZGl1cyA9IDQuNSwgcHJvamVjdGlvbiwgY29udGV4dCwgcHJvamVjdFN0cmVhbSwgY29udGV4dFN0cmVhbSwgY2FjaGVTdHJlYW07XG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgaWYgKCFjYWNoZVN0cmVhbSB8fCAhY2FjaGVTdHJlYW0udmFsaWQpIGNhY2hlU3RyZWFtID0gcHJvamVjdFN0cmVhbShjb250ZXh0U3RyZWFtKTtcbiAgICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIGNhY2hlU3RyZWFtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICAgIH1cbiAgICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGQzX2dlb19wYXRoQXJlYVN1bSA9IDA7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEFyZWEpKTtcbiAgICAgIHJldHVybiBkM19nZW9fcGF0aEFyZWFTdW07XG4gICAgfTtcbiAgICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fY2VudHJvaWRYMCA9IGQzX2dlb19jZW50cm9pZFkwID0gZDNfZ2VvX2NlbnRyb2lkWjAgPSBkM19nZW9fY2VudHJvaWRYMSA9IGQzX2dlb19jZW50cm9pZFkxID0gZDNfZ2VvX2NlbnRyb2lkWjEgPSBkM19nZW9fY2VudHJvaWRYMiA9IGQzX2dlb19jZW50cm9pZFkyID0gZDNfZ2VvX2NlbnRyb2lkWjIgPSAwO1xuICAgICAgZDMuZ2VvLnN0cmVhbShvYmplY3QsIHByb2plY3RTdHJlYW0oZDNfZ2VvX3BhdGhDZW50cm9pZCkpO1xuICAgICAgcmV0dXJuIGQzX2dlb19jZW50cm9pZFoyID8gWyBkM19nZW9fY2VudHJvaWRYMiAvIGQzX2dlb19jZW50cm9pZFoyLCBkM19nZW9fY2VudHJvaWRZMiAvIGQzX2dlb19jZW50cm9pZFoyIF0gOiBkM19nZW9fY2VudHJvaWRaMSA/IFsgZDNfZ2VvX2NlbnRyb2lkWDEgLyBkM19nZW9fY2VudHJvaWRaMSwgZDNfZ2VvX2NlbnRyb2lkWTEgLyBkM19nZW9fY2VudHJvaWRaMSBdIDogZDNfZ2VvX2NlbnRyb2lkWjAgPyBbIGQzX2dlb19jZW50cm9pZFgwIC8gZDNfZ2VvX2NlbnRyb2lkWjAsIGQzX2dlb19jZW50cm9pZFkwIC8gZDNfZ2VvX2NlbnRyb2lkWjAgXSA6IFsgTmFOLCBOYU4gXTtcbiAgICB9O1xuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBkM19nZW9fcGF0aEJvdW5kc1gxID0gZDNfZ2VvX3BhdGhCb3VuZHNZMSA9IC0oZDNfZ2VvX3BhdGhCb3VuZHNYMCA9IGQzX2dlb19wYXRoQm91bmRzWTAgPSBJbmZpbml0eSk7XG4gICAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgcHJvamVjdFN0cmVhbShkM19nZW9fcGF0aEJvdW5kcykpO1xuICAgICAgcmV0dXJuIFsgWyBkM19nZW9fcGF0aEJvdW5kc1gwLCBkM19nZW9fcGF0aEJvdW5kc1kwIF0sIFsgZDNfZ2VvX3BhdGhCb3VuZHNYMSwgZDNfZ2VvX3BhdGhCb3VuZHNZMSBdIF07XG4gICAgfTtcbiAgICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwcm9qZWN0aW9uO1xuICAgICAgcHJvamVjdFN0cmVhbSA9IChwcm9qZWN0aW9uID0gXykgPyBfLnN0cmVhbSB8fCBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0oXykgOiBkM19pZGVudGl0eTtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICAgIGNvbnRleHRTdHJlYW0gPSAoY29udGV4dCA9IF8pID09IG51bGwgPyBuZXcgZDNfZ2VvX3BhdGhCdWZmZXIoKSA6IG5ldyBkM19nZW9fcGF0aENvbnRleHQoXyk7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgY2FjaGVTdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24oZDMuZ2VvLmFsYmVyc1VzYSgpKS5jb250ZXh0KG51bGwpO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fcGF0aFByb2plY3RTdHJlYW0ocHJvamVjdCkge1xuICAgIHZhciByZXNhbXBsZSA9IGQzX2dlb19yZXNhbXBsZShmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gcHJvamVjdChbIHggKiBkM19kZWdyZWVzLCB5ICogZDNfZGVncmVlcyBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHJlc2FtcGxlKHN0cmVhbSkpO1xuICAgIH07XG4gIH1cbiAgZDMuZ2VvLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG1ldGhvZHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IG5ldyBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSk7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbWV0aG9kcykgdHJhbnNmb3JtW2tdID0gbWV0aG9kc1trXTtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtKHN0cmVhbSkge1xuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICB9XG4gIGQzX2dlb190cmFuc2Zvcm0ucHJvdG90eXBlID0ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICB9LFxuICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5zcGhlcmUoKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdHJlYW0ubGluZUVuZCgpO1xuICAgIH0sXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICAgIH0sXG4gICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnNmb3JtUG9pbnQoc3RyZWFtLCBwb2ludCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uc3BoZXJlKCk7XG4gICAgICB9LFxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgfSxcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgfSxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGQzLmdlby5wcm9qZWN0aW9uID0gZDNfZ2VvX3Byb2plY3Rpb247XG4gIGQzLmdlby5wcm9qZWN0aW9uTXV0YXRvciA9IGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcjtcbiAgZnVuY3Rpb24gZDNfZ2VvX3Byb2plY3Rpb24ocHJvamVjdCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcHJvamVjdDtcbiAgICB9KSgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19wcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpIHtcbiAgICB2YXIgcHJvamVjdCwgcm90YXRlLCBwcm9qZWN0Um90YXRlLCBwcm9qZWN0UmVzYW1wbGUgPSBkM19nZW9fcmVzYW1wbGUoZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICByZXR1cm4gWyB4WzBdICogayArIM60eCwgzrR5IC0geFsxXSAqIGsgXTtcbiAgICB9KSwgayA9IDE1MCwgeCA9IDQ4MCwgeSA9IDI1MCwgzrsgPSAwLCDPhiA9IDAsIM60zrsgPSAwLCDOtM+GID0gMCwgzrTOsyA9IDAsIM60eCwgzrR5LCBwcmVjbGlwID0gZDNfZ2VvX2NsaXBBbnRpbWVyaWRpYW4sIHBvc3RjbGlwID0gZDNfaWRlbnRpdHksIGNsaXBBbmdsZSA9IG51bGwsIGNsaXBFeHRlbnQgPSBudWxsLCBzdHJlYW07XG4gICAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogZDNfcmFkaWFucywgcG9pbnRbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBbIHBvaW50WzBdICogayArIM60eCwgzrR5IC0gcG9pbnRbMV0gKiBrIF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlLmludmVydCgocG9pbnRbMF0gLSDOtHgpIC8gaywgKM60eSAtIHBvaW50WzFdKSAvIGspO1xuICAgICAgcmV0dXJuIHBvaW50ICYmIFsgcG9pbnRbMF0gKiBkM19kZWdyZWVzLCBwb2ludFsxXSAqIGQzX2RlZ3JlZXMgXTtcbiAgICB9XG4gICAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihvdXRwdXQpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtID0gZDNfZ2VvX3Byb2plY3Rpb25SYWRpYW5zKHByZWNsaXAocm90YXRlLCBwcm9qZWN0UmVzYW1wbGUocG9zdGNsaXAob3V0cHV0KSkpKTtcbiAgICAgIHN0cmVhbS52YWxpZCA9IHRydWU7XG4gICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQW5nbGU7XG4gICAgICBwcmVjbGlwID0gXyA9PSBudWxsID8gKGNsaXBBbmdsZSA9IF8sIGQzX2dlb19jbGlwQW50aW1lcmlkaWFuKSA6IGQzX2dlb19jbGlwQ2lyY2xlKChjbGlwQW5nbGUgPSArXykgKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBpbnZhbGlkYXRlKCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50O1xuICAgICAgY2xpcEV4dGVudCA9IF87XG4gICAgICBwb3N0Y2xpcCA9IF8gPyBkM19nZW9fY2xpcEV4dGVudChfWzBdWzBdLCBfWzBdWzFdLCBfWzFdWzBdLCBfWzFdWzFdKSA6IGQzX2lkZW50aXR5O1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9O1xuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBrO1xuICAgICAgayA9ICtfO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeCwgeSBdO1xuICAgICAgeCA9ICtfWzBdO1xuICAgICAgeSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrsgKiBkM19kZWdyZWVzLCDPhiAqIGQzX2RlZ3JlZXMgXTtcbiAgICAgIM67ID0gX1swXSAlIDM2MCAqIGQzX3JhZGlhbnM7XG4gICAgICDPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgzrTOuyAqIGQzX2RlZ3JlZXMsIM60z4YgKiBkM19kZWdyZWVzLCDOtM6zICogZDNfZGVncmVlcyBdO1xuICAgICAgzrTOuyA9IF9bMF0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTPhiA9IF9bMV0gJSAzNjAgKiBkM19yYWRpYW5zO1xuICAgICAgzrTOsyA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiBkM19yYWRpYW5zIDogMDtcbiAgICAgIHJldHVybiByZXNldCgpO1xuICAgIH07XG4gICAgZDMucmViaW5kKHByb2plY3Rpb24sIHByb2plY3RSZXNhbXBsZSwgXCJwcmVjaXNpb25cIik7XG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBwcm9qZWN0Um90YXRlID0gZDNfZ2VvX2NvbXBvc2Uocm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKM60zrssIM60z4YsIM60zrMpLCBwcm9qZWN0KTtcbiAgICAgIHZhciBjZW50ZXIgPSBwcm9qZWN0KM67LCDPhik7XG4gICAgICDOtHggPSB4IC0gY2VudGVyWzBdICogaztcbiAgICAgIM60eSA9IHkgKyBjZW50ZXJbMV0gKiBrO1xuICAgICAgcmV0dXJuIGludmFsaWRhdGUoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICAgIGlmIChzdHJlYW0pIHN0cmVhbS52YWxpZCA9IGZhbHNlLCBzdHJlYW0gPSBudWxsO1xuICAgICAgcmV0dXJuIHByb2plY3Rpb247XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2plY3QgPSBwcm9qZWN0QXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgICAgcmV0dXJuIHJlc2V0KCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcHJvamVjdGlvblJhZGlhbnMoc3RyZWFtKSB7XG4gICAgcmV0dXJuIGQzX2dlb190cmFuc2Zvcm1Qb2ludChzdHJlYW0sIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHN0cmVhbS5wb2ludCh4ICogZDNfcmFkaWFucywgeSAqIGQzX3JhZGlhbnMpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIozrssIM+GKSB7XG4gICAgcmV0dXJuIFsgzrssIM+GIF07XG4gIH1cbiAgKGQzLmdlby5lcXVpcmVjdGFuZ3VsYXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcik7XG4gIH0pLnJhdyA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXIuaW52ZXJ0ID0gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgZDMuZ2VvLnJvdGF0aW9uID0gZnVuY3Rpb24ocm90YXRlKSB7XG4gICAgcm90YXRlID0gZDNfZ2VvX3JvdGF0aW9uKHJvdGF0ZVswXSAlIDM2MCAqIGQzX3JhZGlhbnMsIHJvdGF0ZVsxXSAqIGQzX3JhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogZDNfcmFkaWFucyA6IDApO1xuICAgIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9XG4gICAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogZDNfcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkM19kZWdyZWVzLCBjb29yZGluYXRlcztcbiAgICB9O1xuICAgIHJldHVybiBmb3J3YXJkO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbijOuywgz4YpIHtcbiAgICByZXR1cm4gWyDOuyA+IM+AID8gzrsgLSDPhCA6IM67IDwgLc+AID8gzrsgKyDPhCA6IM67LCDPhiBdO1xuICB9XG4gIGQzX2dlb19pZGVudGl0eVJvdGF0aW9uLmludmVydCA9IGQzX2dlb19lcXVpcmVjdGFuZ3VsYXI7XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbijOtM67LCDOtM+GLCDOtM6zKSB7XG4gICAgcmV0dXJuIM60zrsgPyDOtM+GIHx8IM60zrMgPyBkM19nZW9fY29tcG9zZShkM19nZW9fcm90YXRpb27OuyjOtM67KSwgZDNfZ2VvX3JvdGF0aW9uz4bOsyjOtM+GLCDOtM6zKSkgOiBkM19nZW9fcm90YXRpb27OuyjOtM67KSA6IM60z4YgfHwgzrTOsyA/IGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykgOiBkM19nZW9faWRlbnRpdHlSb3RhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fZm9yd2FyZFJvdGF0aW9uzrsozrTOuykge1xuICAgIHJldHVybiBmdW5jdGlvbijOuywgz4YpIHtcbiAgICAgIHJldHVybiDOuyArPSDOtM67LCBbIM67ID4gz4AgPyDOuyAtIM+EIDogzrsgPCAtz4AgPyDOuyArIM+EIDogzrssIM+GIF07XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fcm90YXRpb27OuyjOtM67KSB7XG4gICAgdmFyIHJvdGF0aW9uID0gZDNfZ2VvX2ZvcndhcmRSb3RhdGlvbs67KM60zrspO1xuICAgIHJvdGF0aW9uLmludmVydCA9IGQzX2dlb19mb3J3YXJkUm90YXRpb27OuygtzrTOuyk7XG4gICAgcmV0dXJuIHJvdGF0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb19yb3RhdGlvbs+GzrMozrTPhiwgzrTOsykge1xuICAgIHZhciBjb3POtM+GID0gTWF0aC5jb3MozrTPhiksIHNpbs60z4YgPSBNYXRoLnNpbijOtM+GKSwgY29zzrTOsyA9IE1hdGguY29zKM60zrMpLCBzaW7OtM6zID0gTWF0aC5zaW4ozrTOsyk7XG4gICAgZnVuY3Rpb24gcm90YXRpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860z4YgKyB4ICogc2luzrTPhjtcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgLSBrICogc2luzrTOsywgeCAqIGNvc860z4YgLSB6ICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860zrMgKyB5ICogc2luzrTOsykgXTtcbiAgICB9XG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICB2YXIgY29zz4YgPSBNYXRoLmNvcyjPhiksIHggPSBNYXRoLmNvcyjOuykgKiBjb3PPhiwgeSA9IE1hdGguc2luKM67KSAqIGNvc8+GLCB6ID0gTWF0aC5zaW4oz4YpLCBrID0geiAqIGNvc860zrMgLSB5ICogc2luzrTOsztcbiAgICAgIHJldHVybiBbIE1hdGguYXRhbjIoeSAqIGNvc860zrMgKyB6ICogc2luzrTOsywgeCAqIGNvc860z4YgKyBrICogc2luzrTPhiksIGQzX2FzaW4oayAqIGNvc860z4YgLSB4ICogc2luzrTPhikgXTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGlvbjtcbiAgfVxuICBkMy5nZW8uY2lyY2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbiA9IFsgMCwgMCBdLCBhbmdsZSwgcHJlY2lzaW9uID0gNiwgaW50ZXJwb2xhdGU7XG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgICAgdmFyIGNlbnRlciA9IHR5cGVvZiBvcmlnaW4gPT09IFwiZnVuY3Rpb25cIiA/IG9yaWdpbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogb3JpZ2luLCByb3RhdGUgPSBkM19nZW9fcm90YXRpb24oLWNlbnRlclswXSAqIGQzX3JhZGlhbnMsIC1jZW50ZXJbMV0gKiBkM19yYWRpYW5zLCAwKS5pbnZlcnQsIHJpbmcgPSBbXTtcbiAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHtcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgICAgICAgeFswXSAqPSBkM19kZWdyZWVzLCB4WzFdICo9IGQzX2RlZ3JlZXM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIHJpbmcgXVxuICAgICAgfTtcbiAgICB9XG4gICAgY2lyY2xlLm9yaWdpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG9yaWdpbjtcbiAgICAgIG9yaWdpbiA9IHg7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgY2lyY2xlLmFuZ2xlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYW5nbGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZSgoYW5nbGUgPSAreCkgKiBkM19yYWRpYW5zLCBwcmVjaXNpb24gKiBkM19yYWRpYW5zKTtcbiAgICAgIHJldHVybiBjaXJjbGU7XG4gICAgfTtcbiAgICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgaW50ZXJwb2xhdGUgPSBkM19nZW9fY2lyY2xlSW50ZXJwb2xhdGUoYW5nbGUgKiBkM19yYWRpYW5zLCAocHJlY2lzaW9uID0gK18pICogZDNfcmFkaWFucyk7XG4gICAgICByZXR1cm4gY2lyY2xlO1xuICAgIH07XG4gICAgcmV0dXJuIGNpcmNsZS5hbmdsZSg5MCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19jaXJjbGVJbnRlcnBvbGF0ZShyYWRpdXMsIHByZWNpc2lvbikge1xuICAgIHZhciBjciA9IE1hdGguY29zKHJhZGl1cyksIHNyID0gTWF0aC5zaW4ocmFkaXVzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZnJvbSwgdG8sIGRpcmVjdGlvbiwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBzdGVwID0gZGlyZWN0aW9uICogcHJlY2lzaW9uO1xuICAgICAgaWYgKGZyb20gIT0gbnVsbCkge1xuICAgICAgICBmcm9tID0gZDNfZ2VvX2NpcmNsZUFuZ2xlKGNyLCBmcm9tKTtcbiAgICAgICAgdG8gPSBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHRvKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgPyBmcm9tIDwgdG8gOiBmcm9tID4gdG8pIGZyb20gKz0gZGlyZWN0aW9uICogz4Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcm9tID0gcmFkaXVzICsgZGlyZWN0aW9uICogz4Q7XG4gICAgICAgIHRvID0gcmFkaXVzIC0gLjUgKiBzdGVwO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcG9pbnQsIHQgPSBmcm9tOyBkaXJlY3Rpb24gPiAwID8gdCA+IHRvIDogdCA8IHRvOyB0IC09IHN0ZXApIHtcbiAgICAgICAgbGlzdGVuZXIucG9pbnQoKHBvaW50ID0gZDNfZ2VvX3NwaGVyaWNhbChbIGNyLCAtc3IgKiBNYXRoLmNvcyh0KSwgLXNyICogTWF0aC5zaW4odCkgXSkpWzBdLCBwb2ludFsxXSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9fY2lyY2xlQW5nbGUoY3IsIHBvaW50KSB7XG4gICAgdmFyIGEgPSBkM19nZW9fY2FydGVzaWFuKHBvaW50KTtcbiAgICBhWzBdIC09IGNyO1xuICAgIGQzX2dlb19jYXJ0ZXNpYW5Ob3JtYWxpemUoYSk7XG4gICAgdmFyIGFuZ2xlID0gZDNfYWNvcygtYVsxXSk7XG4gICAgcmV0dXJuICgoLWFbMl0gPCAwID8gLWFuZ2xlIDogYW5nbGUpICsgMiAqIE1hdGguUEkgLSDOtSkgJSAoMiAqIE1hdGguUEkpO1xuICB9XG4gIGQzLmdlby5kaXN0YW5jZSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgzpTOuyA9IChiWzBdIC0gYVswXSkgKiBkM19yYWRpYW5zLCDPhjAgPSBhWzFdICogZDNfcmFkaWFucywgz4YxID0gYlsxXSAqIGQzX3JhZGlhbnMsIHNpbs6UzrsgPSBNYXRoLnNpbijOlM67KSwgY29zzpTOuyA9IE1hdGguY29zKM6UzrspLCBzaW7PhjAgPSBNYXRoLnNpbijPhjApLCBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCBzaW7PhjEgPSBNYXRoLnNpbijPhjEpLCBjb3PPhjEgPSBNYXRoLmNvcyjPhjEpLCB0O1xuICAgIHJldHVybiBNYXRoLmF0YW4yKE1hdGguc3FydCgodCA9IGNvc8+GMSAqIHNpbs6UzrspICogdCArICh0ID0gY29zz4YwICogc2luz4YxIC0gc2luz4YwICogY29zz4YxICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YxICsgY29zz4YwICogY29zz4YxICogY29zzpTOuyk7XG4gIH07XG4gIGQzLmdlby5ncmF0aWN1bGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgeDEsIHgwLCBYMSwgWDAsIHkxLCB5MCwgWTEsIFkwLCBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCwgeCwgeSwgWCwgWSwgcHJlY2lzaW9uID0gMi41O1xuICAgIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTXVsdGlMaW5lU3RyaW5nXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBsaW5lcygpXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaW5lcygpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWCkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbChZMCAvIERZKSAqIERZLCBZMSwgRFkpLm1hcChZKSkuY29uY2F0KGQzLnJhbmdlKE1hdGguY2VpbCh4MCAvIGR4KSAqIGR4LCB4MSwgZHgpLmZpbHRlcihmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBhYnMoeCAlIERYKSA+IM61O1xuICAgICAgfSkubWFwKHgpKS5jb25jYXQoZDMucmFuZ2UoTWF0aC5jZWlsKHkwIC8gZHkpICogZHksIHkxLCBkeSkuZmlsdGVyKGZ1bmN0aW9uKHkpIHtcbiAgICAgICAgcmV0dXJuIGFicyh5ICUgRFkpID4gzrU7XG4gICAgICB9KS5tYXAoeSkpO1xuICAgIH1cbiAgICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICAgIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBncmF0aWN1bGUub3V0bGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbIFgoWDApLmNvbmNhdChZKFkxKS5zbGljZSgxKSwgWChYMSkucmV2ZXJzZSgpLnNsaWNlKDEpLCBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpIF1cbiAgICAgIH07XG4gICAgfTtcbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yRXh0ZW50KCk7XG4gICAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KF8pLm1pbm9yRXh0ZW50KF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gWyBbIFgwLCBZMCBdLCBbIFgxLCBZMSBdIF07XG4gICAgICBYMCA9ICtfWzBdWzBdLCBYMSA9ICtfWzFdWzBdO1xuICAgICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcbiAgICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICAgIGlmIChZMCA+IFkxKSBfID0gWTAsIFkwID0gWTEsIFkxID0gXztcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XG4gICAgfTtcbiAgICBncmF0aWN1bGUubWlub3JFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIFsgeDAsIHkwIF0sIFsgeDEsIHkxIF0gXTtcbiAgICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XG4gICAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgICAgaWYgKHgwID4geDEpIF8gPSB4MCwgeDAgPSB4MSwgeDEgPSBfO1xuICAgICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5zdGVwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLm1pbm9yU3RlcCgpO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5tYWpvclN0ZXAoXykubWlub3JTdGVwKF8pO1xuICAgIH07XG4gICAgZ3JhdGljdWxlLm1ham9yU3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgRFgsIERZIF07XG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgICB9O1xuICAgIGdyYXRpY3VsZS5taW5vclN0ZXAgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbIGR4LCBkeSBdO1xuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICBncmF0aWN1bGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgICAgcHJlY2lzaW9uID0gK187XG4gICAgICB4ID0gZDNfZ2VvX2dyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XG4gICAgICB5ID0gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBwcmVjaXNpb24pO1xuICAgICAgWCA9IGQzX2dlb19ncmF0aWN1bGVYKFkwLCBZMSwgOTApO1xuICAgICAgWSA9IGQzX2dlb19ncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcbiAgICAgIHJldHVybiBncmF0aWN1bGU7XG4gICAgfTtcbiAgICByZXR1cm4gZ3JhdGljdWxlLm1ham9yRXh0ZW50KFsgWyAtMTgwLCAtOTAgKyDOtSBdLCBbIDE4MCwgOTAgLSDOtSBdIF0pLm1pbm9yRXh0ZW50KFsgWyAtMTgwLCAtODAgLSDOtSBdLCBbIDE4MCwgODAgKyDOtSBdIF0pO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9fZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gICAgdmFyIHkgPSBkMy5yYW5nZSh5MCwgeTEgLSDOtSwgZHkpLmNvbmNhdCh5MSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7XG4gICAgICAgIHJldHVybiBbIHgsIHkgXTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2dyYXRpY3VsZVkoeDAsIHgxLCBkeCkge1xuICAgIHZhciB4ID0gZDMucmFuZ2UoeDAsIHgxIC0gzrUsIGR4KS5jb25jYXQoeDEpO1xuICAgIHJldHVybiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gWyB4LCB5IF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NvdXJjZShkKSB7XG4gICAgcmV0dXJuIGQuc291cmNlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RhcmdldChkKSB7XG4gICAgcmV0dXJuIGQudGFyZ2V0O1xuICB9XG4gIGQzLmdlby5ncmVhdEFyYyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3VyY2UgPSBkM19zb3VyY2UsIHNvdXJjZV8sIHRhcmdldCA9IGQzX3RhcmdldCwgdGFyZ2V0XztcbiAgICBmdW5jdGlvbiBncmVhdEFyYygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiTGluZVN0cmluZ1wiLFxuICAgICAgICBjb29yZGluYXRlczogWyBzb3VyY2VfIHx8IHNvdXJjZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0YXJnZXRfIHx8IHRhcmdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIF1cbiAgICAgIH07XG4gICAgfVxuICAgIGdyZWF0QXJjLmRpc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDMuZ2VvLmRpc3RhbmNlKHNvdXJjZV8gfHwgc291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRhcmdldF8gfHwgdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgZ3JlYXRBcmMuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc291cmNlO1xuICAgICAgc291cmNlID0gXywgc291cmNlXyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXztcbiAgICAgIHJldHVybiBncmVhdEFyYztcbiAgICB9O1xuICAgIGdyZWF0QXJjLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRhcmdldDtcbiAgICAgIHRhcmdldCA9IF8sIHRhcmdldF8gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gbnVsbCA6IF87XG4gICAgICByZXR1cm4gZ3JlYXRBcmM7XG4gICAgfTtcbiAgICBncmVhdEFyYy5wcmVjaXNpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gZ3JlYXRBcmMgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIGdyZWF0QXJjO1xuICB9O1xuICBkMy5nZW8uaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihzb3VyY2UsIHRhcmdldCkge1xuICAgIHJldHVybiBkM19nZW9faW50ZXJwb2xhdGUoc291cmNlWzBdICogZDNfcmFkaWFucywgc291cmNlWzFdICogZDNfcmFkaWFucywgdGFyZ2V0WzBdICogZDNfcmFkaWFucywgdGFyZ2V0WzFdICogZDNfcmFkaWFucyk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb19pbnRlcnBvbGF0ZSh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHZhciBjeTAgPSBNYXRoLmNvcyh5MCksIHN5MCA9IE1hdGguc2luKHkwKSwgY3kxID0gTWF0aC5jb3MoeTEpLCBzeTEgPSBNYXRoLnNpbih5MSksIGt4MCA9IGN5MCAqIE1hdGguY29zKHgwKSwga3kwID0gY3kwICogTWF0aC5zaW4oeDApLCBreDEgPSBjeTEgKiBNYXRoLmNvcyh4MSksIGt5MSA9IGN5MSAqIE1hdGguc2luKHgxKSwgZCA9IDIgKiBNYXRoLmFzaW4oTWF0aC5zcXJ0KGQzX2hhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogZDNfaGF2ZXJzaW4oeDEgLSB4MCkpKSwgayA9IDEgLyBNYXRoLnNpbihkKTtcbiAgICB2YXIgaW50ZXJwb2xhdGUgPSBkID8gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIEIgPSBNYXRoLnNpbih0ICo9IGQpICogaywgQSA9IE1hdGguc2luKGQgLSB0KSAqIGssIHggPSBBICoga3gwICsgQiAqIGt4MSwgeSA9IEEgKiBreTAgKyBCICoga3kxLCB6ID0gQSAqIHN5MCArIEIgKiBzeTE7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHksIHgpICogZDNfZGVncmVlcywgTWF0aC5hdGFuMih6LCBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkpICogZDNfZGVncmVlcyBdO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbIHgwICogZDNfZGVncmVlcywgeTAgKiBkM19kZWdyZWVzIF07XG4gICAgfTtcbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xuICB9XG4gIGQzLmdlby5sZW5ndGggPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBkM19nZW9fbGVuZ3RoU3VtID0gMDtcbiAgICBkMy5nZW8uc3RyZWFtKG9iamVjdCwgZDNfZ2VvX2xlbmd0aCk7XG4gICAgcmV0dXJuIGQzX2dlb19sZW5ndGhTdW07XG4gIH07XG4gIHZhciBkM19nZW9fbGVuZ3RoU3VtO1xuICB2YXIgZDNfZ2VvX2xlbmd0aCA9IHtcbiAgICBzcGhlcmU6IGQzX25vb3AsXG4gICAgcG9pbnQ6IGQzX25vb3AsXG4gICAgbGluZVN0YXJ0OiBkM19nZW9fbGVuZ3RoTGluZVN0YXJ0LFxuICAgIGxpbmVFbmQ6IGQzX25vb3AsXG4gICAgcG9seWdvblN0YXJ0OiBkM19ub29wLFxuICAgIHBvbHlnb25FbmQ6IGQzX25vb3BcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX2xlbmd0aExpbmVTdGFydCgpIHtcbiAgICB2YXIgzrswLCBzaW7PhjAsIGNvc8+GMDtcbiAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZnVuY3Rpb24ozrssIM+GKSB7XG4gICAgICDOuzAgPSDOuyAqIGQzX3JhZGlhbnMsIHNpbs+GMCA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhjAgPSBNYXRoLmNvcyjPhik7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gbmV4dFBvaW50O1xuICAgIH07XG4gICAgZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBkM19nZW9fbGVuZ3RoLnBvaW50ID0gZDNfZ2VvX2xlbmd0aC5saW5lRW5kID0gZDNfbm9vcDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIG5leHRQb2ludCjOuywgz4YpIHtcbiAgICAgIHZhciBzaW7PhiA9IE1hdGguc2luKM+GICo9IGQzX3JhZGlhbnMpLCBjb3PPhiA9IE1hdGguY29zKM+GKSwgdCA9IGFicygozrsgKj0gZDNfcmFkaWFucykgLSDOuzApLCBjb3POlM67ID0gTWF0aC5jb3ModCk7XG4gICAgICBkM19nZW9fbGVuZ3RoU3VtICs9IE1hdGguYXRhbjIoTWF0aC5zcXJ0KCh0ID0gY29zz4YgKiBNYXRoLnNpbih0KSkgKiB0ICsgKHQgPSBjb3PPhjAgKiBzaW7PhiAtIHNpbs+GMCAqIGNvc8+GICogY29zzpTOuykgKiB0KSwgc2luz4YwICogc2luz4YgKyBjb3PPhjAgKiBjb3PPhiAqIGNvc86UzrspO1xuICAgICAgzrswID0gzrssIHNpbs+GMCA9IHNpbs+GLCBjb3PPhjAgPSBjb3PPhjtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvX2F6aW11dGhhbChzY2FsZSwgYW5nbGUpIHtcbiAgICBmdW5jdGlvbiBhemltdXRoYWwozrssIM+GKSB7XG4gICAgICB2YXIgY29zzrsgPSBNYXRoLmNvcyjOuyksIGNvc8+GID0gTWF0aC5jb3Moz4YpLCBrID0gc2NhbGUoY29zzrsgKiBjb3PPhik7XG4gICAgICByZXR1cm4gWyBrICogY29zz4YgKiBNYXRoLnNpbijOuyksIGsgKiBNYXRoLnNpbijPhikgXTtcbiAgICB9XG4gICAgYXppbXV0aGFsLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciDPgSA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSwgYyA9IGFuZ2xlKM+BKSwgc2luYyA9IE1hdGguc2luKGMpLCBjb3NjID0gTWF0aC5jb3MoYyk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHggKiBzaW5jLCDPgSAqIGNvc2MpLCBNYXRoLmFzaW4oz4EgJiYgeSAqIHNpbmMgLyDPgSkgXTtcbiAgICB9O1xuICAgIHJldHVybiBhemltdXRoYWw7XG4gIH1cbiAgdmFyIGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWEgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDIgLyAoMSArIGNvc867Y29zz4YpKTtcbiAgfSwgZnVuY3Rpb24oz4EpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguYXNpbijPgSAvIDIpO1xuICB9KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVhbEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfZ2VvX3Byb2plY3Rpb24oZDNfZ2VvX2F6aW11dGhhbEVxdWFsQXJlYSk7XG4gIH0pLnJhdyA9IGQzX2dlb19hemltdXRoYWxFcXVhbEFyZWE7XG4gIHZhciBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKGNvc867Y29zz4YpIHtcbiAgICB2YXIgYyA9IE1hdGguYWNvcyhjb3POu2Nvc8+GKTtcbiAgICByZXR1cm4gYyAmJiBjIC8gTWF0aC5zaW4oYyk7XG4gIH0sIGQzX2lkZW50aXR5KTtcbiAgKGQzLmdlby5hemltdXRoYWxFcXVpZGlzdGFudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQpO1xuICB9KS5yYXcgPSBkM19nZW9fYXppbXV0aGFsRXF1aWRpc3RhbnQ7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0NvbmZvcm1hbCjPhjAsIM+GMSkge1xuICAgIHZhciBjb3PPhjAgPSBNYXRoLmNvcyjPhjApLCB0ID0gZnVuY3Rpb24oz4YpIHtcbiAgICAgIHJldHVybiBNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpO1xuICAgIH0sIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiBNYXRoLmxvZyhjb3PPhjAgLyBNYXRoLmNvcyjPhjEpKSAvIE1hdGgubG9nKHQoz4YxKSAvIHQoz4YwKSksIEYgPSBjb3PPhjAgKiBNYXRoLnBvdyh0KM+GMCksIG4pIC8gbjtcbiAgICBpZiAoIW4pIHJldHVybiBkM19nZW9fbWVyY2F0b3I7XG4gICAgZnVuY3Rpb24gZm9yd2FyZCjOuywgz4YpIHtcbiAgICAgIGlmIChGID4gMCkge1xuICAgICAgICBpZiAoz4YgPCAtaGFsZs+AICsgzrUpIM+GID0gLWhhbGbPgCArIM61O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKM+GID4gaGFsZs+AIC0gzrUpIM+GID0gaGFsZs+AIC0gzrU7XG4gICAgICB9XG4gICAgICB2YXIgz4EgPSBGIC8gTWF0aC5wb3codCjPhiksIG4pO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBGIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRiAtIHksIM+BID0gZDNfc2duKG4pICogTWF0aC5zcXJ0KHggKiB4ICsgz4EwX3kgKiDPgTBfeSk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIDIgKiBNYXRoLmF0YW4oTWF0aC5wb3coRiAvIM+BLCAxIC8gbikpIC0gaGFsZs+AIF07XG4gICAgfTtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxuICAoZDMuZ2VvLmNvbmljQ29uZm9ybWFsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNDb25mb3JtYWwpO1xuICB9KS5yYXcgPSBkM19nZW9fY29uaWNDb25mb3JtYWw7XG4gIGZ1bmN0aW9uIGQzX2dlb19jb25pY0VxdWlkaXN0YW50KM+GMCwgz4YxKSB7XG4gICAgdmFyIGNvc8+GMCA9IE1hdGguY29zKM+GMCksIG4gPSDPhjAgPT09IM+GMSA/IE1hdGguc2luKM+GMCkgOiAoY29zz4YwIC0gTWF0aC5jb3Moz4YxKSkgLyAoz4YxIC0gz4YwKSwgRyA9IGNvc8+GMCAvIG4gKyDPhjA7XG4gICAgaWYgKGFicyhuKSA8IM61KSByZXR1cm4gZDNfZ2VvX2VxdWlyZWN0YW5ndWxhcjtcbiAgICBmdW5jdGlvbiBmb3J3YXJkKM67LCDPhikge1xuICAgICAgdmFyIM+BID0gRyAtIM+GO1xuICAgICAgcmV0dXJuIFsgz4EgKiBNYXRoLnNpbihuICogzrspLCBHIC0gz4EgKiBNYXRoLmNvcyhuICogzrspIF07XG4gICAgfVxuICAgIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgdmFyIM+BMF95ID0gRyAtIHk7XG4gICAgICByZXR1cm4gWyBNYXRoLmF0YW4yKHgsIM+BMF95KSAvIG4sIEcgLSBkM19zZ24obikgKiBNYXRoLnNxcnQoeCAqIHggKyDPgTBfeSAqIM+BMF95KSBdO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmQ7XG4gIH1cbiAgKGQzLmdlby5jb25pY0VxdWlkaXN0YW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19jb25pYyhkM19nZW9fY29uaWNFcXVpZGlzdGFudCk7XG4gIH0pLnJhdyA9IGQzX2dlb19jb25pY0VxdWlkaXN0YW50O1xuICB2YXIgZDNfZ2VvX2dub21vbmljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyBjb3POu2Nvc8+GO1xuICB9LCBNYXRoLmF0YW4pO1xuICAoZDMuZ2VvLmdub21vbmljID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX2dlb19wcm9qZWN0aW9uKGQzX2dlb19nbm9tb25pYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19nbm9tb25pYztcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIM67LCBNYXRoLmxvZyhNYXRoLnRhbijPgCAvIDQgKyDPhiAvIDIpKSBdO1xuICB9XG4gIGQzX2dlb19tZXJjYXRvci5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsgeCwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh5KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvX21lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gICAgdmFyIG0gPSBkM19nZW9fcHJvamVjdGlvbihwcm9qZWN0KSwgc2NhbGUgPSBtLnNjYWxlLCB0cmFuc2xhdGUgPSBtLnRyYW5zbGF0ZSwgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCwgY2xpcEF1dG87XG4gICAgbS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHYgPSBzY2FsZS5hcHBseShtLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHYgPT09IG0gPyBjbGlwQXV0byA/IG0uY2xpcEV4dGVudChudWxsKSA6IG0gOiB2O1xuICAgIH07XG4gICAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2ID0gdHJhbnNsYXRlLmFwcGx5KG0sIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdiA9PT0gbSA/IGNsaXBBdXRvID8gbS5jbGlwRXh0ZW50KG51bGwpIDogbSA6IHY7XG4gICAgfTtcbiAgICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICB2YXIgdiA9IGNsaXBFeHRlbnQuYXBwbHkobSwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh2ID09PSBtKSB7XG4gICAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBrID0gz4AgKiBzY2FsZSgpLCB0ID0gdHJhbnNsYXRlKCk7XG4gICAgICAgICAgY2xpcEV4dGVudChbIFsgdFswXSAtIGssIHRbMV0gLSBrIF0sIFsgdFswXSArIGssIHRbMV0gKyBrIF0gXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2xpcEF1dG8pIHtcbiAgICAgICAgdiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdjtcbiAgICB9O1xuICAgIHJldHVybiBtLmNsaXBFeHRlbnQobnVsbCk7XG4gIH1cbiAgKGQzLmdlby5tZXJjYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fbWVyY2F0b3JQcm9qZWN0aW9uKGQzX2dlb19tZXJjYXRvcik7XG4gIH0pLnJhdyA9IGQzX2dlb19tZXJjYXRvcjtcbiAgdmFyIGQzX2dlb19vcnRob2dyYXBoaWMgPSBkM19nZW9fYXppbXV0aGFsKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAxO1xuICB9LCBNYXRoLmFzaW4pO1xuICAoZDMuZ2VvLm9ydGhvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fb3J0aG9ncmFwaGljKTtcbiAgfSkucmF3ID0gZDNfZ2VvX29ydGhvZ3JhcGhpYztcbiAgdmFyIGQzX2dlb19zdGVyZW9ncmFwaGljID0gZDNfZ2VvX2F6aW11dGhhbChmdW5jdGlvbihjb3POu2Nvc8+GKSB7XG4gICAgcmV0dXJuIDEgLyAoMSArIGNvc867Y29zz4YpO1xuICB9LCBmdW5jdGlvbijPgSkge1xuICAgIHJldHVybiAyICogTWF0aC5hdGFuKM+BKTtcbiAgfSk7XG4gIChkMy5nZW8uc3RlcmVvZ3JhcGhpYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19nZW9fcHJvamVjdGlvbihkM19nZW9fc3RlcmVvZ3JhcGhpYyk7XG4gIH0pLnJhdyA9IGQzX2dlb19zdGVyZW9ncmFwaGljO1xuICBmdW5jdGlvbiBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yKM67LCDPhikge1xuICAgIHJldHVybiBbIE1hdGgubG9nKE1hdGgudGFuKM+AIC8gNCArIM+GIC8gMikpLCAtzrsgXTtcbiAgfVxuICBkM19nZW9fdHJhbnN2ZXJzZU1lcmNhdG9yLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyAteSwgMiAqIE1hdGguYXRhbihNYXRoLmV4cCh4KSkgLSBoYWxmz4AgXTtcbiAgfTtcbiAgKGQzLmdlby50cmFuc3ZlcnNlTWVyY2F0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvamVjdGlvbiA9IGQzX2dlb19tZXJjYXRvclByb2plY3Rpb24oZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvciksIGNlbnRlciA9IHByb2plY3Rpb24uY2VudGVyLCByb3RhdGUgPSBwcm9qZWN0aW9uLnJvdGF0ZTtcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBfID8gY2VudGVyKFsgLV9bMV0sIF9bMF0gXSkgOiAoXyA9IGNlbnRlcigpLCBbIF9bMV0sIC1fWzBdIF0pO1xuICAgIH07XG4gICAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gXyA/IHJvdGF0ZShbIF9bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwIF0pIDogKF8gPSByb3RhdGUoKSwgXG4gICAgICBbIF9bMF0sIF9bMV0sIF9bMl0gLSA5MCBdKTtcbiAgICB9O1xuICAgIHJldHVybiByb3RhdGUoWyAwLCAwLCA5MCBdKTtcbiAgfSkucmF3ID0gZDNfZ2VvX3RyYW5zdmVyc2VNZXJjYXRvcjtcbiAgZDMuZ2VvbSA9IHt9O1xuICBmdW5jdGlvbiBkM19nZW9tX3BvaW50WChkKSB7XG4gICAgcmV0dXJuIGRbMF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2ludFkoZCkge1xuICAgIHJldHVybiBkWzFdO1xuICB9XG4gIGQzLmdlb20uaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaHVsbCh2ZXJ0aWNlcyk7XG4gICAgZnVuY3Rpb24gaHVsbChkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSByZXR1cm4gW107XG4gICAgICB2YXIgZnggPSBkM19mdW5jdG9yKHgpLCBmeSA9IGQzX2Z1bmN0b3IoeSksIGksIG4gPSBkYXRhLmxlbmd0aCwgcG9pbnRzID0gW10sIGZsaXBwZWRQb2ludHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgcG9pbnRzLnB1c2goWyArZnguY2FsbCh0aGlzLCBkYXRhW2ldLCBpKSwgK2Z5LmNhbGwodGhpcywgZGF0YVtpXSwgaSksIGkgXSk7XG4gICAgICB9XG4gICAgICBwb2ludHMuc29ydChkM19nZW9tX2h1bGxPcmRlcik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSBmbGlwcGVkUG9pbnRzLnB1c2goWyBwb2ludHNbaV1bMF0sIC1wb2ludHNbaV1bMV0gXSk7XG4gICAgICB2YXIgdXBwZXIgPSBkM19nZW9tX2h1bGxVcHBlcihwb2ludHMpLCBsb3dlciA9IGQzX2dlb21faHVsbFVwcGVyKGZsaXBwZWRQb2ludHMpO1xuICAgICAgdmFyIHNraXBMZWZ0ID0gbG93ZXJbMF0gPT09IHVwcGVyWzBdLCBza2lwUmlnaHQgPSBsb3dlcltsb3dlci5sZW5ndGggLSAxXSA9PT0gdXBwZXJbdXBwZXIubGVuZ3RoIC0gMV0sIHBvbHlnb24gPSBbXTtcbiAgICAgIGZvciAoaSA9IHVwcGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBwb2x5Z29uLnB1c2goZGF0YVtwb2ludHNbdXBwZXJbaV1dWzJdXSk7XG4gICAgICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlci5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgcG9seWdvbi5wdXNoKGRhdGFbcG9pbnRzW2xvd2VyW2ldXVsyXV0pO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfVxuICAgIGh1bGwueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSBfLCBodWxsKSA6IHg7XG4gICAgfTtcbiAgICBodWxsLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gXywgaHVsbCkgOiB5O1xuICAgIH07XG4gICAgcmV0dXJuIGh1bGw7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21faHVsbFVwcGVyKHBvaW50cykge1xuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCwgaHVsbCA9IFsgMCwgMSBdLCBocyA9IDI7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyBpKyspIHtcbiAgICAgIHdoaWxlIChocyA+IDEgJiYgZDNfY3Jvc3MyZChwb2ludHNbaHVsbFtocyAtIDJdXSwgcG9pbnRzW2h1bGxbaHMgLSAxXV0sIHBvaW50c1tpXSkgPD0gMCkgLS1ocztcbiAgICAgIGh1bGxbaHMrK10gPSBpO1xuICAgIH1cbiAgICByZXR1cm4gaHVsbC5zbGljZSgwLCBocyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV9odWxsT3JkZXIoYSwgYikge1xuICAgIHJldHVybiBhWzBdIC0gYlswXSB8fCBhWzFdIC0gYlsxXTtcbiAgfVxuICBkMy5nZW9tLnBvbHlnb24gPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGQzX3N1YmNsYXNzKGNvb3JkaW5hdGVzLCBkM19nZW9tX3BvbHlnb25Qcm90b3R5cGUpO1xuICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcbiAgdmFyIGQzX2dlb21fcG9seWdvblByb3RvdHlwZSA9IGQzLmdlb20ucG9seWdvbi5wcm90b3R5cGUgPSBbXTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmFyZWEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIGEsIGIgPSB0aGlzW24gLSAxXSwgYXJlYSA9IDA7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBhcmVhICs9IGFbMV0gKiBiWzBdIC0gYVswXSAqIGJbMV07XG4gICAgfVxuICAgIHJldHVybiBhcmVhICogLjU7XG4gIH07XG4gIGQzX2dlb21fcG9seWdvblByb3RvdHlwZS5jZW50cm9pZCA9IGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGgsIHggPSAwLCB5ID0gMCwgYSwgYiA9IHRoaXNbbiAtIDFdLCBjO1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgayA9IC0xIC8gKDYgKiB0aGlzLmFyZWEoKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGEgPSBiO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcbiAgICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgICB5ICs9IChhWzFdICsgYlsxXSkgKiBjO1xuICAgIH1cbiAgICByZXR1cm4gWyB4ICogaywgeSAqIGsgXTtcbiAgfTtcbiAgZDNfZ2VvbV9wb2x5Z29uUHJvdG90eXBlLmNsaXAgPSBmdW5jdGlvbihzdWJqZWN0KSB7XG4gICAgdmFyIGlucHV0LCBjbG9zZWQgPSBkM19nZW9tX3BvbHlnb25DbG9zZWQoc3ViamVjdCksIGkgPSAtMSwgbiA9IHRoaXMubGVuZ3RoIC0gZDNfZ2VvbV9wb2x5Z29uQ2xvc2VkKHRoaXMpLCBqLCBtLCBhID0gdGhpc1tuIC0gMV0sIGIsIGMsIGQ7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlucHV0ID0gc3ViamVjdC5zbGljZSgpO1xuICAgICAgc3ViamVjdC5sZW5ndGggPSAwO1xuICAgICAgYiA9IHRoaXNbaV07XG4gICAgICBjID0gaW5wdXRbKG0gPSBpbnB1dC5sZW5ndGggLSBjbG9zZWQpIC0gMV07XG4gICAgICBqID0gLTE7XG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICBkID0gaW5wdXRbal07XG4gICAgICAgIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoZCwgYSwgYikpIHtcbiAgICAgICAgICBpZiAoIWQzX2dlb21fcG9seWdvbkluc2lkZShjLCBhLCBiKSkge1xuICAgICAgICAgICAgc3ViamVjdC5wdXNoKGQzX2dlb21fcG9seWdvbkludGVyc2VjdChjLCBkLCBhLCBiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YmplY3QucHVzaChkKTtcbiAgICAgICAgfSBlbHNlIGlmIChkM19nZW9tX3BvbHlnb25JbnNpZGUoYywgYSwgYikpIHtcbiAgICAgICAgICBzdWJqZWN0LnB1c2goZDNfZ2VvbV9wb2x5Z29uSW50ZXJzZWN0KGMsIGQsIGEsIGIpKTtcbiAgICAgICAgfVxuICAgICAgICBjID0gZDtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZWQpIHN1YmplY3QucHVzaChzdWJqZWN0WzBdKTtcbiAgICAgIGEgPSBiO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV9wb2x5Z29uSW5zaWRlKHAsIGEsIGIpIHtcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChwWzFdIC0gYVsxXSkgPCAoYlsxXSAtIGFbMV0pICogKHBbMF0gLSBhWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25JbnRlcnNlY3QoYywgZCwgYSwgYikge1xuICAgIHZhciB4MSA9IGNbMF0sIHgzID0gYVswXSwgeDIxID0gZFswXSAtIHgxLCB4NDMgPSBiWzBdIC0geDMsIHkxID0gY1sxXSwgeTMgPSBhWzFdLCB5MjEgPSBkWzFdIC0geTEsIHk0MyA9IGJbMV0gLSB5MywgdWEgPSAoeDQzICogKHkxIC0geTMpIC0geTQzICogKHgxIC0geDMpKSAvICh5NDMgKiB4MjEgLSB4NDMgKiB5MjEpO1xuICAgIHJldHVybiBbIHgxICsgdWEgKiB4MjEsIHkxICsgdWEgKiB5MjEgXTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3BvbHlnb25DbG9zZWQoY29vcmRpbmF0ZXMpIHtcbiAgICB2YXIgYSA9IGNvb3JkaW5hdGVzWzBdLCBiID0gY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuICEoYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV0pO1xuICB9XG4gIHZhciBkM19nZW9tX3Zvcm9ub2lFZGdlcywgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMsIGQzX2dlb21fdm9yb25vaUJlYWNoZXMsIGQzX2dlb21fdm9yb25vaUJlYWNoUG9vbCA9IFtdLCBkM19nZW9tX3Zvcm9ub2lGaXJzdENpcmNsZSwgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcywgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbCA9IFtdO1xuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lCZWFjaCgpIHtcbiAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUodGhpcyk7XG4gICAgdGhpcy5lZGdlID0gdGhpcy5zaXRlID0gdGhpcy5jaXJjbGUgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgICB2YXIgYmVhY2ggPSBkM19nZW9tX3Zvcm9ub2lCZWFjaFBvb2wucG9wKCkgfHwgbmV3IGQzX2dlb21fdm9yb25vaUJlYWNoKCk7XG4gICAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gICAgcmV0dXJuIGJlYWNoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKSB7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLnJlbW92ZShiZWFjaCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hQb29sLnB1c2goYmVhY2gpO1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShiZWFjaCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goYmVhY2gpIHtcbiAgICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLCB4ID0gY2lyY2xlLngsIHkgPSBjaXJjbGUuY3ksIHZlcnRleCA9IHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfSwgcHJldmlvdXMgPSBiZWFjaC5QLCBuZXh0ID0gYmVhY2guTiwgZGlzYXBwZWFyaW5nID0gWyBiZWFjaCBdO1xuICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGJlYWNoKTtcbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xuICAgIHdoaWxlIChsQXJjLmNpcmNsZSAmJiBhYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSBsQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgcHJldmlvdXMgPSBsQXJjLlA7XG4gICAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaURldGFjaEJlYWNoKGxBcmMpO1xuICAgICAgbEFyYyA9IHByZXZpb3VzO1xuICAgIH1cbiAgICBkaXNhcHBlYXJpbmcudW5zaGlmdChsQXJjKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgdmFyIHJBcmMgPSBuZXh0O1xuICAgIHdoaWxlIChyQXJjLmNpcmNsZSAmJiBhYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgzrUgJiYgYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCDOtSkge1xuICAgICAgbmV4dCA9IHJBcmMuTjtcbiAgICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQmVhY2gockFyYyk7XG4gICAgICByQXJjID0gbmV4dDtcbiAgICB9XG4gICAgZGlzYXBwZWFyaW5nLnB1c2gockFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsIGlBcmM7XG4gICAgZm9yIChpQXJjID0gMTsgaUFyYyA8IG5BcmNzOyArK2lBcmMpIHtcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XG4gICAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgdmVydGV4KTtcbiAgICB9XG4gICAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcbiAgICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gICAgckFyYy5lZGdlID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsQXJjLnNpdGUsIHJBcmMuc2l0ZSwgbnVsbCwgdmVydGV4KTtcbiAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKHJBcmMpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUFkZEJlYWNoKHNpdGUpIHtcbiAgICB2YXIgeCA9IHNpdGUueCwgZGlyZWN0cml4ID0gc2l0ZS55LCBsQXJjLCByQXJjLCBkeGwsIGR4ciwgbm9kZSA9IGQzX2dlb21fdm9yb25vaUJlYWNoZXMuXztcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgZHhsID0gZDNfZ2VvbV92b3Jvbm9pTGVmdEJyZWFrUG9pbnQobm9kZSwgZGlyZWN0cml4KSAtIHg7XG4gICAgICBpZiAoZHhsID4gzrUpIG5vZGUgPSBub2RlLkw7IGVsc2Uge1xuICAgICAgICBkeHIgPSB4IC0gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICAgIGlmIChkeHIgPiDOtSkge1xuICAgICAgICAgIGlmICghbm9kZS5SKSB7XG4gICAgICAgICAgICBsQXJjID0gbm9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlID0gbm9kZS5SO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChkeGwgPiAtzrUpIHtcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XG4gICAgICAgICAgICByQXJjID0gbm9kZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC3OtSkge1xuICAgICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgICByQXJjID0gbm9kZS5OO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBuZXdBcmMgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVCZWFjaChzaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuICAgIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuICAgIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgICByQXJjID0gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcbiAgICAgIGQzX2dlb21fdm9yb25vaUJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgICBuZXdBcmMuZWRnZSA9IHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUobEFyYyk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lBdHRhY2hDaXJjbGUockFyYyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghckFyYykge1xuICAgICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkM19nZW9tX3Zvcm9ub2lEZXRhY2hDaXJjbGUobEFyYyk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKHJBcmMpO1xuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSwgYXggPSBsU2l0ZS54LCBheSA9IGxTaXRlLnksIGJ4ID0gc2l0ZS54IC0gYXgsIGJ5ID0gc2l0ZS55IC0gYXksIHJTaXRlID0gckFyYy5zaXRlLCBjeCA9IHJTaXRlLnggLSBheCwgY3kgPSByU2l0ZS55IC0gYXksIGQgPSAyICogKGJ4ICogY3kgLSBieSAqIGN4KSwgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgdmVydGV4ID0ge1xuICAgICAgeDogKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCxcbiAgICAgIHk6IChieCAqIGhjIC0gY3ggKiBoYikgLyBkICsgYXlcbiAgICB9O1xuICAgIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQockFyYy5lZGdlLCBsU2l0ZSwgclNpdGUsIHZlcnRleCk7XG4gICAgbmV3QXJjLmVkZ2UgPSBkM19nZW9tX3Zvcm9ub2lDcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICAgIHJBcmMuZWRnZSA9IGQzX2dlb21fdm9yb25vaUNyZWF0ZUVkZ2Uoc2l0ZSwgclNpdGUsIG51bGwsIHZlcnRleCk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQXR0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShyQXJjKTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lMZWZ0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICAgIHZhciBzaXRlID0gYXJjLnNpdGUsIHJmb2N4ID0gc2l0ZS54LCByZm9jeSA9IHNpdGUueSwgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xuICAgIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xuICAgIHZhciBsQXJjID0gYXJjLlA7XG4gICAgaWYgKCFsQXJjKSByZXR1cm4gLUluZmluaXR5O1xuICAgIHNpdGUgPSBsQXJjLnNpdGU7XG4gICAgdmFyIGxmb2N4ID0gc2l0ZS54LCBsZm9jeSA9IHNpdGUueSwgcGxieTIgPSBsZm9jeSAtIGRpcmVjdHJpeDtcbiAgICBpZiAoIXBsYnkyKSByZXR1cm4gbGZvY3g7XG4gICAgdmFyIGhsID0gbGZvY3ggLSByZm9jeCwgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLCBiID0gaGwgLyBwbGJ5MjtcbiAgICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG4gICAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmlnaHRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcbiAgICBpZiAockFyYykgcmV0dXJuIGQzX2dlb21fdm9yb25vaUxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gICAgdmFyIHNpdGUgPSBhcmMuc2l0ZTtcbiAgICByZXR1cm4gc2l0ZS55ID09PSBkaXJlY3RyaXggPyBzaXRlLnggOiBJbmZpbml0eTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDZWxsKHNpdGUpIHtcbiAgICB0aGlzLnNpdGUgPSBzaXRlO1xuICAgIHRoaXMuZWRnZXMgPSBbXTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lDZWxsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhbGZFZGdlcyA9IHRoaXMuZWRnZXMsIGlIYWxmRWRnZSA9IGhhbGZFZGdlcy5sZW5ndGgsIGVkZ2U7XG4gICAgd2hpbGUgKGlIYWxmRWRnZS0tKSB7XG4gICAgICBlZGdlID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZWRnZTtcbiAgICAgIGlmICghZWRnZS5iIHx8ICFlZGdlLmEpIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAxKTtcbiAgICB9XG4gICAgaGFsZkVkZ2VzLnNvcnQoZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2VPcmRlcik7XG4gICAgcmV0dXJuIGhhbGZFZGdlcy5sZW5ndGg7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUNsb3NlQ2VsbHMoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gZXh0ZW50WzBdWzBdLCB4MSA9IGV4dGVudFsxXVswXSwgeTAgPSBleHRlbnRbMF1bMV0sIHkxID0gZXh0ZW50WzFdWzFdLCB4MiwgeTIsIHgzLCB5MywgY2VsbHMgPSBkM19nZW9tX3Zvcm9ub2lDZWxscywgaUNlbGwgPSBjZWxscy5sZW5ndGgsIGNlbGwsIGlIYWxmRWRnZSwgaGFsZkVkZ2VzLCBuSGFsZkVkZ2VzLCBzdGFydCwgZW5kO1xuICAgIHdoaWxlIChpQ2VsbC0tKSB7XG4gICAgICBjZWxsID0gY2VsbHNbaUNlbGxdO1xuICAgICAgaWYgKCFjZWxsIHx8ICFjZWxsLnByZXBhcmUoKSkgY29udGludWU7XG4gICAgICBoYWxmRWRnZXMgPSBjZWxsLmVkZ2VzO1xuICAgICAgbkhhbGZFZGdlcyA9IGhhbGZFZGdlcy5sZW5ndGg7XG4gICAgICBpSGFsZkVkZ2UgPSAwO1xuICAgICAgd2hpbGUgKGlIYWxmRWRnZSA8IG5IYWxmRWRnZXMpIHtcbiAgICAgICAgZW5kID0gaGFsZkVkZ2VzW2lIYWxmRWRnZV0uZW5kKCksIHgzID0gZW5kLngsIHkzID0gZW5kLnk7XG4gICAgICAgIHN0YXJ0ID0gaGFsZkVkZ2VzWysraUhhbGZFZGdlICUgbkhhbGZFZGdlc10uc3RhcnQoKSwgeDIgPSBzdGFydC54LCB5MiA9IHN0YXJ0Lnk7XG4gICAgICAgIGlmIChhYnMoeDMgLSB4MikgPiDOtSB8fCBhYnMoeTMgLSB5MikgPiDOtSkge1xuICAgICAgICAgIGhhbGZFZGdlcy5zcGxpY2UoaUhhbGZFZGdlLCAwLCBuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShjZWxsLnNpdGUsIGVuZCwgYWJzKHgzIC0geDApIDwgzrUgJiYgeTEgLSB5MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDAsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MCkgPCDOtSA/IHkyIDogeTFcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTEpIDwgzrUgJiYgeDEgLSB4MyA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTEpIDwgzrUgPyB4MiA6IHgxLFxuICAgICAgICAgICAgeTogeTFcbiAgICAgICAgICB9IDogYWJzKHgzIC0geDEpIDwgzrUgJiYgeTMgLSB5MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBhYnMoeDIgLSB4MSkgPCDOtSA/IHkyIDogeTBcbiAgICAgICAgICB9IDogYWJzKHkzIC0geTApIDwgzrUgJiYgeDMgLSB4MCA+IM61ID8ge1xuICAgICAgICAgICAgeDogYWJzKHkyIC0geTApIDwgzrUgPyB4MiA6IHgwLFxuICAgICAgICAgICAgeTogeTBcbiAgICAgICAgICB9IDogbnVsbCksIGNlbGwuc2l0ZSwgbnVsbCkpO1xuICAgICAgICAgICsrbkhhbGZFZGdlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZU9yZGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hbmdsZSAtIGEuYW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlKCkge1xuICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZSh0aGlzKTtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLmFyYyA9IHRoaXMuc2l0ZSA9IHRoaXMuY3kgPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaUF0dGFjaENpcmNsZShhcmMpIHtcbiAgICB2YXIgbEFyYyA9IGFyYy5QLCByQXJjID0gYXJjLk47XG4gICAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG4gICAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLCBjU2l0ZSA9IGFyYy5zaXRlLCByU2l0ZSA9IHJBcmMuc2l0ZTtcbiAgICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XG4gICAgdmFyIGJ4ID0gY1NpdGUueCwgYnkgPSBjU2l0ZS55LCBheCA9IGxTaXRlLnggLSBieCwgYXkgPSBsU2l0ZS55IC0gYnksIGN4ID0gclNpdGUueCAtIGJ4LCBjeSA9IHJTaXRlLnkgLSBieTtcbiAgICB2YXIgZCA9IDIgKiAoYXggKiBjeSAtIGF5ICogY3gpO1xuICAgIGlmIChkID49IC3OtTIpIHJldHVybjtcbiAgICB2YXIgaGEgPSBheCAqIGF4ICsgYXkgKiBheSwgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSwgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLCB5ID0gKGF4ICogaGMgLSBjeCAqIGhhKSAvIGQsIGN5ID0geSArIGJ5O1xuICAgIHZhciBjaXJjbGUgPSBkM19nZW9tX3Zvcm9ub2lDaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBkM19nZW9tX3Zvcm9ub2lDaXJjbGUoKTtcbiAgICBjaXJjbGUuYXJjID0gYXJjO1xuICAgIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gICAgY2lyY2xlLnggPSB4ICsgYng7XG4gICAgY2lyY2xlLnkgPSBjeSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICBjaXJjbGUuY3kgPSBjeTtcbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xuICAgIHZhciBiZWZvcmUgPSBudWxsLCBub2RlID0gZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlcy5fO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoY2lyY2xlLnkgPCBub2RlLnkgfHwgY2lyY2xlLnkgPT09IG5vZGUueSAmJiBjaXJjbGUueCA8PSBub2RlLngpIHtcbiAgICAgICAgaWYgKG5vZGUuTCkgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gbm9kZS5QO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SOyBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcbiAgICBpZiAoIWJlZm9yZSkgZDNfZ2VvbV92b3Jvbm9pRmlyc3RDaXJjbGUgPSBjaXJjbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pRGV0YWNoQ2lyY2xlKGFyYykge1xuICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICAgIGlmIChjaXJjbGUpIHtcbiAgICAgIGlmICghY2lyY2xlLlApIGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlID0gY2lyY2xlLk47XG4gICAgICBkM19nZW9tX3Zvcm9ub2lDaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pQ2lyY2xlUG9vbC5wdXNoKGNpcmNsZSk7XG4gICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja05vZGUoY2lyY2xlKTtcbiAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lDbGlwRWRnZXMoZXh0ZW50KSB7XG4gICAgdmFyIGVkZ2VzID0gZDNfZ2VvbV92b3Jvbm9pRWRnZXMsIGNsaXAgPSBkM19nZW9tX2NsaXBMaW5lKGV4dGVudFswXVswXSwgZXh0ZW50WzBdWzFdLCBleHRlbnRbMV1bMF0sIGV4dGVudFsxXVsxXSksIGkgPSBlZGdlcy5sZW5ndGgsIGU7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgZSA9IGVkZ2VzW2ldO1xuICAgICAgaWYgKCFkM19nZW9tX3Zvcm9ub2lDb25uZWN0RWRnZShlLCBleHRlbnQpIHx8ICFjbGlwKGUpIHx8IGFicyhlLmEueCAtIGUuYi54KSA8IM61ICYmIGFicyhlLmEueSAtIGUuYi55KSA8IM61KSB7XG4gICAgICAgIGUuYSA9IGUuYiA9IG51bGw7XG4gICAgICAgIGVkZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ29ubmVjdEVkZ2UoZWRnZSwgZXh0ZW50KSB7XG4gICAgdmFyIHZiID0gZWRnZS5iO1xuICAgIGlmICh2YikgcmV0dXJuIHRydWU7XG4gICAgdmFyIHZhID0gZWRnZS5hLCB4MCA9IGV4dGVudFswXVswXSwgeDEgPSBleHRlbnRbMV1bMF0sIHkwID0gZXh0ZW50WzBdWzFdLCB5MSA9IGV4dGVudFsxXVsxXSwgbFNpdGUgPSBlZGdlLmwsIHJTaXRlID0gZWRnZS5yLCBseCA9IGxTaXRlLngsIGx5ID0gbFNpdGUueSwgcnggPSByU2l0ZS54LCByeSA9IHJTaXRlLnksIGZ4ID0gKGx4ICsgcngpIC8gMiwgZnkgPSAobHkgKyByeSkgLyAyLCBmbSwgZmI7XG4gICAgaWYgKHJ5ID09PSBseSkge1xuICAgICAgaWYgKGZ4IDwgeDAgfHwgZnggPj0geDEpIHJldHVybjtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkwXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPj0geTEpIHJldHVybjtcbiAgICAgICAgdmIgPSB7XG4gICAgICAgICAgeDogZngsXG4gICAgICAgICAgeTogeTFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgIHg6IGZ4LFxuICAgICAgICAgIHk6IHkxXG4gICAgICAgIH07IGVsc2UgaWYgKHZhLnkgPCB5MCkgcmV0dXJuO1xuICAgICAgICB2YiA9IHtcbiAgICAgICAgICB4OiBmeCxcbiAgICAgICAgICB5OiB5MFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICAgIGZiID0gZnkgLSBmbSAqIGZ4O1xuICAgICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XG4gICAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA+PSB5MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogKHkxIC0gZmIpIC8gZm0sXG4gICAgICAgICAgICB5OiB5MVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCF2YSkgdmEgPSB7XG4gICAgICAgICAgICB4OiAoeTEgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkxXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueSA8IHkwKSByZXR1cm47XG4gICAgICAgICAgdmIgPSB7XG4gICAgICAgICAgICB4OiAoeTAgLSBmYikgLyBmbSxcbiAgICAgICAgICAgIHk6IHkwXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGx5IDwgcnkpIHtcbiAgICAgICAgICBpZiAoIXZhKSB2YSA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTsgZWxzZSBpZiAodmEueCA+PSB4MSkgcmV0dXJuO1xuICAgICAgICAgIHZiID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghdmEpIHZhID0ge1xuICAgICAgICAgICAgeDogeDEsXG4gICAgICAgICAgICB5OiBmbSAqIHgxICsgZmJcbiAgICAgICAgICB9OyBlbHNlIGlmICh2YS54IDwgeDApIHJldHVybjtcbiAgICAgICAgICB2YiA9IHtcbiAgICAgICAgICAgIHg6IHgwLFxuICAgICAgICAgICAgeTogZm0gKiB4MCArIGZiXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlZGdlLmEgPSB2YTtcbiAgICBlZGdlLmIgPSB2YjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lFZGdlKGxTaXRlLCByU2l0ZSkge1xuICAgIHRoaXMubCA9IGxTaXRlO1xuICAgIHRoaXMuciA9IHJTaXRlO1xuICAgIHRoaXMuYSA9IHRoaXMuYiA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlRWRnZShsU2l0ZSwgclNpdGUsIHZhLCB2Yikge1xuICAgIHZhciBlZGdlID0gbmV3IGQzX2dlb21fdm9yb25vaUVkZ2UobFNpdGUsIHJTaXRlKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lFZGdlcy5wdXNoKGVkZ2UpO1xuICAgIGlmICh2YSkgZDNfZ2VvbV92b3Jvbm9pU2V0RWRnZUVuZChlZGdlLCBsU2l0ZSwgclNpdGUsIHZhKTtcbiAgICBpZiAodmIpIGQzX2dlb21fdm9yb25vaVNldEVkZ2VFbmQoZWRnZSwgclNpdGUsIGxTaXRlLCB2Yik7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbbFNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgbFNpdGUsIHJTaXRlKSk7XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHNbclNpdGUuaV0uZWRnZXMucHVzaChuZXcgZDNfZ2VvbV92b3Jvbm9pSGFsZkVkZ2UoZWRnZSwgclNpdGUsIGxTaXRlKSk7XG4gICAgcmV0dXJuIGVkZ2U7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pQ3JlYXRlQm9yZGVyRWRnZShsU2l0ZSwgdmEsIHZiKSB7XG4gICAgdmFyIGVkZ2UgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pRWRnZShsU2l0ZSwgbnVsbCk7XG4gICAgZWRnZS5hID0gdmE7XG4gICAgZWRnZS5iID0gdmI7XG4gICAgZDNfZ2VvbV92b3Jvbm9pRWRnZXMucHVzaChlZGdlKTtcbiAgICByZXR1cm4gZWRnZTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lTZXRFZGdlRW5kKGVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KSB7XG4gICAgaWYgKCFlZGdlLmEgJiYgIWVkZ2UuYikge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgICAgZWRnZS5sID0gbFNpdGU7XG4gICAgICBlZGdlLnIgPSByU2l0ZTtcbiAgICB9IGVsc2UgaWYgKGVkZ2UubCA9PT0gclNpdGUpIHtcbiAgICAgIGVkZ2UuYiA9IHZlcnRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZS5hID0gdmVydGV4O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZShlZGdlLCBsU2l0ZSwgclNpdGUpIHtcbiAgICB2YXIgdmEgPSBlZGdlLmEsIHZiID0gZWRnZS5iO1xuICAgIHRoaXMuZWRnZSA9IGVkZ2U7XG4gICAgdGhpcy5zaXRlID0gbFNpdGU7XG4gICAgdGhpcy5hbmdsZSA9IHJTaXRlID8gTWF0aC5hdGFuMihyU2l0ZS55IC0gbFNpdGUueSwgclNpdGUueCAtIGxTaXRlLngpIDogZWRnZS5sID09PSBsU2l0ZSA/IE1hdGguYXRhbjIodmIueCAtIHZhLngsIHZhLnkgLSB2Yi55KSA6IE1hdGguYXRhbjIodmEueCAtIHZiLngsIHZiLnkgLSB2YS55KTtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lIYWxmRWRnZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRnZS5sID09PSB0aGlzLnNpdGUgPyB0aGlzLmVkZ2UuYSA6IHRoaXMuZWRnZS5iO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVkZ2UubCA9PT0gdGhpcy5zaXRlID8gdGhpcy5lZGdlLmIgOiB0aGlzLmVkZ2UuYTtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpIHtcbiAgICB0aGlzLl8gPSBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrTm9kZShub2RlKSB7XG4gICAgbm9kZS5VID0gbm9kZS5DID0gbm9kZS5MID0gbm9kZS5SID0gbm9kZS5QID0gbm9kZS5OID0gbnVsbDtcbiAgfVxuICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1RyZWUucHJvdG90eXBlID0ge1xuICAgIGluc2VydDogZnVuY3Rpb24oYWZ0ZXIsIG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgIG5vZGUuUCA9IGFmdGVyO1xuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xuICAgICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgICAgYWZ0ZXIuTiA9IG5vZGU7XG4gICAgICAgIGlmIChhZnRlci5SKSB7XG4gICAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICAgIHdoaWxlIChhZnRlci5MKSBhZnRlciA9IGFmdGVyLkw7XG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIuUiA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuXykge1xuICAgICAgICBhZnRlciA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QodGhpcy5fKTtcbiAgICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgICAgbm9kZS5OID0gYWZ0ZXI7XG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcbiAgICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xuICAgICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICAgIG5vZGUuVSA9IHBhcmVudDtcbiAgICAgIG5vZGUuQyA9IHRydWU7XG4gICAgICBhZnRlciA9IG5vZGU7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICAgIGdyYW5kcGEgPSBwYXJlbnQuVTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XG4gICAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuY2xlID0gZ3JhbmRwYS5MO1xuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIGdyYW5kcGEuQyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZnRlciA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xuICAgICAgfVxuICAgICAgdGhpcy5fLkMgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgICBpZiAobm9kZS5QKSBub2RlLlAuTiA9IG5vZGUuTjtcbiAgICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLCBzaWJsaW5nLCBsZWZ0ID0gbm9kZS5MLCByaWdodCA9IG5vZGUuUiwgbmV4dCwgcmVkO1xuICAgICAgaWYgKCFsZWZ0KSBuZXh0ID0gcmlnaHQ7IGVsc2UgaWYgKCFyaWdodCkgbmV4dCA9IGxlZnQ7IGVsc2UgbmV4dCA9IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrRmlyc3QocmlnaHQpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LkwgPT09IG5vZGUpIHBhcmVudC5MID0gbmV4dDsgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl8gPSBuZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcbiAgICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgICBuZXh0LkMgPSBub2RlLkM7XG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XG4gICAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICAgIGlmIChuZXh0ICE9PSByaWdodCkge1xuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcbiAgICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XG4gICAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgICAgcmlnaHQuVSA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICAgIHBhcmVudCA9IG5leHQ7XG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVkID0gbm9kZS5DO1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlKSBub2RlLlUgPSBwYXJlbnQ7XG4gICAgICBpZiAocmVkKSByZXR1cm47XG4gICAgICBpZiAobm9kZSAmJiBub2RlLkMpIHtcbiAgICAgICAgbm9kZS5DID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICAgIGlmIChub2RlID09PSBwYXJlbnQuTCkge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2libGluZy5MICYmIHNpYmxpbmcuTC5DIHx8IHNpYmxpbmcuUiAmJiBzaWJsaW5nLlIuQykge1xuICAgICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICAgIHNpYmxpbmcuTC5DID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcmVudC5DID0gdHJ1ZTtcbiAgICAgICAgICAgIGQzX2dlb21fdm9yb25vaVJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQyB8fCBzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpIHtcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgICBzaWJsaW5nLlIuQyA9IGZhbHNlO1xuICAgICAgICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgICAgcGFyZW50LkMgPSBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaWJsaW5nLkMgPSB0cnVlO1xuICAgICAgICBub2RlID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICAgIH0gd2hpbGUgKCFub2RlLkMpO1xuICAgICAgaWYgKG5vZGUpIG5vZGUuQyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLlIsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuUiA9IHEuTDtcbiAgICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gICAgcS5MID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcbiAgICB2YXIgcCA9IG5vZGUsIHEgPSBub2RlLkwsIHBhcmVudCA9IHAuVTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTsgZWxzZSBwYXJlbnQuUiA9IHE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWUuXyA9IHE7XG4gICAgfVxuICAgIHEuVSA9IHBhcmVudDtcbiAgICBwLlUgPSBxO1xuICAgIHAuTCA9IHEuUjtcbiAgICBpZiAocC5MKSBwLkwuVSA9IHA7XG4gICAgcS5SID0gcDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lSZWRCbGFja0ZpcnN0KG5vZGUpIHtcbiAgICB3aGlsZSAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fdm9yb25vaShzaXRlcywgYmJveCkge1xuICAgIHZhciBzaXRlID0gc2l0ZXMuc29ydChkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcikucG9wKCksIHgwLCB5MCwgY2lyY2xlO1xuICAgIGQzX2dlb21fdm9yb25vaUVkZ2VzID0gW107XG4gICAgZDNfZ2VvbV92b3Jvbm9pQ2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgICBkM19nZW9tX3Zvcm9ub2lCZWFjaGVzID0gbmV3IGQzX2dlb21fdm9yb25vaVJlZEJsYWNrVHJlZSgpO1xuICAgIGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBuZXcgZDNfZ2VvbV92b3Jvbm9pUmVkQmxhY2tUcmVlKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNpcmNsZSA9IGQzX2dlb21fdm9yb25vaUZpcnN0Q2lyY2xlO1xuICAgICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZS55IDwgY2lyY2xlLnkgfHwgc2l0ZS55ID09PSBjaXJjbGUueSAmJiBzaXRlLnggPCBjaXJjbGUueCkpIHtcbiAgICAgICAgaWYgKHNpdGUueCAhPT0geDAgfHwgc2l0ZS55ICE9PSB5MCkge1xuICAgICAgICAgIGQzX2dlb21fdm9yb25vaUNlbGxzW3NpdGUuaV0gPSBuZXcgZDNfZ2VvbV92b3Jvbm9pQ2VsbChzaXRlKTtcbiAgICAgICAgICBkM19nZW9tX3Zvcm9ub2lBZGRCZWFjaChzaXRlKTtcbiAgICAgICAgICB4MCA9IHNpdGUueCwgeTAgPSBzaXRlLnk7XG4gICAgICAgIH1cbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgICAgfSBlbHNlIGlmIChjaXJjbGUpIHtcbiAgICAgICAgZDNfZ2VvbV92b3Jvbm9pUmVtb3ZlQmVhY2goY2lyY2xlLmFyYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJib3gpIGQzX2dlb21fdm9yb25vaUNsaXBFZGdlcyhiYm94KSwgZDNfZ2VvbV92b3Jvbm9pQ2xvc2VDZWxscyhiYm94KTtcbiAgICB2YXIgZGlhZ3JhbSA9IHtcbiAgICAgIGNlbGxzOiBkM19nZW9tX3Zvcm9ub2lDZWxscyxcbiAgICAgIGVkZ2VzOiBkM19nZW9tX3Zvcm9ub2lFZGdlc1xuICAgIH07XG4gICAgZDNfZ2VvbV92b3Jvbm9pQmVhY2hlcyA9IGQzX2dlb21fdm9yb25vaUNpcmNsZXMgPSBkM19nZW9tX3Zvcm9ub2lFZGdlcyA9IGQzX2dlb21fdm9yb25vaUNlbGxzID0gbnVsbDtcbiAgICByZXR1cm4gZGlhZ3JhbTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3Zvcm9ub2lWZXJ0ZXhPcmRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGIueSAtIGEueSB8fCBiLnggLSBhLng7XG4gIH1cbiAgZDMuZ2VvbS52b3Jvbm9pID0gZnVuY3Rpb24ocG9pbnRzKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBmeCA9IHgsIGZ5ID0geSwgY2xpcEV4dGVudCA9IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQ7XG4gICAgaWYgKHBvaW50cykgcmV0dXJuIHZvcm9ub2kocG9pbnRzKTtcbiAgICBmdW5jdGlvbiB2b3Jvbm9pKGRhdGEpIHtcbiAgICAgIHZhciBwb2x5Z29ucyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCksIHgwID0gY2xpcEV4dGVudFswXVswXSwgeTAgPSBjbGlwRXh0ZW50WzBdWzFdLCB4MSA9IGNsaXBFeHRlbnRbMV1bMF0sIHkxID0gY2xpcEV4dGVudFsxXVsxXTtcbiAgICAgIGQzX2dlb21fdm9yb25vaShzaXRlcyhkYXRhKSwgY2xpcEV4dGVudCkuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICAgIHZhciBlZGdlcyA9IGNlbGwuZWRnZXMsIHNpdGUgPSBjZWxsLnNpdGUsIHBvbHlnb24gPSBwb2x5Z29uc1tpXSA9IGVkZ2VzLmxlbmd0aCA/IGVkZ2VzLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHMgPSBlLnN0YXJ0KCk7XG4gICAgICAgICAgcmV0dXJuIFsgcy54LCBzLnkgXTtcbiAgICAgICAgfSkgOiBzaXRlLnggPj0geDAgJiYgc2l0ZS54IDw9IHgxICYmIHNpdGUueSA+PSB5MCAmJiBzaXRlLnkgPD0geTEgPyBbIFsgeDAsIHkxIF0sIFsgeDEsIHkxIF0sIFsgeDEsIHkwIF0sIFsgeDAsIHkwIF0gXSA6IFtdO1xuICAgICAgICBwb2x5Z29uLnBvaW50ID0gZGF0YVtpXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBvbHlnb25zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaXRlcyhkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IE1hdGgucm91bmQoZngoZCwgaSkgLyDOtSkgKiDOtSxcbiAgICAgICAgICB5OiBNYXRoLnJvdW5kKGZ5KGQsIGkpIC8gzrUpICogzrUsXG4gICAgICAgICAgaTogaVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5lZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICByZXR1cm4gZWRnZS5sICYmIGVkZ2UucjtcbiAgICAgIH0pLm1hcChmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBkYXRhW2VkZ2UubC5pXSxcbiAgICAgICAgICB0YXJnZXQ6IGRhdGFbZWRnZS5yLmldXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIHRyaWFuZ2xlcyA9IFtdO1xuICAgICAgZDNfZ2VvbV92b3Jvbm9pKHNpdGVzKGRhdGEpKS5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpIHtcbiAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsIGVkZ2VzID0gY2VsbC5lZGdlcy5zb3J0KGQzX2dlb21fdm9yb25vaUhhbGZFZGdlT3JkZXIpLCBqID0gLTEsIG0gPSBlZGdlcy5sZW5ndGgsIGUwLCBzMCwgZTEgPSBlZGdlc1ttIC0gMV0uZWRnZSwgczEgPSBlMS5sID09PSBzaXRlID8gZTEuciA6IGUxLmw7XG4gICAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgICAgZTAgPSBlMTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIGUxID0gZWRnZXNbal0uZWRnZTtcbiAgICAgICAgICBzMSA9IGUxLmwgPT09IHNpdGUgPyBlMS5yIDogZTEubDtcbiAgICAgICAgICBpZiAoaSA8IHMwLmkgJiYgaSA8IHMxLmkgJiYgZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKHNpdGUsIHMwLCBzMSkgPCAwKSB7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbIGRhdGFbaV0sIGRhdGFbczAuaV0sIGRhdGFbczEuaV0gXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmlhbmdsZXM7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeCA9IGQzX2Z1bmN0b3IoeCA9IF8pLCB2b3Jvbm9pKSA6IHg7XG4gICAgfTtcbiAgICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmeSA9IGQzX2Z1bmN0b3IoeSA9IF8pLCB2b3Jvbm9pKSA6IHk7XG4gICAgfTtcbiAgICB2b3Jvbm9pLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwRXh0ZW50ID09PSBkM19nZW9tX3Zvcm9ub2lDbGlwRXh0ZW50ID8gbnVsbCA6IGNsaXBFeHRlbnQ7XG4gICAgICBjbGlwRXh0ZW50ID0gXyA9PSBudWxsID8gZDNfZ2VvbV92b3Jvbm9pQ2xpcEV4dGVudCA6IF87XG4gICAgICByZXR1cm4gdm9yb25vaTtcbiAgICB9O1xuICAgIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsaXBFeHRlbnQgPT09IGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPyBudWxsIDogY2xpcEV4dGVudCAmJiBjbGlwRXh0ZW50WzFdO1xuICAgICAgcmV0dXJuIHZvcm9ub2kuY2xpcEV4dGVudChfICYmIFsgWyAwLCAwIF0sIF8gXSk7XG4gICAgfTtcbiAgICByZXR1cm4gdm9yb25vaTtcbiAgfTtcbiAgdmFyIGQzX2dlb21fdm9yb25vaUNsaXBFeHRlbnQgPSBbIFsgLTFlNiwgLTFlNiBdLCBbIDFlNiwgMWU2IF0gXTtcbiAgZnVuY3Rpb24gZDNfZ2VvbV92b3Jvbm9pVHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYS55KSAtIChhLnggLSBiLngpICogKGMueSAtIGEueSk7XG4gIH1cbiAgZDMuZ2VvbS5kZWxhdW5heSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgcmV0dXJuIGQzLmdlb20udm9yb25vaSgpLnRyaWFuZ2xlcyh2ZXJ0aWNlcyk7XG4gIH07XG4gIGQzLmdlb20ucXVhZHRyZWUgPSBmdW5jdGlvbihwb2ludHMsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdmFyIHggPSBkM19nZW9tX3BvaW50WCwgeSA9IGQzX2dlb21fcG9pbnRZLCBjb21wYXQ7XG4gICAgaWYgKGNvbXBhdCA9IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHggPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WDtcbiAgICAgIHkgPSBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WTtcbiAgICAgIGlmIChjb21wYXQgPT09IDMpIHtcbiAgICAgICAgeTIgPSB5MTtcbiAgICAgICAgeDIgPSB4MTtcbiAgICAgICAgeTEgPSB4MSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcXVhZHRyZWUocG9pbnRzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcXVhZHRyZWUoZGF0YSkge1xuICAgICAgdmFyIGQsIGZ4ID0gZDNfZnVuY3Rvcih4KSwgZnkgPSBkM19mdW5jdG9yKHkpLCB4cywgeXMsIGksIG4sIHgxXywgeTFfLCB4Ml8sIHkyXztcbiAgICAgIGlmICh4MSAhPSBudWxsKSB7XG4gICAgICAgIHgxXyA9IHgxLCB5MV8gPSB5MSwgeDJfID0geDIsIHkyXyA9IHkyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDJfID0geTJfID0gLSh4MV8gPSB5MV8gPSBJbmZpbml0eSk7XG4gICAgICAgIHhzID0gW10sIHlzID0gW107XG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvbXBhdCkgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIGQgPSBkYXRhW2ldO1xuICAgICAgICAgIGlmIChkLnggPCB4MV8pIHgxXyA9IGQueDtcbiAgICAgICAgICBpZiAoZC55IDwgeTFfKSB5MV8gPSBkLnk7XG4gICAgICAgICAgaWYgKGQueCA+IHgyXykgeDJfID0gZC54O1xuICAgICAgICAgIGlmIChkLnkgPiB5Ml8pIHkyXyA9IGQueTtcbiAgICAgICAgICB4cy5wdXNoKGQueCk7XG4gICAgICAgICAgeXMucHVzaChkLnkpO1xuICAgICAgICB9IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHZhciB4XyA9ICtmeChkID0gZGF0YVtpXSwgaSksIHlfID0gK2Z5KGQsIGkpO1xuICAgICAgICAgIGlmICh4XyA8IHgxXykgeDFfID0geF87XG4gICAgICAgICAgaWYgKHlfIDwgeTFfKSB5MV8gPSB5XztcbiAgICAgICAgICBpZiAoeF8gPiB4Ml8pIHgyXyA9IHhfO1xuICAgICAgICAgIGlmICh5XyA+IHkyXykgeTJfID0geV87XG4gICAgICAgICAgeHMucHVzaCh4Xyk7XG4gICAgICAgICAgeXMucHVzaCh5Xyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkeCA9IHgyXyAtIHgxXywgZHkgPSB5Ml8gLSB5MV87XG4gICAgICBpZiAoZHggPiBkeSkgeTJfID0geTFfICsgZHg7IGVsc2UgeDJfID0geDFfICsgZHk7XG4gICAgICBmdW5jdGlvbiBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm47XG4gICAgICAgIGlmIChuLmxlYWYpIHtcbiAgICAgICAgICB2YXIgbnggPSBuLngsIG55ID0gbi55O1xuICAgICAgICAgIGlmIChueCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoYWJzKG54IC0geCkgKyBhYnMobnkgLSB5KSA8IC4wMSkge1xuICAgICAgICAgICAgICBpbnNlcnRDaGlsZChuLCBkLCB4LCB5LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgblBvaW50ID0gbi5wb2ludDtcbiAgICAgICAgICAgICAgbi54ID0gbi55ID0gbi5wb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIG5Qb2ludCwgbngsIG55LCB4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbi54ID0geCwgbi55ID0geSwgbi5wb2ludCA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2VydENoaWxkKG4sIGQsIHgsIHksIHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaW5zZXJ0Q2hpbGQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltLCBpID0gYmVsb3cgPDwgMSB8IHJpZ2h0O1xuICAgICAgICBuLmxlYWYgPSBmYWxzZTtcbiAgICAgICAgbiA9IG4ubm9kZXNbaV0gfHwgKG4ubm9kZXNbaV0gPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpKTtcbiAgICAgICAgaWYgKHJpZ2h0KSB4MSA9IHhtOyBlbHNlIHgyID0geG07XG4gICAgICAgIGlmIChiZWxvdykgeTEgPSB5bTsgZWxzZSB5MiA9IHltO1xuICAgICAgICBpbnNlcnQobiwgZCwgeCwgeSwgeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgfVxuICAgICAgdmFyIHJvb3QgPSBkM19nZW9tX3F1YWR0cmVlTm9kZSgpO1xuICAgICAgcm9vdC5hZGQgPSBmdW5jdGlvbihkKSB7XG4gICAgICAgIGluc2VydChyb290LCBkLCArZngoZCwgKytpKSwgK2Z5KGQsIGkpLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QudmlzaXQgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCByb290LCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgfTtcbiAgICAgIHJvb3QuZmluZCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCBwb2ludFswXSwgcG9pbnRbMV0sIHgxXywgeTFfLCB4Ml8sIHkyXyk7XG4gICAgICB9O1xuICAgICAgaSA9IC0xO1xuICAgICAgaWYgKHgxID09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBpbnNlcnQocm9vdCwgZGF0YVtpXSwgeHNbaV0sIHlzW2ldLCB4MV8sIHkxXywgeDJfLCB5Ml8pO1xuICAgICAgICB9XG4gICAgICAgIC0taTtcbiAgICAgIH0gZWxzZSBkYXRhLmZvckVhY2gocm9vdC5hZGQpO1xuICAgICAgeHMgPSB5cyA9IGRhdGEgPSBkID0gbnVsbDtcbiAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICBxdWFkdHJlZS54ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IF8sIHF1YWR0cmVlKSA6IHg7XG4gICAgfTtcbiAgICBxdWFkdHJlZS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IF8sIHF1YWR0cmVlKSA6IHk7XG4gICAgfTtcbiAgICBxdWFkdHJlZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0gK19bMF1bMF0sIHkxID0gK19bMF1bMV0sIHgyID0gK19bMV1bMF0sIFxuICAgICAgeTIgPSArX1sxXVsxXTtcbiAgICAgIHJldHVybiBxdWFkdHJlZTtcbiAgICB9O1xuICAgIHF1YWR0cmVlLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MSA9PSBudWxsID8gbnVsbCA6IFsgeDIgLSB4MSwgeTIgLSB5MSBdO1xuICAgICAgaWYgKF8gPT0gbnVsbCkgeDEgPSB5MSA9IHgyID0geTIgPSBudWxsOyBlbHNlIHgxID0geTEgPSAwLCB4MiA9ICtfWzBdLCB5MiA9ICtfWzFdO1xuICAgICAgcmV0dXJuIHF1YWR0cmVlO1xuICAgIH07XG4gICAgcmV0dXJuIHF1YWR0cmVlO1xuICB9O1xuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WChkKSB7XG4gICAgcmV0dXJuIGQueDtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlQ29tcGF0WShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlTm9kZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVhZjogdHJ1ZSxcbiAgICAgIG5vZGVzOiBbXSxcbiAgICAgIHBvaW50OiBudWxsLFxuICAgICAgeDogbnVsbCxcbiAgICAgIHk6IG51bGxcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBub2RlLCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIGlmICghZihub2RlLCB4MSwgeTEsIHgyLCB5MikpIHtcbiAgICAgIHZhciBzeCA9ICh4MSArIHgyKSAqIC41LCBzeSA9ICh5MSArIHkyKSAqIC41LCBjaGlsZHJlbiA9IG5vZGUubm9kZXM7XG4gICAgICBpZiAoY2hpbGRyZW5bMF0pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblswXSwgeDEsIHkxLCBzeCwgc3kpO1xuICAgICAgaWYgKGNoaWxkcmVuWzFdKSBkM19nZW9tX3F1YWR0cmVlVmlzaXQoZiwgY2hpbGRyZW5bMV0sIHN4LCB5MSwgeDIsIHN5KTtcbiAgICAgIGlmIChjaGlsZHJlblsyXSkgZDNfZ2VvbV9xdWFkdHJlZVZpc2l0KGYsIGNoaWxkcmVuWzJdLCB4MSwgc3ksIHN4LCB5Mik7XG4gICAgICBpZiAoY2hpbGRyZW5bM10pIGQzX2dlb21fcXVhZHRyZWVWaXNpdChmLCBjaGlsZHJlblszXSwgc3gsIHN5LCB4MiwgeTIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19nZW9tX3F1YWR0cmVlRmluZChyb290LCB4LCB5LCB4MCwgeTAsIHgzLCB5Mykge1xuICAgIHZhciBtaW5EaXN0YW5jZTIgPSBJbmZpbml0eSwgY2xvc2VzdFBvaW50O1xuICAgIChmdW5jdGlvbiBmaW5kKG5vZGUsIHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICBpZiAoeDEgPiB4MyB8fCB5MSA+IHkzIHx8IHgyIDwgeDAgfHwgeTIgPCB5MCkgcmV0dXJuO1xuICAgICAgaWYgKHBvaW50ID0gbm9kZS5wb2ludCkge1xuICAgICAgICB2YXIgcG9pbnQsIGR4ID0geCAtIG5vZGUueCwgZHkgPSB5IC0gbm9kZS55LCBkaXN0YW5jZTIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGRpc3RhbmNlMiA8IG1pbkRpc3RhbmNlMikge1xuICAgICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguc3FydChtaW5EaXN0YW5jZTIgPSBkaXN0YW5jZTIpO1xuICAgICAgICAgIHgwID0geCAtIGRpc3RhbmNlLCB5MCA9IHkgLSBkaXN0YW5jZTtcbiAgICAgICAgICB4MyA9IHggKyBkaXN0YW5jZSwgeTMgPSB5ICsgZGlzdGFuY2U7XG4gICAgICAgICAgY2xvc2VzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUubm9kZXMsIHhtID0gKHgxICsgeDIpICogLjUsIHltID0gKHkxICsgeTIpICogLjUsIHJpZ2h0ID0geCA+PSB4bSwgYmVsb3cgPSB5ID49IHltO1xuICAgICAgZm9yICh2YXIgaSA9IGJlbG93IDw8IDEgfCByaWdodCwgaiA9IGkgKyA0OyBpIDwgajsgKytpKSB7XG4gICAgICAgIGlmIChub2RlID0gY2hpbGRyZW5baSAmIDNdKSBzd2l0Y2ggKGkgJiAzKSB7XG4gICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZmluZChub2RlLCB4MSwgeTEsIHhtLCB5bSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBmaW5kKG5vZGUsIHhtLCB5MSwgeDIsIHltKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGZpbmQobm9kZSwgeDEsIHltLCB4bSwgeTIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgZmluZChub2RlLCB4bSwgeW0sIHgyLCB5Mik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KShyb290LCB4MCwgeTAsIHgzLCB5Myk7XG4gICAgcmV0dXJuIGNsb3Nlc3RQb2ludDtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJnYiA9IGQzX2ludGVycG9sYXRlUmdiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZVJnYihhLCBiKSB7XG4gICAgYSA9IGQzLnJnYihhKTtcbiAgICBiID0gZDMucmdiKGIpO1xuICAgIHZhciBhciA9IGEuciwgYWcgPSBhLmcsIGFiID0gYS5iLCBiciA9IGIuciAtIGFyLCBiZyA9IGIuZyAtIGFnLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyBkM19yZ2JfaGV4KE1hdGgucm91bmQoYXIgKyBiciAqIHQpKSArIGQzX3JnYl9oZXgoTWF0aC5yb3VuZChhZyArIGJnICogdCkpICsgZDNfcmdiX2hleChNYXRoLnJvdW5kKGFiICsgYmIgKiB0KSk7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZU9iamVjdCA9IGQzX2ludGVycG9sYXRlT2JqZWN0O1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZU9iamVjdChhLCBiKSB7XG4gICAgdmFyIGkgPSB7fSwgYyA9IHt9LCBrO1xuICAgIGZvciAoayBpbiBhKSB7XG4gICAgICBpZiAoayBpbiBiKSB7XG4gICAgICAgIGlba10gPSBkM19pbnRlcnBvbGF0ZShhW2tdLCBiW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNba10gPSBhW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgaW4gYikge1xuICAgICAgaWYgKCEoayBpbiBhKSkge1xuICAgICAgICBjW2tdID0gYltrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgZDMuaW50ZXJwb2xhdGVOdW1iZXIgPSBkM19pbnRlcnBvbGF0ZU51bWJlcjtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVOdW1iZXIoYSwgYikge1xuICAgIGEgPSArYSwgYiA9ICtiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbiAgICB9O1xuICB9XG4gIGQzLmludGVycG9sYXRlU3RyaW5nID0gZDNfaW50ZXJwb2xhdGVTdHJpbmc7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcbiAgICB2YXIgYmkgPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJBLmxhc3RJbmRleCA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4ID0gMCwgYW0sIGJtLCBicywgaSA9IC0xLCBzID0gW10sIHEgPSBbXTtcbiAgICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcbiAgICB3aGlsZSAoKGFtID0gZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5leGVjKGEpKSAmJiAoYm0gPSBkM19pbnRlcnBvbGF0ZV9udW1iZXJCLmV4ZWMoYikpKSB7XG4gICAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHtcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgICAgfVxuICAgICAgaWYgKChhbSA9IGFtWzBdKSA9PT0gKGJtID0gYm1bMF0pKSB7XG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyBlbHNlIHNbKytpXSA9IGJtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc1srK2ldID0gbnVsbDtcbiAgICAgICAgcS5wdXNoKHtcbiAgICAgICAgICBpOiBpLFxuICAgICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKGFtLCBibSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBiaSA9IGQzX2ludGVycG9sYXRlX251bWJlckIubGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gcVswXSA/IChiID0gcVswXS54LCBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gICAgfSkgOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbzsgaSA8IGI7ICsraSkgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZywgZDNfaW50ZXJwb2xhdGVfbnVtYmVyQiA9IG5ldyBSZWdFeHAoZDNfaW50ZXJwb2xhdGVfbnVtYmVyQS5zb3VyY2UsIFwiZ1wiKTtcbiAgZDMuaW50ZXJwb2xhdGUgPSBkM19pbnRlcnBvbGF0ZTtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGUoYSwgYikge1xuICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdG9ycy5sZW5ndGgsIGY7XG4gICAgd2hpbGUgKC0taSA+PSAwICYmICEoZiA9IGQzLmludGVycG9sYXRvcnNbaV0oYSwgYikpKSA7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZDMuaW50ZXJwb2xhdG9ycyA9IFsgZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciB0ID0gdHlwZW9mIGI7XG4gICAgcmV0dXJuICh0ID09PSBcInN0cmluZ1wiID8gZDNfcmdiX25hbWVzLmhhcyhiLnRvTG93ZXJDYXNlKCkpIHx8IC9eKCN8cmdiXFwofGhzbFxcKCkvaS50ZXN0KGIpID8gZDNfaW50ZXJwb2xhdGVSZ2IgOiBkM19pbnRlcnBvbGF0ZVN0cmluZyA6IGIgaW5zdGFuY2VvZiBkM19jb2xvciA/IGQzX2ludGVycG9sYXRlUmdiIDogQXJyYXkuaXNBcnJheShiKSA/IGQzX2ludGVycG9sYXRlQXJyYXkgOiB0ID09PSBcIm9iamVjdFwiICYmIGlzTmFOKGIpID8gZDNfaW50ZXJwb2xhdGVPYmplY3QgOiBkM19pbnRlcnBvbGF0ZU51bWJlcikoYSwgYik7XG4gIH0gXTtcbiAgZDMuaW50ZXJwb2xhdGVBcnJheSA9IGQzX2ludGVycG9sYXRlQXJyYXk7XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlQXJyYXkoYSwgYikge1xuICAgIHZhciB4ID0gW10sIGMgPSBbXSwgbmEgPSBhLmxlbmd0aCwgbmIgPSBiLmxlbmd0aCwgbjAgPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpLCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSB4LnB1c2goZDNfaW50ZXJwb2xhdGUoYVtpXSwgYltpXSkpO1xuICAgIGZvciAoO2kgPCBuYTsgKytpKSBjW2ldID0gYVtpXTtcbiAgICBmb3IgKDtpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuMDsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cbiAgdmFyIGQzX2Vhc2VfZGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19pZGVudGl0eTtcbiAgfTtcbiAgdmFyIGQzX2Vhc2UgPSBkMy5tYXAoe1xuICAgIGxpbmVhcjogZDNfZWFzZV9kZWZhdWx0LFxuICAgIHBvbHk6IGQzX2Vhc2VfcG9seSxcbiAgICBxdWFkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX3F1YWQ7XG4gICAgfSxcbiAgICBjdWJpYzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9jdWJpYztcbiAgICB9LFxuICAgIHNpbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9zaW47XG4gICAgfSxcbiAgICBleHA6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX2Vhc2VfZXhwO1xuICAgIH0sXG4gICAgY2lyY2xlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2NpcmNsZTtcbiAgICB9LFxuICAgIGVsYXN0aWM6IGQzX2Vhc2VfZWxhc3RpYyxcbiAgICBiYWNrOiBkM19lYXNlX2JhY2ssXG4gICAgYm91bmNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19lYXNlX2JvdW5jZTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZDNfZWFzZV9tb2RlID0gZDMubWFwKHtcbiAgICBcImluXCI6IGQzX2lkZW50aXR5LFxuICAgIG91dDogZDNfZWFzZV9yZXZlcnNlLFxuICAgIFwiaW4tb3V0XCI6IGQzX2Vhc2VfcmVmbGVjdCxcbiAgICBcIm91dC1pblwiOiBmdW5jdGlvbihmKSB7XG4gICAgICByZXR1cm4gZDNfZWFzZV9yZWZsZWN0KGQzX2Vhc2VfcmV2ZXJzZShmKSk7XG4gICAgfVxuICB9KTtcbiAgZDMuZWFzZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IG5hbWUuaW5kZXhPZihcIi1cIiksIHQgPSBpID49IDAgPyBuYW1lLnNsaWNlKDAsIGkpIDogbmFtZSwgbSA9IGkgPj0gMCA/IG5hbWUuc2xpY2UoaSArIDEpIDogXCJpblwiO1xuICAgIHQgPSBkM19lYXNlLmdldCh0KSB8fCBkM19lYXNlX2RlZmF1bHQ7XG4gICAgbSA9IGQzX2Vhc2VfbW9kZS5nZXQobSkgfHwgZDNfaWRlbnRpdHk7XG4gICAgcmV0dXJuIGQzX2Vhc2VfY2xhbXAobSh0LmFwcGx5KG51bGwsIGQzX2FycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19lYXNlX2NsYW1wKGYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQgPD0gMCA/IDAgOiB0ID49IDEgPyAxIDogZih0KTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcmV2ZXJzZShmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiAxIC0gZigxIC0gdCk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM19lYXNlX3JlZmxlY3QoZikge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gLjUgKiAodCA8IC41ID8gZigyICogdCkgOiAyIC0gZigyIC0gMiAqIHQpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfcXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY3ViaWModCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9jdWJpY0luT3V0KHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gMDtcbiAgICBpZiAodCA+PSAxKSByZXR1cm4gMTtcbiAgICB2YXIgdDIgPSB0ICogdCwgdDMgPSB0MiAqIHQ7XG4gICAgcmV0dXJuIDQgKiAodCA8IC41ID8gdDMgOiAzICogKHQgLSB0MikgKyB0MyAtIC43NSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9wb2x5KGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9zaW4odCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGbPgCk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9leHAodCkge1xuICAgIHJldHVybiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfY2lyY2xlKHQpIHtcbiAgICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfZWxhc3RpYyhhLCBwKSB7XG4gICAgdmFyIHM7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwID0gLjQ1O1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSBzID0gcCAvIM+EICogTWF0aC5hc2luKDEgLyBhKTsgZWxzZSBhID0gMSwgcyA9IHAgLyA0O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gMSArIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiDPhCAvIHApO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfZWFzZV9iYWNrKHMpIHtcbiAgICBpZiAoIXMpIHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2Vhc2VfYm91bmNlKHQpIHtcbiAgICByZXR1cm4gdCA8IDEgLyAyLjc1ID8gNy41NjI1ICogdCAqIHQgOiB0IDwgMiAvIDIuNzUgPyA3LjU2MjUgKiAodCAtPSAxLjUgLyAyLjc1KSAqIHQgKyAuNzUgOiB0IDwgMi41IC8gMi43NSA/IDcuNTYyNSAqICh0IC09IDIuMjUgLyAyLjc1KSAqIHQgKyAuOTM3NSA6IDcuNTYyNSAqICh0IC09IDIuNjI1IC8gMi43NSkgKiB0ICsgLjk4NDM3NTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhjbCA9IGQzX2ludGVycG9sYXRlSGNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhjbChhLCBiKSB7XG4gICAgYSA9IGQzLmhjbChhKTtcbiAgICBiID0gZDMuaGNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYWMgPSBhLmMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBiYyA9IGIuYyAtIGFjLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihiYykpIGJjID0gMCwgYWMgPSBpc05hTihhYykgPyBiLmMgOiBhYztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaGNsX2xhYihhaCArIGJoICogdCwgYWMgKyBiYyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUhzbCA9IGQzX2ludGVycG9sYXRlSHNsO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUhzbChhLCBiKSB7XG4gICAgYSA9IGQzLmhzbChhKTtcbiAgICBiID0gZDMuaHNsKGIpO1xuICAgIHZhciBhaCA9IGEuaCwgYXMgPSBhLnMsIGFsID0gYS5sLCBiaCA9IGIuaCAtIGFoLCBicyA9IGIucyAtIGFzLCBibCA9IGIubCAtIGFsO1xuICAgIGlmIChpc05hTihicykpIGJzID0gMCwgYXMgPSBpc05hTihhcykgPyBiLnMgOiBhcztcbiAgICBpZiAoaXNOYU4oYmgpKSBiaCA9IDAsIGFoID0gaXNOYU4oYWgpID8gYi5oIDogYWg7IGVsc2UgaWYgKGJoID4gMTgwKSBiaCAtPSAzNjA7IGVsc2UgaWYgKGJoIDwgLTE4MCkgYmggKz0gMzYwO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfaHNsX3JnYihhaCArIGJoICogdCwgYXMgKyBicyAqIHQsIGFsICsgYmwgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZUxhYiA9IGQzX2ludGVycG9sYXRlTGFiO1xuICBmdW5jdGlvbiBkM19pbnRlcnBvbGF0ZUxhYihhLCBiKSB7XG4gICAgYSA9IGQzLmxhYihhKTtcbiAgICBiID0gZDMubGFiKGIpO1xuICAgIHZhciBhbCA9IGEubCwgYWEgPSBhLmEsIGFiID0gYS5iLCBibCA9IGIubCAtIGFsLCBiYSA9IGIuYSAtIGFhLCBiYiA9IGIuYiAtIGFiO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gZDNfbGFiX3JnYihhbCArIGJsICogdCwgYWEgKyBiYSAqIHQsIGFiICsgYmIgKiB0KSArIFwiXCI7XG4gICAgfTtcbiAgfVxuICBkMy5pbnRlcnBvbGF0ZVJvdW5kID0gZDNfaW50ZXJwb2xhdGVSb3VuZDtcbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3VuZChhLCBiKSB7XG4gICAgYiAtPSBhO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICAgIH07XG4gIH1cbiAgZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIGcgPSBkM19kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZDMubnMucHJlZml4LnN2ZywgXCJnXCIpO1xuICAgIHJldHVybiAoZDMudHJhbnNmb3JtID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBpZiAoc3RyaW5nICE9IG51bGwpIHtcbiAgICAgICAgZy5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RyaW5nKTtcbiAgICAgICAgdmFyIHQgPSBnLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGQzX3RyYW5zZm9ybSh0ID8gdC5tYXRyaXggOiBkM190cmFuc2Zvcm1JZGVudGl0eSk7XG4gICAgfSkoc3RyaW5nKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNmb3JtKG0pIHtcbiAgICB2YXIgcjAgPSBbIG0uYSwgbS5iIF0sIHIxID0gWyBtLmMsIG0uZCBdLCBreCA9IGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShyMCksIGt6ID0gZDNfdHJhbnNmb3JtRG90KHIwLCByMSksIGt5ID0gZDNfdHJhbnNmb3JtTm9ybWFsaXplKGQzX3RyYW5zZm9ybUNvbWJpbmUocjEsIHIwLCAta3opKSB8fCAwO1xuICAgIGlmIChyMFswXSAqIHIxWzFdIDwgcjFbMF0gKiByMFsxXSkge1xuICAgICAgcjBbMF0gKj0gLTE7XG4gICAgICByMFsxXSAqPSAtMTtcbiAgICAgIGt4ICo9IC0xO1xuICAgICAga3ogKj0gLTE7XG4gICAgfVxuICAgIHRoaXMucm90YXRlID0gKGt4ID8gTWF0aC5hdGFuMihyMFsxXSwgcjBbMF0pIDogTWF0aC5hdGFuMigtcjFbMF0sIHIxWzFdKSkgKiBkM19kZWdyZWVzO1xuICAgIHRoaXMudHJhbnNsYXRlID0gWyBtLmUsIG0uZiBdO1xuICAgIHRoaXMuc2NhbGUgPSBbIGt4LCBreSBdO1xuICAgIHRoaXMuc2tldyA9IGt5ID8gTWF0aC5hdGFuMihreiwga3kpICogZDNfZGVncmVlcyA6IDA7XG4gIH1cbiAgZDNfdHJhbnNmb3JtLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHRoaXMudHJhbnNsYXRlICsgXCIpcm90YXRlKFwiICsgdGhpcy5yb3RhdGUgKyBcIilza2V3WChcIiArIHRoaXMuc2tldyArIFwiKXNjYWxlKFwiICsgdGhpcy5zY2FsZSArIFwiKVwiO1xuICB9O1xuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Eb3QoYSwgYikge1xuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RyYW5zZm9ybU5vcm1hbGl6ZShhKSB7XG4gICAgdmFyIGsgPSBNYXRoLnNxcnQoZDNfdHJhbnNmb3JtRG90KGEsIGEpKTtcbiAgICBpZiAoaykge1xuICAgICAgYVswXSAvPSBrO1xuICAgICAgYVsxXSAvPSBrO1xuICAgIH1cbiAgICByZXR1cm4gaztcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2Zvcm1Db21iaW5lKGEsIGIsIGspIHtcbiAgICBhWzBdICs9IGsgKiBiWzBdO1xuICAgIGFbMV0gKz0gayAqIGJbMV07XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgdmFyIGQzX3RyYW5zZm9ybUlkZW50aXR5ID0ge1xuICAgIGE6IDEsXG4gICAgYjogMCxcbiAgICBjOiAwLFxuICAgIGQ6IDEsXG4gICAgZTogMCxcbiAgICBmOiAwXG4gIH07XG4gIGQzLmludGVycG9sYXRlVHJhbnNmb3JtID0gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm07XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIsXCIgOiBcIlwiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNsYXRlKHRhLCB0YiwgcywgcSkge1xuICAgIGlmICh0YVswXSAhPT0gdGJbMF0gfHwgdGFbMV0gIT09IHRiWzFdKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVswXSwgdGJbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih0YVsxXSwgdGJbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRiWzBdIHx8IHRiWzFdKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB0YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfaW50ZXJwb2xhdGVSb3RhdGUocmEsIHJiLCBzLCBxKSB7XG4gICAgaWYgKHJhICE9PSByYikge1xuICAgICAgaWYgKHJhIC0gcmIgPiAxODApIHJiICs9IDM2MDsgZWxzZSBpZiAocmIgLSByYSA+IDE4MCkgcmEgKz0gMzYwO1xuICAgICAgcS5wdXNoKHtcbiAgICAgICAgaTogcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIFwiKVwiKSAtIDIsXG4gICAgICAgIHg6IGQzX2ludGVycG9sYXRlTnVtYmVyKHJhLCByYilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmIpIHtcbiAgICAgIHMucHVzaChkM19pbnRlcnBvbGF0ZVRyYW5zZm9ybVBvcChzKSArIFwicm90YXRlKFwiICsgcmIgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2tldyh3YSwgd2IsIHMsIHEpIHtcbiAgICBpZiAod2EgIT09IHdiKSB7XG4gICAgICBxLnB1c2goe1xuICAgICAgICBpOiBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBcIilcIikgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcih3YSwgd2IpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHdiKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNrZXdYKFwiICsgd2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlU2NhbGUoa2EsIGtiLCBzLCBxKSB7XG4gICAgaWYgKGthWzBdICE9PSBrYlswXSB8fCBrYVsxXSAhPT0ga2JbMV0pIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKGQzX2ludGVycG9sYXRlVHJhbnNmb3JtUG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7XG4gICAgICAgIGk6IGkgLSA0LFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVswXSwga2JbMF0pXG4gICAgICB9LCB7XG4gICAgICAgIGk6IGkgLSAyLFxuICAgICAgICB4OiBkM19pbnRlcnBvbGF0ZU51bWJlcihrYVsxXSwga2JbMV0pXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGtiWzBdICE9PSAxIHx8IGtiWzFdICE9PSAxKSB7XG4gICAgICBzLnB1c2goZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm1Qb3AocykgKyBcInNjYWxlKFwiICsga2IgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGQzX2ludGVycG9sYXRlVHJhbnNmb3JtKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCBxID0gW107XG4gICAgYSA9IGQzLnRyYW5zZm9ybShhKSwgYiA9IGQzLnRyYW5zZm9ybShiKTtcbiAgICBkM19pbnRlcnBvbGF0ZVRyYW5zbGF0ZShhLnRyYW5zbGF0ZSwgYi50cmFuc2xhdGUsIHMsIHEpO1xuICAgIGQzX2ludGVycG9sYXRlUm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgZDNfaW50ZXJwb2xhdGVTa2V3KGEuc2tldywgYi5za2V3LCBzLCBxKTtcbiAgICBkM19pbnRlcnBvbGF0ZVNjYWxlKGEuc2NhbGUsIGIuc2NhbGUsIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkM191bmludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuICh4IC0gYSkgLyBiO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdW5pbnRlcnBvbGF0ZUNsYW1wKGEsIGIpIHtcbiAgICBiID0gKGIgLT0gYSA9ICthKSB8fCAxIC8gYjtcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsICh4IC0gYSkgLyBiKSk7XG4gICAgfTtcbiAgfVxuICBkMy5sYXlvdXQgPSB7fTtcbiAgZDMubGF5b3V0LmJ1bmRsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihsaW5rcykge1xuICAgICAgdmFyIHBhdGhzID0gW10sIGkgPSAtMSwgbiA9IGxpbmtzLmxlbmd0aDtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBwYXRocy5wdXNoKGQzX2xheW91dF9idW5kbGVQYXRoKGxpbmtzW2ldKSk7XG4gICAgICByZXR1cm4gcGF0aHM7XG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZVBhdGgobGluaykge1xuICAgIHZhciBzdGFydCA9IGxpbmsuc291cmNlLCBlbmQgPSBsaW5rLnRhcmdldCwgbGNhID0gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksIHBvaW50cyA9IFsgc3RhcnQgXTtcbiAgICB3aGlsZSAoc3RhcnQgIT09IGxjYSkge1xuICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnQ7XG4gICAgICBwb2ludHMucHVzaChzdGFydCk7XG4gICAgfVxuICAgIHZhciBrID0gcG9pbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kICE9PSBsY2EpIHtcbiAgICAgIHBvaW50cy5zcGxpY2UoaywgMCwgZW5kKTtcbiAgICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhub2RlKSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdLCBwYXJlbnQgPSBub2RlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGFuY2VzdG9ycy5wdXNoKG5vZGUpO1xuICAgIHJldHVybiBhbmNlc3RvcnM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2J1bmRsZUxlYXN0Q29tbW9uQW5jZXN0b3IoYSwgYikge1xuICAgIGlmIChhID09PSBiKSByZXR1cm4gYTtcbiAgICB2YXIgYU5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhhKSwgYk5vZGVzID0gZDNfbGF5b3V0X2J1bmRsZUFuY2VzdG9ycyhiKSwgYU5vZGUgPSBhTm9kZXMucG9wKCksIGJOb2RlID0gYk5vZGVzLnBvcCgpLCBzaGFyZWROb2RlID0gbnVsbDtcbiAgICB3aGlsZSAoYU5vZGUgPT09IGJOb2RlKSB7XG4gICAgICBzaGFyZWROb2RlID0gYU5vZGU7XG4gICAgICBhTm9kZSA9IGFOb2Rlcy5wb3AoKTtcbiAgICAgIGJOb2RlID0gYk5vZGVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVkTm9kZTtcbiAgfVxuICBkMy5sYXlvdXQuY2hvcmQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2hvcmQgPSB7fSwgY2hvcmRzLCBncm91cHMsIG1hdHJpeCwgbiwgcGFkZGluZyA9IDAsIHNvcnRHcm91cHMsIHNvcnRTdWJncm91cHMsIHNvcnRDaG9yZHM7XG4gICAgZnVuY3Rpb24gcmVsYXlvdXQoKSB7XG4gICAgICB2YXIgc3ViZ3JvdXBzID0ge30sIGdyb3VwU3VtcyA9IFtdLCBncm91cEluZGV4ID0gZDMucmFuZ2UobiksIHN1Ymdyb3VwSW5kZXggPSBbXSwgaywgeCwgeDAsIGksIGo7XG4gICAgICBjaG9yZHMgPSBbXTtcbiAgICAgIGdyb3VwcyA9IFtdO1xuICAgICAgayA9IDAsIGkgPSAtMTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIHggPSAwLCBqID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2ogPCBuKSB7XG4gICAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChkMy5yYW5nZShuKSk7XG4gICAgICAgIGsgKz0geDtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0R3JvdXBzKSB7XG4gICAgICAgIGdyb3VwSW5kZXguc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRHcm91cHMoZ3JvdXBTdW1zW2FdLCBncm91cFN1bXNbYl0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzb3J0U3ViZ3JvdXBzKSB7XG4gICAgICAgIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0U3ViZ3JvdXBzKG1hdHJpeFtpXVthXSwgbWF0cml4W2ldW2JdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBrID0gKM+EIC0gcGFkZGluZyAqIG4pIC8gaztcbiAgICAgIHggPSAwLCBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICB4MCA9IHgsIGogPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLCBkaiA9IHN1Ymdyb3VwSW5kZXhbZGldW2pdLCB2ID0gbWF0cml4W2RpXVtkal0sIGEwID0geCwgYTEgPSB4ICs9IHYgKiBrO1xuICAgICAgICAgIHN1Ymdyb3Vwc1tkaSArIFwiLVwiICsgZGpdID0ge1xuICAgICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgICAgc3ViaW5kZXg6IGRqLFxuICAgICAgICAgICAgc3RhcnRBbmdsZTogYTAsXG4gICAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgICB2YWx1ZTogdlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW2RpXSA9IHtcbiAgICAgICAgICBpbmRleDogZGksXG4gICAgICAgICAgc3RhcnRBbmdsZTogeDAsXG4gICAgICAgICAgZW5kQW5nbGU6IHgsXG4gICAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cbiAgICAgICAgfTtcbiAgICAgICAgeCArPSBwYWRkaW5nO1xuICAgICAgfVxuICAgICAgaSA9IC0xO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaiA9IGkgLSAxO1xuICAgICAgICB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzdWJncm91cHNbaSArIFwiLVwiICsgal0sIHRhcmdldCA9IHN1Ymdyb3Vwc1tqICsgXCItXCIgKyBpXTtcbiAgICAgICAgICBpZiAoc291cmNlLnZhbHVlIHx8IHRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlID8ge1xuICAgICAgICAgICAgICBzb3VyY2U6IHRhcmdldCxcbiAgICAgICAgICAgICAgdGFyZ2V0OiBzb3VyY2VcbiAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc29ydENob3JkcykgcmVzb3J0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29ydCgpIHtcbiAgICAgIGNob3Jkcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHNvcnRDaG9yZHMoKGEuc291cmNlLnZhbHVlICsgYS50YXJnZXQudmFsdWUpIC8gMiwgKGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWUpIC8gMik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY2hvcmQubWF0cml4ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbWF0cml4O1xuICAgICAgbiA9IChtYXRyaXggPSB4KSAmJiBtYXRyaXgubGVuZ3RoO1xuICAgICAgY2hvcmRzID0gZ3JvdXBzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRkaW5nO1xuICAgICAgcGFkZGluZyA9IHg7XG4gICAgICBjaG9yZHMgPSBncm91cHMgPSBudWxsO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnRHcm91cHM7XG4gICAgICBzb3J0R3JvdXBzID0geDtcbiAgICAgIGNob3JkcyA9IGdyb3VwcyA9IG51bGw7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydFN1Ymdyb3VwcztcbiAgICAgIHNvcnRTdWJncm91cHMgPSB4O1xuICAgICAgY2hvcmRzID0gbnVsbDtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3J0Q2hvcmRzO1xuICAgICAgc29ydENob3JkcyA9IHg7XG4gICAgICBpZiAoY2hvcmRzKSByZXNvcnQoKTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLmNob3JkcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFjaG9yZHMpIHJlbGF5b3V0KCk7XG4gICAgICByZXR1cm4gY2hvcmRzO1xuICAgIH07XG4gICAgY2hvcmQuZ3JvdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWdyb3VwcykgcmVsYXlvdXQoKTtcbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfTtcbiAgICByZXR1cm4gY2hvcmQ7XG4gIH07XG4gIGQzLmxheW91dC5mb3JjZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JjZSA9IHt9LCBldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJ0aWNrXCIsIFwiZW5kXCIpLCB0aW1lciwgc2l6ZSA9IFsgMSwgMSBdLCBkcmFnLCBhbHBoYSwgZnJpY3Rpb24gPSAuOSwgbGlua0Rpc3RhbmNlID0gZDNfbGF5b3V0X2ZvcmNlTGlua0Rpc3RhbmNlLCBsaW5rU3RyZW5ndGggPSBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGgsIGNoYXJnZSA9IC0zMCwgY2hhcmdlRGlzdGFuY2UyID0gZDNfbGF5b3V0X2ZvcmNlQ2hhcmdlRGlzdGFuY2UyLCBncmF2aXR5ID0gLjEsIHRoZXRhMiA9IC42NCwgbm9kZXMgPSBbXSwgbGlua3MgPSBbXSwgZGlzdGFuY2VzLCBzdHJlbmd0aHMsIGNoYXJnZXM7XG4gICAgZnVuY3Rpb24gcmVwdWxzZShub2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgICAgIGlmIChxdWFkLnBvaW50ICE9PSBub2RlKSB7XG4gICAgICAgICAgdmFyIGR4ID0gcXVhZC5jeCAtIG5vZGUueCwgZHkgPSBxdWFkLmN5IC0gbm9kZS55LCBkdyA9IHgyIC0geDEsIGRuID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgaWYgKGR3ICogZHcgLyB0aGV0YTIgPCBkbikge1xuICAgICAgICAgICAgaWYgKGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcXVhZC5jaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgICAgbm9kZS5weCAtPSBkeCAqIGs7XG4gICAgICAgICAgICAgIG5vZGUucHkgLT0gZHkgKiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChxdWFkLnBvaW50ICYmIGRuICYmIGRuIDwgY2hhcmdlRGlzdGFuY2UyKSB7XG4gICAgICAgICAgICB2YXIgayA9IHF1YWQucG9pbnRDaGFyZ2UgLyBkbjtcbiAgICAgICAgICAgIG5vZGUucHggLT0gZHggKiBrO1xuICAgICAgICAgICAgbm9kZS5weSAtPSBkeSAqIGs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcXVhZC5jaGFyZ2U7XG4gICAgICB9O1xuICAgIH1cbiAgICBmb3JjZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGFscGhhICo9IC45OSkgPCAuMDA1KSB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgZXZlbnQuZW5kKHtcbiAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgIGFscGhhOiBhbHBoYSA9IDBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBub2Rlcy5sZW5ndGgsIG0gPSBsaW5rcy5sZW5ndGgsIHEsIGksIG8sIHMsIHQsIGwsIGssIHgsIHk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgIG8gPSBsaW5rc1tpXTtcbiAgICAgICAgcyA9IG8uc291cmNlO1xuICAgICAgICB0ID0gby50YXJnZXQ7XG4gICAgICAgIHggPSB0LnggLSBzLng7XG4gICAgICAgIHkgPSB0LnkgLSBzLnk7XG4gICAgICAgIGlmIChsID0geCAqIHggKyB5ICogeSkge1xuICAgICAgICAgIGwgPSBhbHBoYSAqIHN0cmVuZ3Roc1tpXSAqICgobCA9IE1hdGguc3FydChsKSkgLSBkaXN0YW5jZXNbaV0pIC8gbDtcbiAgICAgICAgICB4ICo9IGw7XG4gICAgICAgICAgeSAqPSBsO1xuICAgICAgICAgIHQueCAtPSB4ICogKGsgPSBzLndlaWdodCArIHQud2VpZ2h0ID8gcy53ZWlnaHQgLyAocy53ZWlnaHQgKyB0LndlaWdodCkgOiAuNSk7XG4gICAgICAgICAgdC55IC09IHkgKiBrO1xuICAgICAgICAgIHMueCArPSB4ICogKGsgPSAxIC0gayk7XG4gICAgICAgICAgcy55ICs9IHkgKiBrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoayA9IGFscGhhICogZ3Jhdml0eSkge1xuICAgICAgICB4ID0gc2l6ZVswXSAvIDI7XG4gICAgICAgIHkgPSBzaXplWzFdIC8gMjtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICBpZiAoaykgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgICAgby54ICs9ICh4IC0gby54KSAqIGs7XG4gICAgICAgICAgby55ICs9ICh5IC0gby55KSAqIGs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFyZ2UpIHtcbiAgICAgICAgZDNfbGF5b3V0X2ZvcmNlQWNjdW11bGF0ZShxID0gZDMuZ2VvbS5xdWFkdHJlZShub2RlcyksIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgaSA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIGlmICghKG8gPSBub2Rlc1tpXSkuZml4ZWQpIHtcbiAgICAgICAgICAgIHEudmlzaXQocmVwdWxzZShvKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpID0gLTE7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBvID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChvLmZpeGVkKSB7XG4gICAgICAgICAgby54ID0gby5weDtcbiAgICAgICAgICBvLnkgPSBvLnB5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG8ueCAtPSAoby5weCAtIChvLnB4ID0gby54KSkgKiBmcmljdGlvbjtcbiAgICAgICAgICBvLnkgLT0gKG8ucHkgLSAoby5weSA9IG8ueSkpICogZnJpY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGV2ZW50LnRpY2soe1xuICAgICAgICB0eXBlOiBcInRpY2tcIixcbiAgICAgICAgYWxwaGE6IGFscGhhXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZvcmNlLm5vZGVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZXM7XG4gICAgICBub2RlcyA9IHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtzO1xuICAgICAgbGlua3MgPSB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2Uuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLmxpbmtEaXN0YW5jZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmtEaXN0YW5jZTtcbiAgICAgIGxpbmtEaXN0YW5jZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5kaXN0YW5jZSA9IGZvcmNlLmxpbmtEaXN0YW5jZTtcbiAgICBmb3JjZS5saW5rU3RyZW5ndGggPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsaW5rU3RyZW5ndGg7XG4gICAgICBsaW5rU3RyZW5ndGggPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZnJpY3Rpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmljdGlvbjtcbiAgICAgIGZyaWN0aW9uID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5jaGFyZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjaGFyZ2U7XG4gICAgICBjaGFyZ2UgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuY2hhcmdlRGlzdGFuY2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBNYXRoLnNxcnQoY2hhcmdlRGlzdGFuY2UyKTtcbiAgICAgIGNoYXJnZURpc3RhbmNlMiA9IHggKiB4O1xuICAgICAgcmV0dXJuIGZvcmNlO1xuICAgIH07XG4gICAgZm9yY2UuZ3Jhdml0eSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGdyYXZpdHk7XG4gICAgICBncmF2aXR5ID0gK3g7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS50aGV0YSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIE1hdGguc3FydCh0aGV0YTIpO1xuICAgICAgdGhldGEyID0geCAqIHg7XG4gICAgICByZXR1cm4gZm9yY2U7XG4gICAgfTtcbiAgICBmb3JjZS5hbHBoYSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGFscGhhO1xuICAgICAgeCA9ICt4O1xuICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgIGlmICh4ID4gMCkge1xuICAgICAgICAgIGFscGhhID0geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbCwgdGltZXIudCA9IE5hTiwgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGV2ZW50LmVuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImVuZFwiLFxuICAgICAgICAgICAgYWxwaGE6IGFscGhhID0gMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHggPiAwKSB7XG4gICAgICAgIGV2ZW50LnN0YXJ0KHtcbiAgICAgICAgICB0eXBlOiBcInN0YXJ0XCIsXG4gICAgICAgICAgYWxwaGE6IGFscGhhID0geFxuICAgICAgICB9KTtcbiAgICAgICAgdGltZXIgPSBkM190aW1lcihmb3JjZS50aWNrKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JjZTtcbiAgICB9O1xuICAgIGZvcmNlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbSA9IGxpbmtzLmxlbmd0aCwgdyA9IHNpemVbMF0sIGggPSBzaXplWzFdLCBuZWlnaGJvcnMsIG87XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIChvID0gbm9kZXNbaV0pLmluZGV4ID0gaTtcbiAgICAgICAgby53ZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkge1xuICAgICAgICBvID0gbGlua3NbaV07XG4gICAgICAgIGlmICh0eXBlb2Ygby5zb3VyY2UgPT0gXCJudW1iZXJcIikgby5zb3VyY2UgPSBub2Rlc1tvLnNvdXJjZV07XG4gICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQgPT0gXCJudW1iZXJcIikgby50YXJnZXQgPSBub2Rlc1tvLnRhcmdldF07XG4gICAgICAgICsrby5zb3VyY2Uud2VpZ2h0O1xuICAgICAgICArK28udGFyZ2V0LndlaWdodDtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbyA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoaXNOYU4oby54KSkgby54ID0gcG9zaXRpb24oXCJ4XCIsIHcpO1xuICAgICAgICBpZiAoaXNOYU4oby55KSkgby55ID0gcG9zaXRpb24oXCJ5XCIsIGgpO1xuICAgICAgICBpZiAoaXNOYU4oby5weCkpIG8ucHggPSBvLng7XG4gICAgICAgIGlmIChpc05hTihvLnB5KSkgby5weSA9IG8ueTtcbiAgICAgIH1cbiAgICAgIGRpc3RhbmNlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rRGlzdGFuY2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG07ICsraSkgZGlzdGFuY2VzW2ldID0gK2xpbmtEaXN0YW5jZS5jYWxsKHRoaXMsIGxpbmtzW2ldLCBpKTsgZWxzZSBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBkaXN0YW5jZXNbaV0gPSBsaW5rRGlzdGFuY2U7XG4gICAgICBzdHJlbmd0aHMgPSBbXTtcbiAgICAgIGlmICh0eXBlb2YgbGlua1N0cmVuZ3RoID09PSBcImZ1bmN0aW9uXCIpIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHN0cmVuZ3Roc1tpXSA9ICtsaW5rU3RyZW5ndGguY2FsbCh0aGlzLCBsaW5rc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc3RyZW5ndGhzW2ldID0gbGlua1N0cmVuZ3RoO1xuICAgICAgY2hhcmdlcyA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBjaGFyZ2UgPT09IFwiZnVuY3Rpb25cIikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9ICtjaGFyZ2UuY2FsbCh0aGlzLCBub2Rlc1tpXSwgaSk7IGVsc2UgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hhcmdlc1tpXSA9IGNoYXJnZTtcbiAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uKGRpbWVuc2lvbiwgc2l6ZSkge1xuICAgICAgICBpZiAoIW5laWdoYm9ycykge1xuICAgICAgICAgIG5laWdoYm9ycyA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgKytqKSB7XG4gICAgICAgICAgICBuZWlnaGJvcnNbal0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICAgICAgdmFyIG8gPSBsaW5rc1tqXTtcbiAgICAgICAgICAgIG5laWdoYm9yc1tvLnNvdXJjZS5pbmRleF0ucHVzaChvLnRhcmdldCk7XG4gICAgICAgICAgICBuZWlnaGJvcnNbby50YXJnZXQuaW5kZXhdLnB1c2goby5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FuZGlkYXRlcyA9IG5laWdoYm9yc1tpXSwgaiA9IC0xLCBsID0gY2FuZGlkYXRlcy5sZW5ndGgsIHg7XG4gICAgICAgIHdoaWxlICgrK2ogPCBsKSBpZiAoIWlzTmFOKHggPSBjYW5kaWRhdGVzW2pdW2RpbWVuc2lvbl0pKSByZXR1cm4geDtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBzaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcmNlLnJlc3VtZSgpO1xuICAgIH07XG4gICAgZm9yY2UucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZm9yY2UuYWxwaGEoLjEpO1xuICAgIH07XG4gICAgZm9yY2Uuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlLmFscGhhKDApO1xuICAgIH07XG4gICAgZm9yY2UuZHJhZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFkcmFnKSBkcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpLm9yaWdpbihkM19pZGVudGl0eSkub24oXCJkcmFnc3RhcnQuZm9yY2VcIiwgZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KS5vbihcImRyYWcuZm9yY2VcIiwgZHJhZ21vdmUpLm9uKFwiZHJhZ2VuZC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VEcmFnZW5kKTtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRyYWc7XG4gICAgICB0aGlzLm9uKFwibW91c2VvdmVyLmZvcmNlXCIsIGQzX2xheW91dF9mb3JjZU1vdXNlb3Zlcikub24oXCJtb3VzZW91dC5mb3JjZVwiLCBkM19sYXlvdXRfZm9yY2VNb3VzZW91dCkuY2FsbChkcmFnKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGRyYWdtb3ZlKGQpIHtcbiAgICAgIGQucHggPSBkMy5ldmVudC54LCBkLnB5ID0gZDMuZXZlbnQueTtcbiAgICAgIGZvcmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZDMucmViaW5kKGZvcmNlLCBldmVudCwgXCJvblwiKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ3N0YXJ0KGQpIHtcbiAgICBkLmZpeGVkIHw9IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2ZvcmNlRHJhZ2VuZChkKSB7XG4gICAgZC5maXhlZCAmPSB+NjtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfZm9yY2VNb3VzZW92ZXIoZCkge1xuICAgIGQuZml4ZWQgfD0gNDtcbiAgICBkLnB4ID0gZC54LCBkLnB5ID0gZC55O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZU1vdXNlb3V0KGQpIHtcbiAgICBkLmZpeGVkICY9IH40O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9mb3JjZUFjY3VtdWxhdGUocXVhZCwgYWxwaGEsIGNoYXJnZXMpIHtcbiAgICB2YXIgY3ggPSAwLCBjeSA9IDA7XG4gICAgcXVhZC5jaGFyZ2UgPSAwO1xuICAgIGlmICghcXVhZC5sZWFmKSB7XG4gICAgICB2YXIgbm9kZXMgPSBxdWFkLm5vZGVzLCBuID0gbm9kZXMubGVuZ3RoLCBpID0gLTEsIGM7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBjID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChjID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBkM19sYXlvdXRfZm9yY2VBY2N1bXVsYXRlKGMsIGFscGhhLCBjaGFyZ2VzKTtcbiAgICAgICAgcXVhZC5jaGFyZ2UgKz0gYy5jaGFyZ2U7XG4gICAgICAgIGN4ICs9IGMuY2hhcmdlICogYy5jeDtcbiAgICAgICAgY3kgKz0gYy5jaGFyZ2UgKiBjLmN5O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVhZC5wb2ludCkge1xuICAgICAgaWYgKCFxdWFkLmxlYWYpIHtcbiAgICAgICAgcXVhZC5wb2ludC54ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgICAgcXVhZC5wb2ludC55ICs9IE1hdGgucmFuZG9tKCkgLSAuNTtcbiAgICAgIH1cbiAgICAgIHZhciBrID0gYWxwaGEgKiBjaGFyZ2VzW3F1YWQucG9pbnQuaW5kZXhdO1xuICAgICAgcXVhZC5jaGFyZ2UgKz0gcXVhZC5wb2ludENoYXJnZSA9IGs7XG4gICAgICBjeCArPSBrICogcXVhZC5wb2ludC54O1xuICAgICAgY3kgKz0gayAqIHF1YWQucG9pbnQueTtcbiAgICB9XG4gICAgcXVhZC5jeCA9IGN4IC8gcXVhZC5jaGFyZ2U7XG4gICAgcXVhZC5jeSA9IGN5IC8gcXVhZC5jaGFyZ2U7XG4gIH1cbiAgdmFyIGQzX2xheW91dF9mb3JjZUxpbmtEaXN0YW5jZSA9IDIwLCBkM19sYXlvdXRfZm9yY2VMaW5rU3RyZW5ndGggPSAxLCBkM19sYXlvdXRfZm9yY2VDaGFyZ2VEaXN0YW5jZTIgPSBJbmZpbml0eTtcbiAgZDMubGF5b3V0LmhpZXJhcmNoeSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzb3J0ID0gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQsIGNoaWxkcmVuID0gZDNfbGF5b3V0X2hpZXJhcmNoeUNoaWxkcmVuLCB2YWx1ZSA9IGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZTtcbiAgICBmdW5jdGlvbiBoaWVyYXJjaHkocm9vdCkge1xuICAgICAgdmFyIHN0YWNrID0gWyByb290IF0sIG5vZGVzID0gW10sIG5vZGU7XG4gICAgICByb290LmRlcHRoID0gMDtcbiAgICAgIHdoaWxlICgobm9kZSA9IHN0YWNrLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIGlmICgoY2hpbGRzID0gY2hpbGRyZW4uY2FsbChoaWVyYXJjaHksIG5vZGUsIG5vZGUuZGVwdGgpKSAmJiAobiA9IGNoaWxkcy5sZW5ndGgpKSB7XG4gICAgICAgICAgdmFyIG4sIGNoaWxkcywgY2hpbGQ7XG4gICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGNoaWxkID0gY2hpbGRzW25dKTtcbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWUpIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHZhbHVlKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGRlbGV0ZSBub2RlLmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZHMsIHBhcmVudDtcbiAgICAgICAgaWYgKHNvcnQgJiYgKGNoaWxkcyA9IG5vZGUuY2hpbGRyZW4pKSBjaGlsZHMuc29ydChzb3J0KTtcbiAgICAgICAgaWYgKHZhbHVlICYmIChwYXJlbnQgPSBub2RlLnBhcmVudCkpIHBhcmVudC52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGhpZXJhcmNoeS5zb3J0ID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc29ydDtcbiAgICAgIHNvcnQgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgY2hpbGRyZW4gPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS52YWx1ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xuICAgICAgdmFsdWUgPSB4O1xuICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcbiAgICB9O1xuICAgIGhpZXJhcmNoeS5yZXZhbHVlID0gZnVuY3Rpb24ocm9vdCkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290LCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIG5vZGUudmFsdWUgPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIHZhciBwYXJlbnQ7XG4gICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSBub2RlLnZhbHVlID0gK3ZhbHVlLmNhbGwoaGllcmFyY2h5LCBub2RlLCBub2RlLmRlcHRoKSB8fCAwO1xuICAgICAgICAgIGlmIChwYXJlbnQgPSBub2RlLnBhcmVudCkgcGFyZW50LnZhbHVlICs9IG5vZGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICByZXR1cm4gaGllcmFyY2h5O1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKG9iamVjdCwgaGllcmFyY2h5KSB7XG4gICAgZDMucmViaW5kKG9iamVjdCwgaGllcmFyY2h5LCBcInNvcnRcIiwgXCJjaGlsZHJlblwiLCBcInZhbHVlXCIpO1xuICAgIG9iamVjdC5ub2RlcyA9IG9iamVjdDtcbiAgICBvYmplY3QubGlua3MgPSBkM19sYXlvdXRfaGllcmFyY2h5TGlua3M7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXTtcbiAgICB3aGlsZSAoKG5vZGUgPSBub2Rlcy5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICBpZiAoKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSBub2Rlcy5wdXNoKGNoaWxkcmVuW25dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIobm9kZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbm9kZXMgPSBbIG5vZGUgXSwgbm9kZXMyID0gW107XG4gICAgd2hpbGUgKChub2RlID0gbm9kZXMucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIG5vZGVzMi5wdXNoKG5vZGUpO1xuICAgICAgaWYgKChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuLCBjaGlsZHJlbjtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoKG5vZGUgPSBub2RlczIucG9wKCkpICE9IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5Q2hpbGRyZW4oZCkge1xuICAgIHJldHVybiBkLmNoaWxkcmVuO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaWVyYXJjaHlWYWx1ZShkKSB7XG4gICAgcmV0dXJuIGQudmFsdWU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpZXJhcmNoeVNvcnQoYSwgYikge1xuICAgIHJldHVybiBiLnZhbHVlIC0gYS52YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfaGllcmFyY2h5TGlua3Mobm9kZXMpIHtcbiAgICByZXR1cm4gZDMubWVyZ2Uobm9kZXMubWFwKGZ1bmN0aW9uKHBhcmVudCkge1xuICAgICAgcmV0dXJuIChwYXJlbnQuY2hpbGRyZW4gfHwgW10pLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNvdXJjZTogcGFyZW50LFxuICAgICAgICAgIHRhcmdldDogY2hpbGRcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxuICBkMy5sYXlvdXQucGFydGl0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKSwgc2l6ZSA9IFsgMSwgMSBdO1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUsIHgsIGR4LCBkeSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIG5vZGUueCA9IHg7XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gICAgICBub2RlLmR4ID0gZHg7XG4gICAgICBub2RlLmR5ID0gZHk7XG4gICAgICBpZiAoY2hpbGRyZW4gJiYgKG4gPSBjaGlsZHJlbi5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG4sIGMsIGQ7XG4gICAgICAgIGR4ID0gbm9kZS52YWx1ZSA/IGR4IC8gbm9kZS52YWx1ZSA6IDA7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgcG9zaXRpb24oYyA9IGNoaWxkcmVuW2ldLCB4LCBkID0gYy52YWx1ZSAqIGR4LCBkeSk7XG4gICAgICAgICAgeCArPSBkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlcHRoKG5vZGUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIGQgPSAwO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgZCA9IE1hdGgubWF4KGQsIGRlcHRoKGNoaWxkcmVuW2ldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMSArIGQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKTtcbiAgICAgIHBvc2l0aW9uKG5vZGVzWzBdLCAwLCBzaXplWzBdLCBzaXplWzFdIC8gZGVwdGgobm9kZXNbMF0pKTtcbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IHg7XG4gICAgICByZXR1cm4gcGFydGl0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQocGFydGl0aW9uLCBoaWVyYXJjaHkpO1xuICB9O1xuICBkMy5sYXlvdXQucGllID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gTnVtYmVyLCBzb3J0ID0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSDPhCwgcGFkQW5nbGUgPSAwO1xuICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgICB2YXIgbiA9IGRhdGEubGVuZ3RoLCB2YWx1ZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiArdmFsdWUuY2FsbChwaWUsIGQsIGkpO1xuICAgICAgfSksIGEgPSArKHR5cGVvZiBzdGFydEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBzdGFydEFuZ2xlKSwgZGEgPSAodHlwZW9mIGVuZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogZW5kQW5nbGUpIC0gYSwgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sICsodHlwZW9mIHBhZEFuZ2xlID09PSBcImZ1bmN0aW9uXCIgPyBwYWRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcGFkQW5nbGUpKSwgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksIHN1bSA9IGQzLnN1bSh2YWx1ZXMpLCBrID0gc3VtID8gKGRhIC0gbiAqIHBhKSAvIHN1bSA6IDAsIGluZGV4ID0gZDMucmFuZ2UobiksIGFyY3MgPSBbXSwgdjtcbiAgICAgIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoc29ydCA9PT0gZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID8gZnVuY3Rpb24oaSwgaikge1xuICAgICAgICByZXR1cm4gdmFsdWVzW2pdIC0gdmFsdWVzW2ldO1xuICAgICAgfSA6IGZ1bmN0aW9uKGksIGopIHtcbiAgICAgICAgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7XG4gICAgICB9KTtcbiAgICAgIGluZGV4LmZvckVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBhcmNzW2ldID0ge1xuICAgICAgICAgIGRhdGE6IGRhdGFbaV0sXG4gICAgICAgICAgdmFsdWU6IHYgPSB2YWx1ZXNbaV0sXG4gICAgICAgICAgc3RhcnRBbmdsZTogYSxcbiAgICAgICAgICBlbmRBbmdsZTogYSArPSB2ICogayArIHBhLFxuICAgICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcmNzO1xuICAgIH1cbiAgICBwaWUudmFsdWUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2YWx1ZTtcbiAgICAgIHZhbHVlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvcnQ7XG4gICAgICBzb3J0ID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICBwaWUucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gXztcbiAgICAgIHJldHVybiBwaWU7XG4gICAgfTtcbiAgICByZXR1cm4gcGllO1xuICB9O1xuICB2YXIgZDNfbGF5b3V0X3BpZVNvcnRCeVZhbHVlID0ge307XG4gIGQzLmxheW91dC5zdGFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZXMgPSBkM19pZGVudGl0eSwgb3JkZXIgPSBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQsIG9mZnNldCA9IGQzX2xheW91dF9zdGFja09mZnNldFplcm8sIG91dCA9IGQzX2xheW91dF9zdGFja091dCwgeCA9IGQzX2xheW91dF9zdGFja1gsIHkgPSBkM19sYXlvdXRfc3RhY2tZO1xuICAgIGZ1bmN0aW9uIHN0YWNrKGRhdGEsIGluZGV4KSB7XG4gICAgICBpZiAoIShuID0gZGF0YS5sZW5ndGgpKSByZXR1cm4gZGF0YTtcbiAgICAgIHZhciBzZXJpZXMgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuY2FsbChzdGFjaywgZCwgaSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBwb2ludHMgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgICAgICByZXR1cm4gWyB4LmNhbGwoc3RhY2ssIHYsIGkpLCB5LmNhbGwoc3RhY2ssIHYsIGkpIF07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgb3JkZXJzID0gb3JkZXIuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICBzZXJpZXMgPSBkMy5wZXJtdXRlKHNlcmllcywgb3JkZXJzKTtcbiAgICAgIHBvaW50cyA9IGQzLnBlcm11dGUocG9pbnRzLCBvcmRlcnMpO1xuICAgICAgdmFyIG9mZnNldHMgPSBvZmZzZXQuY2FsbChzdGFjaywgcG9pbnRzLCBpbmRleCk7XG4gICAgICB2YXIgbSA9IHNlcmllc1swXS5sZW5ndGgsIG4sIGksIGosIG87XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICAgIG91dC5jYWxsKHN0YWNrLCBzZXJpZXNbMF1bal0sIG8gPSBvZmZzZXRzW2pdLCBwb2ludHNbMF1bal1bMV0pO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgb3V0LmNhbGwoc3RhY2ssIHNlcmllc1tpXVtqXSwgbyArPSBwb2ludHNbaSAtIDFdW2pdWzFdLCBwb2ludHNbaV1bal1bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgc3RhY2sudmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVzO1xuICAgICAgdmFsdWVzID0geDtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm9yZGVyID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gb3JkZXI7XG4gICAgICBvcmRlciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogZDNfbGF5b3V0X3N0YWNrT3JkZXJzLmdldCh4KSB8fCBkM19sYXlvdXRfc3RhY2tPcmRlckRlZmF1bHQ7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay5vZmZzZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGQzX2xheW91dF9zdGFja09mZnNldHMuZ2V0KHgpIHx8IGQzX2xheW91dF9zdGFja09mZnNldFplcm87XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBzdGFjay54ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDtcbiAgICAgIHggPSB6O1xuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgc3RhY2sueSA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gejtcbiAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIHN0YWNrLm91dCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dDtcbiAgICAgIG91dCA9IHo7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja1goZCkge1xuICAgIHJldHVybiBkLng7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrWShkKSB7XG4gICAgcmV0dXJuIGQueTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tPdXQoZCwgeTAsIHkpIHtcbiAgICBkLnkwID0geTA7XG4gICAgZC55ID0geTtcbiAgfVxuICB2YXIgZDNfbGF5b3V0X3N0YWNrT3JkZXJzID0gZDMubWFwKHtcbiAgICBcImluc2lkZS1vdXRcIjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIG4gPSBkYXRhLmxlbmd0aCwgaSwgaiwgbWF4ID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrTWF4SW5kZXgpLCBzdW1zID0gZGF0YS5tYXAoZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKSwgaW5kZXggPSBkMy5yYW5nZShuKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG1heFthXSAtIG1heFtiXTtcbiAgICAgIH0pLCB0b3AgPSAwLCBib3R0b20gPSAwLCB0b3BzID0gW10sIGJvdHRvbXMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaiA9IGluZGV4W2ldO1xuICAgICAgICBpZiAodG9wIDwgYm90dG9tKSB7XG4gICAgICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICAgICAgdG9wcy5wdXNoKGopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgICAgIGJvdHRvbXMucHVzaChqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJvdHRvbXMucmV2ZXJzZSgpLmNvbmNhdCh0b3BzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShkYXRhLmxlbmd0aCkucmV2ZXJzZSgpO1xuICAgIH0sXG4gICAgXCJkZWZhdWx0XCI6IGQzX2xheW91dF9zdGFja09yZGVyRGVmYXVsdFxuICB9KTtcbiAgdmFyIGQzX2xheW91dF9zdGFja09mZnNldHMgPSBkMy5tYXAoe1xuICAgIHNpbGhvdWV0dGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgc3VtcyA9IFtdLCBtYXggPSAwLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobyA+IG1heCkgbWF4ID0gbztcbiAgICAgICAgc3Vtcy5wdXNoKG8pO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICB5MFtqXSA9IChtYXggLSBzdW1zW2pdKSAvIDI7XG4gICAgICB9XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICB3aWdnbGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIHggPSBkYXRhWzBdLCBtID0geC5sZW5ndGgsIGksIGosIGssIHMxLCBzMiwgczMsIGR4LCBvLCBvMCwgeTAgPSBbXTtcbiAgICAgIHkwWzBdID0gbyA9IG8wID0gMDtcbiAgICAgIGZvciAoaiA9IDE7IGogPCBtOyArK2opIHtcbiAgICAgICAgZm9yIChpID0gMCwgczEgPSAwOyBpIDwgbjsgKytpKSBzMSArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBmb3IgKGkgPSAwLCBzMiA9IDAsIGR4ID0geFtqXVswXSAtIHhbaiAtIDFdWzBdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgZm9yIChrID0gMCwgczMgPSAoZGF0YVtpXVtqXVsxXSAtIGRhdGFbaV1baiAtIDFdWzFdKSAvICgyICogZHgpOyBrIDwgaTsgKytrKSB7XG4gICAgICAgICAgICBzMyArPSAoZGF0YVtrXVtqXVsxXSAtIGRhdGFba11baiAtIDFdWzFdKSAvIGR4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzMiArPSBzMyAqIGRhdGFbaV1bal1bMV07XG4gICAgICAgIH1cbiAgICAgICAgeTBbal0gPSBvIC09IHMxID8gczIgLyBzMSAqIGR4IDogMDtcbiAgICAgICAgaWYgKG8gPCBvMCkgbzAgPSBvO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gLT0gbzA7XG4gICAgICByZXR1cm4geTA7XG4gICAgfSxcbiAgICBleHBhbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBuID0gZGF0YS5sZW5ndGgsIG0gPSBkYXRhWzBdLmxlbmd0aCwgayA9IDEgLyBuLCBpLCBqLCBvLCB5MCA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikge1xuICAgICAgICBmb3IgKGkgPSAwLCBvID0gMDsgaSA8IG47IGkrKykgbyArPSBkYXRhW2ldW2pdWzFdO1xuICAgICAgICBpZiAobykgZm9yIChpID0gMDsgaSA8IG47IGkrKykgZGF0YVtpXVtqXVsxXSAvPSBvOyBlbHNlIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIGRhdGFbaV1bal1bMV0gPSBrO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMDsgaiA8IG07ICsraikgeTBbal0gPSAwO1xuICAgICAgcmV0dXJuIHkwO1xuICAgIH0sXG4gICAgemVybzogZDNfbGF5b3V0X3N0YWNrT2Zmc2V0WmVyb1xuICB9KTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrT3JkZXJEZWZhdWx0KGRhdGEpIHtcbiAgICByZXR1cm4gZDMucmFuZ2UoZGF0YS5sZW5ndGgpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9zdGFja09mZnNldFplcm8oZGF0YSkge1xuICAgIHZhciBqID0gLTEsIG0gPSBkYXRhWzBdLmxlbmd0aCwgeTAgPSBbXTtcbiAgICB3aGlsZSAoKytqIDwgbSkgeTBbal0gPSAwO1xuICAgIHJldHVybiB5MDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tNYXhJbmRleChhcnJheSkge1xuICAgIHZhciBpID0gMSwgaiA9IDAsIHYgPSBhcnJheVswXVsxXSwgaywgbiA9IGFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKDtpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKGsgPSBhcnJheVtpXVsxXSkgPiB2KSB7XG4gICAgICAgIGogPSBpO1xuICAgICAgICB2ID0gaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGo7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3N0YWNrUmVkdWNlU3VtKGQpIHtcbiAgICByZXR1cm4gZC5yZWR1Y2UoZDNfbGF5b3V0X3N0YWNrU3VtLCAwKTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfc3RhY2tTdW0ocCwgZCkge1xuICAgIHJldHVybiBwICsgZFsxXTtcbiAgfVxuICBkMy5sYXlvdXQuaGlzdG9ncmFtID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IHRydWUsIHZhbHVlciA9IE51bWJlciwgcmFuZ2VyID0gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlLCBiaW5uZXIgPSBkM19sYXlvdXRfaGlzdG9ncmFtQmluU3R1cmdlcztcbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSwgaSkge1xuICAgICAgdmFyIGJpbnMgPSBbXSwgdmFsdWVzID0gZGF0YS5tYXAodmFsdWVyLCB0aGlzKSwgcmFuZ2UgPSByYW5nZXIuY2FsbCh0aGlzLCB2YWx1ZXMsIGkpLCB0aHJlc2hvbGRzID0gYmlubmVyLmNhbGwodGhpcywgcmFuZ2UsIHZhbHVlcywgaSksIGJpbiwgaSA9IC0xLCBuID0gdmFsdWVzLmxlbmd0aCwgbSA9IHRocmVzaG9sZHMubGVuZ3RoIC0gMSwgayA9IGZyZXF1ZW5jeSA/IDEgOiAxIC8gbiwgeDtcbiAgICAgIHdoaWxlICgrK2kgPCBtKSB7XG4gICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgICAgYmluLmR4ID0gdGhyZXNob2xkc1tpICsgMV0gLSAoYmluLnggPSB0aHJlc2hvbGRzW2ldKTtcbiAgICAgICAgYmluLnkgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKG0gPiAwKSB7XG4gICAgICAgIGkgPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICB4ID0gdmFsdWVzW2ldO1xuICAgICAgICAgIGlmICh4ID49IHJhbmdlWzBdICYmIHggPD0gcmFuZ2VbMV0pIHtcbiAgICAgICAgICAgIGJpbiA9IGJpbnNbZDMuYmlzZWN0KHRocmVzaG9sZHMsIHgsIDEsIG0pIC0gMV07XG4gICAgICAgICAgICBiaW4ueSArPSBrO1xuICAgICAgICAgICAgYmluLnB1c2goZGF0YVtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmlucztcbiAgICB9XG4gICAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdmFsdWVyO1xuICAgICAgdmFsdWVyID0geDtcbiAgICAgIHJldHVybiBoaXN0b2dyYW07XG4gICAgfTtcbiAgICBoaXN0b2dyYW0ucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZXI7XG4gICAgICByYW5nZXIgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5iaW5zID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmlubmVyO1xuICAgICAgYmlubmVyID0gdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICByZXR1cm4gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpbkZpeGVkKHJhbmdlLCB4KTtcbiAgICAgIH0gOiBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgICB9O1xuICAgIGhpc3RvZ3JhbS5mcmVxdWVuY3kgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBmcmVxdWVuY3k7XG4gICAgICBmcmVxdWVuY3kgPSAhIXg7XG4gICAgICByZXR1cm4gaGlzdG9ncmFtO1xuICAgIH07XG4gICAgcmV0dXJuIGhpc3RvZ3JhbTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbUJpblN0dXJnZXMocmFuZ2UsIHZhbHVlcykge1xuICAgIHJldHVybiBkM19sYXlvdXRfaGlzdG9ncmFtQmluRml4ZWQocmFuZ2UsIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yICsgMSkpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9oaXN0b2dyYW1CaW5GaXhlZChyYW5nZSwgbikge1xuICAgIHZhciB4ID0gLTEsIGIgPSArcmFuZ2VbMF0sIG0gPSAocmFuZ2VbMV0gLSBiKSAvIG4sIGYgPSBbXTtcbiAgICB3aGlsZSAoKyt4IDw9IG4pIGZbeF0gPSBtICogeCArIGI7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X2hpc3RvZ3JhbVJhbmdlKHZhbHVlcykge1xuICAgIHJldHVybiBbIGQzLm1pbih2YWx1ZXMpLCBkMy5tYXgodmFsdWVzKSBdO1xuICB9XG4gIGQzLmxheW91dC5wYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KGQzX2xheW91dF9wYWNrU29ydCksIHBhZGRpbmcgPSAwLCBzaXplID0gWyAxLCAxIF0sIHJhZGl1cztcbiAgICBmdW5jdGlvbiBwYWNrKGQsIGkpIHtcbiAgICAgIHZhciBub2RlcyA9IGhpZXJhcmNoeS5jYWxsKHRoaXMsIGQsIGkpLCByb290ID0gbm9kZXNbMF0sIHcgPSBzaXplWzBdLCBoID0gc2l6ZVsxXSwgciA9IHJhZGl1cyA9PSBudWxsID8gTWF0aC5zcXJ0IDogdHlwZW9mIHJhZGl1cyA9PT0gXCJmdW5jdGlvblwiID8gcmFkaXVzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgICB9O1xuICAgICAgcm9vdC54ID0gcm9vdC55ID0gMDtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgZC5yID0gK3IoZC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGQzX2xheW91dF9wYWNrU2libGluZ3MpO1xuICAgICAgaWYgKHBhZGRpbmcpIHtcbiAgICAgICAgdmFyIGRyID0gcGFkZGluZyAqIChyYWRpdXMgPyAxIDogTWF0aC5tYXgoMiAqIHJvb3QuciAvIHcsIDIgKiByb290LnIgLyBoKSkgLyAyO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290LCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgZC5yICs9IGRyO1xuICAgICAgICB9KTtcbiAgICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZDNfbGF5b3V0X3BhY2tTaWJsaW5ncyk7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBkLnIgLT0gZHI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZDNfbGF5b3V0X3BhY2tUcmFuc2Zvcm0ocm9vdCwgdyAvIDIsIGggLyAyLCByYWRpdXMgPyAxIDogMSAvIE1hdGgubWF4KDIgKiByb290LnIgLyB3LCAyICogcm9vdC5yIC8gaCkpO1xuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBwYWNrLnNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzaXplO1xuICAgICAgc2l6ZSA9IF87XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFkaXVzO1xuICAgICAgcmFkaXVzID0gXyA9PSBudWxsIHx8IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHBhY2sucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBhZGRpbmc7XG4gICAgICBwYWRkaW5nID0gK187XG4gICAgICByZXR1cm4gcGFjaztcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHBhY2ssIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU29ydChhLCBiKSB7XG4gICAgcmV0dXJuIGEudmFsdWUgLSBiLnZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGIpIHtcbiAgICB2YXIgYyA9IGEuX3BhY2tfbmV4dDtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gICAgYi5fcGFja19uZXh0ID0gYztcbiAgICBjLl9wYWNrX3ByZXYgPSBiO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIpIHtcbiAgICBhLl9wYWNrX25leHQgPSBiO1xuICAgIGIuX3BhY2tfcHJldiA9IGE7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGEsIGIpIHtcbiAgICB2YXIgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55LCBkciA9IGEuciArIGIucjtcbiAgICByZXR1cm4gLjk5OSAqIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1NpYmxpbmdzKG5vZGUpIHtcbiAgICBpZiAoIShub2RlcyA9IG5vZGUuY2hpbGRyZW4pIHx8ICEobiA9IG5vZGVzLmxlbmd0aCkpIHJldHVybjtcbiAgICB2YXIgbm9kZXMsIHhNaW4gPSBJbmZpbml0eSwgeE1heCA9IC1JbmZpbml0eSwgeU1pbiA9IEluZmluaXR5LCB5TWF4ID0gLUluZmluaXR5LCBhLCBiLCBjLCBpLCBqLCBrLCBuO1xuICAgIGZ1bmN0aW9uIGJvdW5kKG5vZGUpIHtcbiAgICAgIHhNaW4gPSBNYXRoLm1pbihub2RlLnggLSBub2RlLnIsIHhNaW4pO1xuICAgICAgeE1heCA9IE1hdGgubWF4KG5vZGUueCArIG5vZGUuciwgeE1heCk7XG4gICAgICB5TWluID0gTWF0aC5taW4obm9kZS55IC0gbm9kZS5yLCB5TWluKTtcbiAgICAgIHlNYXggPSBNYXRoLm1heChub2RlLnkgKyBub2RlLnIsIHlNYXgpO1xuICAgIH1cbiAgICBub2Rlcy5mb3JFYWNoKGQzX2xheW91dF9wYWNrTGluayk7XG4gICAgYSA9IG5vZGVzWzBdO1xuICAgIGEueCA9IC1hLnI7XG4gICAgYS55ID0gMDtcbiAgICBib3VuZChhKTtcbiAgICBpZiAobiA+IDEpIHtcbiAgICAgIGIgPSBub2Rlc1sxXTtcbiAgICAgIGIueCA9IGIucjtcbiAgICAgIGIueSA9IDA7XG4gICAgICBib3VuZChiKTtcbiAgICAgIGlmIChuID4gMikge1xuICAgICAgICBjID0gbm9kZXNbMl07XG4gICAgICAgIGQzX2xheW91dF9wYWNrUGxhY2UoYSwgYiwgYyk7XG4gICAgICAgIGJvdW5kKGMpO1xuICAgICAgICBkM19sYXlvdXRfcGFja0luc2VydChhLCBjKTtcbiAgICAgICAgYS5fcGFja19wcmV2ID0gYztcbiAgICAgICAgZDNfbGF5b3V0X3BhY2tJbnNlcnQoYywgYik7XG4gICAgICAgIGIgPSBhLl9wYWNrX25leHQ7XG4gICAgICAgIGZvciAoaSA9IDM7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBkM19sYXlvdXRfcGFja1BsYWNlKGEsIGIsIGMgPSBub2Rlc1tpXSk7XG4gICAgICAgICAgdmFyIGlzZWN0ID0gMCwgczEgPSAxLCBzMiA9IDE7XG4gICAgICAgICAgZm9yIChqID0gYi5fcGFja19uZXh0OyBqICE9PSBiOyBqID0gai5fcGFja19uZXh0LCBzMSsrKSB7XG4gICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGosIGMpKSB7XG4gICAgICAgICAgICAgIGlzZWN0ID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc2VjdCA9PSAxKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSBhLl9wYWNrX3ByZXY7IGsgIT09IGouX3BhY2tfcHJldjsgayA9IGsuX3BhY2tfcHJldiwgczIrKykge1xuICAgICAgICAgICAgICBpZiAoZDNfbGF5b3V0X3BhY2tJbnRlcnNlY3RzKGssIGMpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzZWN0KSB7XG4gICAgICAgICAgICBpZiAoczEgPCBzMiB8fCBzMSA9PSBzMiAmJiBiLnIgPCBhLnIpIGQzX2xheW91dF9wYWNrU3BsaWNlKGEsIGIgPSBqKTsgZWxzZSBkM19sYXlvdXRfcGFja1NwbGljZShhID0gaywgYik7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQzX2xheW91dF9wYWNrSW5zZXJ0KGEsIGMpO1xuICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICBib3VuZChjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGN4ID0gKHhNaW4gKyB4TWF4KSAvIDIsIGN5ID0gKHlNaW4gKyB5TWF4KSAvIDIsIGNyID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICBjID0gbm9kZXNbaV07XG4gICAgICBjLnggLT0gY3g7XG4gICAgICBjLnkgLT0gY3k7XG4gICAgICBjciA9IE1hdGgubWF4KGNyLCBjLnIgKyBNYXRoLnNxcnQoYy54ICogYy54ICsgYy55ICogYy55KSk7XG4gICAgfVxuICAgIG5vZGUuciA9IGNyO1xuICAgIG5vZGVzLmZvckVhY2goZDNfbGF5b3V0X3BhY2tVbmxpbmspO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrTGluayhub2RlKSB7XG4gICAgbm9kZS5fcGFja19uZXh0ID0gbm9kZS5fcGFja19wcmV2ID0gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfcGFja1VubGluayhub2RlKSB7XG4gICAgZGVsZXRlIG5vZGUuX3BhY2tfbmV4dDtcbiAgICBkZWxldGUgbm9kZS5fcGFja19wcmV2O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKG5vZGUsIHgsIHksIGspIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIG5vZGUueCA9IHggKz0gayAqIG5vZGUueDtcbiAgICBub2RlLnkgPSB5ICs9IGsgKiBub2RlLnk7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGQzX2xheW91dF9wYWNrVHJhbnNmb3JtKGNoaWxkcmVuW2ldLCB4LCB5LCBrKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3BhY2tQbGFjZShhLCBiLCBjKSB7XG4gICAgdmFyIGRiID0gYS5yICsgYy5yLCBkeCA9IGIueCAtIGEueCwgZHkgPSBiLnkgLSBhLnk7XG4gICAgaWYgKGRiICYmIChkeCB8fCBkeSkpIHtcbiAgICAgIHZhciBkYSA9IGIuciArIGMuciwgZGMgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGRhICo9IGRhO1xuICAgICAgZGIgKj0gZGI7XG4gICAgICB2YXIgeCA9IC41ICsgKGRiIC0gZGEpIC8gKDIgKiBkYyksIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgMiAqIGRhICogKGRiICsgZGMpIC0gKGRiIC09IGRjKSAqIGRiIC0gZGEgKiBkYSkpIC8gKDIgKiBkYyk7XG4gICAgICBjLnggPSBhLnggKyB4ICogZHggKyB5ICogZHk7XG4gICAgICBjLnkgPSBhLnkgKyB4ICogZHkgLSB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMueCA9IGEueCArIGRiO1xuICAgICAgYy55ID0gYS55O1xuICAgIH1cbiAgfVxuICBkMy5sYXlvdXQudHJlZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoaWVyYXJjaHkgPSBkMy5sYXlvdXQuaGllcmFyY2h5KCkuc29ydChudWxsKS52YWx1ZShudWxsKSwgc2VwYXJhdGlvbiA9IGQzX2xheW91dF90cmVlU2VwYXJhdGlvbiwgc2l6ZSA9IFsgMSwgMSBdLCBub2RlU2l6ZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gdHJlZShkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdDAgPSBub2Rlc1swXSwgcm9vdDEgPSB3cmFwVHJlZShyb290MCk7XG4gICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRBZnRlcihyb290MSwgZmlyc3RXYWxrKSwgcm9vdDEucGFyZW50Lm0gPSAtcm9vdDEuejtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MSwgc2Vjb25kV2Fsayk7XG4gICAgICBpZiAobm9kZVNpemUpIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgc2l6ZU5vZGUpOyBlbHNlIHtcbiAgICAgICAgdmFyIGxlZnQgPSByb290MCwgcmlnaHQgPSByb290MCwgYm90dG9tID0gcm9vdDA7XG4gICAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEJlZm9yZShyb290MCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLnggPCBsZWZ0LngpIGxlZnQgPSBub2RlO1xuICAgICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgdHggPSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIgLSBsZWZ0LngsIGt4ID0gc2l6ZVswXSAvIChyaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyICsgdHgpLCBreSA9IHNpemVbMV0gLyAoYm90dG9tLmRlcHRoIHx8IDEpO1xuICAgICAgICBkM19sYXlvdXRfaGllcmFyY2h5VmlzaXRCZWZvcmUocm9vdDAsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICBub2RlLnggPSAobm9kZS54ICsgdHgpICoga3g7XG4gICAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JhcFRyZWUocm9vdDApIHtcbiAgICAgIHZhciByb290MSA9IHtcbiAgICAgICAgQTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IFsgcm9vdDAgXVxuICAgICAgfSwgcXVldWUgPSBbIHJvb3QxIF0sIG5vZGUxO1xuICAgICAgd2hpbGUgKChub2RlMSA9IHF1ZXVlLnBvcCgpKSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gbm9kZTEuY2hpbGRyZW4sIGNoaWxkLCBpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgIHF1ZXVlLnB1c2goKGNoaWxkcmVuW2ldID0gY2hpbGQgPSB7XG4gICAgICAgICAgICBfOiBjaGlsZHJlbltpXSxcbiAgICAgICAgICAgIHBhcmVudDogbm9kZTEsXG4gICAgICAgICAgICBjaGlsZHJlbjogKGNoaWxkID0gY2hpbGRyZW5baV0uY2hpbGRyZW4pICYmIGNoaWxkLnNsaWNlKCkgfHwgW10sXG4gICAgICAgICAgICBBOiBudWxsLFxuICAgICAgICAgICAgYTogbnVsbCxcbiAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICBtOiAwLFxuICAgICAgICAgICAgYzogMCxcbiAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICB0OiBudWxsLFxuICAgICAgICAgICAgaTogaVxuICAgICAgICAgIH0pLmEgPSBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByb290MS5jaGlsZHJlblswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sIHcgPSB2LmkgPyBzaWJsaW5nc1t2LmkgLSAxXSA6IG51bGw7XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGQzX2xheW91dF90cmVlU2hpZnQodik7XG4gICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xuICAgICAgICBpZiAodykge1xuICAgICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHcpIHtcbiAgICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgICB9XG4gICAgICB2LnBhcmVudC5BID0gYXBwb3J0aW9uKHYsIHcsIHYucGFyZW50LkEgfHwgc2libGluZ3NbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcbiAgICAgIHYuXy54ID0gdi56ICsgdi5wYXJlbnQubTtcbiAgICAgIHYubSArPSB2LnBhcmVudC5tO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHZhciB2aXAgPSB2LCB2b3AgPSB2LCB2aW0gPSB3LCB2b20gPSB2aXAucGFyZW50LmNoaWxkcmVuWzBdLCBzaXAgPSB2aXAubSwgc29wID0gdm9wLm0sIHNpbSA9IHZpbS5tLCBzb20gPSB2b20ubSwgc2hpZnQ7XG4gICAgICAgIHdoaWxlICh2aW0gPSBkM19sYXlvdXRfdHJlZVJpZ2h0KHZpbSksIHZpcCA9IGQzX2xheW91dF90cmVlTGVmdCh2aXApLCB2aW0gJiYgdmlwKSB7XG4gICAgICAgICAgdm9tID0gZDNfbGF5b3V0X3RyZWVMZWZ0KHZvbSk7XG4gICAgICAgICAgdm9wID0gZDNfbGF5b3V0X3RyZWVSaWdodCh2b3ApO1xuICAgICAgICAgIHZvcC5hID0gdjtcbiAgICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xuICAgICAgICAgICAgZDNfbGF5b3V0X3RyZWVNb3ZlKGQzX2xheW91dF90cmVlQW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICAgIHNpcCArPSBzaGlmdDtcbiAgICAgICAgICAgIHNvcCArPSBzaGlmdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2ltICs9IHZpbS5tO1xuICAgICAgICAgIHNpcCArPSB2aXAubTtcbiAgICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgICAgc29wICs9IHZvcC5tO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aW0gJiYgIWQzX2xheW91dF90cmVlUmlnaHQodm9wKSkge1xuICAgICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlwICYmICFkM19sYXlvdXRfdHJlZUxlZnQodm9tKSkge1xuICAgICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICAgIHZvbS5tICs9IHNpcCAtIHNvbTtcbiAgICAgICAgICBhbmNlc3RvciA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNlc3RvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgICAgbm9kZS54ICo9IHNpemVbMF07XG4gICAgICBub2RlLnkgPSBub2RlLmRlcHRoICogc2l6ZVsxXTtcbiAgICB9XG4gICAgdHJlZS5zZXBhcmF0aW9uID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2VwYXJhdGlvbjtcbiAgICAgIHNlcGFyYXRpb24gPSB4O1xuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfTtcbiAgICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IG51bGwgOiBzaXplO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBzaXplTm9kZSA6IG51bGw7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBub2RlU2l6ZSA/IHNpemUgOiBudWxsO1xuICAgICAgbm9kZVNpemUgPSAoc2l6ZSA9IHgpID09IG51bGwgPyBudWxsIDogc2l6ZU5vZGU7XG4gICAgICByZXR1cm4gdHJlZTtcbiAgICB9O1xuICAgIHJldHVybiBkM19sYXlvdXRfaGllcmFyY2h5UmViaW5kKHRyZWUsIGhpZXJhcmNoeSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2VwYXJhdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGEucGFyZW50ID09IGIucGFyZW50ID8gMSA6IDI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVMZWZ0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlblswXSA6IHYudDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfdHJlZVJpZ2h0KHYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuLCBuO1xuICAgIHJldHVybiAobiA9IGNoaWxkcmVuLmxlbmd0aCkgPyBjaGlsZHJlbltuIC0gMV0gOiB2LnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVNb3ZlKHdtLCB3cCwgc2hpZnQpIHtcbiAgICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xuICAgIHdwLmMgLT0gY2hhbmdlO1xuICAgIHdwLnMgKz0gc2hpZnQ7XG4gICAgd20uYyArPSBjaGFuZ2U7XG4gICAgd3AueiArPSBzaGlmdDtcbiAgICB3cC5tICs9IHNoaWZ0O1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF90cmVlU2hpZnQodikge1xuICAgIHZhciBzaGlmdCA9IDAsIGNoYW5nZSA9IDAsIGNoaWxkcmVuID0gdi5jaGlsZHJlbiwgaSA9IGNoaWxkcmVuLmxlbmd0aCwgdztcbiAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgIHcgPSBjaGlsZHJlbltpXTtcbiAgICAgIHcueiArPSBzaGlmdDtcbiAgICAgIHcubSArPSBzaGlmdDtcbiAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVBbmNlc3Rvcih2aW0sIHYsIGFuY2VzdG9yKSB7XG4gICAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xuICB9XG4gIGQzLmxheW91dC5jbHVzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhpZXJhcmNoeSA9IGQzLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLCBzZXBhcmF0aW9uID0gZDNfbGF5b3V0X3RyZWVTZXBhcmF0aW9uLCBzaXplID0gWyAxLCAxIF0sIG5vZGVTaXplID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gY2x1c3RlcihkLCBpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBoaWVyYXJjaHkuY2FsbCh0aGlzLCBkLCBpKSwgcm9vdCA9IG5vZGVzWzBdLCBwcmV2aW91c05vZGUsIHggPSAwO1xuICAgICAgZDNfbGF5b3V0X2hpZXJhcmNoeVZpc2l0QWZ0ZXIocm9vdCwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgbm9kZS54ID0gZDNfbGF5b3V0X2NsdXN0ZXJYKGNoaWxkcmVuKTtcbiAgICAgICAgICBub2RlLnkgPSBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUueCA9IHByZXZpb3VzTm9kZSA/IHggKz0gc2VwYXJhdGlvbihub2RlLCBwcmV2aW91c05vZGUpIDogMDtcbiAgICAgICAgICBub2RlLnkgPSAwO1xuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGxlZnQgPSBkM19sYXlvdXRfY2x1c3RlckxlZnQocm9vdCksIHJpZ2h0ID0gZDNfbGF5b3V0X2NsdXN0ZXJSaWdodChyb290KSwgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcbiAgICAgIGQzX2xheW91dF9oaWVyYXJjaHlWaXNpdEFmdGVyKHJvb3QsIG5vZGVTaXplID8gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIHNpemVbMF07XG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogc2l6ZVsxXTtcbiAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggLSB4MCkgLyAoeDEgLSB4MCkgKiBzaXplWzBdO1xuICAgICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBzaXplWzFdO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNlcGFyYXRpb247XG4gICAgICBzZXBhcmF0aW9uID0geDtcbiAgICAgIHJldHVybiBjbHVzdGVyO1xuICAgIH07XG4gICAgY2x1c3Rlci5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBudWxsIDogc2l6ZTtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSA9PSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbm9kZVNpemUgPyBzaXplIDogbnVsbDtcbiAgICAgIG5vZGVTaXplID0gKHNpemUgPSB4KSAhPSBudWxsO1xuICAgICAgcmV0dXJuIGNsdXN0ZXI7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfbGF5b3V0X2hpZXJhcmNoeVJlYmluZChjbHVzdGVyLCBoaWVyYXJjaHkpO1xuICB9O1xuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlclkoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gMSArIGQzLm1heChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC55O1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyWChjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24oeCwgY2hpbGQpIHtcbiAgICAgIHJldHVybiB4ICsgY2hpbGQueDtcbiAgICB9LCAwKSAvIGNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBkM19sYXlvdXRfY2x1c3RlckxlZnQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA/IGQzX2xheW91dF9jbHVzdGVyTGVmdChjaGlsZHJlblswXSkgOiBub2RlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX2xheW91dF9jbHVzdGVyUmlnaHQobm9kZSkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sIG47XG4gICAgcmV0dXJuIGNoaWxkcmVuICYmIChuID0gY2hpbGRyZW4ubGVuZ3RoKSA/IGQzX2xheW91dF9jbHVzdGVyUmlnaHQoY2hpbGRyZW5bbiAtIDFdKSA6IG5vZGU7XG4gIH1cbiAgZDMubGF5b3V0LnRyZWVtYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaGllcmFyY2h5ID0gZDMubGF5b3V0LmhpZXJhcmNoeSgpLCByb3VuZCA9IE1hdGgucm91bmQsIHNpemUgPSBbIDEsIDEgXSwgcGFkZGluZyA9IG51bGwsIHBhZCA9IGQzX2xheW91dF90cmVlbWFwUGFkTnVsbCwgc3RpY2t5ID0gZmFsc2UsIHN0aWNraWVzLCBtb2RlID0gXCJzcXVhcmlmeVwiLCByYXRpbyA9IC41ICogKDEgKyBNYXRoLnNxcnQoNSkpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKGNoaWxkcmVuLCBrKSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZCwgYXJlYTtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGFyZWEgPSAoY2hpbGQgPSBjaGlsZHJlbltpXSkudmFsdWUgKiAoayA8IDAgPyAwIDogayk7XG4gICAgICAgIGNoaWxkLmFyZWEgPSBpc05hTihhcmVhKSB8fCBhcmVhIDw9IDAgPyAwIDogYXJlYTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3F1YXJpZnkobm9kZSkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBwYWQobm9kZSksIHJvdyA9IFtdLCByZW1haW5pbmcgPSBjaGlsZHJlbi5zbGljZSgpLCBjaGlsZCwgYmVzdCA9IEluZmluaXR5LCBzY29yZSwgdSA9IG1vZGUgPT09IFwic2xpY2VcIiA/IHJlY3QuZHggOiBtb2RlID09PSBcImRpY2VcIiA/IHJlY3QuZHkgOiBtb2RlID09PSBcInNsaWNlLWRpY2VcIiA/IG5vZGUuZGVwdGggJiAxID8gcmVjdC5keSA6IHJlY3QuZHggOiBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KSwgbjtcbiAgICAgICAgc2NhbGUocmVtYWluaW5nLCByZWN0LmR4ICogcmVjdC5keSAvIG5vZGUudmFsdWUpO1xuICAgICAgICByb3cuYXJlYSA9IDA7XG4gICAgICAgIHdoaWxlICgobiA9IHJlbWFpbmluZy5sZW5ndGgpID4gMCkge1xuICAgICAgICAgIHJvdy5wdXNoKGNoaWxkID0gcmVtYWluaW5nW24gLSAxXSk7XG4gICAgICAgICAgcm93LmFyZWEgKz0gY2hpbGQuYXJlYTtcbiAgICAgICAgICBpZiAobW9kZSAhPT0gXCJzcXVhcmlmeVwiIHx8IChzY29yZSA9IHdvcnN0KHJvdywgdSkpIDw9IGJlc3QpIHtcbiAgICAgICAgICAgIHJlbWFpbmluZy5wb3AoKTtcbiAgICAgICAgICAgIGJlc3QgPSBzY29yZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93LmFyZWEgLT0gcm93LnBvcCgpLmFyZWE7XG4gICAgICAgICAgICBwb3NpdGlvbihyb3csIHUsIHJlY3QsIGZhbHNlKTtcbiAgICAgICAgICAgIHUgPSBNYXRoLm1pbihyZWN0LmR4LCByZWN0LmR5KTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgICBiZXN0ID0gSW5maW5pdHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyb3cubGVuZ3RoKSB7XG4gICAgICAgICAgcG9zaXRpb24ocm93LCB1LCByZWN0LCB0cnVlKTtcbiAgICAgICAgICByb3cubGVuZ3RoID0gcm93LmFyZWEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3F1YXJpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdGlja2lmeShub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICB2YXIgcmVjdCA9IHBhZChub2RlKSwgcmVtYWluaW5nID0gY2hpbGRyZW4uc2xpY2UoKSwgY2hpbGQsIHJvdyA9IFtdO1xuICAgICAgICBzY2FsZShyZW1haW5pbmcsIHJlY3QuZHggKiByZWN0LmR5IC8gbm9kZS52YWx1ZSk7XG4gICAgICAgIHJvdy5hcmVhID0gMDtcbiAgICAgICAgd2hpbGUgKGNoaWxkID0gcmVtYWluaW5nLnBvcCgpKSB7XG4gICAgICAgICAgcm93LnB1c2goY2hpbGQpO1xuICAgICAgICAgIHJvdy5hcmVhICs9IGNoaWxkLmFyZWE7XG4gICAgICAgICAgaWYgKGNoaWxkLnogIT0gbnVsbCkge1xuICAgICAgICAgICAgcG9zaXRpb24ocm93LCBjaGlsZC56ID8gcmVjdC5keCA6IHJlY3QuZHksIHJlY3QsICFyZW1haW5pbmcubGVuZ3RoKTtcbiAgICAgICAgICAgIHJvdy5sZW5ndGggPSByb3cuYXJlYSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goc3RpY2tpZnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3b3JzdChyb3csIHUpIHtcbiAgICAgIHZhciBzID0gcm93LmFyZWEsIHIsIHJtYXggPSAwLCBybWluID0gSW5maW5pdHksIGkgPSAtMSwgbiA9IHJvdy5sZW5ndGg7XG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoIShyID0gcm93W2ldLmFyZWEpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKHIgPCBybWluKSBybWluID0gcjtcbiAgICAgICAgaWYgKHIgPiBybWF4KSBybWF4ID0gcjtcbiAgICAgIH1cbiAgICAgIHMgKj0gcztcbiAgICAgIHUgKj0gdTtcbiAgICAgIHJldHVybiBzID8gTWF0aC5tYXgodSAqIHJtYXggKiByYXRpbyAvIHMsIHMgLyAodSAqIHJtaW4gKiByYXRpbykpIDogSW5maW5pdHk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKHJvdywgdSwgcmVjdCwgZmx1c2gpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSByb3cubGVuZ3RoLCB4ID0gcmVjdC54LCB5ID0gcmVjdC55LCB2ID0gdSA/IHJvdW5kKHJvdy5hcmVhIC8gdSkgOiAwLCBvO1xuICAgICAgaWYgKHUgPT0gcmVjdC5keCkge1xuICAgICAgICBpZiAoZmx1c2ggfHwgdiA+IHJlY3QuZHkpIHYgPSByZWN0LmR5O1xuICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgIG8gPSByb3dbaV07XG4gICAgICAgICAgby54ID0geDtcbiAgICAgICAgICBvLnkgPSB5O1xuICAgICAgICAgIG8uZHkgPSB2O1xuICAgICAgICAgIHggKz0gby5keCA9IE1hdGgubWluKHJlY3QueCArIHJlY3QuZHggLSB4LCB2ID8gcm91bmQoby5hcmVhIC8gdikgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBvLnogPSB0cnVlO1xuICAgICAgICBvLmR4ICs9IHJlY3QueCArIHJlY3QuZHggLSB4O1xuICAgICAgICByZWN0LnkgKz0gdjtcbiAgICAgICAgcmVjdC5keSAtPSB2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZsdXNoIHx8IHYgPiByZWN0LmR4KSB2ID0gcmVjdC5keDtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICBvID0gcm93W2ldO1xuICAgICAgICAgIG8ueCA9IHg7XG4gICAgICAgICAgby55ID0geTtcbiAgICAgICAgICBvLmR4ID0gdjtcbiAgICAgICAgICB5ICs9IG8uZHkgPSBNYXRoLm1pbihyZWN0LnkgKyByZWN0LmR5IC0geSwgdiA/IHJvdW5kKG8uYXJlYSAvIHYpIDogMCk7XG4gICAgICAgIH1cbiAgICAgICAgby56ID0gZmFsc2U7XG4gICAgICAgIG8uZHkgKz0gcmVjdC55ICsgcmVjdC5keSAtIHk7XG4gICAgICAgIHJlY3QueCArPSB2O1xuICAgICAgICByZWN0LmR4IC09IHY7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyZWVtYXAoZCkge1xuICAgICAgdmFyIG5vZGVzID0gc3RpY2tpZXMgfHwgaGllcmFyY2h5KGQpLCByb290ID0gbm9kZXNbMF07XG4gICAgICByb290LnggPSByb290LnkgPSAwO1xuICAgICAgaWYgKHJvb3QudmFsdWUpIHJvb3QuZHggPSBzaXplWzBdLCByb290LmR5ID0gc2l6ZVsxXTsgZWxzZSByb290LmR4ID0gcm9vdC5keSA9IDA7XG4gICAgICBpZiAoc3RpY2tpZXMpIGhpZXJhcmNoeS5yZXZhbHVlKHJvb3QpO1xuICAgICAgc2NhbGUoWyByb290IF0sIHJvb3QuZHggKiByb290LmR5IC8gcm9vdC52YWx1ZSk7XG4gICAgICAoc3RpY2tpZXMgPyBzdGlja2lmeSA6IHNxdWFyaWZ5KShyb290KTtcbiAgICAgIGlmIChzdGlja3kpIHN0aWNraWVzID0gbm9kZXM7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIHRyZWVtYXAuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNpemU7XG4gICAgICBzaXplID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkZGluZztcbiAgICAgIGZ1bmN0aW9uIHBhZEZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIHAgPSB4LmNhbGwodHJlZW1hcCwgbm9kZSwgbm9kZS5kZXB0aCk7XG4gICAgICAgIHJldHVybiBwID09IG51bGwgPyBkM19sYXlvdXRfdHJlZW1hcFBhZE51bGwobm9kZSkgOiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB0eXBlb2YgcCA9PT0gXCJudW1iZXJcIiA/IFsgcCwgcCwgcCwgcCBdIDogcCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwYWRDb25zdGFudChub2RlKSB7XG4gICAgICAgIHJldHVybiBkM19sYXlvdXRfdHJlZW1hcFBhZChub2RlLCB4KTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlO1xuICAgICAgcGFkID0gKHBhZGRpbmcgPSB4KSA9PSBudWxsID8gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsIDogKHR5cGUgPSB0eXBlb2YgeCkgPT09IFwiZnVuY3Rpb25cIiA/IHBhZEZ1bmN0aW9uIDogdHlwZSA9PT0gXCJudW1iZXJcIiA/ICh4ID0gWyB4LCB4LCB4LCB4IF0sIFxuICAgICAgcGFkQ29uc3RhbnQpIDogcGFkQ29uc3RhbnQ7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByb3VuZCAhPSBOdW1iZXI7XG4gICAgICByb3VuZCA9IHggPyBNYXRoLnJvdW5kIDogTnVtYmVyO1xuICAgICAgcmV0dXJuIHRyZWVtYXA7XG4gICAgfTtcbiAgICB0cmVlbWFwLnN0aWNreSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0aWNreTtcbiAgICAgIHN0aWNreSA9IHg7XG4gICAgICBzdGlja2llcyA9IG51bGw7XG4gICAgICByZXR1cm4gdHJlZW1hcDtcbiAgICB9O1xuICAgIHRyZWVtYXAucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYXRpbztcbiAgICAgIHJhdGlvID0geDtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgdHJlZW1hcC5tb2RlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbW9kZTtcbiAgICAgIG1vZGUgPSB4ICsgXCJcIjtcbiAgICAgIHJldHVybiB0cmVlbWFwO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX2xheW91dF9oaWVyYXJjaHlSZWJpbmQodHJlZW1hcCwgaGllcmFyY2h5KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWROdWxsKG5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogbm9kZS54LFxuICAgICAgeTogbm9kZS55LFxuICAgICAgZHg6IG5vZGUuZHgsXG4gICAgICBkeTogbm9kZS5keVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfbGF5b3V0X3RyZWVtYXBQYWQobm9kZSwgcGFkZGluZykge1xuICAgIHZhciB4ID0gbm9kZS54ICsgcGFkZGluZ1szXSwgeSA9IG5vZGUueSArIHBhZGRpbmdbMF0sIGR4ID0gbm9kZS5keCAtIHBhZGRpbmdbMV0gLSBwYWRkaW5nWzNdLCBkeSA9IG5vZGUuZHkgLSBwYWRkaW5nWzBdIC0gcGFkZGluZ1syXTtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICB4ICs9IGR4IC8gMjtcbiAgICAgIGR4ID0gMDtcbiAgICB9XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgeSArPSBkeSAvIDI7XG4gICAgICBkeSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeSxcbiAgICAgIGR4OiBkeCxcbiAgICAgIGR5OiBkeVxuICAgIH07XG4gIH1cbiAgZDMucmFuZG9tID0ge1xuICAgIG5vcm1hbDogZnVuY3Rpb24owrUsIM+DKSB7XG4gICAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobiA8IDIpIM+DID0gMTtcbiAgICAgIGlmIChuIDwgMSkgwrUgPSAwO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgeCwgeSwgcjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XG4gICAgICAgICAgeSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgICAgICAgICByID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgfSB3aGlsZSAoIXIgfHwgciA+IDEpO1xuICAgICAgICByZXR1cm4gwrUgKyDPgyAqIHggKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxvZ05vcm1hbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmFuZG9tID0gZDMucmFuZG9tLm5vcm1hbC5hcHBseShkMywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbSgpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBiYXRlczogZnVuY3Rpb24obSkge1xuICAgICAgdmFyIHJhbmRvbSA9IGQzLnJhbmRvbS5pcndpbkhhbGwobSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByYW5kb20oKSAvIG07XG4gICAgICB9O1xuICAgIH0sXG4gICAgaXJ3aW5IYWxsOiBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHMgPSAwLCBqID0gMDsgaiA8IG07IGorKykgcyArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICBkMy5zY2FsZSA9IHt9O1xuICBmdW5jdGlvbiBkM19zY2FsZUV4dGVudChkb21haW4pIHtcbiAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sIHN0b3AgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBzdGFydCA8IHN0b3AgPyBbIHN0YXJ0LCBzdG9wIF0gOiBbIHN0b3AsIHN0YXJ0IF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVSYW5nZShzY2FsZSkge1xuICAgIHJldHVybiBzY2FsZS5yYW5nZUV4dGVudCA/IHNjYWxlLnJhbmdlRXh0ZW50KCkgOiBkM19zY2FsZUV4dGVudChzY2FsZS5yYW5nZSgpKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9iaWxpbmVhcihkb21haW4sIHJhbmdlLCB1bmludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSkge1xuICAgIHZhciB1ID0gdW5pbnRlcnBvbGF0ZShkb21haW5bMF0sIGRvbWFpblsxXSksIGkgPSBpbnRlcnBvbGF0ZShyYW5nZVswXSwgcmFuZ2VbMV0pO1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gaSh1KHgpKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX25pY2UoZG9tYWluLCBuaWNlKSB7XG4gICAgdmFyIGkwID0gMCwgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSwgeDAgPSBkb21haW5baTBdLCB4MSA9IGRvbWFpbltpMV0sIGR4O1xuICAgIGlmICh4MSA8IHgwKSB7XG4gICAgICBkeCA9IGkwLCBpMCA9IGkxLCBpMSA9IGR4O1xuICAgICAgZHggPSB4MCwgeDAgPSB4MSwgeDEgPSBkeDtcbiAgICB9XG4gICAgZG9tYWluW2kwXSA9IG5pY2UuZmxvb3IoeDApO1xuICAgIGRvbWFpbltpMV0gPSBuaWNlLmNlaWwoeDEpO1xuICAgIHJldHVybiBkb21haW47XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbmljZVN0ZXAoc3RlcCkge1xuICAgIHJldHVybiBzdGVwID8ge1xuICAgICAgZmxvb3I6IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0sXG4gICAgICBjZWlsOiBmdW5jdGlvbih4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoeCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH1cbiAgICB9IDogZDNfc2NhbGVfbmljZUlkZW50aXR5O1xuICB9XG4gIHZhciBkM19zY2FsZV9uaWNlSWRlbnRpdHkgPSB7XG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX3BvbHlsaW5lYXIoZG9tYWluLCByYW5nZSwgdW5pbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGUpIHtcbiAgICB2YXIgdSA9IFtdLCBpID0gW10sIGogPSAwLCBrID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDE7XG4gICAgaWYgKGRvbWFpbltrXSA8IGRvbWFpblswXSkge1xuICAgICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgd2hpbGUgKCsraiA8PSBrKSB7XG4gICAgICB1LnB1c2godW5pbnRlcnBvbGF0ZShkb21haW5baiAtIDFdLCBkb21haW5bal0pKTtcbiAgICAgIGkucHVzaChpbnRlcnBvbGF0ZShyYW5nZVtqIC0gMV0sIHJhbmdlW2pdKSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICB2YXIgaiA9IGQzLmJpc2VjdChkb21haW4sIHgsIDEsIGspIC0gMTtcbiAgICAgIHJldHVybiBpW2pdKHVbal0oeCkpO1xuICAgIH07XG4gIH1cbiAgZDMuc2NhbGUubGluZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihbIDAsIDEgXSwgWyAwLCAxIF0sIGQzX2ludGVycG9sYXRlLCBmYWxzZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApIHtcbiAgICB2YXIgb3V0cHV0LCBpbnB1dDtcbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgICAgdmFyIGxpbmVhciA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gZDNfc2NhbGVfcG9seWxpbmVhciA6IGQzX3NjYWxlX2JpbGluZWFyLCB1bmludGVycG9sYXRlID0gY2xhbXAgPyBkM191bmludGVycG9sYXRlQ2xhbXAgOiBkM191bmludGVycG9sYXRlTnVtYmVyO1xuICAgICAgb3V0cHV0ID0gbGluZWFyKGRvbWFpbiwgcmFuZ2UsIHVuaW50ZXJwb2xhdGUsIGludGVycG9sYXRlKTtcbiAgICAgIGlucHV0ID0gbGluZWFyKHJhbmdlLCBkb21haW4sIHVuaW50ZXJwb2xhdGUsIGQzX2ludGVycG9sYXRlKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIG91dHB1dCh4KTtcbiAgICB9XG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIGlucHV0KHkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0geC5tYXAoTnVtYmVyKTtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhbmdlO1xuICAgICAgcmFuZ2UgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gc2NhbGUucmFuZ2UoeCkuaW50ZXJwb2xhdGUoZDNfaW50ZXJwb2xhdGVSb3VuZCk7XG4gICAgfTtcbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNsYW1wO1xuICAgICAgY2xhbXAgPSB4O1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGU7XG4gICAgICBpbnRlcnBvbGF0ZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihtKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihtLCBmb3JtYXQpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9saW5lYXJUaWNrRm9ybWF0KGRvbWFpbiwgbSwgZm9ybWF0KTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihtKSB7XG4gICAgICBkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhcihkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSwgY2xhbXApO1xuICAgIH07XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJSZWJpbmQoc2NhbGUsIGxpbmVhcikge1xuICAgIHJldHVybiBkMy5yZWJpbmQoc2NhbGUsIGxpbmVhciwgXCJyYW5nZVwiLCBcInJhbmdlUm91bmRcIiwgXCJpbnRlcnBvbGF0ZVwiLCBcImNsYW1wXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhck5pY2UoZG9tYWluLCBtKSB7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgZDNfc2NhbGVfbmljZShkb21haW4sIGQzX3NjYWxlX25pY2VTdGVwKGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pWzJdKSk7XG4gICAgcmV0dXJuIGRvbWFpbjtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSB7XG4gICAgaWYgKG0gPT0gbnVsbCkgbSA9IDEwO1xuICAgIHZhciBleHRlbnQgPSBkM19zY2FsZUV4dGVudChkb21haW4pLCBzcGFuID0gZXh0ZW50WzFdIC0gZXh0ZW50WzBdLCBzdGVwID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3BhbiAvIG0pIC8gTWF0aC5MTjEwKSksIGVyciA9IG0gLyBzcGFuICogc3RlcDtcbiAgICBpZiAoZXJyIDw9IC4xNSkgc3RlcCAqPSAxMDsgZWxzZSBpZiAoZXJyIDw9IC4zNSkgc3RlcCAqPSA1OyBlbHNlIGlmIChlcnIgPD0gLjc1KSBzdGVwICo9IDI7XG4gICAgZXh0ZW50WzBdID0gTWF0aC5jZWlsKGV4dGVudFswXSAvIHN0ZXApICogc3RlcDtcbiAgICBleHRlbnRbMV0gPSBNYXRoLmZsb29yKGV4dGVudFsxXSAvIHN0ZXApICogc3RlcCArIHN0ZXAgKiAuNTtcbiAgICBleHRlbnRbMl0gPSBzdGVwO1xuICAgIHJldHVybiBleHRlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja3MoZG9tYWluLCBtKSB7XG4gICAgcmV0dXJuIGQzLnJhbmdlLmFwcGx5KGQzLCBkM19zY2FsZV9saW5lYXJUaWNrUmFuZ2UoZG9tYWluLCBtKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCkge1xuICAgIHZhciByYW5nZSA9IGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShkb21haW4sIG0pO1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIHZhciBtYXRjaCA9IGQzX2Zvcm1hdF9yZS5leGVjKGZvcm1hdCk7XG4gICAgICBtYXRjaC5zaGlmdCgpO1xuICAgICAgaWYgKG1hdGNoWzhdID09PSBcInNcIikge1xuICAgICAgICB2YXIgcHJlZml4ID0gZDMuZm9ybWF0UHJlZml4KE1hdGgubWF4KGFicyhyYW5nZVswXSksIGFicyhyYW5nZVsxXSkpKTtcbiAgICAgICAgaWYgKCFtYXRjaFs3XSkgbWF0Y2hbN10gPSBcIi5cIiArIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbihwcmVmaXguc2NhbGUocmFuZ2VbMl0pKTtcbiAgICAgICAgbWF0Y2hbOF0gPSBcImZcIjtcbiAgICAgICAgZm9ybWF0ID0gZDMuZm9ybWF0KG1hdGNoLmpvaW4oXCJcIikpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBmb3JtYXQocHJlZml4LnNjYWxlKGQpKSArIHByZWZpeC5zeW1ib2w7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoIW1hdGNoWzddKSBtYXRjaFs3XSA9IFwiLlwiICsgZDNfc2NhbGVfbGluZWFyRm9ybWF0UHJlY2lzaW9uKG1hdGNoWzhdLCByYW5nZSk7XG4gICAgICBmb3JtYXQgPSBtYXRjaC5qb2luKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtYXQgPSBcIiwuXCIgKyBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24ocmFuZ2VbMl0pICsgXCJmXCI7XG4gICAgfVxuICAgIHJldHVybiBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgfVxuICB2YXIgZDNfc2NhbGVfbGluZWFyRm9ybWF0U2lnbmlmaWNhbnQgPSB7XG4gICAgczogMSxcbiAgICBnOiAxLFxuICAgIHA6IDEsXG4gICAgcjogMSxcbiAgICBlOiAxXG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhclByZWNpc2lvbih2YWx1ZSkge1xuICAgIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMTAgKyAuMDEpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xpbmVhckZvcm1hdFByZWNpc2lvbih0eXBlLCByYW5nZSkge1xuICAgIHZhciBwID0gZDNfc2NhbGVfbGluZWFyUHJlY2lzaW9uKHJhbmdlWzJdKTtcbiAgICByZXR1cm4gdHlwZSBpbiBkM19zY2FsZV9saW5lYXJGb3JtYXRTaWduaWZpY2FudCA/IE1hdGguYWJzKHAgLSBkM19zY2FsZV9saW5lYXJQcmVjaXNpb24oTWF0aC5tYXgoYWJzKHJhbmdlWzBdKSwgYWJzKHJhbmdlWzFdKSkpKSArICsodHlwZSAhPT0gXCJlXCIpIDogcCAtICh0eXBlID09PSBcIiVcIikgKiAyO1xuICB9XG4gIGQzLnNjYWxlLmxvZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9sb2coZDMuc2NhbGUubGluZWFyKCkuZG9tYWluKFsgMCwgMSBdKSwgMTAsIHRydWUsIFsgMSwgMTAgXSk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3NjYWxlX2xvZyhsaW5lYXIsIGJhc2UsIHBvc2l0aXZlLCBkb21haW4pIHtcbiAgICBmdW5jdGlvbiBsb2coeCkge1xuICAgICAgcmV0dXJuIChwb3NpdGl2ZSA/IE1hdGgubG9nKHggPCAwID8gMCA6IHgpIDogLU1hdGgubG9nKHggPiAwID8gMCA6IC14KSkgLyBNYXRoLmxvZyhiYXNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG93KHgpIHtcbiAgICAgIHJldHVybiBwb3NpdGl2ZSA/IE1hdGgucG93KGJhc2UsIHgpIDogLU1hdGgucG93KGJhc2UsIC14KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgICAgcmV0dXJuIGxpbmVhcihsb2coeCkpO1xuICAgIH1cbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gcG93KGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgcG9zaXRpdmUgPSB4WzBdID49IDA7XG4gICAgICBsaW5lYXIuZG9tYWluKChkb21haW4gPSB4Lm1hcChOdW1iZXIpKS5tYXAobG9nKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gYmFzZTtcbiAgICAgIGJhc2UgPSArXztcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChsb2cpKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuaWNlZCA9IGQzX3NjYWxlX25pY2UoZG9tYWluLm1hcChsb2cpLCBwb3NpdGl2ZSA/IE1hdGggOiBkM19zY2FsZV9sb2dOaWNlTmVnYXRpdmUpO1xuICAgICAgbGluZWFyLmRvbWFpbihuaWNlZCk7XG4gICAgICBkb21haW4gPSBuaWNlZC5tYXAocG93KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoZG9tYWluKSwgdGlja3MgPSBbXSwgdSA9IGV4dGVudFswXSwgdiA9IGV4dGVudFsxXSwgaSA9IE1hdGguZmxvb3IobG9nKHUpKSwgaiA9IE1hdGguY2VpbChsb2codikpLCBuID0gYmFzZSAlIDEgPyAyIDogYmFzZTtcbiAgICAgIGlmIChpc0Zpbml0ZShqIC0gaSkpIHtcbiAgICAgICAgaWYgKHBvc2l0aXZlKSB7XG4gICAgICAgICAgZm9yICg7aSA8IGo7IGkrKykgZm9yICh2YXIgayA9IDE7IGsgPCBuOyBrKyspIHRpY2tzLnB1c2gocG93KGkpICogayk7XG4gICAgICAgICAgdGlja3MucHVzaChwb3coaSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tzLnB1c2gocG93KGkpKTtcbiAgICAgICAgICBmb3IgKDtpKysgPCBqOyApIGZvciAodmFyIGsgPSBuIC0gMTsgayA+IDA7IGstLSkgdGlja3MucHVzaChwb3coaSkgKiBrKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyB0aWNrc1tpXSA8IHU7IGkrKykge31cbiAgICAgICAgZm9yIChqID0gdGlja3MubGVuZ3RoOyB0aWNrc1tqIC0gMV0gPiB2OyBqLS0pIHt9XG4gICAgICAgIHRpY2tzID0gdGlja3Muc2xpY2UoaSwgaik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGlja3M7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obiwgZm9ybWF0KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkM19zY2FsZV9sb2dGb3JtYXQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIGZvcm1hdCA9IGQzX3NjYWxlX2xvZ0Zvcm1hdDsgZWxzZSBpZiAodHlwZW9mIGZvcm1hdCAhPT0gXCJmdW5jdGlvblwiKSBmb3JtYXQgPSBkMy5mb3JtYXQoZm9ybWF0KTtcbiAgICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIG4gLyBzY2FsZS50aWNrcygpLmxlbmd0aCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xuICAgICAgICB2YXIgaSA9IGQgLyBwb3coTWF0aC5yb3VuZChsb2coZCkpKTtcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIC41KSBpICo9IGJhc2U7XG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBmb3JtYXQoZCkgOiBcIlwiO1xuICAgICAgfTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9sb2cobGluZWFyLmNvcHkoKSwgYmFzZSwgcG9zaXRpdmUsIGRvbWFpbik7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIHZhciBkM19zY2FsZV9sb2dGb3JtYXQgPSBkMy5mb3JtYXQoXCIuMGVcIiksIGQzX3NjYWxlX2xvZ05pY2VOZWdhdGl2ZSA9IHtcbiAgICBmbG9vcjogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmNlaWwoLXgpO1xuICAgIH0sXG4gICAgY2VpbDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIC1NYXRoLmZsb29yKC14KTtcbiAgICB9XG4gIH07XG4gIGQzLnNjYWxlLnBvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9wb3coZDMuc2NhbGUubGluZWFyKCksIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcG93KGxpbmVhciwgZXhwb25lbnQsIGRvbWFpbikge1xuICAgIHZhciBwb3dwID0gZDNfc2NhbGVfcG93UG93KGV4cG9uZW50KSwgcG93YiA9IGQzX3NjYWxlX3Bvd1BvdygxIC8gZXhwb25lbnQpO1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIocG93cCh4KSk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBwb3diKGxpbmVhci5pbnZlcnQoeCkpO1xuICAgIH07XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgbGluZWFyLmRvbWFpbigoZG9tYWluID0geC5tYXAoTnVtYmVyKSkubWFwKHBvd3ApKTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIHNjYWxlLmRvbWFpbihkM19zY2FsZV9saW5lYXJOaWNlKGRvbWFpbiwgbSkpO1xuICAgIH07XG4gICAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBleHBvbmVudDtcbiAgICAgIHBvd3AgPSBkM19zY2FsZV9wb3dQb3coZXhwb25lbnQgPSB4KTtcbiAgICAgIHBvd2IgPSBkM19zY2FsZV9wb3dQb3coMSAvIGV4cG9uZW50KTtcbiAgICAgIGxpbmVhci5kb21haW4oZG9tYWluLm1hcChwb3dwKSk7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcG93KGxpbmVhci5jb3B5KCksIGV4cG9uZW50LCBkb21haW4pO1xuICAgIH07XG4gICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclJlYmluZChzY2FsZSwgbGluZWFyKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zY2FsZV9wb3dQb3coZSkge1xuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA8IDAgPyAtTWF0aC5wb3coLXgsIGUpIDogTWF0aC5wb3coeCwgZSk7XG4gICAgfTtcbiAgfVxuICBkMy5zY2FsZS5zcXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzLnNjYWxlLnBvdygpLmV4cG9uZW50KC41KTtcbiAgfTtcbiAgZDMuc2NhbGUub3JkaW5hbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9vcmRpbmFsKFtdLCB7XG4gICAgICB0OiBcInJhbmdlXCIsXG4gICAgICBhOiBbIFtdIF1cbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcikge1xuICAgIHZhciBpbmRleCwgcmFuZ2UsIHJhbmdlQmFuZDtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbKChpbmRleC5nZXQoeCkgfHwgKHJhbmdlci50ID09PSBcInJhbmdlXCIgPyBpbmRleC5zZXQoeCwgZG9tYWluLnB1c2goeCkpIDogTmFOKSkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0ZXBzKHN0YXJ0LCBzdGVwKSB7XG4gICAgICByZXR1cm4gZDMucmFuZ2UoZG9tYWluLmxlbmd0aCkubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgc3RlcCAqIGk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluO1xuICAgICAgZG9tYWluID0gW107XG4gICAgICBpbmRleCA9IG5ldyBkM19NYXAoKTtcbiAgICAgIHZhciBpID0gLTEsIG4gPSB4Lmxlbmd0aCwgeGk7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpbmRleC5oYXMoeGkgPSB4W2ldKSkgaW5kZXguc2V0KHhpLCBkb21haW4ucHVzaCh4aSkpO1xuICAgICAgcmV0dXJuIHNjYWxlW3Jhbmdlci50XS5hcHBseShzY2FsZSwgcmFuZ2VyLmEpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VQb2ludHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHBhZGRpbmcgPSAwO1xuICAgICAgdmFyIHN0YXJ0ID0geFswXSwgc3RvcCA9IHhbMV0sIHN0ZXAgPSBkb21haW4ubGVuZ3RoIDwgMiA/IChzdGFydCA9IChzdGFydCArIHN0b3ApIC8gMiwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIHBhZGRpbmcgLyAyLCBzdGVwKTtcbiAgICAgIHJhbmdlQmFuZCA9IDA7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VSb3VuZFBvaW50cyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICB2YXIgc3RhcnQgPSB4WzBdLCBzdG9wID0geFsxXSwgc3RlcCA9IGRvbWFpbi5sZW5ndGggPCAyID8gKHN0YXJ0ID0gc3RvcCA9IE1hdGgucm91bmQoKHN0YXJ0ICsgc3RvcCkgLyAyKSwgXG4gICAgICAwKSA6IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSAxICsgcGFkZGluZykgfCAwO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoc3RlcCAqIHBhZGRpbmcgLyAyICsgKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gMSArIHBhZGRpbmcpICogc3RlcCkgLyAyKSwgc3RlcCk7XG4gICAgICByYW5nZUJhbmQgPSAwO1xuICAgICAgcmFuZ2VyID0ge1xuICAgICAgICB0OiBcInJhbmdlUm91bmRQb2ludHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kcyA9IGZ1bmN0aW9uKHgsIHBhZGRpbmcsIG91dGVyUGFkZGluZykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSBwYWRkaW5nID0gMDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgb3V0ZXJQYWRkaW5nID0gcGFkZGluZztcbiAgICAgIHZhciByZXZlcnNlID0geFsxXSA8IHhbMF0sIHN0YXJ0ID0geFtyZXZlcnNlIC0gMF0sIHN0b3AgPSB4WzEgLSByZXZlcnNlXSwgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZyk7XG4gICAgICByYW5nZSA9IHN0ZXBzKHN0YXJ0ICsgc3RlcCAqIG91dGVyUGFkZGluZywgc3RlcCk7XG4gICAgICBpZiAocmV2ZXJzZSkgcmFuZ2UucmV2ZXJzZSgpO1xuICAgICAgcmFuZ2VCYW5kID0gc3RlcCAqICgxIC0gcGFkZGluZyk7XG4gICAgICByYW5nZXIgPSB7XG4gICAgICAgIHQ6IFwicmFuZ2VCYW5kc1wiLFxuICAgICAgICBhOiBhcmd1bWVudHNcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfTtcbiAgICBzY2FsZS5yYW5nZVJvdW5kQmFuZHMgPSBmdW5jdGlvbih4LCBwYWRkaW5nLCBvdXRlclBhZGRpbmcpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcGFkZGluZyA9IDA7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIG91dGVyUGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICB2YXIgcmV2ZXJzZSA9IHhbMV0gPCB4WzBdLCBzdGFydCA9IHhbcmV2ZXJzZSAtIDBdLCBzdG9wID0geFsxIC0gcmV2ZXJzZV0sIHN0ZXAgPSBNYXRoLmZsb29yKChzdG9wIC0gc3RhcnQpIC8gKGRvbWFpbi5sZW5ndGggLSBwYWRkaW5nICsgMiAqIG91dGVyUGFkZGluZykpO1xuICAgICAgcmFuZ2UgPSBzdGVwcyhzdGFydCArIE1hdGgucm91bmQoKHN0b3AgLSBzdGFydCAtIChkb21haW4ubGVuZ3RoIC0gcGFkZGluZykgKiBzdGVwKSAvIDIpLCBzdGVwKTtcbiAgICAgIGlmIChyZXZlcnNlKSByYW5nZS5yZXZlcnNlKCk7XG4gICAgICByYW5nZUJhbmQgPSBNYXRoLnJvdW5kKHN0ZXAgKiAoMSAtIHBhZGRpbmcpKTtcbiAgICAgIHJhbmdlciA9IHtcbiAgICAgICAgdDogXCJyYW5nZVJvdW5kQmFuZHNcIixcbiAgICAgICAgYTogYXJndW1lbnRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VCYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmFuZ2VCYW5kO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2VFeHRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZUV4dGVudChyYW5nZXIuYVswXSk7XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfb3JkaW5hbChkb21haW4sIHJhbmdlcik7XG4gICAgfTtcbiAgICByZXR1cm4gc2NhbGUuZG9tYWluKGRvbWFpbik7XG4gIH1cbiAgZDMuc2NhbGUuY2F0ZWdvcnkxMCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkxMCk7XG4gIH07XG4gIGQzLnNjYWxlLmNhdGVnb3J5MjAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDMuc2NhbGUub3JkaW5hbCgpLnJhbmdlKGQzX2NhdGVnb3J5MjApO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGIpO1xuICB9O1xuICBkMy5zY2FsZS5jYXRlZ29yeTIwYyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkMy5zY2FsZS5vcmRpbmFsKCkucmFuZ2UoZDNfY2F0ZWdvcnkyMGMpO1xuICB9O1xuICB2YXIgZDNfY2F0ZWdvcnkxMCA9IFsgMjA2MjI2MCwgMTY3NDQyMDYsIDI5MjQ1ODgsIDE0MDM0NzI4LCA5NzI1ODg1LCA5MTk3MTMxLCAxNDkwNzMzMCwgODM1NTcxMSwgMTIzNjkxODYsIDE1NTYxNzUgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjAgPSBbIDIwNjIyNjAsIDExNDU0NDQwLCAxNjc0NDIwNiwgMTY3NTk2NzIsIDI5MjQ1ODgsIDEwMDE4Njk4LCAxNDAzNDcyOCwgMTY3NTA3NDIsIDk3MjU4ODUsIDEyOTU1ODYxLCA5MTk3MTMxLCAxMjg4NTE0MCwgMTQ5MDczMzAsIDE2MjM0MTk0LCA4MzU1NzExLCAxMzA5MjgwNywgMTIzNjkxODYsIDE0NDA4NTg5LCAxNTU2MTc1LCAxMDQxMDcyNSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICB2YXIgZDNfY2F0ZWdvcnkyMGIgPSBbIDM3NTA3NzcsIDUzOTU2MTksIDcwNDA3MTksIDEwMjY0Mjg2LCA2NTE5MDk3LCA5MjE2NTk0LCAxMTkxNTExNSwgMTM1NTY2MzYsIDkyMDI5OTMsIDEyNDI2ODA5LCAxNTE4NjUxNCwgMTUxOTA5MzIsIDg2NjYxNjksIDExMzU2NDkwLCAxNDA0OTY0MywgMTUxNzczNzIsIDgwNzc2ODMsIDEwODM0MzI0LCAxMzUyODUwOSwgMTQ1ODk2NTQgXS5tYXAoZDNfcmdiU3RyaW5nKTtcbiAgdmFyIGQzX2NhdGVnb3J5MjBjID0gWyAzMjQ0NzMzLCA3MDU3MTEwLCAxMDQwNjYyNSwgMTMwMzI0MzEsIDE1MDk1MDUzLCAxNjYxNjc2NCwgMTY2MjUyNTksIDE2NjM0MDE4LCAzMjUzMDc2LCA3NjUyNDcwLCAxMDYwNzAwMywgMTMxMDE1MDQsIDc2OTUyODEsIDEwMzk0MzEyLCAxMjM2OTM3MiwgMTQzNDI4OTEsIDY1MTM1MDcsIDk4Njg5NTAsIDEyNDM0ODc3LCAxNDI3NzA4MSBdLm1hcChkM19yZ2JTdHJpbmcpO1xuICBkMy5zY2FsZS5xdWFudGlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM19zY2FsZV9xdWFudGlsZShbXSwgW10pO1xuICB9O1xuICBmdW5jdGlvbiBkM19zY2FsZV9xdWFudGlsZShkb21haW4sIHJhbmdlKSB7XG4gICAgdmFyIHRocmVzaG9sZHM7XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIHZhciBrID0gMCwgcSA9IHJhbmdlLmxlbmd0aDtcbiAgICAgIHRocmVzaG9sZHMgPSBbXTtcbiAgICAgIHdoaWxlICgrK2sgPCBxKSB0aHJlc2hvbGRzW2sgLSAxXSA9IGQzLnF1YW50aWxlKGRvbWFpbiwgayAvIHEpO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoIWlzTmFOKHggPSAreCkpIHJldHVybiByYW5nZVtkMy5iaXNlY3QodGhyZXNob2xkcywgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSB4Lm1hcChkM19udW1iZXIpLmZpbHRlcihkM19udW1lcmljKS5zb3J0KGQzX2FzY2VuZGluZyk7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0geDtcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XG4gICAgfTtcbiAgICBzY2FsZS5xdWFudGlsZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aHJlc2hvbGRzO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICByZXR1cm4geSA8IDAgPyBbIE5hTiwgTmFOIF0gOiBbIHkgPiAwID8gdGhyZXNob2xkc1t5IC0gMV0gOiBkb21haW5bMF0sIHkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbeV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfcXVhbnRpbGUoZG9tYWluLCByYW5nZSk7XG4gICAgfTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9XG4gIGQzLnNjYWxlLnF1YW50aXplID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3F1YW50aXplKDAsIDEsIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfcXVhbnRpemUoeDAsIHgxLCByYW5nZSkge1xuICAgIHZhciBreCwgaTtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4oaSwgTWF0aC5mbG9vcihreCAqICh4IC0geDApKSkpXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICAgIGt4ID0gcmFuZ2UubGVuZ3RoIC8gKHgxIC0geDApO1xuICAgICAgaSA9IHJhbmdlLmxlbmd0aCAtIDE7XG4gICAgICByZXR1cm4gc2NhbGU7XG4gICAgfVxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFsgeDAsIHgxIF07XG4gICAgICB4MCA9ICt4WzBdO1xuICAgICAgeDEgPSAreFt4Lmxlbmd0aCAtIDFdO1xuICAgICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgICB9O1xuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcmFuZ2U7XG4gICAgICByYW5nZSA9IHg7XG4gICAgICByZXR1cm4gcmVzY2FsZSgpO1xuICAgIH07XG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgICAgeSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgICB5ID0geSA8IDAgPyBOYU4gOiB5IC8ga3ggKyB4MDtcbiAgICAgIHJldHVybiBbIHksIHkgKyAxIC8ga3ggXTtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM19zY2FsZV9xdWFudGl6ZSh4MCwgeDEsIHJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH1cbiAgZDMuc2NhbGUudGhyZXNob2xkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX3RocmVzaG9sZChbIC41IF0sIFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpIHtcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgICBpZiAoeCA8PSB4KSByZXR1cm4gcmFuZ2VbZDMuYmlzZWN0KGRvbWFpbiwgeCldO1xuICAgIH1cbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW47XG4gICAgICBkb21haW4gPSBfO1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH07XG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByYW5nZTtcbiAgICAgIHJhbmdlID0gXztcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHkgPSByYW5nZS5pbmRleE9mKHkpO1xuICAgICAgcmV0dXJuIFsgZG9tYWluW3kgLSAxXSwgZG9tYWluW3ldIF07XG4gICAgfTtcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfdGhyZXNob2xkKGRvbWFpbiwgcmFuZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG4gIGQzLnNjYWxlLmlkZW50aXR5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3NjYWxlX2lkZW50aXR5KFsgMCwgMSBdKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKSB7XG4gICAgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgICAgcmV0dXJuICt4O1xuICAgIH1cbiAgICBpZGVudGl0eS5pbnZlcnQgPSBpZGVudGl0eTtcbiAgICBpZGVudGl0eS5kb21haW4gPSBpZGVudGl0eS5yYW5nZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbjtcbiAgICAgIGRvbWFpbiA9IHgubWFwKGlkZW50aXR5KTtcbiAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9O1xuICAgIGlkZW50aXR5LnRpY2tzID0gZnVuY3Rpb24obSkge1xuICAgICAgcmV0dXJuIGQzX3NjYWxlX2xpbmVhclRpY2tzKGRvbWFpbiwgbSk7XG4gICAgfTtcbiAgICBpZGVudGl0eS50aWNrRm9ybWF0ID0gZnVuY3Rpb24obSwgZm9ybWF0KSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyVGlja0Zvcm1hdChkb21haW4sIG0sIGZvcm1hdCk7XG4gICAgfTtcbiAgICBpZGVudGl0eS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZDNfc2NhbGVfaWRlbnRpdHkoZG9tYWluKTtcbiAgICB9O1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBkMy5zdmcgPSB7fTtcbiAgZnVuY3Rpb24gZDNfemVybygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBkMy5zdmcuYXJjID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlubmVyUmFkaXVzID0gZDNfc3ZnX2FyY0lubmVyUmFkaXVzLCBvdXRlclJhZGl1cyA9IGQzX3N2Z19hcmNPdXRlclJhZGl1cywgY29ybmVyUmFkaXVzID0gZDNfemVybywgcGFkUmFkaXVzID0gZDNfc3ZnX2FyY0F1dG8sIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGUsIHBhZEFuZ2xlID0gZDNfc3ZnX2FyY1BhZEFuZ2xlO1xuICAgIGZ1bmN0aW9uIGFyYygpIHtcbiAgICAgIHZhciByMCA9IE1hdGgubWF4KDAsICtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjEgPSBNYXRoLm1heCgwLCArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksIGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZs+ALCBhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmz4AsIGRhID0gTWF0aC5hYnMoYTEgLSBhMCksIGN3ID0gYTAgPiBhMSA/IDAgOiAxO1xuICAgICAgaWYgKHIxIDwgcjApIHJjID0gcjEsIHIxID0gcjAsIHIwID0gcmM7XG4gICAgICBpZiAoZGEgPj0gz4TOtSkgcmV0dXJuIGNpcmNsZVNlZ21lbnQocjEsIGN3KSArIChyMCA/IGNpcmNsZVNlZ21lbnQocjAsIDEgLSBjdykgOiBcIlwiKSArIFwiWlwiO1xuICAgICAgdmFyIHJjLCBjciwgcnAsIGFwLCBwMCA9IDAsIHAxID0gMCwgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCBwYXRoID0gW107XG4gICAgICBpZiAoYXAgPSAoK3BhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMCkgLyAyKSB7XG4gICAgICAgIHJwID0gcGFkUmFkaXVzID09PSBkM19zdmdfYXJjQXV0byA/IE1hdGguc3FydChyMCAqIHIwICsgcjEgKiByMSkgOiArcGFkUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICghY3cpIHAxICo9IC0xO1xuICAgICAgICBpZiAocjEpIHAxID0gZDNfYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcbiAgICAgICAgaWYgKHIwKSBwMCA9IGQzX2FzaW4ocnAgLyByMCAqIE1hdGguc2luKGFwKSk7XG4gICAgICB9XG4gICAgICBpZiAocjEpIHtcbiAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGEwICsgcDEpO1xuICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oYTAgKyBwMSk7XG4gICAgICAgIHgxID0gcjEgKiBNYXRoLmNvcyhhMSAtIHAxKTtcbiAgICAgICAgeTEgPSByMSAqIE1hdGguc2luKGExIC0gcDEpO1xuICAgICAgICB2YXIgbDEgPSBNYXRoLmFicyhhMSAtIGEwIC0gMiAqIHAxKSA8PSDPgCA/IDAgOiAxO1xuICAgICAgICBpZiAocDEgJiYgZDNfc3ZnX2FyY1N3ZWVwKHgwLCB5MCwgeDEsIHkxKSA9PT0gY3cgXiBsMSkge1xuICAgICAgICAgIHZhciBoMSA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDAgPSByMSAqIE1hdGguY29zKGgxKTtcbiAgICAgICAgICB5MCA9IHIxICogTWF0aC5zaW4oaDEpO1xuICAgICAgICAgIHgxID0geTEgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MCA9IHkwID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChyMCkge1xuICAgICAgICB4MiA9IHIwICogTWF0aC5jb3MoYTEgLSBwMCk7XG4gICAgICAgIHkyID0gcjAgKiBNYXRoLnNpbihhMSAtIHAwKTtcbiAgICAgICAgeDMgPSByMCAqIE1hdGguY29zKGEwICsgcDApO1xuICAgICAgICB5MyA9IHIwICogTWF0aC5zaW4oYTAgKyBwMCk7XG4gICAgICAgIHZhciBsMCA9IE1hdGguYWJzKGEwIC0gYTEgKyAyICogcDApIDw9IM+AID8gMCA6IDE7XG4gICAgICAgIGlmIChwMCAmJiBkM19zdmdfYXJjU3dlZXAoeDIsIHkyLCB4MywgeTMpID09PSAxIC0gY3cgXiBsMCkge1xuICAgICAgICAgIHZhciBoMCA9IChhMCArIGExKSAvIDI7XG4gICAgICAgICAgeDIgPSByMCAqIE1hdGguY29zKGgwKTtcbiAgICAgICAgICB5MiA9IHIwICogTWF0aC5zaW4oaDApO1xuICAgICAgICAgIHgzID0geTMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHkyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChkYSA+IM61ICYmIChyYyA9IE1hdGgubWluKE1hdGguYWJzKHIxIC0gcjApIC8gMiwgK2Nvcm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkgPiAuMDAxKSB7XG4gICAgICAgIGNyID0gcjAgPCByMSBeIGN3ID8gMCA6IDE7XG4gICAgICAgIHZhciByYzEgPSByYywgcmMwID0gcmM7XG4gICAgICAgIGlmIChkYSA8IM+AKSB7XG4gICAgICAgICAgdmFyIG9jID0geDMgPT0gbnVsbCA/IFsgeDIsIHkyIF0gOiB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IGQzX2dlb21fcG9seWdvbkludGVyc2VjdChbIHgwLCB5MCBdLCBbIHgzLCB5MyBdLCBbIHgxLCB5MSBdLCBbIHgyLCB5MiBdKSwgYXggPSB4MCAtIG9jWzBdLCBheSA9IHkwIC0gb2NbMV0sIGJ4ID0geDEgLSBvY1swXSwgYnkgPSB5MSAtIG9jWzFdLCBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpICogTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksIGxjID0gTWF0aC5zcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBNYXRoLm1pbihyYywgKHIwIC0gbGMpIC8gKGtjIC0gMSkpO1xuICAgICAgICAgIHJjMSA9IE1hdGgubWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDMwID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKHgzID09IG51bGwgPyBbIHgyLCB5MiBdIDogWyB4MywgeTMgXSwgWyB4MCwgeTAgXSwgcjEsIHJjMSwgY3cpLCB0MTIgPSBkM19zdmdfYXJjQ29ybmVyVGFuZ2VudHMoWyB4MSwgeTEgXSwgWyB4MiwgeTIgXSwgcjEsIHJjMSwgY3cpO1xuICAgICAgICAgIGlmIChyYyA9PT0gcmMxKSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQzMFsxXSwgXCJBXCIsIHIxLCBcIixcIiwgcjEsIFwiIDAgXCIsIDEgLSBjdyBeIGQzX3N2Z19hcmNTd2VlcCh0MzBbMV1bMF0sIHQzMFsxXVsxXSwgdDEyWzFdWzBdLCB0MTJbMV1bMV0pLCBcIixcIiwgY3csIFwiIFwiLCB0MTJbMV0sIFwiQVwiLCByYzEsIFwiLFwiLCByYzEsIFwiIDAgMCxcIiwgY3IsIFwiIFwiLCB0MTJbMF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLnB1c2goXCJNXCIsIHQzMFswXSwgXCJBXCIsIHJjMSwgXCIsXCIsIHJjMSwgXCIgMCAxLFwiLCBjciwgXCIgXCIsIHQxMlswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGgucHVzaChcIk1cIiwgeDAsIFwiLFwiLCB5MCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHgzICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgdDAzID0gZDNfc3ZnX2FyY0Nvcm5lclRhbmdlbnRzKFsgeDAsIHkwIF0sIFsgeDMsIHkzIF0sIHIwLCAtcmMwLCBjdyksIHQyMSA9IGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhbIHgyLCB5MiBdLCB4MSA9PSBudWxsID8gWyB4MCwgeTAgXSA6IFsgeDEsIHkxIF0sIHIwLCAtcmMwLCBjdyk7XG4gICAgICAgICAgaWYgKHJjID09PSByYzApIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDIxWzFdLCBcIkFcIiwgcjAsIFwiLFwiLCByMCwgXCIgMCBcIiwgY3cgXiBkM19zdmdfYXJjU3dlZXAodDIxWzFdWzBdLCB0MjFbMV1bMV0sIHQwM1sxXVswXSwgdDAzWzFdWzFdKSwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHQwM1sxXSwgXCJBXCIsIHJjMCwgXCIsXCIsIHJjMCwgXCIgMCAwLFwiLCBjciwgXCIgXCIsIHQwM1swXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChcIkxcIiwgdDIxWzBdLCBcIkFcIiwgcmMwLCBcIixcIiwgcmMwLCBcIiAwIDAsXCIsIGNyLCBcIiBcIiwgdDAzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aC5wdXNoKFwiTFwiLCB4MiwgXCIsXCIsIHkyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0aC5wdXNoKFwiTVwiLCB4MCwgXCIsXCIsIHkwKTtcbiAgICAgICAgaWYgKHgxICE9IG51bGwpIHBhdGgucHVzaChcIkFcIiwgcjEsIFwiLFwiLCByMSwgXCIgMCBcIiwgbDEsIFwiLFwiLCBjdywgXCIgXCIsIHgxLCBcIixcIiwgeTEpO1xuICAgICAgICBwYXRoLnB1c2goXCJMXCIsIHgyLCBcIixcIiwgeTIpO1xuICAgICAgICBpZiAoeDMgIT0gbnVsbCkgcGF0aC5wdXNoKFwiQVwiLCByMCwgXCIsXCIsIHIwLCBcIiAwIFwiLCBsMCwgXCIsXCIsIDEgLSBjdywgXCIgXCIsIHgzLCBcIixcIiwgeTMpO1xuICAgICAgfVxuICAgICAgcGF0aC5wdXNoKFwiWlwiKTtcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNpcmNsZVNlZ21lbnQocjEsIGN3KSB7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHIxICsgXCJBXCIgKyByMSArIFwiLFwiICsgcjEgKyBcIiAwIDEsXCIgKyBjdyArIFwiIDAsXCIgKyAtcjEgKyBcIkFcIiArIHIxICsgXCIsXCIgKyByMSArIFwiIDAgMSxcIiArIGN3ICsgXCIgMCxcIiArIHIxO1xuICAgIH1cbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBpbm5lclJhZGl1cztcbiAgICAgIGlubmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvdXRlclJhZGl1cztcbiAgICAgIG91dGVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29ybmVyUmFkaXVzO1xuICAgICAgY29ybmVyUmFkaXVzID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcGFkUmFkaXVzO1xuICAgICAgcGFkUmFkaXVzID0gdiA9PSBkM19zdmdfYXJjQXV0byA/IGQzX3N2Z19hcmNBdXRvIDogZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuc3RhcnRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHN0YXJ0QW5nbGU7XG4gICAgICBzdGFydEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuZW5kQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBlbmRBbmdsZTtcbiAgICAgIGVuZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwYWRBbmdsZTtcbiAgICAgIHBhZEFuZ2xlID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBhcmM7XG4gICAgfTtcbiAgICBhcmMuY2VudHJvaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiwgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIE1hdGguY29zKGEpICogciwgTWF0aC5zaW4oYSkgKiByIF07XG4gICAgfTtcbiAgICByZXR1cm4gYXJjO1xuICB9O1xuICB2YXIgZDNfc3ZnX2FyY0F1dG8gPSBcImF1dG9cIjtcbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY0lubmVyUmFkaXVzKGQpIHtcbiAgICByZXR1cm4gZC5pbm5lclJhZGl1cztcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfYXJjT3V0ZXJSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLm91dGVyUmFkaXVzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTdGFydEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNFbmRBbmdsZShkKSB7XG4gICAgcmV0dXJuIGQuZW5kQW5nbGU7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2FyY1BhZEFuZ2xlKGQpIHtcbiAgICByZXR1cm4gZCAmJiBkLnBhZEFuZ2xlO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNTd2VlcCh4MCwgeTAsIHgxLCB5MSkge1xuICAgIHJldHVybiAoeDAgLSB4MSkgKiB5MCAtICh5MCAtIHkxKSAqIHgwID4gMCA/IDAgOiAxO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmNDb3JuZXJUYW5nZW50cyhwMCwgcDEsIHIxLCByYywgY3cpIHtcbiAgICB2YXIgeDAxID0gcDBbMF0gLSBwMVswXSwgeTAxID0gcDBbMV0gLSBwMVsxXSwgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBNYXRoLnNxcnQoeDAxICogeDAxICsgeTAxICogeTAxKSwgb3ggPSBsbyAqIHkwMSwgb3kgPSAtbG8gKiB4MDEsIHgxID0gcDBbMF0gKyBveCwgeTEgPSBwMFsxXSArIG95LCB4MiA9IHAxWzBdICsgb3gsIHkyID0gcDFbMV0gKyBveSwgeDMgPSAoeDEgKyB4MikgLyAyLCB5MyA9ICh5MSArIHkyKSAvIDIsIGR4ID0geDIgLSB4MSwgZHkgPSB5MiAtIHkxLCBkMiA9IGR4ICogZHggKyBkeSAqIGR5LCByID0gcjEgLSByYywgRCA9IHgxICogeTIgLSB4MiAqIHkxLCBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsIGN5MCA9ICgtRCAqIGR4IC0gZHkgKiBkKSAvIGQyLCBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLCBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMiwgZHgwID0gY3gwIC0geDMsIGR5MCA9IGN5MCAtIHkzLCBkeDEgPSBjeDEgLSB4MywgZHkxID0gY3kxIC0geTM7XG4gICAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG4gICAgcmV0dXJuIFsgWyBjeDAgLSBveCwgY3kwIC0gb3kgXSwgWyBjeDAgKiByMSAvIHIsIGN5MCAqIHIxIC8gciBdIF07XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmUocHJvamVjdGlvbikge1xuICAgIHZhciB4ID0gZDNfZ2VvbV9wb2ludFgsIHkgPSBkM19nZW9tX3BvaW50WSwgZGVmaW5lZCA9IGQzX3RydWUsIGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVMaW5lYXIsIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUua2V5LCB0ZW5zaW9uID0gLjc7XG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXSwgcG9pbnRzID0gW10sIGkgPSAtMSwgbiA9IGRhdGEubGVuZ3RoLCBkLCBmeCA9IGQzX2Z1bmN0b3IoeCksIGZ5ID0gZDNfZnVuY3Rvcih5KTtcbiAgICAgIGZ1bmN0aW9uIHNlZ21lbnQoKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goXCJNXCIsIGludGVycG9sYXRlKHByb2plY3Rpb24ocG9pbnRzKSwgdGVuc2lvbikpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMucHVzaChbICtmeC5jYWxsKHRoaXMsIGQsIGkpLCArZnkuY2FsbCh0aGlzLCBkLCBpKSBdKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBsaW5lLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4O1xuICAgICAgeCA9IF87XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHk7XG4gICAgICB5ID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZGVmaW5lZDtcbiAgICAgIGRlZmluZWQgPSBfO1xuICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfTtcbiAgICBsaW5lLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gaW50ZXJwb2xhdGVLZXk7XG4gICAgICBpZiAodHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIikgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZSA9IF87IGVsc2UgaW50ZXJwb2xhdGVLZXkgPSAoaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUludGVycG9sYXRvcnMuZ2V0KF8pIHx8IGQzX3N2Z19saW5lTGluZWFyKS5rZXk7XG4gICAgICByZXR1cm4gbGluZTtcbiAgICB9O1xuICAgIGxpbmUudGVuc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRlbnNpb247XG4gICAgICB0ZW5zaW9uID0gXztcbiAgICAgIHJldHVybiBsaW5lO1xuICAgIH07XG4gICAgcmV0dXJuIGxpbmU7XG4gIH1cbiAgZDMuc3ZnLmxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfc3ZnX2xpbmUoZDNfaWRlbnRpdHkpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzID0gZDMubWFwKHtcbiAgICBsaW5lYXI6IGQzX3N2Z19saW5lTGluZWFyLFxuICAgIFwibGluZWFyLWNsb3NlZFwiOiBkM19zdmdfbGluZUxpbmVhckNsb3NlZCxcbiAgICBzdGVwOiBkM19zdmdfbGluZVN0ZXAsXG4gICAgXCJzdGVwLWJlZm9yZVwiOiBkM19zdmdfbGluZVN0ZXBCZWZvcmUsXG4gICAgXCJzdGVwLWFmdGVyXCI6IGQzX3N2Z19saW5lU3RlcEFmdGVyLFxuICAgIGJhc2lzOiBkM19zdmdfbGluZUJhc2lzLFxuICAgIFwiYmFzaXMtb3BlblwiOiBkM19zdmdfbGluZUJhc2lzT3BlbixcbiAgICBcImJhc2lzLWNsb3NlZFwiOiBkM19zdmdfbGluZUJhc2lzQ2xvc2VkLFxuICAgIGJ1bmRsZTogZDNfc3ZnX2xpbmVCdW5kbGUsXG4gICAgY2FyZGluYWw6IGQzX3N2Z19saW5lQ2FyZGluYWwsXG4gICAgXCJjYXJkaW5hbC1vcGVuXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuLFxuICAgIFwiY2FyZGluYWwtY2xvc2VkXCI6IGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQsXG4gICAgbW9ub3RvbmU6IGQzX3N2Z19saW5lTW9ub3RvbmVcbiAgfSk7XG4gIGQzX3N2Z19saW5lSW50ZXJwb2xhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB2YWx1ZS5rZXkgPSBrZXk7XG4gICAgdmFsdWUuY2xvc2VkID0gLy1jbG9zZWQkLy50ZXN0KGtleSk7XG4gIH0pO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA+IDEgPyBwb2ludHMuam9pbihcIkxcIikgOiBwb2ludHMgKyBcIlpcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUxpbmVhckNsb3NlZChwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmpvaW4oXCJMXCIpICsgXCJaXCI7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwKHBvaW50cykge1xuICAgIHZhciBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGgsIHAgPSBwb2ludHNbMF0sIHBhdGggPSBbIHBbMF0sIFwiLFwiLCBwWzFdIF07XG4gICAgd2hpbGUgKCsraSA8IG4pIHBhdGgucHVzaChcIkhcIiwgKHBbMF0gKyAocCA9IHBvaW50c1tpXSlbMF0pIC8gMiwgXCJWXCIsIHBbMV0pO1xuICAgIGlmIChuID4gMSkgcGF0aC5wdXNoKFwiSFwiLCBwWzBdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lU3RlcEJlZm9yZShwb2ludHMpIHtcbiAgICB2YXIgaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoLCBwID0gcG9pbnRzWzBdLCBwYXRoID0gWyBwWzBdLCBcIixcIiwgcFsxXSBdO1xuICAgIHdoaWxlICgrK2kgPCBuKSBwYXRoLnB1c2goXCJWXCIsIChwID0gcG9pbnRzW2ldKVsxXSwgXCJIXCIsIHBbMF0pO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXIocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aCwgcCA9IHBvaW50c1swXSwgcGF0aCA9IFsgcFswXSwgXCIsXCIsIHBbMV0gXTtcbiAgICB3aGlsZSAoKytpIDwgbikgcGF0aC5wdXNoKFwiSFwiLCAocCA9IHBvaW50c1tpXSlbMF0sIFwiVlwiLCBwWzFdKTtcbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxPcGVuKHBvaW50cywgdGVuc2lvbikge1xuICAgIHJldHVybiBwb2ludHMubGVuZ3RoIDwgNCA/IGQzX3N2Z19saW5lTGluZWFyKHBvaW50cykgOiBwb2ludHNbMV0gKyBkM19zdmdfbGluZUhlcm1pdGUocG9pbnRzLnNsaWNlKDEsIC0xKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxDbG9zZWQocG9pbnRzLCB0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPCAzID8gZDNfc3ZnX2xpbmVMaW5lYXJDbG9zZWQocG9pbnRzKSA6IHBvaW50c1swXSArIGQzX3N2Z19saW5lSGVybWl0ZSgocG9pbnRzLnB1c2gocG9pbnRzWzBdKSwgXG4gICAgcG9pbnRzKSwgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKFsgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAyXSBdLmNvbmNhdChwb2ludHMsIFsgcG9pbnRzWzFdIF0pLCB0ZW5zaW9uKSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVDYXJkaW5hbChwb2ludHMsIHRlbnNpb24pIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVDYXJkaW5hbFRhbmdlbnRzKHBvaW50cywgdGVuc2lvbikpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lSGVybWl0ZShwb2ludHMsIHRhbmdlbnRzKSB7XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA8IDEgfHwgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggJiYgcG9pbnRzLmxlbmd0aCAhPSB0YW5nZW50cy5sZW5ndGggKyAyKSB7XG4gICAgICByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB9XG4gICAgdmFyIHF1YWQgPSBwb2ludHMubGVuZ3RoICE9IHRhbmdlbnRzLmxlbmd0aCwgcGF0aCA9IFwiXCIsIHAwID0gcG9pbnRzWzBdLCBwID0gcG9pbnRzWzFdLCB0MCA9IHRhbmdlbnRzWzBdLCB0ID0gdDAsIHBpID0gMTtcbiAgICBpZiAocXVhZCkge1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdIC0gdDBbMF0gKiAyIC8gMykgKyBcIixcIiArIChwWzFdIC0gdDBbMV0gKiAyIC8gMykgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICBwMCA9IHBvaW50c1sxXTtcbiAgICAgIHBpID0gMjtcbiAgICB9XG4gICAgaWYgKHRhbmdlbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHQgPSB0YW5nZW50c1sxXTtcbiAgICAgIHAgPSBwb2ludHNbcGldO1xuICAgICAgcGkrKztcbiAgICAgIHBhdGggKz0gXCJDXCIgKyAocDBbMF0gKyB0MFswXSkgKyBcIixcIiArIChwMFsxXSArIHQwWzFdKSArIFwiLFwiICsgKHBbMF0gLSB0WzBdKSArIFwiLFwiICsgKHBbMV0gLSB0WzFdKSArIFwiLFwiICsgcFswXSArIFwiLFwiICsgcFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgdGFuZ2VudHMubGVuZ3RoOyBpKyssIHBpKyspIHtcbiAgICAgICAgcCA9IHBvaW50c1twaV07XG4gICAgICAgIHQgPSB0YW5nZW50c1tpXTtcbiAgICAgICAgcGF0aCArPSBcIlNcIiArIChwWzBdIC0gdFswXSkgKyBcIixcIiArIChwWzFdIC0gdFsxXSkgKyBcIixcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxdWFkKSB7XG4gICAgICB2YXIgbHAgPSBwb2ludHNbcGldO1xuICAgICAgcGF0aCArPSBcIlFcIiArIChwWzBdICsgdFswXSAqIDIgLyAzKSArIFwiLFwiICsgKHBbMV0gKyB0WzFdICogMiAvIDMpICsgXCIsXCIgKyBscFswXSArIFwiLFwiICsgbHBbMV07XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQ2FyZGluYWxUYW5nZW50cyhwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgYSA9ICgxIC0gdGVuc2lvbikgLyAyLCBwMCwgcDEgPSBwb2ludHNbMF0sIHAyID0gcG9pbnRzWzFdLCBpID0gMSwgbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHAwID0gcDE7XG4gICAgICBwMSA9IHAyO1xuICAgICAgcDIgPSBwb2ludHNbaV07XG4gICAgICB0YW5nZW50cy5wdXNoKFsgYSAqIChwMlswXSAtIHAwWzBdKSwgYSAqIChwMlsxXSAtIHAwWzFdKSBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhbmdlbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXMocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgaSA9IDEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSA9IHBvaW50c1swXSwgeDAgPSBwaVswXSwgeTAgPSBwaVsxXSwgcHggPSBbIHgwLCB4MCwgeDAsIChwaSA9IHBvaW50c1sxXSlbMF0gXSwgcHkgPSBbIHkwLCB5MCwgeTAsIHBpWzFdIF0sIHBhdGggPSBbIHgwLCBcIixcIiwgeTAsIFwiTFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpIF07XG4gICAgcG9pbnRzLnB1c2gocG9pbnRzW24gLSAxXSk7XG4gICAgd2hpbGUgKCsraSA8PSBuKSB7XG4gICAgICBwaSA9IHBvaW50c1tpXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcG9pbnRzLnBvcCgpO1xuICAgIHBhdGgucHVzaChcIkxcIiwgcGkpO1xuICAgIHJldHVybiBwYXRoLmpvaW4oXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVCYXNpc09wZW4ocG9pbnRzKSB7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCA0KSByZXR1cm4gZDNfc3ZnX2xpbmVMaW5lYXIocG9pbnRzKTtcbiAgICB2YXIgcGF0aCA9IFtdLCBpID0gLTEsIG4gPSBwb2ludHMubGVuZ3RoLCBwaSwgcHggPSBbIDAgXSwgcHkgPSBbIDAgXTtcbiAgICB3aGlsZSAoKytpIDwgMykge1xuICAgICAgcGkgPSBwb2ludHNbaV07XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgIH1cbiAgICBwYXRoLnB1c2goZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweCkgKyBcIixcIiArIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHkpKTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHBpID0gcG9pbnRzW2ldO1xuICAgICAgcHguc2hpZnQoKTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkuc2hpZnQoKTtcbiAgICAgIHB5LnB1c2gocGlbMV0pO1xuICAgICAgZDNfc3ZnX2xpbmVCYXNpc0JlemllcihwYXRoLCBweCwgcHkpO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lQmFzaXNDbG9zZWQocG9pbnRzKSB7XG4gICAgdmFyIHBhdGgsIGkgPSAtMSwgbiA9IHBvaW50cy5sZW5ndGgsIG0gPSBuICsgNCwgcGksIHB4ID0gW10sIHB5ID0gW107XG4gICAgd2hpbGUgKCsraSA8IDQpIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnB1c2gocGlbMF0pO1xuICAgICAgcHkucHVzaChwaVsxXSk7XG4gICAgfVxuICAgIHBhdGggPSBbIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMywgcHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCBweSkgXTtcbiAgICAtLWk7XG4gICAgd2hpbGUgKCsraSA8IG0pIHtcbiAgICAgIHBpID0gcG9pbnRzW2kgJSBuXTtcbiAgICAgIHB4LnNoaWZ0KCk7XG4gICAgICBweC5wdXNoKHBpWzBdKTtcbiAgICAgIHB5LnNoaWZ0KCk7XG4gICAgICBweS5wdXNoKHBpWzFdKTtcbiAgICAgIGQzX3N2Z19saW5lQmFzaXNCZXppZXIocGF0aCwgcHgsIHB5KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguam9pbihcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfbGluZUJ1bmRsZShwb2ludHMsIHRlbnNpb24pIHtcbiAgICB2YXIgbiA9IHBvaW50cy5sZW5ndGggLSAxO1xuICAgIGlmIChuKSB7XG4gICAgICB2YXIgeDAgPSBwb2ludHNbMF1bMF0sIHkwID0gcG9pbnRzWzBdWzFdLCBkeCA9IHBvaW50c1tuXVswXSAtIHgwLCBkeSA9IHBvaW50c1tuXVsxXSAtIHkwLCBpID0gLTEsIHAsIHQ7XG4gICAgICB3aGlsZSAoKytpIDw9IG4pIHtcbiAgICAgICAgcCA9IHBvaW50c1tpXTtcbiAgICAgICAgdCA9IGkgLyBuO1xuICAgICAgICBwWzBdID0gdGVuc2lvbiAqIHBbMF0gKyAoMSAtIHRlbnNpb24pICogKHgwICsgdCAqIGR4KTtcbiAgICAgICAgcFsxXSA9IHRlbnNpb24gKiBwWzFdICsgKDEgLSB0ZW5zaW9uKSAqICh5MCArIHQgKiBkeSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM19zdmdfbGluZUJhc2lzKHBvaW50cyk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVEb3Q0KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG4gIH1cbiAgdmFyIGQzX3N2Z19saW5lQmFzaXNCZXppZXIxID0gWyAwLCAyIC8gMywgMSAvIDMsIDAgXSwgZDNfc3ZnX2xpbmVCYXNpc0JlemllcjIgPSBbIDAsIDEgLyAzLCAyIC8gMywgMCBdLCBkM19zdmdfbGluZUJhc2lzQmV6aWVyMyA9IFsgMCwgMSAvIDYsIDIgLyAzLCAxIC8gNiBdO1xuICBmdW5jdGlvbiBkM19zdmdfbGluZUJhc2lzQmV6aWVyKHBhdGgsIHgsIHkpIHtcbiAgICBwYXRoLnB1c2goXCJDXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMSwgeCksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjEsIHkpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIyLCB4KSwgXCIsXCIsIGQzX3N2Z19saW5lRG90NChkM19zdmdfbGluZUJhc2lzQmV6aWVyMiwgeSksIFwiLFwiLCBkM19zdmdfbGluZURvdDQoZDNfc3ZnX2xpbmVCYXNpc0JlemllcjMsIHgpLCBcIixcIiwgZDNfc3ZnX2xpbmVEb3Q0KGQzX3N2Z19saW5lQmFzaXNCZXppZXIzLCB5KSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVTbG9wZShwMCwgcDEpIHtcbiAgICByZXR1cm4gKHAxWzFdIC0gcDBbMV0pIC8gKHAxWzBdIC0gcDBbMF0pO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwLCBqID0gcG9pbnRzLmxlbmd0aCAtIDEsIG0gPSBbXSwgcDAgPSBwb2ludHNbMF0sIHAxID0gcG9pbnRzWzFdLCBkID0gbVswXSA9IGQzX3N2Z19saW5lU2xvcGUocDAsIHAxKTtcbiAgICB3aGlsZSAoKytpIDwgaikge1xuICAgICAgbVtpXSA9IChkICsgKGQgPSBkM19zdmdfbGluZVNsb3BlKHAwID0gcDEsIHAxID0gcG9pbnRzW2kgKyAxXSkpKSAvIDI7XG4gICAgfVxuICAgIG1baV0gPSBkO1xuICAgIHJldHVybiBtO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lTW9ub3RvbmVUYW5nZW50cyhwb2ludHMpIHtcbiAgICB2YXIgdGFuZ2VudHMgPSBbXSwgZCwgYSwgYiwgcywgbSA9IGQzX3N2Z19saW5lRmluaXRlRGlmZmVyZW5jZXMocG9pbnRzKSwgaSA9IC0xLCBqID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCsraSA8IGopIHtcbiAgICAgIGQgPSBkM19zdmdfbGluZVNsb3BlKHBvaW50c1tpXSwgcG9pbnRzW2kgKyAxXSk7XG4gICAgICBpZiAoYWJzKGQpIDwgzrUpIHtcbiAgICAgICAgbVtpXSA9IG1baSArIDFdID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGEgPSBtW2ldIC8gZDtcbiAgICAgICAgYiA9IG1baSArIDFdIC8gZDtcbiAgICAgICAgcyA9IGEgKiBhICsgYiAqIGI7XG4gICAgICAgIGlmIChzID4gOSkge1xuICAgICAgICAgIHMgPSBkICogMyAvIE1hdGguc3FydChzKTtcbiAgICAgICAgICBtW2ldID0gcyAqIGE7XG4gICAgICAgICAgbVtpICsgMV0gPSBzICogYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8PSBqKSB7XG4gICAgICBzID0gKHBvaW50c1tNYXRoLm1pbihqLCBpICsgMSldWzBdIC0gcG9pbnRzW01hdGgubWF4KDAsIGkgLSAxKV1bMF0pIC8gKDYgKiAoMSArIG1baV0gKiBtW2ldKSk7XG4gICAgICB0YW5nZW50cy5wdXNoKFsgcyB8fCAwLCBtW2ldICogcyB8fCAwIF0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFuZ2VudHM7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2xpbmVNb25vdG9uZShwb2ludHMpIHtcbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA8IDMgPyBkM19zdmdfbGluZUxpbmVhcihwb2ludHMpIDogcG9pbnRzWzBdICsgZDNfc3ZnX2xpbmVIZXJtaXRlKHBvaW50cywgZDNfc3ZnX2xpbmVNb25vdG9uZVRhbmdlbnRzKHBvaW50cykpO1xuICB9XG4gIGQzLnN2Zy5saW5lLnJhZGlhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsaW5lID0gZDNfc3ZnX2xpbmUoZDNfc3ZnX2xpbmVSYWRpYWwpO1xuICAgIGxpbmUucmFkaXVzID0gbGluZS54LCBkZWxldGUgbGluZS54O1xuICAgIGxpbmUuYW5nbGUgPSBsaW5lLnksIGRlbGV0ZSBsaW5lLnk7XG4gICAgcmV0dXJuIGxpbmU7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19saW5lUmFkaWFsKHBvaW50cykge1xuICAgIHZhciBwb2ludCwgaSA9IC0xLCBuID0gcG9pbnRzLmxlbmd0aCwgciwgYTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICByID0gcG9pbnRbMF07XG4gICAgICBhID0gcG9pbnRbMV0gLSBoYWxmz4A7XG4gICAgICBwb2ludFswXSA9IHIgKiBNYXRoLmNvcyhhKTtcbiAgICAgIHBvaW50WzFdID0gciAqIE1hdGguc2luKGEpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3N2Z19hcmVhKHByb2plY3Rpb24pIHtcbiAgICB2YXIgeDAgPSBkM19nZW9tX3BvaW50WCwgeDEgPSBkM19nZW9tX3BvaW50WCwgeTAgPSAwLCB5MSA9IGQzX2dlb21fcG9pbnRZLCBkZWZpbmVkID0gZDNfdHJ1ZSwgaW50ZXJwb2xhdGUgPSBkM19zdmdfbGluZUxpbmVhciwgaW50ZXJwb2xhdGVLZXkgPSBpbnRlcnBvbGF0ZS5rZXksIGludGVycG9sYXRlUmV2ZXJzZSA9IGludGVycG9sYXRlLCBMID0gXCJMXCIsIHRlbnNpb24gPSAuNztcbiAgICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICAgIHZhciBzZWdtZW50cyA9IFtdLCBwb2ludHMwID0gW10sIHBvaW50czEgPSBbXSwgaSA9IC0xLCBuID0gZGF0YS5sZW5ndGgsIGQsIGZ4MCA9IGQzX2Z1bmN0b3IoeDApLCBmeTAgPSBkM19mdW5jdG9yKHkwKSwgZngxID0geDAgPT09IHgxID8gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfSA6IGQzX2Z1bmN0b3IoeDEpLCBmeTEgPSB5MCA9PT0geTEgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9IDogZDNfZnVuY3Rvcih5MSksIHgsIHk7XG4gICAgICBmdW5jdGlvbiBzZWdtZW50KCkge1xuICAgICAgICBzZWdtZW50cy5wdXNoKFwiTVwiLCBpbnRlcnBvbGF0ZShwcm9qZWN0aW9uKHBvaW50czEpLCB0ZW5zaW9uKSwgTCwgaW50ZXJwb2xhdGVSZXZlcnNlKHByb2plY3Rpb24ocG9pbnRzMC5yZXZlcnNlKCkpLCB0ZW5zaW9uKSwgXCJaXCIpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgaWYgKGRlZmluZWQuY2FsbCh0aGlzLCBkID0gZGF0YVtpXSwgaSkpIHtcbiAgICAgICAgICBwb2ludHMwLnB1c2goWyB4ID0gK2Z4MC5jYWxsKHRoaXMsIGQsIGkpLCB5ID0gK2Z5MC5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICAgIHBvaW50czEucHVzaChbICtmeDEuY2FsbCh0aGlzLCBkLCBpKSwgK2Z5MS5jYWxsKHRoaXMsIGQsIGkpIF0pO1xuICAgICAgICB9IGVsc2UgaWYgKHBvaW50czAubGVuZ3RoKSB7XG4gICAgICAgICAgc2VnbWVudCgpO1xuICAgICAgICAgIHBvaW50czAgPSBbXTtcbiAgICAgICAgICBwb2ludHMxID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwb2ludHMwLmxlbmd0aCkgc2VnbWVudCgpO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA/IHNlZ21lbnRzLmpvaW4oXCJcIikgOiBudWxsO1xuICAgIH1cbiAgICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgwID0geDEgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geDA7XG4gICAgICB4MCA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB4MTtcbiAgICAgIHgxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MCA9IHkxID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS55MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHkwO1xuICAgICAgeTAgPSBfO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnkxID0gZnVuY3Rpb24oXykge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTE7XG4gICAgICB5MSA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlZmluZWQ7XG4gICAgICBkZWZpbmVkID0gXztcbiAgICAgIHJldHVybiBhcmVhO1xuICAgIH07XG4gICAgYXJlYS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGludGVycG9sYXRlS2V5O1xuICAgICAgaWYgKHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIpIGludGVycG9sYXRlS2V5ID0gaW50ZXJwb2xhdGUgPSBfOyBlbHNlIGludGVycG9sYXRlS2V5ID0gKGludGVycG9sYXRlID0gZDNfc3ZnX2xpbmVJbnRlcnBvbGF0b3JzLmdldChfKSB8fCBkM19zdmdfbGluZUxpbmVhcikua2V5O1xuICAgICAgaW50ZXJwb2xhdGVSZXZlcnNlID0gaW50ZXJwb2xhdGUucmV2ZXJzZSB8fCBpbnRlcnBvbGF0ZTtcbiAgICAgIEwgPSBpbnRlcnBvbGF0ZS5jbG9zZWQgPyBcIk1cIiA6IFwiTFwiO1xuICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfTtcbiAgICBhcmVhLnRlbnNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0ZW5zaW9uO1xuICAgICAgdGVuc2lvbiA9IF87XG4gICAgICByZXR1cm4gYXJlYTtcbiAgICB9O1xuICAgIHJldHVybiBhcmVhO1xuICB9XG4gIGQzX3N2Z19saW5lU3RlcEJlZm9yZS5yZXZlcnNlID0gZDNfc3ZnX2xpbmVTdGVwQWZ0ZXI7XG4gIGQzX3N2Z19saW5lU3RlcEFmdGVyLnJldmVyc2UgPSBkM19zdmdfbGluZVN0ZXBCZWZvcmU7XG4gIGQzLnN2Zy5hcmVhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGQzX3N2Z19hcmVhKGQzX2lkZW50aXR5KTtcbiAgfTtcbiAgZDMuc3ZnLmFyZWEucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBkM19zdmdfYXJlYShkM19zdmdfbGluZVJhZGlhbCk7XG4gICAgYXJlYS5yYWRpdXMgPSBhcmVhLngsIGRlbGV0ZSBhcmVhLng7XG4gICAgYXJlYS5pbm5lclJhZGl1cyA9IGFyZWEueDAsIGRlbGV0ZSBhcmVhLngwO1xuICAgIGFyZWEub3V0ZXJSYWRpdXMgPSBhcmVhLngxLCBkZWxldGUgYXJlYS54MTtcbiAgICBhcmVhLmFuZ2xlID0gYXJlYS55LCBkZWxldGUgYXJlYS55O1xuICAgIGFyZWEuc3RhcnRBbmdsZSA9IGFyZWEueTAsIGRlbGV0ZSBhcmVhLnkwO1xuICAgIGFyZWEuZW5kQW5nbGUgPSBhcmVhLnkxLCBkZWxldGUgYXJlYS55MTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfTtcbiAgZDMuc3ZnLmNob3JkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNvdXJjZSA9IGQzX3NvdXJjZSwgdGFyZ2V0ID0gZDNfdGFyZ2V0LCByYWRpdXMgPSBkM19zdmdfY2hvcmRSYWRpdXMsIHN0YXJ0QW5nbGUgPSBkM19zdmdfYXJjU3RhcnRBbmdsZSwgZW5kQW5nbGUgPSBkM19zdmdfYXJjRW5kQW5nbGU7XG4gICAgZnVuY3Rpb24gY2hvcmQoZCwgaSkge1xuICAgICAgdmFyIHMgPSBzdWJncm91cCh0aGlzLCBzb3VyY2UsIGQsIGkpLCB0ID0gc3ViZ3JvdXAodGhpcywgdGFyZ2V0LCBkLCBpKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHMucDAgKyBhcmMocy5yLCBzLnAxLCBzLmExIC0gcy5hMCkgKyAoZXF1YWxzKHMsIHQpID8gY3VydmUocy5yLCBzLnAxLCBzLnIsIHMucDApIDogY3VydmUocy5yLCBzLnAxLCB0LnIsIHQucDApICsgYXJjKHQuciwgdC5wMSwgdC5hMSAtIHQuYTApICsgY3VydmUodC5yLCB0LnAxLCBzLnIsIHMucDApKSArIFwiWlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdWJncm91cChzZWxmLCBmLCBkLCBpKSB7XG4gICAgICB2YXIgc3ViZ3JvdXAgPSBmLmNhbGwoc2VsZiwgZCwgaSksIHIgPSByYWRpdXMuY2FsbChzZWxmLCBzdWJncm91cCwgaSksIGEwID0gc3RhcnRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgCwgYTEgPSBlbmRBbmdsZS5jYWxsKHNlbGYsIHN1Ymdyb3VwLCBpKSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHI6IHIsXG4gICAgICAgIGEwOiBhMCxcbiAgICAgICAgYTE6IGExLFxuICAgICAgICBwMDogWyByICogTWF0aC5jb3MoYTApLCByICogTWF0aC5zaW4oYTApIF0sXG4gICAgICAgIHAxOiBbIHIgKiBNYXRoLmNvcyhhMSksIHIgKiBNYXRoLnNpbihhMSkgXVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmEwID09IGIuYTAgJiYgYS5hMSA9PSBiLmExO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcmMociwgcCwgYSkge1xuICAgICAgcmV0dXJuIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgXCIgKyArKGEgPiDPgCkgKyBcIiwxIFwiICsgcDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3VydmUocjAsIHAwLCByMSwgcDEpIHtcbiAgICAgIHJldHVybiBcIlEgMCwwIFwiICsgcDE7XG4gICAgfVxuICAgIGNob3JkLnJhZGl1cyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHJhZGl1cztcbiAgICAgIHJhZGl1cyA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5zb3VyY2UgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzb3VyY2U7XG4gICAgICBzb3VyY2UgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgY2hvcmQudGFyZ2V0ID0gZnVuY3Rpb24odikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgdGFyZ2V0ID0gZDNfZnVuY3Rvcih2KTtcbiAgICAgIHJldHVybiBjaG9yZDtcbiAgICB9O1xuICAgIGNob3JkLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzdGFydEFuZ2xlO1xuICAgICAgc3RhcnRBbmdsZSA9IGQzX2Z1bmN0b3Iodik7XG4gICAgICByZXR1cm4gY2hvcmQ7XG4gICAgfTtcbiAgICBjaG9yZC5lbmRBbmdsZSA9IGZ1bmN0aW9uKHYpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGVuZEFuZ2xlO1xuICAgICAgZW5kQW5nbGUgPSBkM19mdW5jdG9yKHYpO1xuICAgICAgcmV0dXJuIGNob3JkO1xuICAgIH07XG4gICAgcmV0dXJuIGNob3JkO1xuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfY2hvcmRSYWRpdXMoZCkge1xuICAgIHJldHVybiBkLnJhZGl1cztcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc291cmNlID0gZDNfc291cmNlLCB0YXJnZXQgPSBkM190YXJnZXQsIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uO1xuICAgIGZ1bmN0aW9uIGRpYWdvbmFsKGQsIGkpIHtcbiAgICAgIHZhciBwMCA9IHNvdXJjZS5jYWxsKHRoaXMsIGQsIGkpLCBwMyA9IHRhcmdldC5jYWxsKHRoaXMsIGQsIGkpLCBtID0gKHAwLnkgKyBwMy55KSAvIDIsIHAgPSBbIHAwLCB7XG4gICAgICAgIHg6IHAwLngsXG4gICAgICAgIHk6IG1cbiAgICAgIH0sIHtcbiAgICAgICAgeDogcDMueCxcbiAgICAgICAgeTogbVxuICAgICAgfSwgcDMgXTtcbiAgICAgIHAgPSBwLm1hcChwcm9qZWN0aW9uKTtcbiAgICAgIHJldHVybiBcIk1cIiArIHBbMF0gKyBcIkNcIiArIHBbMV0gKyBcIiBcIiArIHBbMl0gKyBcIiBcIiArIHBbM107XG4gICAgfVxuICAgIGRpYWdvbmFsLnNvdXJjZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHNvdXJjZTtcbiAgICAgIHNvdXJjZSA9IGQzX2Z1bmN0b3IoeCk7XG4gICAgICByZXR1cm4gZGlhZ29uYWw7XG4gICAgfTtcbiAgICBkaWFnb25hbC50YXJnZXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0YXJnZXQ7XG4gICAgICB0YXJnZXQgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIGRpYWdvbmFsO1xuICAgIH07XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHByb2plY3Rpb247XG4gICAgICBwcm9qZWN0aW9uID0geDtcbiAgICAgIHJldHVybiBkaWFnb25hbDtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUHJvamVjdGlvbihkKSB7XG4gICAgcmV0dXJuIFsgZC54LCBkLnkgXTtcbiAgfVxuICBkMy5zdmcuZGlhZ29uYWwucmFkaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKCksIHByb2plY3Rpb24gPSBkM19zdmdfZGlhZ29uYWxQcm9qZWN0aW9uLCBwcm9qZWN0aW9uXyA9IGRpYWdvbmFsLnByb2plY3Rpb247XG4gICAgZGlhZ29uYWwucHJvamVjdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcHJvamVjdGlvbl8oZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uID0geCkpIDogcHJvamVjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBkaWFnb25hbDtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfc3ZnX2RpYWdvbmFsUmFkaWFsUHJvamVjdGlvbihwcm9qZWN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGQgPSBwcm9qZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHIgPSBkWzBdLCBhID0gZFsxXSAtIGhhbGbPgDtcbiAgICAgIHJldHVybiBbIHIgKiBNYXRoLmNvcyhhKSwgciAqIE1hdGguc2luKGEpIF07XG4gICAgfTtcbiAgfVxuICBkMy5zdmcuc3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHR5cGUgPSBkM19zdmdfc3ltYm9sVHlwZSwgc2l6ZSA9IGQzX3N2Z19zeW1ib2xTaXplO1xuICAgIGZ1bmN0aW9uIHN5bWJvbChkLCBpKSB7XG4gICAgICByZXR1cm4gKGQzX3N2Z19zeW1ib2xzLmdldCh0eXBlLmNhbGwodGhpcywgZCwgaSkpIHx8IGQzX3N2Z19zeW1ib2xDaXJjbGUpKHNpemUuY2FsbCh0aGlzLCBkLCBpKSk7XG4gICAgfVxuICAgIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdHlwZTtcbiAgICAgIHR5cGUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHN5bWJvbC5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gc2l6ZTtcbiAgICAgIHNpemUgPSBkM19mdW5jdG9yKHgpO1xuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgICB9O1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3N2Z19zeW1ib2xTaXplKCkge1xuICAgIHJldHVybiA2NDtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sVHlwZSgpIHtcbiAgICByZXR1cm4gXCJjaXJjbGVcIjtcbiAgfVxuICBmdW5jdGlvbiBkM19zdmdfc3ltYm9sQ2lyY2xlKHNpemUpIHtcbiAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gz4ApO1xuICAgIHJldHVybiBcIk0wLFwiICsgciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyAtciArIFwiQVwiICsgciArIFwiLFwiICsgciArIFwiIDAgMSwxIDAsXCIgKyByICsgXCJaXCI7XG4gIH1cbiAgdmFyIGQzX3N2Z19zeW1ib2xzID0gZDMubWFwKHtcbiAgICBjaXJjbGU6IGQzX3N2Z19zeW1ib2xDaXJjbGUsXG4gICAgY3Jvc3M6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtMyAqIHIgKyBcIixcIiArIC1yICsgXCJIXCIgKyAtciArIFwiVlwiICsgLTMgKiByICsgXCJIXCIgKyByICsgXCJWXCIgKyAtciArIFwiSFwiICsgMyAqIHIgKyBcIlZcIiArIHIgKyBcIkhcIiArIHIgKyBcIlZcIiArIDMgKiByICsgXCJIXCIgKyAtciArIFwiVlwiICsgciArIFwiSFwiICsgLTMgKiByICsgXCJaXCI7XG4gICAgfSxcbiAgICBkaWFtb25kOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnkgPSBNYXRoLnNxcnQoc2l6ZSAvICgyICogZDNfc3ZnX3N5bWJvbFRhbjMwKSksIHJ4ID0gcnkgKiBkM19zdmdfc3ltYm9sVGFuMzA7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIC1yeSArIFwiTFwiICsgcnggKyBcIiwwXCIgKyBcIiAwLFwiICsgcnkgKyBcIiBcIiArIC1yeCArIFwiLDBcIiArIFwiWlwiO1xuICAgIH0sXG4gICAgc3F1YXJlOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplKSAvIDI7XG4gICAgICByZXR1cm4gXCJNXCIgKyAtciArIFwiLFwiICsgLXIgKyBcIkxcIiArIHIgKyBcIixcIiArIC1yICsgXCIgXCIgKyByICsgXCIsXCIgKyByICsgXCIgXCIgKyAtciArIFwiLFwiICsgciArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS1kb3duXCI6IGZ1bmN0aW9uKHNpemUpIHtcbiAgICAgIHZhciByeCA9IE1hdGguc3FydChzaXplIC8gZDNfc3ZnX3N5bWJvbFNxcnQzKSwgcnkgPSByeCAqIGQzX3N2Z19zeW1ib2xTcXJ0MyAvIDI7XG4gICAgICByZXR1cm4gXCJNMCxcIiArIHJ5ICsgXCJMXCIgKyByeCArIFwiLFwiICsgLXJ5ICsgXCIgXCIgKyAtcnggKyBcIixcIiArIC1yeSArIFwiWlwiO1xuICAgIH0sXG4gICAgXCJ0cmlhbmdsZS11cFwiOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICB2YXIgcnggPSBNYXRoLnNxcnQoc2l6ZSAvIGQzX3N2Z19zeW1ib2xTcXJ0MyksIHJ5ID0gcnggKiBkM19zdmdfc3ltYm9sU3FydDMgLyAyO1xuICAgICAgcmV0dXJuIFwiTTAsXCIgKyAtcnkgKyBcIkxcIiArIHJ4ICsgXCIsXCIgKyByeSArIFwiIFwiICsgLXJ4ICsgXCIsXCIgKyByeSArIFwiWlwiO1xuICAgIH1cbiAgfSk7XG4gIGQzLnN2Zy5zeW1ib2xUeXBlcyA9IGQzX3N2Z19zeW1ib2xzLmtleXMoKTtcbiAgdmFyIGQzX3N2Z19zeW1ib2xTcXJ0MyA9IE1hdGguc3FydCgzKSwgZDNfc3ZnX3N5bWJvbFRhbjMwID0gTWF0aC50YW4oMzAgKiBkM19yYWRpYW5zKTtcbiAgZDNfc2VsZWN0aW9uUHJvdG90eXBlLnRyYW5zaXRpb24gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGlkID0gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCB8fCArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSBkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIG5vZGUsIHRyYW5zaXRpb24gPSBkM190cmFuc2l0aW9uSW5oZXJpdCB8fCB7XG4gICAgICB0aW1lOiBEYXRlLm5vdygpLFxuICAgICAgZWFzZTogZDNfZWFzZV9jdWJpY0luT3V0LFxuICAgICAgZGVsYXk6IDAsXG4gICAgICBkdXJhdGlvbjogMjUwXG4gICAgfTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IC0xLCBuID0gZ3JvdXAubGVuZ3RoOyArK2kgPCBuOyApIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgZDNfdHJhbnNpdGlvbk5vZGUobm9kZSwgaSwgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQpO1xuICB9O1xuICBkM19zZWxlY3Rpb25Qcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLmVhY2gobmFtZSA9PSBudWxsID8gZDNfc2VsZWN0aW9uX2ludGVycnVwdCA6IGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhkM190cmFuc2l0aW9uTmFtZXNwYWNlKG5hbWUpKSk7XG4gIH07XG4gIHZhciBkM19zZWxlY3Rpb25faW50ZXJydXB0ID0gZDNfc2VsZWN0aW9uX2ludGVycnVwdE5TKGQzX3RyYW5zaXRpb25OYW1lc3BhY2UoKSk7XG4gIGZ1bmN0aW9uIGQzX3NlbGVjdGlvbl9pbnRlcnJ1cHROUyhucykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsb2NrLCBhY3RpdmVJZCwgYWN0aXZlO1xuICAgICAgaWYgKChsb2NrID0gdGhpc1tuc10pICYmIChhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkID0gbG9jay5hY3RpdmVdKSkge1xuICAgICAgICBhY3RpdmUudGltZXIuYyA9IG51bGw7XG4gICAgICAgIGFjdGl2ZS50aW1lci50ID0gTmFOO1xuICAgICAgICBpZiAoLS1sb2NrLmNvdW50KSBkZWxldGUgbG9ja1thY3RpdmVJZF07IGVsc2UgZGVsZXRlIHRoaXNbbnNdO1xuICAgICAgICBsb2NrLmFjdGl2ZSArPSAuNTtcbiAgICAgICAgYWN0aXZlLmV2ZW50ICYmIGFjdGl2ZS5ldmVudC5pbnRlcnJ1cHQuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBhY3RpdmUuaW5kZXgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbihncm91cHMsIG5zLCBpZCkge1xuICAgIGQzX3N1YmNsYXNzKGdyb3VwcywgZDNfdHJhbnNpdGlvblByb3RvdHlwZSk7XG4gICAgZ3JvdXBzLm5hbWVzcGFjZSA9IG5zO1xuICAgIGdyb3Vwcy5pZCA9IGlkO1xuICAgIHJldHVybiBncm91cHM7XG4gIH1cbiAgdmFyIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUgPSBbXSwgZDNfdHJhbnNpdGlvbklkID0gMCwgZDNfdHJhbnNpdGlvbkluaGVyaXRJZCwgZDNfdHJhbnNpdGlvbkluaGVyaXQ7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuY2FsbCA9IGQzX3NlbGVjdGlvblByb3RvdHlwZS5jYWxsO1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLmVtcHR5ID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLmVtcHR5O1xuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLm5vZGUgPSBkM19zZWxlY3Rpb25Qcm90b3R5cGUubm9kZTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zaXplID0gZDNfc2VsZWN0aW9uUHJvdG90eXBlLnNpemU7XG4gIGQzLnRyYW5zaXRpb24gPSBmdW5jdGlvbihzZWxlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi50cmFuc2l0aW9uID8gZDNfdHJhbnNpdGlvbkluaGVyaXRJZCA/IHNlbGVjdGlvbi50cmFuc2l0aW9uKG5hbWUpIDogc2VsZWN0aW9uIDogZDMuc2VsZWN0aW9uKCkudHJhbnNpdGlvbihzZWxlY3Rpb24pO1xuICB9O1xuICBkMy50cmFuc2l0aW9uLnByb3RvdHlwZSA9IGQzX3RyYW5zaXRpb25Qcm90b3R5cGU7XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGUsIG5vZGU7XG4gICAgc2VsZWN0b3IgPSBkM19zZWxlY3Rpb25fc2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGZvciAodmFyIGogPSAtMSwgbSA9IHRoaXMubGVuZ3RoOyArK2ogPCBtOyApIHtcbiAgICAgIHN1Ymdyb3Vwcy5wdXNoKHN1Ymdyb3VwID0gW10pO1xuICAgICAgZm9yICh2YXIgZ3JvdXAgPSB0aGlzW2pdLCBpID0gLTEsIG4gPSBncm91cC5sZW5ndGg7ICsraSA8IG47ICkge1xuICAgICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3Rvci5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSkge1xuICAgICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgICAgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaSwgbnMsIGlkLCBub2RlW25zXVtpZF0pO1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbihzdWJncm91cHMsIG5zLCBpZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkLCBucyA9IHRoaXMubmFtZXNwYWNlLCBzdWJncm91cHMgPSBbXSwgc3ViZ3JvdXAsIHN1Ym5vZGVzLCBub2RlLCBzdWJub2RlLCB0cmFuc2l0aW9uO1xuICAgIHNlbGVjdG9yID0gZDNfc2VsZWN0aW9uX3NlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKHZhciBqID0gLTEsIG0gPSB0aGlzLmxlbmd0aDsgKytqIDwgbTsgKSB7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAtMSwgbiA9IGdyb3VwLmxlbmd0aDsgKytpIDwgbjsgKSB7XG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgICB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAgIHN1Ym5vZGVzID0gc2VsZWN0b3IuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgICAgICBmb3IgKHZhciBrID0gLTEsIG8gPSBzdWJub2Rlcy5sZW5ndGg7ICsrayA8IG87ICkge1xuICAgICAgICAgICAgaWYgKHN1Ym5vZGUgPSBzdWJub2Rlc1trXSkgZDNfdHJhbnNpdGlvbk5vZGUoc3Vibm9kZSwgaywgbnMsIGlkLCB0cmFuc2l0aW9uKTtcbiAgICAgICAgICAgIHN1Ymdyb3VwLnB1c2goc3Vibm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uKHN1Ymdyb3VwcywgbnMsIGlkKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICB2YXIgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZTtcbiAgICBpZiAodHlwZW9mIGZpbHRlciAhPT0gXCJmdW5jdGlvblwiKSBmaWx0ZXIgPSBkM19zZWxlY3Rpb25fZmlsdGVyKGZpbHRlcik7XG4gICAgZm9yICh2YXIgaiA9IDAsIG0gPSB0aGlzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgc3ViZ3JvdXBzLnB1c2goc3ViZ3JvdXAgPSBbXSk7XG4gICAgICBmb3IgKHZhciBncm91cCA9IHRoaXNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBmaWx0ZXIuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKSkge1xuICAgICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLm5hbWVzcGFjZSwgdGhpcy5pZCk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHdlZW4gPSBmdW5jdGlvbihuYW1lLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS50d2Vlbi5nZXQobmFtZSk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIHR3ZWVuID09IG51bGwgPyBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4ucmVtb3ZlKG5hbWUpO1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0udHdlZW4uc2V0KG5hbWUsIHR3ZWVuKTtcbiAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbl90d2Vlbihncm91cHMsIG5hbWUsIHZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBpZCA9IGdyb3Vwcy5pZCwgbnMgPSBncm91cHMubmFtZXNwYWNlO1xuICAgIHJldHVybiBkM19zZWxlY3Rpb25fZWFjaChncm91cHMsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gZnVuY3Rpb24obm9kZSwgaSwgaikge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB0d2Vlbih2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKSk7XG4gICAgfSA6ICh2YWx1ZSA9IHR3ZWVuKHZhbHVlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZVtuc11baWRdLnR3ZWVuLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgfSkpO1xuICB9XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0ciA9IGZ1bmN0aW9uKG5hbWVOUywgdmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIGZvciAodmFsdWUgaW4gbmFtZU5TKSB0aGlzLmF0dHIodmFsdWUsIG5hbWVOU1t2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBpbnRlcnBvbGF0ZSA9IG5hbWVOUyA9PSBcInRyYW5zZm9ybVwiID8gZDNfaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBkM19pbnRlcnBvbGF0ZSwgbmFtZSA9IGQzLm5zLnF1YWxpZnkobmFtZU5TKTtcbiAgICBmdW5jdGlvbiBhdHRyTnVsbCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhdHRyTnVsbE5TKCkge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXR0clR3ZWVuKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpLCBpO1xuICAgICAgICByZXR1cm4gYSAhPT0gYiAmJiAoaSA9IGludGVycG9sYXRlKGEsIGIpLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGIpIHtcbiAgICAgIHJldHVybiBiID09IG51bGwgPyBhdHRyTnVsbE5TIDogKGIgKz0gXCJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsKSwgaTtcbiAgICAgICAgcmV0dXJuIGEgIT09IGIgJiYgKGkgPSBpbnRlcnBvbGF0ZShhLCBiKSwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlTlMobmFtZS5zcGFjZSwgbmFtZS5sb2NhbCwgaSh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkM190cmFuc2l0aW9uX3R3ZWVuKHRoaXMsIFwiYXR0ci5cIiArIG5hbWVOUywgdmFsdWUsIG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2Vlbik7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuYXR0clR3ZWVuID0gZnVuY3Rpb24obmFtZU5TLCB0d2Vlbikge1xuICAgIHZhciBuYW1lID0gZDMubnMucXVhbGlmeShuYW1lTlMpO1xuICAgIGZ1bmN0aW9uIGF0dHJUd2VlbihkLCBpKSB7XG4gICAgICB2YXIgZiA9IHR3ZWVuLmNhbGwodGhpcywgZCwgaSwgdGhpcy5nZXRBdHRyaWJ1dGUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGQsIGkpIHtcbiAgICAgIHZhciBmID0gdHdlZW4uY2FsbCh0aGlzLCBkLCBpLCB0aGlzLmdldEF0dHJpYnV0ZU5TKG5hbWUuc3BhY2UsIG5hbWUubG9jYWwpKTtcbiAgICAgIHJldHVybiBmICYmIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNwYWNlLCBuYW1lLmxvY2FsLCBmKHQpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwiYXR0ci5cIiArIG5hbWVOUywgbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS5zdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobiA8IDMpIHtcbiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAobiA8IDIpIHZhbHVlID0gXCJcIjtcbiAgICAgICAgZm9yIChwcmlvcml0eSBpbiBuYW1lKSB0aGlzLnN0eWxlKHByaW9yaXR5LCBuYW1lW3ByaW9yaXR5XSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHByaW9yaXR5ID0gXCJcIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVOdWxsKCkge1xuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3R5bGVTdHJpbmcoYikge1xuICAgICAgcmV0dXJuIGIgPT0gbnVsbCA/IHN0eWxlTnVsbCA6IChiICs9IFwiXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYSA9IGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSksIGk7XG4gICAgICAgIHJldHVybiBhICE9PSBiICYmIChpID0gZDNfaW50ZXJwb2xhdGUoYSwgYiksIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkodCksIHByaW9yaXR5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb25fdHdlZW4odGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlLCBzdHlsZVN0cmluZyk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuc3R5bGVUd2VlbiA9IGZ1bmN0aW9uKG5hbWUsIHR3ZWVuLCBwcmlvcml0eSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykgcHJpb3JpdHkgPSBcIlwiO1xuICAgIGZ1bmN0aW9uIHN0eWxlVHdlZW4oZCwgaSkge1xuICAgICAgdmFyIGYgPSB0d2Vlbi5jYWxsKHRoaXMsIGQsIGksIGQzX3dpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xuICAgICAgcmV0dXJuIGYgJiYgZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGYodCksIHByaW9yaXR5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwic3R5bGUuXCIgKyBuYW1lLCBzdHlsZVR3ZWVuKTtcbiAgfTtcbiAgZDNfdHJhbnNpdGlvblByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZDNfdHJhbnNpdGlvbl90d2Vlbih0aGlzLCBcInRleHRcIiwgdmFsdWUsIGQzX3RyYW5zaXRpb25fdGV4dCk7XG4gIH07XG4gIGZ1bmN0aW9uIGQzX3RyYW5zaXRpb25fdGV4dChiKSB7XG4gICAgaWYgKGIgPT0gbnVsbCkgYiA9IFwiXCI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IGI7XG4gICAgfTtcbiAgfVxuICBkM190cmFuc2l0aW9uUHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBucyA9IHRoaXMubmFtZXNwYWNlO1xuICAgIHJldHVybiB0aGlzLmVhY2goXCJlbmQudHJhbnNpdGlvblwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHRoaXNbbnNdLmNvdW50IDwgMiAmJiAocCA9IHRoaXMucGFyZW50Tm9kZSkpIHAucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFzZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiB0aGlzLm5vZGUoKVtuc11baWRdLmVhc2U7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGQzLmVhc2UuYXBwbHkoZDMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGVbbnNdW2lkXS5lYXNlID0gdmFsdWU7XG4gICAgfSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kZWxheTtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSArdmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBqKTtcbiAgICB9IDogKHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZGVsYXkgPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQsIG5zID0gdGhpcy5uYW1lc3BhY2U7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSByZXR1cm4gdGhpcy5ub2RlKClbbnNdW2lkXS5kdXJhdGlvbjtcbiAgICByZXR1cm4gZDNfc2VsZWN0aW9uX2VhY2godGhpcywgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbihub2RlLCBpLCBqKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSBNYXRoLm1heCgxLCB2YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGopKTtcbiAgICB9IDogKHZhbHVlID0gTWF0aC5tYXgoMSwgdmFsdWUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlW25zXVtpZF0uZHVyYXRpb24gPSB2YWx1ZTtcbiAgICB9KSk7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIGlkID0gdGhpcy5pZCwgbnMgPSB0aGlzLm5hbWVzcGFjZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHZhciBpbmhlcml0ID0gZDNfdHJhbnNpdGlvbkluaGVyaXQsIGluaGVyaXRJZCA9IGQzX3RyYW5zaXRpb25Jbmhlcml0SWQ7XG4gICAgICB0cnkge1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaWQ7XG4gICAgICAgIGQzX3NlbGVjdGlvbl9lYWNoKHRoaXMsIGZ1bmN0aW9uKG5vZGUsIGksIGopIHtcbiAgICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdCA9IG5vZGVbbnNdW2lkXTtcbiAgICAgICAgICB0eXBlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgaik7XG4gICAgICAgIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZDNfdHJhbnNpdGlvbkluaGVyaXQgPSBpbmhlcml0O1xuICAgICAgICBkM190cmFuc2l0aW9uSW5oZXJpdElkID0gaW5oZXJpdElkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkM19zZWxlY3Rpb25fZWFjaCh0aGlzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gbm9kZVtuc11baWRdO1xuICAgICAgICAodHJhbnNpdGlvbi5ldmVudCB8fCAodHJhbnNpdGlvbi5ldmVudCA9IGQzLmRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJpbnRlcnJ1cHRcIikpKS5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGQzX3RyYW5zaXRpb25Qcm90b3R5cGUudHJhbnNpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZDAgPSB0aGlzLmlkLCBpZDEgPSArK2QzX3RyYW5zaXRpb25JZCwgbnMgPSB0aGlzLm5hbWVzcGFjZSwgc3ViZ3JvdXBzID0gW10sIHN1Ymdyb3VwLCBncm91cCwgbm9kZSwgdHJhbnNpdGlvbjtcbiAgICBmb3IgKHZhciBqID0gMCwgbSA9IHRoaXMubGVuZ3RoOyBqIDwgbTsgaisrKSB7XG4gICAgICBzdWJncm91cHMucHVzaChzdWJncm91cCA9IFtdKTtcbiAgICAgIGZvciAodmFyIGdyb3VwID0gdGhpc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICAgIHRyYW5zaXRpb24gPSBub2RlW25zXVtpZDBdO1xuICAgICAgICAgIGQzX3RyYW5zaXRpb25Ob2RlKG5vZGUsIGksIG5zLCBpZDEsIHtcbiAgICAgICAgICAgIHRpbWU6IHRyYW5zaXRpb24udGltZSxcbiAgICAgICAgICAgIGVhc2U6IHRyYW5zaXRpb24uZWFzZSxcbiAgICAgICAgICAgIGRlbGF5OiB0cmFuc2l0aW9uLmRlbGF5ICsgdHJhbnNpdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uLmR1cmF0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQzX3RyYW5zaXRpb24oc3ViZ3JvdXBzLCBucywgaWQxKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfdHJhbnNpdGlvbk5hbWVzcGFjZShuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgPT0gbnVsbCA/IFwiX190cmFuc2l0aW9uX19cIiA6IFwiX190cmFuc2l0aW9uX1wiICsgbmFtZSArIFwiX19cIjtcbiAgfVxuICBmdW5jdGlvbiBkM190cmFuc2l0aW9uTm9kZShub2RlLCBpLCBucywgaWQsIGluaGVyaXQpIHtcbiAgICB2YXIgbG9jayA9IG5vZGVbbnNdIHx8IChub2RlW25zXSA9IHtcbiAgICAgIGFjdGl2ZTogMCxcbiAgICAgIGNvdW50OiAwXG4gICAgfSksIHRyYW5zaXRpb24gPSBsb2NrW2lkXSwgdGltZSwgdGltZXIsIGR1cmF0aW9uLCBlYXNlLCB0d2VlbnM7XG4gICAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgICAgdmFyIGRlbGF5ID0gdHJhbnNpdGlvbi5kZWxheTtcbiAgICAgIHRpbWVyLnQgPSBkZWxheSArIHRpbWU7XG4gICAgICBpZiAoZGVsYXkgPD0gZWxhcHNlZCkgcmV0dXJuIHN0YXJ0KGVsYXBzZWQgLSBkZWxheSk7XG4gICAgICB0aW1lci5jID0gc3RhcnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICAgIHZhciBhY3RpdmVJZCA9IGxvY2suYWN0aXZlLCBhY3RpdmUgPSBsb2NrW2FjdGl2ZUlkXTtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlLnRpbWVyLmMgPSBudWxsO1xuICAgICAgICBhY3RpdmUudGltZXIudCA9IE5hTjtcbiAgICAgICAgLS1sb2NrLmNvdW50O1xuICAgICAgICBkZWxldGUgbG9ja1thY3RpdmVJZF07XG4gICAgICAgIGFjdGl2ZS5ldmVudCAmJiBhY3RpdmUuZXZlbnQuaW50ZXJydXB0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgYWN0aXZlLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGNhbmNlbElkIGluIGxvY2spIHtcbiAgICAgICAgaWYgKCtjYW5jZWxJZCA8IGlkKSB7XG4gICAgICAgICAgdmFyIGNhbmNlbCA9IGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICAgIGNhbmNlbC50aW1lci5jID0gbnVsbDtcbiAgICAgICAgICBjYW5jZWwudGltZXIudCA9IE5hTjtcbiAgICAgICAgICAtLWxvY2suY291bnQ7XG4gICAgICAgICAgZGVsZXRlIGxvY2tbY2FuY2VsSWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aW1lci5jID0gdGljaztcbiAgICAgIGQzX3RpbWVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGltZXIuYyAmJiB0aWNrKGVsYXBzZWQgfHwgMSkpIHtcbiAgICAgICAgICB0aW1lci5jID0gbnVsbDtcbiAgICAgICAgICB0aW1lci50ID0gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSwgMCwgdGltZSk7XG4gICAgICBsb2NrLmFjdGl2ZSA9IGlkO1xuICAgICAgdHJhbnNpdGlvbi5ldmVudCAmJiB0cmFuc2l0aW9uLmV2ZW50LnN0YXJ0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSk7XG4gICAgICB0d2VlbnMgPSBbXTtcbiAgICAgIHRyYW5zaXRpb24udHdlZW4uZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9IHZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSkpIHtcbiAgICAgICAgICB0d2VlbnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWFzZSA9IHRyYW5zaXRpb24uZWFzZTtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbi5kdXJhdGlvbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgICB2YXIgdCA9IGVsYXBzZWQgLyBkdXJhdGlvbiwgZSA9IGVhc2UodCksIG4gPSB0d2VlbnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKG4gPiAwKSB7XG4gICAgICAgIHR3ZWVuc1stLW5dLmNhbGwobm9kZSwgZSk7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAxKSB7XG4gICAgICAgIHRyYW5zaXRpb24uZXZlbnQgJiYgdHJhbnNpdGlvbi5ldmVudC5lbmQuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpKTtcbiAgICAgICAgaWYgKC0tbG9jay5jb3VudCkgZGVsZXRlIGxvY2tbaWRdOyBlbHNlIGRlbGV0ZSBub2RlW25zXTtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHJhbnNpdGlvbikge1xuICAgICAgdGltZSA9IGluaGVyaXQudGltZTtcbiAgICAgIHRpbWVyID0gZDNfdGltZXIoc2NoZWR1bGUsIDAsIHRpbWUpO1xuICAgICAgdHJhbnNpdGlvbiA9IGxvY2tbaWRdID0ge1xuICAgICAgICB0d2VlbjogbmV3IGQzX01hcCgpLFxuICAgICAgICB0aW1lOiB0aW1lLFxuICAgICAgICB0aW1lcjogdGltZXIsXG4gICAgICAgIGRlbGF5OiBpbmhlcml0LmRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlLFxuICAgICAgICBpbmRleDogaVxuICAgICAgfTtcbiAgICAgIGluaGVyaXQgPSBudWxsO1xuICAgICAgKytsb2NrLmNvdW50O1xuICAgIH1cbiAgfVxuICBkMy5zdmcuYXhpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpLCBvcmllbnQgPSBkM19zdmdfYXhpc0RlZmF1bHRPcmllbnQsIGlubmVyVGlja1NpemUgPSA2LCBvdXRlclRpY2tTaXplID0gNiwgdGlja1BhZGRpbmcgPSAzLCB0aWNrQXJndW1lbnRzXyA9IFsgMTAgXSwgdGlja1ZhbHVlcyA9IG51bGwsIHRpY2tGb3JtYXRfO1xuICAgIGZ1bmN0aW9uIGF4aXMoZykge1xuICAgICAgZy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZyA9IGQzLnNlbGVjdCh0aGlzKTtcbiAgICAgICAgdmFyIHNjYWxlMCA9IHRoaXMuX19jaGFydF9fIHx8IHNjYWxlLCBzY2FsZTEgPSB0aGlzLl9fY2hhcnRfXyA9IHNjYWxlLmNvcHkoKTtcbiAgICAgICAgdmFyIHRpY2tzID0gdGlja1ZhbHVlcyA9PSBudWxsID8gc2NhbGUxLnRpY2tzID8gc2NhbGUxLnRpY2tzLmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogc2NhbGUxLmRvbWFpbigpIDogdGlja1ZhbHVlcywgdGlja0Zvcm1hdCA9IHRpY2tGb3JtYXRfID09IG51bGwgPyBzY2FsZTEudGlja0Zvcm1hdCA/IHNjYWxlMS50aWNrRm9ybWF0LmFwcGx5KHNjYWxlMSwgdGlja0FyZ3VtZW50c18pIDogZDNfaWRlbnRpdHkgOiB0aWNrRm9ybWF0XywgdGljayA9IGcuc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh0aWNrcywgc2NhbGUxKSwgdGlja0VudGVyID0gdGljay5lbnRlcigpLmluc2VydChcImdcIiwgXCIuZG9tYWluXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIikuc3R5bGUoXCJvcGFjaXR5XCIsIM61KSwgdGlja0V4aXQgPSBkMy50cmFuc2l0aW9uKHRpY2suZXhpdCgpKS5zdHlsZShcIm9wYWNpdHlcIiwgzrUpLnJlbW92ZSgpLCB0aWNrVXBkYXRlID0gZDMudHJhbnNpdGlvbih0aWNrLm9yZGVyKCkpLnN0eWxlKFwib3BhY2l0eVwiLCAxKSwgdGlja1NwYWNpbmcgPSBNYXRoLm1heChpbm5lclRpY2tTaXplLCAwKSArIHRpY2tQYWRkaW5nLCB0aWNrVHJhbnNmb3JtO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHNjYWxlMSksIHBhdGggPSBnLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbIDAgXSksIHBhdGhVcGRhdGUgPSAocGF0aC5lbnRlcigpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpLCBcbiAgICAgICAgZDMudHJhbnNpdGlvbihwYXRoKSk7XG4gICAgICAgIHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpO1xuICAgICAgICB0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKTtcbiAgICAgICAgdmFyIGxpbmVFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJsaW5lXCIpLCBsaW5lVXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJsaW5lXCIpLCB0ZXh0ID0gdGljay5zZWxlY3QoXCJ0ZXh0XCIpLnRleHQodGlja0Zvcm1hdCksIHRleHRFbnRlciA9IHRpY2tFbnRlci5zZWxlY3QoXCJ0ZXh0XCIpLCB0ZXh0VXBkYXRlID0gdGlja1VwZGF0ZS5zZWxlY3QoXCJ0ZXh0XCIpLCBzaWduID0gb3JpZW50ID09PSBcInRvcFwiIHx8IG9yaWVudCA9PT0gXCJsZWZ0XCIgPyAtMSA6IDEsIHgxLCB4MiwgeTEsIHkyO1xuICAgICAgICBpZiAob3JpZW50ID09PSBcImJvdHRvbVwiIHx8IG9yaWVudCA9PT0gXCJ0b3BcIikge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1gsIHgxID0gXCJ4XCIsIHkxID0gXCJ5XCIsIHgyID0gXCJ4MlwiLCB5MiA9IFwieTJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBzaWduIDwgMCA/IFwiMGVtXCIgOiBcIi43MWVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XG4gICAgICAgICAgcGF0aFVwZGF0ZS5hdHRyKFwiZFwiLCBcIk1cIiArIHJhbmdlWzBdICsgXCIsXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSArIFwiVjBIXCIgKyByYW5nZVsxXSArIFwiVlwiICsgc2lnbiAqIG91dGVyVGlja1NpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpY2tUcmFuc2Zvcm0gPSBkM19zdmdfYXhpc1ksIHgxID0gXCJ5XCIsIHkxID0gXCJ4XCIsIHgyID0gXCJ5MlwiLCB5MiA9IFwieDJcIjtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJkeVwiLCBcIi4zMmVtXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgc2lnbiA8IDAgPyBcImVuZFwiIDogXCJzdGFydFwiKTtcbiAgICAgICAgICBwYXRoVXBkYXRlLmF0dHIoXCJkXCIsIFwiTVwiICsgc2lnbiAqIG91dGVyVGlja1NpemUgKyBcIixcIiArIHJhbmdlWzBdICsgXCJIMFZcIiArIHJhbmdlWzFdICsgXCJIXCIgKyBzaWduICogb3V0ZXJUaWNrU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUVudGVyLmF0dHIoeTIsIHNpZ24gKiBpbm5lclRpY2tTaXplKTtcbiAgICAgICAgdGV4dEVudGVyLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGxpbmVVcGRhdGUuYXR0cih4MiwgMCkuYXR0cih5Miwgc2lnbiAqIGlubmVyVGlja1NpemUpO1xuICAgICAgICB0ZXh0VXBkYXRlLmF0dHIoeDEsIDApLmF0dHIoeTEsIHNpZ24gKiB0aWNrU3BhY2luZyk7XG4gICAgICAgIGlmIChzY2FsZTEucmFuZ2VCYW5kKSB7XG4gICAgICAgICAgdmFyIHggPSBzY2FsZTEsIGR4ID0geC5yYW5nZUJhbmQoKSAvIDI7XG4gICAgICAgICAgc2NhbGUwID0gc2NhbGUxID0gZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHgoZCkgKyBkeDtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHNjYWxlMC5yYW5nZUJhbmQpIHtcbiAgICAgICAgICBzY2FsZTAgPSBzY2FsZTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGlja0V4aXQuY2FsbCh0aWNrVHJhbnNmb3JtLCBzY2FsZTEsIHNjYWxlMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGlja0VudGVyLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUwLCBzY2FsZTEpO1xuICAgICAgICB0aWNrVXBkYXRlLmNhbGwodGlja1RyYW5zZm9ybSwgc2NhbGUxLCBzY2FsZTEpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBzY2FsZTtcbiAgICAgIHNjYWxlID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy5vcmllbnQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBvcmllbnQ7XG4gICAgICBvcmllbnQgPSB4IGluIGQzX3N2Z19heGlzT3JpZW50cyA/IHggKyBcIlwiIDogZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrQXJndW1lbnRzXztcbiAgICAgIHRpY2tBcmd1bWVudHNfID0gZDNfYXJyYXkoYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrVmFsdWVzID0gZnVuY3Rpb24oeCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGlja1ZhbHVlcztcbiAgICAgIHRpY2tWYWx1ZXMgPSB4O1xuICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfTtcbiAgICBheGlzLnRpY2tGb3JtYXQgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrRm9ybWF0XztcbiAgICAgIHRpY2tGb3JtYXRfID0geDtcbiAgICAgIHJldHVybiBheGlzO1xuICAgIH07XG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbikgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICBvdXRlclRpY2tTaXplID0gK2FyZ3VtZW50c1tuIC0gMV07XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMuaW5uZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGlubmVyVGlja1NpemU7XG4gICAgICBpbm5lclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMub3V0ZXJUaWNrU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG91dGVyVGlja1NpemU7XG4gICAgICBvdXRlclRpY2tTaXplID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1BhZGRpbmcgPSBmdW5jdGlvbih4KSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aWNrUGFkZGluZztcbiAgICAgIHRpY2tQYWRkaW5nID0gK3g7XG4gICAgICByZXR1cm4gYXhpcztcbiAgICB9O1xuICAgIGF4aXMudGlja1N1YmRpdmlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgYXhpcztcbiAgICB9O1xuICAgIHJldHVybiBheGlzO1xuICB9O1xuICB2YXIgZDNfc3ZnX2F4aXNEZWZhdWx0T3JpZW50ID0gXCJib3R0b21cIiwgZDNfc3ZnX2F4aXNPcmllbnRzID0ge1xuICAgIHRvcDogMSxcbiAgICByaWdodDogMSxcbiAgICBib3R0b206IDEsXG4gICAgbGVmdDogMVxuICB9O1xuICBmdW5jdGlvbiBkM19zdmdfYXhpc1goc2VsZWN0aW9uLCB4MCwgeDEpIHtcbiAgICBzZWxlY3Rpb24uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgdjAgPSB4MChkKTtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHgxKGQpKSArIFwiLDApXCI7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZDNfc3ZnX2F4aXNZKHNlbGVjdGlvbiwgeTAsIHkxKSB7XG4gICAgc2VsZWN0aW9uLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xuICAgICAgdmFyIHYwID0geTAoZCk7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIiArIChpc0Zpbml0ZSh2MCkgPyB2MCA6IHkxKGQpKSArIFwiKVwiO1xuICAgIH0pO1xuICB9XG4gIGQzLnN2Zy5icnVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBldmVudCA9IGQzX2V2ZW50RGlzcGF0Y2goYnJ1c2gsIFwiYnJ1c2hzdGFydFwiLCBcImJydXNoXCIsIFwiYnJ1c2hlbmRcIiksIHggPSBudWxsLCB5ID0gbnVsbCwgeEV4dGVudCA9IFsgMCwgMCBdLCB5RXh0ZW50ID0gWyAwLCAwIF0sIHhFeHRlbnREb21haW4sIHlFeHRlbnREb21haW4sIHhDbGFtcCA9IHRydWUsIHlDbGFtcCA9IHRydWUsIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWzBdO1xuICAgIGZ1bmN0aW9uIGJydXNoKGcpIHtcbiAgICAgIGcuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGcgPSBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKS5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIikub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgYnJ1c2hzdGFydCkub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIGJydXNoc3RhcnQpO1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGcuc2VsZWN0QWxsKFwiLmJhY2tncm91bmRcIikuZGF0YShbIDAgXSk7XG4gICAgICAgIGJhY2tncm91bmQuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImJhY2tncm91bmRcIikuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpLnN0eWxlKFwiY3Vyc29yXCIsIFwiY3Jvc3NoYWlyXCIpO1xuICAgICAgICBnLnNlbGVjdEFsbChcIi5leHRlbnRcIikuZGF0YShbIDAgXSkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJjbGFzc1wiLCBcImV4dGVudFwiKS5zdHlsZShcImN1cnNvclwiLCBcIm1vdmVcIik7XG4gICAgICAgIHZhciByZXNpemUgPSBnLnNlbGVjdEFsbChcIi5yZXNpemVcIikuZGF0YShyZXNpemVzLCBkM19pZGVudGl0eSk7XG4gICAgICAgIHJlc2l6ZS5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgIHJlc2l6ZS5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gXCJyZXNpemUgXCIgKyBkO1xuICAgICAgICB9KS5zdHlsZShcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQzX3N2Z19icnVzaEN1cnNvcltkXTtcbiAgICAgICAgfSkuYXBwZW5kKFwicmVjdFwiKS5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIC9bZXddJC8udGVzdChkKSA/IC0zIDogbnVsbDtcbiAgICAgICAgfSkuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAvXltuc10vLnRlc3QoZCkgPyAtMyA6IG51bGw7XG4gICAgICAgIH0pLmF0dHIoXCJ3aWR0aFwiLCA2KS5hdHRyKFwiaGVpZ2h0XCIsIDYpLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgcmVzaXplLnN0eWxlKFwiZGlzcGxheVwiLCBicnVzaC5lbXB0eSgpID8gXCJub25lXCIgOiBudWxsKTtcbiAgICAgICAgdmFyIGdVcGRhdGUgPSBkMy50cmFuc2l0aW9uKGcpLCBiYWNrZ3JvdW5kVXBkYXRlID0gZDMudHJhbnNpdGlvbihiYWNrZ3JvdW5kKSwgcmFuZ2U7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHgpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInhcIiwgcmFuZ2VbMF0pLmF0dHIoXCJ3aWR0aFwiLCByYW5nZVsxXSAtIHJhbmdlWzBdKTtcbiAgICAgICAgICByZWRyYXdYKGdVcGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh5KSB7XG4gICAgICAgICAgcmFuZ2UgPSBkM19zY2FsZVJhbmdlKHkpO1xuICAgICAgICAgIGJhY2tncm91bmRVcGRhdGUuYXR0cihcInlcIiwgcmFuZ2VbMF0pLmF0dHIoXCJoZWlnaHRcIiwgcmFuZ2VbMV0gLSByYW5nZVswXSk7XG4gICAgICAgICAgcmVkcmF3WShnVXBkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZWRyYXcoZ1VwZGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYnJ1c2guZXZlbnQgPSBmdW5jdGlvbihnKSB7XG4gICAgICBnLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBldmVudF8gPSBldmVudC5vZih0aGlzLCBhcmd1bWVudHMpLCBleHRlbnQxID0ge1xuICAgICAgICAgIHg6IHhFeHRlbnQsXG4gICAgICAgICAgeTogeUV4dGVudCxcbiAgICAgICAgICBpOiB4RXh0ZW50RG9tYWluLFxuICAgICAgICAgIGo6IHlFeHRlbnREb21haW5cbiAgICAgICAgfSwgZXh0ZW50MCA9IHRoaXMuX19jaGFydF9fIHx8IGV4dGVudDE7XG4gICAgICAgIHRoaXMuX19jaGFydF9fID0gZXh0ZW50MTtcbiAgICAgICAgaWYgKGQzX3RyYW5zaXRpb25Jbmhlcml0SWQpIHtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmVhY2goXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQwLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MC5qO1xuICAgICAgICAgICAgeEV4dGVudCA9IGV4dGVudDAueDtcbiAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQwLnk7XG4gICAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgICB0eXBlOiBcImJydXNoc3RhcnRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkudHdlZW4oXCJicnVzaDpicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB4aSA9IGQzX2ludGVycG9sYXRlQXJyYXkoeEV4dGVudCwgZXh0ZW50MS54KSwgeWkgPSBkM19pbnRlcnBvbGF0ZUFycmF5KHlFeHRlbnQsIGV4dGVudDEueSk7XG4gICAgICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICB4RXh0ZW50ID0gZXh0ZW50MS54ID0geGkodCk7XG4gICAgICAgICAgICAgIHlFeHRlbnQgPSBleHRlbnQxLnkgPSB5aSh0KTtcbiAgICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICAgICAgbW9kZTogXCJyZXNpemVcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkuZWFjaChcImVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHhFeHRlbnREb21haW4gPSBleHRlbnQxLmk7XG4gICAgICAgICAgICB5RXh0ZW50RG9tYWluID0gZXh0ZW50MS5qO1xuICAgICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJicnVzaFwiLFxuICAgICAgICAgICAgICBtb2RlOiBcInJlc2l6ZVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZXZlbnRfKHtcbiAgICAgICAgICAgIHR5cGU6IFwiYnJ1c2hcIixcbiAgICAgICAgICAgIG1vZGU6IFwicmVzaXplXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBldmVudF8oe1xuICAgICAgICAgICAgdHlwZTogXCJicnVzaGVuZFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgZnVuY3Rpb24gcmVkcmF3KGcpIHtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeEV4dGVudFsrL2UkLy50ZXN0KGQpXSArIFwiLFwiICsgeUV4dGVudFsrL15zLy50ZXN0KGQpXSArIFwiKVwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHJhd1goZykge1xuICAgICAgZy5zZWxlY3QoXCIuZXh0ZW50XCIpLmF0dHIoXCJ4XCIsIHhFeHRlbnRbMF0pO1xuICAgICAgZy5zZWxlY3RBbGwoXCIuZXh0ZW50LC5uPnJlY3QsLnM+cmVjdFwiKS5hdHRyKFwid2lkdGhcIiwgeEV4dGVudFsxXSAtIHhFeHRlbnRbMF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWRyYXdZKGcpIHtcbiAgICAgIGcuc2VsZWN0KFwiLmV4dGVudFwiKS5hdHRyKFwieVwiLCB5RXh0ZW50WzBdKTtcbiAgICAgIGcuc2VsZWN0QWxsKFwiLmV4dGVudCwuZT5yZWN0LC53PnJlY3RcIikuYXR0cihcImhlaWdodFwiLCB5RXh0ZW50WzFdIC0geUV4dGVudFswXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJydXNoc3RhcnQoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgZXZlbnRUYXJnZXQgPSBkMy5zZWxlY3QoZDMuZXZlbnQudGFyZ2V0KSwgZXZlbnRfID0gZXZlbnQub2YodGFyZ2V0LCBhcmd1bWVudHMpLCBnID0gZDMuc2VsZWN0KHRhcmdldCksIHJlc2l6aW5nID0gZXZlbnRUYXJnZXQuZGF0dW0oKSwgcmVzaXppbmdYID0gIS9eKG58cykkLy50ZXN0KHJlc2l6aW5nKSAmJiB4LCByZXNpemluZ1kgPSAhL14oZXx3KSQvLnRlc3QocmVzaXppbmcpICYmIHksIGRyYWdnaW5nID0gZXZlbnRUYXJnZXQuY2xhc3NlZChcImV4dGVudFwiKSwgZHJhZ1Jlc3RvcmUgPSBkM19ldmVudF9kcmFnU3VwcHJlc3ModGFyZ2V0KSwgY2VudGVyLCBvcmlnaW4gPSBkMy5tb3VzZSh0YXJnZXQpLCBvZmZzZXQ7XG4gICAgICB2YXIgdyA9IGQzLnNlbGVjdChkM193aW5kb3codGFyZ2V0KSkub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd24pLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXApO1xuICAgICAgaWYgKGQzLmV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIHcub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIGJydXNoZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHcub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgYnJ1c2htb3ZlKS5vbihcIm1vdXNldXAuYnJ1c2hcIiwgYnJ1c2hlbmQpO1xuICAgICAgfVxuICAgICAgZy5pbnRlcnJ1cHQoKS5zZWxlY3RBbGwoXCIqXCIpLmludGVycnVwdCgpO1xuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbMF0gLSBvcmlnaW5bMF07XG4gICAgICAgIG9yaWdpblsxXSA9IHlFeHRlbnRbMF0gLSBvcmlnaW5bMV07XG4gICAgICB9IGVsc2UgaWYgKHJlc2l6aW5nKSB7XG4gICAgICAgIHZhciBleCA9ICsvdyQvLnRlc3QocmVzaXppbmcpLCBleSA9ICsvXm4vLnRlc3QocmVzaXppbmcpO1xuICAgICAgICBvZmZzZXQgPSBbIHhFeHRlbnRbMSAtIGV4XSAtIG9yaWdpblswXSwgeUV4dGVudFsxIC0gZXldIC0gb3JpZ2luWzFdIF07XG4gICAgICAgIG9yaWdpblswXSA9IHhFeHRlbnRbZXhdO1xuICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50W2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZDMuZXZlbnQuYWx0S2V5KSBjZW50ZXIgPSBvcmlnaW4uc2xpY2UoKTtcbiAgICAgIGcuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIikuc2VsZWN0QWxsKFwiLnJlc2l6ZVwiKS5zdHlsZShcImRpc3BsYXlcIiwgbnVsbCk7XG4gICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIGV2ZW50VGFyZ2V0LnN0eWxlKFwiY3Vyc29yXCIpKTtcbiAgICAgIGV2ZW50Xyh7XG4gICAgICAgIHR5cGU6IFwiYnJ1c2hzdGFydFwiXG4gICAgICB9KTtcbiAgICAgIGJydXNobW92ZSgpO1xuICAgICAgZnVuY3Rpb24ga2V5ZG93bigpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgICAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICAgICAgICBjZW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgb3JpZ2luWzBdIC09IHhFeHRlbnRbMV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gLT0geUV4dGVudFsxXTtcbiAgICAgICAgICAgIGRyYWdnaW5nID0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZDNfZXZlbnRQcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBrZXl1cCgpIHtcbiAgICAgICAgaWYgKGQzLmV2ZW50LmtleUNvZGUgPT0gMzIgJiYgZHJhZ2dpbmcgPT0gMikge1xuICAgICAgICAgIG9yaWdpblswXSArPSB4RXh0ZW50WzFdO1xuICAgICAgICAgIG9yaWdpblsxXSArPSB5RXh0ZW50WzFdO1xuICAgICAgICAgIGRyYWdnaW5nID0gMDtcbiAgICAgICAgICBkM19ldmVudFByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNobW92ZSgpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gZDMubW91c2UodGFyZ2V0KSwgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIHBvaW50WzBdICs9IG9mZnNldFswXTtcbiAgICAgICAgICBwb2ludFsxXSArPSBvZmZzZXRbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgICAgIGlmIChkMy5ldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgIGlmICghY2VudGVyKSBjZW50ZXIgPSBbICh4RXh0ZW50WzBdICsgeEV4dGVudFsxXSkgLyAyLCAoeUV4dGVudFswXSArIHlFeHRlbnRbMV0pIC8gMiBdO1xuICAgICAgICAgICAgb3JpZ2luWzBdID0geEV4dGVudFsrKHBvaW50WzBdIDwgY2VudGVyWzBdKV07XG4gICAgICAgICAgICBvcmlnaW5bMV0gPSB5RXh0ZW50WysocG9pbnRbMV0gPCBjZW50ZXJbMV0pXTtcbiAgICAgICAgICB9IGVsc2UgY2VudGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzaXppbmdYICYmIG1vdmUxKHBvaW50LCB4LCAwKSkge1xuICAgICAgICAgIHJlZHJhd1goZyk7XG4gICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNpemluZ1kgJiYgbW92ZTEocG9pbnQsIHksIDEpKSB7XG4gICAgICAgICAgcmVkcmF3WShnKTtcbiAgICAgICAgICBtb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgcmVkcmF3KGcpO1xuICAgICAgICAgIGV2ZW50Xyh7XG4gICAgICAgICAgICB0eXBlOiBcImJydXNoXCIsXG4gICAgICAgICAgICBtb2RlOiBkcmFnZ2luZyA/IFwibW92ZVwiIDogXCJyZXNpemVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBtb3ZlMShwb2ludCwgc2NhbGUsIGkpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gZDNfc2NhbGVSYW5nZShzY2FsZSksIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV0sIHBvc2l0aW9uID0gb3JpZ2luW2ldLCBleHRlbnQgPSBpID8geUV4dGVudCA6IHhFeHRlbnQsIHNpemUgPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIG1pbiwgbWF4O1xuICAgICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgICByMCAtPSBwb3NpdGlvbjtcbiAgICAgICAgICByMSAtPSBzaXplICsgcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gKGkgPyB5Q2xhbXAgOiB4Q2xhbXApID8gTWF0aC5tYXgocjAsIE1hdGgubWluKHIxLCBwb2ludFtpXSkpIDogcG9pbnRbaV07XG4gICAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICAgIG1heCA9IChtaW4gKz0gcG9zaXRpb24pICsgc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY2VudGVyKSBwb3NpdGlvbiA9IE1hdGgubWF4KHIwLCBNYXRoLm1pbihyMSwgMiAqIGNlbnRlcltpXSAtIG1pbikpO1xuICAgICAgICAgIGlmIChwb3NpdGlvbiA8IG1pbikge1xuICAgICAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICAgICAgbWluID0gcG9zaXRpb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heCA9IHBvc2l0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW50WzBdICE9IG1pbiB8fCBleHRlbnRbMV0gIT0gbWF4KSB7XG4gICAgICAgICAgaWYgKGkpIHlFeHRlbnREb21haW4gPSBudWxsOyBlbHNlIHhFeHRlbnREb21haW4gPSBudWxsO1xuICAgICAgICAgIGV4dGVudFswXSA9IG1pbjtcbiAgICAgICAgICBleHRlbnRbMV0gPSBtYXg7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJydXNoZW5kKCkge1xuICAgICAgICBicnVzaG1vdmUoKTtcbiAgICAgICAgZy5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpLnNlbGVjdEFsbChcIi5yZXNpemVcIikuc3R5bGUoXCJkaXNwbGF5XCIsIGJydXNoLmVtcHR5KCkgPyBcIm5vbmVcIiA6IG51bGwpO1xuICAgICAgICBkMy5zZWxlY3QoXCJib2R5XCIpLnN0eWxlKFwiY3Vyc29yXCIsIG51bGwpO1xuICAgICAgICB3Lm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG51bGwpLm9uKFwibW91c2V1cC5icnVzaFwiLCBudWxsKS5vbihcInRvdWNobW92ZS5icnVzaFwiLCBudWxsKS5vbihcInRvdWNoZW5kLmJydXNoXCIsIG51bGwpLm9uKFwia2V5ZG93bi5icnVzaFwiLCBudWxsKS5vbihcImtleXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgICBkcmFnUmVzdG9yZSgpO1xuICAgICAgICBldmVudF8oe1xuICAgICAgICAgIHR5cGU6IFwiYnJ1c2hlbmRcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYnJ1c2gueCA9IGZ1bmN0aW9uKHopIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHg7XG4gICAgICB4ID0gejtcbiAgICAgIHJlc2l6ZXMgPSBkM19zdmdfYnJ1c2hSZXNpemVzWyF4IDw8IDEgfCAheV07XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC55ID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geTtcbiAgICAgIHkgPSB6O1xuICAgICAgcmVzaXplcyA9IGQzX3N2Z19icnVzaFJlc2l6ZXNbIXggPDwgMSB8ICF5XTtcbiAgICAgIHJldHVybiBicnVzaDtcbiAgICB9O1xuICAgIGJydXNoLmNsYW1wID0gZnVuY3Rpb24oeikge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4geCAmJiB5ID8gWyB4Q2xhbXAsIHlDbGFtcCBdIDogeCA/IHhDbGFtcCA6IHkgPyB5Q2xhbXAgOiBudWxsO1xuICAgICAgaWYgKHggJiYgeSkgeENsYW1wID0gISF6WzBdLCB5Q2xhbXAgPSAhIXpbMV07IGVsc2UgaWYgKHgpIHhDbGFtcCA9ICEhejsgZWxzZSBpZiAoeSkgeUNsYW1wID0gISF6O1xuICAgICAgcmV0dXJuIGJydXNoO1xuICAgIH07XG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oeikge1xuICAgICAgdmFyIHgwLCB4MSwgeTAsIHkxLCB0O1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgaWYgKHhFeHRlbnREb21haW4pIHtcbiAgICAgICAgICAgIHgwID0geEV4dGVudERvbWFpblswXSwgeDEgPSB4RXh0ZW50RG9tYWluWzFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4MCA9IHhFeHRlbnRbMF0sIHgxID0geEV4dGVudFsxXTtcbiAgICAgICAgICAgIGlmICh4LmludmVydCkgeDAgPSB4LmludmVydCh4MCksIHgxID0geC5pbnZlcnQoeDEpO1xuICAgICAgICAgICAgaWYgKHgxIDwgeDApIHQgPSB4MCwgeDAgPSB4MSwgeDEgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoeSkge1xuICAgICAgICAgIGlmICh5RXh0ZW50RG9tYWluKSB7XG4gICAgICAgICAgICB5MCA9IHlFeHRlbnREb21haW5bMF0sIHkxID0geUV4dGVudERvbWFpblsxXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTAgPSB5RXh0ZW50WzBdLCB5MSA9IHlFeHRlbnRbMV07XG4gICAgICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geS5pbnZlcnQoeTApLCB5MSA9IHkuaW52ZXJ0KHkxKTtcbiAgICAgICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggJiYgeSA/IFsgWyB4MCwgeTAgXSwgWyB4MSwgeTEgXSBdIDogeCA/IFsgeDAsIHgxIF0gOiB5ICYmIFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICBpZiAoeCkge1xuICAgICAgICB4MCA9IHpbMF0sIHgxID0gelsxXTtcbiAgICAgICAgaWYgKHkpIHgwID0geDBbMF0sIHgxID0geDFbMF07XG4gICAgICAgIHhFeHRlbnREb21haW4gPSBbIHgwLCB4MSBdO1xuICAgICAgICBpZiAoeC5pbnZlcnQpIHgwID0geCh4MCksIHgxID0geCh4MSk7XG4gICAgICAgIGlmICh4MSA8IHgwKSB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgICAgICAgaWYgKHgwICE9IHhFeHRlbnRbMF0gfHwgeDEgIT0geEV4dGVudFsxXSkgeEV4dGVudCA9IFsgeDAsIHgxIF07XG4gICAgICB9XG4gICAgICBpZiAoeSkge1xuICAgICAgICB5MCA9IHpbMF0sIHkxID0gelsxXTtcbiAgICAgICAgaWYgKHgpIHkwID0geTBbMV0sIHkxID0geTFbMV07XG4gICAgICAgIHlFeHRlbnREb21haW4gPSBbIHkwLCB5MSBdO1xuICAgICAgICBpZiAoeS5pbnZlcnQpIHkwID0geSh5MCksIHkxID0geSh5MSk7XG4gICAgICAgIGlmICh5MSA8IHkwKSB0ID0geTAsIHkwID0geTEsIHkxID0gdDtcbiAgICAgICAgaWYgKHkwICE9IHlFeHRlbnRbMF0gfHwgeTEgIT0geUV4dGVudFsxXSkgeUV4dGVudCA9IFsgeTAsIHkxIF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFicnVzaC5lbXB0eSgpKSB7XG4gICAgICAgIHhFeHRlbnQgPSBbIDAsIDAgXSwgeUV4dGVudCA9IFsgMCwgMCBdO1xuICAgICAgICB4RXh0ZW50RG9tYWluID0geUV4dGVudERvbWFpbiA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnJ1c2g7XG4gICAgfTtcbiAgICBicnVzaC5lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICEheCAmJiB4RXh0ZW50WzBdID09IHhFeHRlbnRbMV0gfHwgISF5ICYmIHlFeHRlbnRbMF0gPT0geUV4dGVudFsxXTtcbiAgICB9O1xuICAgIHJldHVybiBkMy5yZWJpbmQoYnJ1c2gsIGV2ZW50LCBcIm9uXCIpO1xuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoQ3Vyc29yID0ge1xuICAgIG46IFwibnMtcmVzaXplXCIsXG4gICAgZTogXCJldy1yZXNpemVcIixcbiAgICBzOiBcIm5zLXJlc2l6ZVwiLFxuICAgIHc6IFwiZXctcmVzaXplXCIsXG4gICAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgICBuZTogXCJuZXN3LXJlc2l6ZVwiLFxuICAgIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gICAgc3c6IFwibmVzdy1yZXNpemVcIlxuICB9O1xuICB2YXIgZDNfc3ZnX2JydXNoUmVzaXplcyA9IFsgWyBcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiIF0sIFsgXCJlXCIsIFwid1wiIF0sIFsgXCJuXCIsIFwic1wiIF0sIFtdIF07XG4gIHZhciBkM190aW1lX2Zvcm1hdCA9IGQzX3RpbWUuZm9ybWF0ID0gZDNfbG9jYWxlX2VuVVMudGltZUZvcm1hdDtcbiAgdmFyIGQzX3RpbWVfZm9ybWF0VXRjID0gZDNfdGltZV9mb3JtYXQudXRjO1xuICB2YXIgZDNfdGltZV9mb3JtYXRJc28gPSBkM190aW1lX2Zvcm1hdFV0YyhcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiKTtcbiAgZDNfdGltZV9mb3JtYXQuaXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpID8gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUgOiBkM190aW1lX2Zvcm1hdElzbztcbiAgZnVuY3Rpb24gZDNfdGltZV9mb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgZDNfdGltZV9mb3JtYXRJc29OYXRpdmUucGFyc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHN0cmluZyk7XG4gICAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG4gIH07XG4gIGQzX3RpbWVfZm9ybWF0SXNvTmF0aXZlLnRvU3RyaW5nID0gZDNfdGltZV9mb3JtYXRJc28udG9TdHJpbmc7XG4gIGQzX3RpbWUuc2Vjb25kID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDFlMykgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAxZTMpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0U2Vjb25kcygpO1xuICB9KTtcbiAgZDNfdGltZS5zZWNvbmRzID0gZDNfdGltZS5zZWNvbmQucmFuZ2U7XG4gIGQzX3RpbWUuc2Vjb25kcy51dGMgPSBkM190aW1lLnNlY29uZC51dGMucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlID0gZDNfdGltZV9pbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBkM19kYXRlKE1hdGguZmxvb3IoZGF0ZSAvIDZlNCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiA2ZTQpO1xuICB9LCBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xuICB9KTtcbiAgZDNfdGltZS5taW51dGVzID0gZDNfdGltZS5taW51dGUucmFuZ2U7XG4gIGQzX3RpbWUubWludXRlcy51dGMgPSBkM190aW1lLm1pbnV0ZS51dGMucmFuZ2U7XG4gIGQzX3RpbWUuaG91ciA9IGQzX3RpbWVfaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB0aW1lem9uZSA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuICAgIHJldHVybiBuZXcgZDNfZGF0ZSgoTWF0aC5mbG9vcihkYXRlIC8gMzZlNSAtIHRpbWV6b25lKSArIHRpbWV6b25lKSAqIDM2ZTUpO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKG9mZnNldCkgKiAzNmU1KTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0pO1xuICBkM190aW1lLmhvdXJzID0gZDNfdGltZS5ob3VyLnJhbmdlO1xuICBkM190aW1lLmhvdXJzLnV0YyA9IGQzX3RpbWUuaG91ci51dGMucmFuZ2U7XG4gIGQzX3RpbWUubW9udGggPSBkM190aW1lX2ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlID0gZDNfdGltZS5kYXkoZGF0ZSk7XG4gICAgZGF0ZS5zZXREYXRlKDEpO1xuICAgIHJldHVybiBkYXRlO1xuICB9LCBmdW5jdGlvbihkYXRlLCBvZmZzZXQpIHtcbiAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIG9mZnNldCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xuICB9KTtcbiAgZDNfdGltZS5tb250aHMgPSBkM190aW1lLm1vbnRoLnJhbmdlO1xuICBkM190aW1lLm1vbnRocy51dGMgPSBkM190aW1lLm1vbnRoLnV0Yy5yYW5nZTtcbiAgZnVuY3Rpb24gZDNfdGltZV9zY2FsZShsaW5lYXIsIG1ldGhvZHMsIGZvcm1hdCkge1xuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICAgIHJldHVybiBsaW5lYXIoeCk7XG4gICAgfVxuICAgIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlRGF0ZShsaW5lYXIuaW52ZXJ0KHgpKTtcbiAgICB9O1xuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGxpbmVhci5kb21haW4oKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgICAgbGluZWFyLmRvbWFpbih4KTtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRpY2tNZXRob2QoZXh0ZW50LCBjb3VudCkge1xuICAgICAgdmFyIHNwYW4gPSBleHRlbnRbMV0gLSBleHRlbnRbMF0sIHRhcmdldCA9IHNwYW4gLyBjb3VudCwgaSA9IGQzLmJpc2VjdChkM190aW1lX3NjYWxlU3RlcHMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gaSA9PSBkM190aW1lX3NjYWxlU3RlcHMubGVuZ3RoID8gWyBtZXRob2RzLnllYXIsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIGQgLyAzMTUzNmU2O1xuICAgICAgfSksIGNvdW50KVsyXSBdIDogIWkgPyBbIGQzX3RpbWVfc2NhbGVNaWxsaXNlY29uZHMsIGQzX3NjYWxlX2xpbmVhclRpY2tSYW5nZShleHRlbnQsIGNvdW50KVsyXSBdIDogbWV0aG9kc1t0YXJnZXQgLyBkM190aW1lX3NjYWxlU3RlcHNbaSAtIDFdIDwgZDNfdGltZV9zY2FsZVN0ZXBzW2ldIC8gdGFyZ2V0ID8gaSAtIDEgOiBpXTtcbiAgICB9XG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluKCksIGV4dGVudCA9IGQzX3NjYWxlRXh0ZW50KGRvbWFpbiksIG1ldGhvZCA9IGludGVydmFsID09IG51bGwgPyB0aWNrTWV0aG9kKGV4dGVudCwgMTApIDogdHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiICYmIHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCk7XG4gICAgICBpZiAobWV0aG9kKSBpbnRlcnZhbCA9IG1ldGhvZFswXSwgc2tpcCA9IG1ldGhvZFsxXTtcbiAgICAgIGZ1bmN0aW9uIHNraXBwZWQoZGF0ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKGRhdGUpICYmICFpbnRlcnZhbC5yYW5nZShkYXRlLCBkM190aW1lX3NjYWxlRGF0ZSgrZGF0ZSArIDEpLCBza2lwKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NhbGUuZG9tYWluKGQzX3NjYWxlX25pY2UoZG9tYWluLCBza2lwID4gMSA/IHtcbiAgICAgICAgZmxvb3I6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICB3aGlsZSAoc2tpcHBlZChkYXRlID0gaW50ZXJ2YWwuZmxvb3IoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoZGF0ZSAtIDEpO1xuICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9LFxuICAgICAgICBjZWlsOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgd2hpbGUgKHNraXBwZWQoZGF0ZSA9IGludGVydmFsLmNlaWwoZGF0ZSkpKSBkYXRlID0gZDNfdGltZV9zY2FsZURhdGUoK2RhdGUgKyAxKTtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSA6IGludGVydmFsKSk7XG4gICAgfTtcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBza2lwKSB7XG4gICAgICB2YXIgZXh0ZW50ID0gZDNfc2NhbGVFeHRlbnQoc2NhbGUuZG9tYWluKCkpLCBtZXRob2QgPSBpbnRlcnZhbCA9PSBudWxsID8gdGlja01ldGhvZChleHRlbnQsIDEwKSA6IHR5cGVvZiBpbnRlcnZhbCA9PT0gXCJudW1iZXJcIiA/IHRpY2tNZXRob2QoZXh0ZW50LCBpbnRlcnZhbCkgOiAhaW50ZXJ2YWwucmFuZ2UgJiYgWyB7XG4gICAgICAgIHJhbmdlOiBpbnRlcnZhbFxuICAgICAgfSwgc2tpcCBdO1xuICAgICAgaWYgKG1ldGhvZCkgaW50ZXJ2YWwgPSBtZXRob2RbMF0sIHNraXAgPSBtZXRob2RbMV07XG4gICAgICByZXR1cm4gaW50ZXJ2YWwucmFuZ2UoZXh0ZW50WzBdLCBkM190aW1lX3NjYWxlRGF0ZSgrZXh0ZW50WzFdICsgMSksIHNraXAgPCAxID8gMSA6IHNraXApO1xuICAgIH07XG4gICAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9O1xuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkM190aW1lX3NjYWxlKGxpbmVhci5jb3B5KCksIG1ldGhvZHMsIGZvcm1hdCk7XG4gICAgfTtcbiAgICByZXR1cm4gZDNfc2NhbGVfbGluZWFyUmViaW5kKHNjYWxlLCBsaW5lYXIpO1xuICB9XG4gIGZ1bmN0aW9uIGQzX3RpbWVfc2NhbGVEYXRlKHQpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodCk7XG4gIH1cbiAgdmFyIGQzX3RpbWVfc2NhbGVTdGVwcyA9IFsgMWUzLCA1ZTMsIDE1ZTMsIDNlNCwgNmU0LCAzZTUsIDllNSwgMThlNSwgMzZlNSwgMTA4ZTUsIDIxNmU1LCA0MzJlNSwgODY0ZTUsIDE3MjhlNSwgNjA0OGU1LCAyNTkyZTYsIDc3NzZlNiwgMzE1MzZlNiBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsTWV0aG9kcyA9IFsgWyBkM190aW1lLnNlY29uZCwgMSBdLCBbIGQzX3RpbWUuc2Vjb25kLCA1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDE1IF0sIFsgZDNfdGltZS5zZWNvbmQsIDMwIF0sIFsgZDNfdGltZS5taW51dGUsIDEgXSwgWyBkM190aW1lLm1pbnV0ZSwgNSBdLCBbIGQzX3RpbWUubWludXRlLCAxNSBdLCBbIGQzX3RpbWUubWludXRlLCAzMCBdLCBbIGQzX3RpbWUuaG91ciwgMSBdLCBbIGQzX3RpbWUuaG91ciwgMyBdLCBbIGQzX3RpbWUuaG91ciwgNiBdLCBbIGQzX3RpbWUuaG91ciwgMTIgXSwgWyBkM190aW1lLmRheSwgMSBdLCBbIGQzX3RpbWUuZGF5LCAyIF0sIFsgZDNfdGltZS53ZWVrLCAxIF0sIFsgZDNfdGltZS5tb250aCwgMSBdLCBbIGQzX3RpbWUubW9udGgsIDMgXSwgWyBkM190aW1lLnllYXIsIDEgXSBdO1xuICB2YXIgZDNfdGltZV9zY2FsZUxvY2FsRm9ybWF0ID0gZDNfdGltZV9mb3JtYXQubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0RGF5KCkgJiYgZC5nZXREYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldERhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0TW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICB2YXIgZDNfdGltZV9zY2FsZU1pbGxpc2Vjb25kcyA9IHtcbiAgICByYW5nZTogZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICAgIHJldHVybiBkMy5yYW5nZShNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKSAqIHN0ZXAsICtzdG9wLCBzdGVwKS5tYXAoZDNfdGltZV9zY2FsZURhdGUpO1xuICAgIH0sXG4gICAgZmxvb3I6IGQzX2lkZW50aXR5LFxuICAgIGNlaWw6IGQzX2lkZW50aXR5XG4gIH07XG4gIGQzX3RpbWVfc2NhbGVMb2NhbE1ldGhvZHMueWVhciA9IGQzX3RpbWUueWVhcjtcbiAgZDNfdGltZS5zY2FsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkM190aW1lX3NjYWxlKGQzLnNjYWxlLmxpbmVhcigpLCBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLCBkM190aW1lX3NjYWxlTG9jYWxGb3JtYXQpO1xuICB9O1xuICB2YXIgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMgPSBkM190aW1lX3NjYWxlTG9jYWxNZXRob2RzLm1hcChmdW5jdGlvbihtKSB7XG4gICAgcmV0dXJuIFsgbVswXS51dGMsIG1bMV0gXTtcbiAgfSk7XG4gIHZhciBkM190aW1lX3NjYWxlVXRjRm9ybWF0ID0gZDNfdGltZV9mb3JtYXRVdGMubXVsdGkoWyBbIFwiLiVMXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgfSBdLCBbIFwiOiVTXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENTZWNvbmRzKCk7XG4gIH0gXSwgWyBcIiVJOiVNXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENNaW51dGVzKCk7XG4gIH0gXSwgWyBcIiVJICVwXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICByZXR1cm4gZC5nZXRVVENIb3VycygpO1xuICB9IF0sIFsgXCIlYSAlZFwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCkgJiYgZC5nZXRVVENEYXRlKCkgIT0gMTtcbiAgfSBdLCBbIFwiJWIgJWRcIiwgZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKSAhPSAxO1xuICB9IF0sIFsgXCIlQlwiLCBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQuZ2V0VVRDTW9udGgoKTtcbiAgfSBdLCBbIFwiJVlcIiwgZDNfdHJ1ZSBdIF0pO1xuICBkM190aW1lX3NjYWxlVXRjTWV0aG9kcy55ZWFyID0gZDNfdGltZS55ZWFyLnV0YztcbiAgZDNfdGltZS5zY2FsZS51dGMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZDNfdGltZV9zY2FsZShkMy5zY2FsZS5saW5lYXIoKSwgZDNfdGltZV9zY2FsZVV0Y01ldGhvZHMsIGQzX3RpbWVfc2NhbGVVdGNGb3JtYXQpO1xuICB9O1xuICBkMy50ZXh0ID0gZDNfeGhyVHlwZShmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICB9KTtcbiAgZDMuanNvbiA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZDNfeGhyKHVybCwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIGQzX2pzb24sIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfanNvbihyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLmh0bWwgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGQzX3hocih1cmwsIFwidGV4dC9odG1sXCIsIGQzX2h0bWwsIGNhbGxiYWNrKTtcbiAgfTtcbiAgZnVuY3Rpb24gZDNfaHRtbChyZXF1ZXN0KSB7XG4gICAgdmFyIHJhbmdlID0gZDNfZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlKGQzX2RvY3VtZW50LmJvZHkpO1xuICAgIHJldHVybiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICB9XG4gIGQzLnhtbCA9IGQzX3hoclR5cGUoZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlWE1MO1xuICB9KTtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB0aGlzLmQzID0gZDMsIGRlZmluZShkMyk7IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZDM7IGVsc2UgdGhpcy5kMyA9IGQzO1xufSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/d3/d3.js\n");

/***/ }),

/***/ "./node_modules/intersectionjs/intersection.js":
/*!*****************************************************!*\
  !*** ./node_modules/intersectionjs/intersection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Point2D = __webpack_require__(/*! point2d */ \"./node_modules/point2d/index.js\");\n\n/*****\n*\n*   Intersection.js\n*\n*   copyright 2002, Kevin Lindsey\n*\n*****/\n\n/*****\n*\n*   constructor\n*\n*****/\nfunction Intersection(status) {\n    if ( arguments.length > 0 ) {\n        this.init(status);\n    }\n}\n\n\n/*****\n*\n*   init\n*\n*****/\nIntersection.prototype.init = function(status) {\n    this.status = status;\n    this.points = new Array();\n};\n\n\n/*****\n*\n*   appendPoint\n*\n*****/\nIntersection.prototype.appendPoint = function(point) {\n    this.points.push(point);\n};\n\n\n/*****\n*\n*   appendPoints\n*\n*****/\nIntersection.prototype.appendPoints = function(points) {\n    this.points = this.points.concat(points);\n};\n\n\n/*****\n*\n*   class methods\n*\n*****/\n\n/*****\n*\n*   intersectShapes\n*\n*****/\nIntersection.intersectShapes = function(shape1, shape2) {\n    var ip1 = shape1.getIntersectionParams();\n    var ip2 = shape2.getIntersectionParams();\n    var result;\n\n    if ( ip1 != null && ip2 != null ) {\n        if ( ip1.name == \"Path\" ) {\n            result = Intersection.intersectPathShape(shape1, shape2);\n        } else if ( ip2.name == \"Path\" ) {\n            result = Intersection.intersectPathShape(shape2, shape1);\n        } else {\n            var method;\n            var params;\n\n            if ( ip1.name < ip2.name ) {\n                method = \"intersect\" + ip1.name + ip2.name;\n                params = ip1.params.concat( ip2.params );\n            } else {\n                method = \"intersect\" + ip2.name + ip1.name;\n                params = ip2.params.concat( ip1.params );\n            }\n\n            if ( !(method in Intersection) )\n                throw new Error(\"Intersection not available: \" + method);\n\n            result = Intersection[method].apply(null, params);\n        }\n    } else {\n        result = new Intersection(\"No Intersection\");\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectPathShape\n*\n*****/\nIntersection.intersectPathShape = function(path, shape) {\n    return path.intersectShape(shape);\n};\n\n\n/*****\n*\n*   intersectBezier2Bezier2\n*\n*****/\nIntersection.intersectBezier2Bezier2 = function(a1, a2, a3, b1, b2, b3) {\n    var a, b;\n    var c12, c11, c10;\n    var c22, c21, c20;\n    var result = new Intersection(\"No Intersection\");\n    var poly;\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b2.multiply(-2);\n    c22 = b1.add(a.add(b3));\n\n    a = b1.multiply(-2);\n    b = b2.multiply(2);\n    c21 = a.add(b);\n\n    c20 = new Point2D(b1.x, b1.y);\n    \n    if ( c12.y == 0 ) {\n        var v0 = c12.x*(c10.y - c20.y);\n        var v1 = v0 - c11.x*c11.y;\n        var v2 = v0 + v1;\n        var v3 = c11.y*c11.y;\n\n        poly = new Polynomial(\n            c12.x*c22.y*c22.y,\n            2*c12.x*c21.y*c22.y,\n            c12.x*c21.y*c21.y - c22.x*v3 - c22.y*v0 - c22.y*v1,\n            -c21.x*v3 - c21.y*v0 - c21.y*v1,\n            (c10.x - c20.x)*v3 + (c10.y - c20.y)*v1\n        );\n    } else {\n        var v0 = c12.x*c22.y - c12.y*c22.x;\n        var v1 = c12.x*c21.y - c21.x*c12.y;\n        var v2 = c11.x*c12.y - c11.y*c12.x;\n        var v3 = c10.y - c20.y;\n        var v4 = c12.y*(c10.x - c20.x) - c12.x*v3;\n        var v5 = -c11.y*v2 + c12.y*v4;\n        var v6 = v2*v2;\n\n        poly = new Polynomial(\n            v0*v0,\n            2*v0*v1,\n            (-c22.y*v6 + c12.y*v1*v1 + c12.y*v0*v4 + v0*v5) / c12.y,\n            (-c21.y*v6 + c12.y*v1*v4 + v1*v5) / c12.y,\n            (v3*v6 + v4*v5) / c12.y\n        );\n    }\n\n    var roots = poly.getRoots();\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n\n        if ( 0 <= s && s <= 1 ) {\n            var xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s*c21.x - s*s*c22.x\n            ).getRoots();\n            var yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s*c21.y - s*s*c22.y\n            ).getRoots();\n\n            if ( xRoots.length > 0 && yRoots.length > 0 ) {\n                var TOLERANCE = 1e-4;\n\n                checkRoots:\n                for ( var j = 0; j < xRoots.length; j++ ) {\n                    var xRoot = xRoots[j];\n\n                    if ( 0 <= xRoot && xRoot <= 1 ) {\n                        for ( var k = 0; k < yRoots.length; k++ ) {\n                            if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                                result.points.push( c22.multiply(s*s).add(c21.multiply(s).add(c20)) );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Bezier3\n*\n*****/\nIntersection.intersectBezier2Bezier3 = function(a1, a2, a3, b1, b2, b3, b4) {\n    var a, b,c, d;\n    var c12, c11, c10;\n    var c23, c22, c21, c20;\n    var result = new Intersection(\"No Intersection\");\n\n    a = a2.multiply(-2);\n    c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    c11 = a.add(b);\n\n    c10 = new Point2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c20x2 = c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n\n    var poly = new Polynomial(\n        -2*c12.x*c12.y*c23.x*c23.y + c12x2*c23y2 + c12y2*c23x2,\n        -2*c12.x*c12.y*c22.x*c23.y - 2*c12.x*c12.y*c22.y*c23.x + 2*c12y2*c22.x*c23.x +\n            2*c12x2*c22.y*c23.y,\n        -2*c12.x*c21.x*c12.y*c23.y - 2*c12.x*c12.y*c21.y*c23.x - 2*c12.x*c12.y*c22.x*c22.y +\n            2*c21.x*c12y2*c23.x + c12y2*c22x2 + c12x2*(2*c21.y*c23.y + c22y2),\n        2*c10.x*c12.x*c12.y*c23.y + 2*c10.y*c12.x*c12.y*c23.x + c11.x*c11.y*c12.x*c23.y +\n            c11.x*c11.y*c12.y*c23.x - 2*c20.x*c12.x*c12.y*c23.y - 2*c12.x*c20.y*c12.y*c23.x -\n            2*c12.x*c21.x*c12.y*c22.y - 2*c12.x*c12.y*c21.y*c22.x - 2*c10.x*c12y2*c23.x -\n            2*c10.y*c12x2*c23.y + 2*c20.x*c12y2*c23.x + 2*c21.x*c12y2*c22.x -\n            c11y2*c12.x*c23.x - c11x2*c12.y*c23.y + c12x2*(2*c20.y*c23.y + 2*c21.y*c22.y),\n        2*c10.x*c12.x*c12.y*c22.y + 2*c10.y*c12.x*c12.y*c22.x + c11.x*c11.y*c12.x*c22.y +\n            c11.x*c11.y*c12.y*c22.x - 2*c20.x*c12.x*c12.y*c22.y - 2*c12.x*c20.y*c12.y*c22.x -\n            2*c12.x*c21.x*c12.y*c21.y - 2*c10.x*c12y2*c22.x - 2*c10.y*c12x2*c22.y +\n            2*c20.x*c12y2*c22.x - c11y2*c12.x*c22.x - c11x2*c12.y*c22.y + c21x2*c12y2 +\n            c12x2*(2*c20.y*c22.y + c21y2),\n        2*c10.x*c12.x*c12.y*c21.y + 2*c10.y*c12.x*c21.x*c12.y + c11.x*c11.y*c12.x*c21.y +\n            c11.x*c11.y*c21.x*c12.y - 2*c20.x*c12.x*c12.y*c21.y - 2*c12.x*c20.y*c21.x*c12.y -\n            2*c10.x*c21.x*c12y2 - 2*c10.y*c12x2*c21.y + 2*c20.x*c21.x*c12y2 -\n            c11y2*c12.x*c21.x - c11x2*c12.y*c21.y + 2*c12x2*c20.y*c21.y,\n        -2*c10.x*c10.y*c12.x*c12.y - c10.x*c11.x*c11.y*c12.y - c10.y*c11.x*c11.y*c12.x +\n            2*c10.x*c12.x*c20.y*c12.y + 2*c10.y*c20.x*c12.x*c12.y + c11.x*c20.x*c11.y*c12.y +\n            c11.x*c11.y*c12.x*c20.y - 2*c20.x*c12.x*c20.y*c12.y - 2*c10.x*c20.x*c12y2 +\n            c10.x*c11y2*c12.x + c10.y*c11x2*c12.y - 2*c10.y*c12x2*c20.y -\n            c20.x*c11y2*c12.x - c11x2*c20.y*c12.y + c10x2*c12y2 + c10y2*c12x2 +\n            c20x2*c12y2 + c12x2*c20y2\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n            for ( var j = 0; j < xRoots.length; j++ ) {\n                var xRoot = xRoots[j];\n                \n                if ( 0 <= xRoot && xRoot <= 1 ) {\n                    for ( var k = 0; k < yRoots.length; k++ ) {\n                        if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n\n};\n\n\n/*****\n*\n*   intersectBezier2Circle\n*\n*****/\nIntersection.intersectBezier2Circle = function(p1, p2, p3, c, r) {\n    return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n};\n\n\n/*****\n*\n*   intersectBezier2Ellipse\n*\n*****/\nIntersection.intersectBezier2Ellipse = function(p1, p2, p3, ec, rx, ry) {\n    var a, b;       // temporary variables\n    var c2, c1, c0; // coefficients of quadratic\n    var result = new Intersection(\"No Intersection\");\n\n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var roots = new Polynomial(\n        ryry*c2.x*c2.x + rxrx*c2.y*c2.y,\n        2*(ryry*c2.x*c1.x + rxrx*c2.y*c1.y),\n        ryry*(2*c2.x*c0.x + c1.x*c1.x) + rxrx*(2*c2.y*c0.y+c1.y*c1.y) -\n            2*(ryry*ec.x*c2.x + rxrx*ec.y*c2.y),\n        2*(ryry*c1.x*(c0.x-ec.x) + rxrx*c1.y*(c0.y-ec.y)),\n        ryry*(c0.x*c0.x+ec.x*ec.x) + rxrx*(c0.y*c0.y + ec.y*ec.y) -\n            2*(ryry*ec.x*c0.x + rxrx*ec.y*c0.y) - rxrx*ryry\n    ).getRoots();\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 )\n            result.points.push( c2.multiply(t*t).add(c1.multiply(t).add(c0)) );\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Line\n*\n*****/\nIntersection.intersectBezier2Line = function(p1, p2, p3, a1, a2) {\n    var a, b;             // temporary variables\n    var c2, c1, c0;       // coefficients of quadratic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection(\"No Intersection\");\n    \n    a = p2.multiply(-2);\n    c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    b = p2.multiply(2);\n    c1 = a.add(b);\n\n    c0 = new Point2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n    \n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // Transform cubic coefficients to line's coordinate system and find roots\n    // of cubic\n    roots = new Polynomial(\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p4 = p1.lerp(p2, t);\n            var p5 = p2.lerp(p3, t);\n\n            var p6 = p4.lerp(p5, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p6\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p6.y && p6.y <= max.y ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p6 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p6.x && p6.x <= max.x ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p6 );\n                }\n            } else if ( p6.gte(min) && p6.lte(max) ) {\n                result.status = \"Intersection\";\n                result.appendPoint( p6 );\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Polygon\n*\n*****/\nIntersection.intersectBezier2Polygon = function(p1, p2, p3, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n        var inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier2Rectangle\n*\n*****/\nIntersection.intersectBezier2Rectangle = function(p1, p2, p3, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n    var inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n    var inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n    var inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Bezier3\n*\n*****/\nIntersection.intersectBezier3Bezier3 = function(a1, a2, a3, a4, b1, b2, b3, b4) {\n    var a, b, c, d;         // temporary variables\n    var c13, c12, c11, c10; // coefficients of cubic\n    var c23, c22, c21, c20; // coefficients of cubic\n    var result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = a1.multiply(-1);\n    b = a2.multiply(3);\n    c = a3.multiply(-3);\n    d = a.add(b.add(c.add(a4)));\n    c13 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(3);\n    b = a2.multiply(-6);\n    c = a3.multiply(3);\n    d = a.add(b.add(c));\n    c12 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(-3);\n    b = a2.multiply(3);\n    c = a.add(b);\n    c11 = new Vector2D(c.x, c.y);\n\n    c10 = new Vector2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    c21 = new Vector2D(c.x, c.y);\n\n    c20 = new Vector2D(b1.x, b1.y);\n\n    var c10x2 = c10.x*c10.x;\n    var c10x3 = c10.x*c10.x*c10.x;\n    var c10y2 = c10.y*c10.y;\n    var c10y3 = c10.y*c10.y*c10.y;\n    var c11x2 = c11.x*c11.x;\n    var c11x3 = c11.x*c11.x*c11.x;\n    var c11y2 = c11.y*c11.y;\n    var c11y3 = c11.y*c11.y*c11.y;\n    var c12x2 = c12.x*c12.x;\n    var c12x3 = c12.x*c12.x*c12.x;\n    var c12y2 = c12.y*c12.y;\n    var c12y3 = c12.y*c12.y*c12.y;\n    var c13x2 = c13.x*c13.x;\n    var c13x3 = c13.x*c13.x*c13.x;\n    var c13y2 = c13.y*c13.y;\n    var c13y3 = c13.y*c13.y*c13.y;\n    var c20x2 = c20.x*c20.x;\n    var c20x3 = c20.x*c20.x*c20.x;\n    var c20y2 = c20.y*c20.y;\n    var c20y3 = c20.y*c20.y*c20.y;\n    var c21x2 = c21.x*c21.x;\n    var c21x3 = c21.x*c21.x*c21.x;\n    var c21y2 = c21.y*c21.y;\n    var c22x2 = c22.x*c22.x;\n    var c22x3 = c22.x*c22.x*c22.x;\n    var c22y2 = c22.y*c22.y;\n    var c23x2 = c23.x*c23.x;\n    var c23x3 = c23.x*c23.x*c23.x;\n    var c23y2 = c23.y*c23.y;\n    var c23y3 = c23.y*c23.y*c23.y;\n    var poly = new Polynomial(\n        -c13x3*c23y3 + c13y3*c23x3 - 3*c13.x*c13y2*c23x2*c23.y +\n            3*c13x2*c13.y*c23.x*c23y2,\n        -6*c13.x*c22.x*c13y2*c23.x*c23.y + 6*c13x2*c13.y*c22.y*c23.x*c23.y + 3*c22.x*c13y3*c23x2 -\n            3*c13x3*c22.y*c23y2 - 3*c13.x*c13y2*c22.y*c23x2 + 3*c13x2*c22.x*c13.y*c23y2,\n        -6*c21.x*c13.x*c13y2*c23.x*c23.y - 6*c13.x*c22.x*c13y2*c22.y*c23.x + 6*c13x2*c22.x*c13.y*c22.y*c23.y +\n            3*c21.x*c13y3*c23x2 + 3*c22x2*c13y3*c23.x + 3*c21.x*c13x2*c13.y*c23y2 - 3*c13.x*c21.y*c13y2*c23x2 -\n            3*c13.x*c22x2*c13y2*c23.y + c13x2*c13.y*c23.x*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-c21.y*c23y2 -\n            2*c22y2*c23.y - c23.y*(2*c21.y*c23.y + c22y2)),\n        c11.x*c12.y*c13.x*c13.y*c23.x*c23.y - c11.y*c12.x*c13.x*c13.y*c23.x*c23.y + 6*c21.x*c22.x*c13y3*c23.x +\n            3*c11.x*c12.x*c13.x*c13.y*c23y2 + 6*c10.x*c13.x*c13y2*c23.x*c23.y - 3*c11.x*c12.x*c13y2*c23.x*c23.y -\n            3*c11.y*c12.y*c13.x*c13.y*c23x2 - 6*c10.y*c13x2*c13.y*c23.x*c23.y - 6*c20.x*c13.x*c13y2*c23.x*c23.y +\n            3*c11.y*c12.y*c13x2*c23.x*c23.y - 2*c12.x*c12y2*c13.x*c23.x*c23.y - 6*c21.x*c13.x*c22.x*c13y2*c23.y -\n            6*c21.x*c13.x*c13y2*c22.y*c23.x - 6*c13.x*c21.y*c22.x*c13y2*c23.x + 6*c21.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.y*c23.x*c23.y + c22x3*c13y3 - 3*c10.x*c13y3*c23x2 + 3*c10.y*c13x3*c23y2 +\n            3*c20.x*c13y3*c23x2 + c12y3*c13.x*c23x2 - c12x3*c13.y*c23y2 - 3*c10.x*c13x2*c13.y*c23y2 +\n            3*c10.y*c13.x*c13y2*c23x2 - 2*c11.x*c12.y*c13x2*c23y2 + c11.x*c12.y*c13y2*c23x2 - c11.y*c12.x*c13x2*c23y2 +\n            2*c11.y*c12.x*c13y2*c23x2 + 3*c20.x*c13x2*c13.y*c23y2 - c12.x*c12y2*c13.y*c23x2 -\n            3*c20.y*c13.x*c13y2*c23x2 + c12x2*c12.y*c13.x*c23y2 - 3*c13.x*c22x2*c13y2*c22.y +\n            c13x2*c13.y*c23.x*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c22.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c21.y*c22.y*c23.y - c20.y*c23y2 - c22.y*(2*c21.y*c23.y + c22y2) - c23.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        6*c11.x*c12.x*c13.x*c13.y*c22.y*c23.y + c11.x*c12.y*c13.x*c22.x*c13.y*c23.y + c11.x*c12.y*c13.x*c13.y*c22.y*c23.x -\n            c11.y*c12.x*c13.x*c22.x*c13.y*c23.y - c11.y*c12.x*c13.x*c13.y*c22.y*c23.x - 6*c11.y*c12.y*c13.x*c22.x*c13.y*c23.x -\n            6*c10.x*c22.x*c13y3*c23.x + 6*c20.x*c22.x*c13y3*c23.x + 6*c10.y*c13x3*c22.y*c23.y + 2*c12y3*c13.x*c22.x*c23.x -\n            2*c12x3*c13.y*c22.y*c23.y + 6*c10.x*c13.x*c22.x*c13y2*c23.y + 6*c10.x*c13.x*c13y2*c22.y*c23.x +\n            6*c10.y*c13.x*c22.x*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c23.y - 3*c11.x*c12.x*c13y2*c22.y*c23.x +\n            2*c11.x*c12.y*c22.x*c13y2*c23.x + 4*c11.y*c12.x*c22.x*c13y2*c23.x - 6*c10.x*c13x2*c13.y*c22.y*c23.y -\n            6*c10.y*c13x2*c22.x*c13.y*c23.y - 6*c10.y*c13x2*c13.y*c22.y*c23.x - 4*c11.x*c12.y*c13x2*c22.y*c23.y -\n            6*c20.x*c13.x*c22.x*c13y2*c23.y - 6*c20.x*c13.x*c13y2*c22.y*c23.x - 2*c11.y*c12.x*c13x2*c22.y*c23.y +\n            3*c11.y*c12.y*c13x2*c22.x*c23.y + 3*c11.y*c12.y*c13x2*c22.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c23.y -\n            2*c12.x*c12y2*c13.x*c22.y*c23.x - 2*c12.x*c12y2*c22.x*c13.y*c23.x - 6*c20.y*c13.x*c22.x*c13y2*c23.x -\n            6*c21.x*c13.x*c21.y*c13y2*c23.x - 6*c21.x*c13.x*c22.x*c13y2*c22.y + 6*c20.x*c13x2*c13.y*c22.y*c23.y +\n            2*c12x2*c12.y*c13.x*c22.y*c23.y + 2*c12x2*c12.y*c22.x*c13.y*c23.y + 2*c12x2*c12.y*c13.y*c22.y*c23.x +\n            3*c21.x*c22x2*c13y3 + 3*c21x2*c13y3*c23.x - 3*c13.x*c21.y*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c23.y +\n            c13x2*c22.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c13x2*c13.y*c23.x*(6*c20.y*c22.y + 3*c21y2) +\n            c21.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) + c13x3*(-2*c20.y*c22.y*c23.y - c23.y*(2*c20.y*c22.y + c21y2) -\n            c21.y*(2*c21.y*c23.y + c22y2) - c22.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        c11.x*c21.x*c12.y*c13.x*c13.y*c23.y + c11.x*c12.y*c13.x*c21.y*c13.y*c23.x + c11.x*c12.y*c13.x*c22.x*c13.y*c22.y -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c23.y - c11.y*c12.x*c13.x*c21.y*c13.y*c23.x - c11.y*c12.x*c13.x*c22.x*c13.y*c22.y -\n            6*c11.y*c21.x*c12.y*c13.x*c13.y*c23.x - 6*c10.x*c21.x*c13y3*c23.x + 6*c20.x*c21.x*c13y3*c23.x +\n            2*c21.x*c12y3*c13.x*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c23.y + 6*c10.x*c13.x*c21.y*c13y2*c23.x +\n            6*c10.x*c13.x*c22.x*c13y2*c22.y + 6*c10.y*c21.x*c13.x*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c23.y -\n            3*c11.x*c12.x*c21.y*c13y2*c23.x - 3*c11.x*c12.x*c22.x*c13y2*c22.y + 2*c11.x*c21.x*c12.y*c13y2*c23.x +\n            4*c11.y*c12.x*c21.x*c13y2*c23.x - 6*c10.y*c21.x*c13x2*c13.y*c23.y - 6*c10.y*c13x2*c21.y*c13.y*c23.x -\n            6*c10.y*c13x2*c22.x*c13.y*c22.y - 6*c20.x*c21.x*c13.x*c13y2*c23.y - 6*c20.x*c13.x*c21.y*c13y2*c23.x -\n            6*c20.x*c13.x*c22.x*c13y2*c22.y + 3*c11.y*c21.x*c12.y*c13x2*c23.y - 3*c11.y*c12.y*c13.x*c22x2*c13.y +\n            3*c11.y*c12.y*c13x2*c21.y*c23.x + 3*c11.y*c12.y*c13x2*c22.x*c22.y - 2*c12.x*c21.x*c12y2*c13.x*c23.y -\n            2*c12.x*c21.x*c12y2*c13.y*c23.x - 2*c12.x*c12y2*c13.x*c21.y*c23.x - 2*c12.x*c12y2*c13.x*c22.x*c22.y -\n            6*c20.y*c21.x*c13.x*c13y2*c23.x - 6*c21.x*c13.x*c21.y*c22.x*c13y2 + 6*c20.y*c13x2*c21.y*c13.y*c23.x +\n            2*c12x2*c21.x*c12.y*c13.y*c23.y + 2*c12x2*c12.y*c21.y*c13.y*c23.x + 2*c12x2*c12.y*c22.x*c13.y*c22.y -\n            3*c10.x*c22x2*c13y3 + 3*c20.x*c22x2*c13y3 + 3*c21x2*c22.x*c13y3 + c12y3*c13.x*c22x2 +\n            3*c10.y*c13.x*c22x2*c13y2 + c11.x*c12.y*c22x2*c13y2 + 2*c11.y*c12.x*c22x2*c13y2 -\n            c12.x*c12y2*c22x2*c13.y - 3*c20.y*c13.x*c22x2*c13y2 - 3*c21x2*c13.x*c13y2*c22.y +\n            c12x2*c12.y*c13.x*(2*c21.y*c23.y + c22y2) + c11.x*c12.x*c13.x*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c21.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c21.y*c23.y - c22y2) +\n            c10.y*c13x3*(6*c21.y*c23.y + 3*c22y2) + c11.y*c12.x*c13x2*(-2*c21.y*c23.y - c22y2) +\n            c11.x*c12.y*c13x2*(-4*c21.y*c23.y - 2*c22y2) + c10.x*c13x2*c13.y*(-6*c21.y*c23.y - 3*c22y2) +\n            c13x2*c22.x*c13.y*(6*c20.y*c22.y + 3*c21y2) + c20.x*c13x2*c13.y*(6*c21.y*c23.y + 3*c22y2) +\n            c13x3*(-2*c20.y*c21.y*c23.y - c22.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c21.y*c23.y + c22y2) -\n            c21.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c23.y + c10.x*c11.y*c12.x*c13.x*c13.y*c23.y + 6*c10.x*c11.y*c12.y*c13.x*c13.y*c23.x -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c23.y - c10.y*c11.x*c12.y*c13.x*c13.y*c23.x + c10.y*c11.y*c12.x*c13.x*c13.y*c23.x +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c23.y - c11.x*c11.y*c12.x*c12.y*c13.y*c23.x + c11.x*c20.x*c12.y*c13.x*c13.y*c23.y +\n            c11.x*c20.y*c12.y*c13.x*c13.y*c23.x + c11.x*c21.x*c12.y*c13.x*c13.y*c22.y + c11.x*c12.y*c13.x*c21.y*c22.x*c13.y -\n            c20.x*c11.y*c12.x*c13.x*c13.y*c23.y - 6*c20.x*c11.y*c12.y*c13.x*c13.y*c23.x - c11.y*c12.x*c20.y*c13.x*c13.y*c23.x -\n            c11.y*c12.x*c21.x*c13.x*c13.y*c22.y - c11.y*c12.x*c13.x*c21.y*c22.x*c13.y - 6*c11.y*c21.x*c12.y*c13.x*c22.x*c13.y -\n            6*c10.x*c20.x*c13y3*c23.x - 6*c10.x*c21.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c23.x + 6*c20.x*c21.x*c22.x*c13y3 +\n            2*c20.x*c12y3*c13.x*c23.x + 2*c21.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c23.y - 6*c10.x*c10.y*c13.x*c13y2*c23.x +\n            3*c10.x*c11.x*c12.x*c13y2*c23.y - 2*c10.x*c11.x*c12.y*c13y2*c23.x - 4*c10.x*c11.y*c12.x*c13y2*c23.x +\n            3*c10.y*c11.x*c12.x*c13y2*c23.x + 6*c10.x*c10.y*c13x2*c13.y*c23.y + 6*c10.x*c20.x*c13.x*c13y2*c23.y -\n            3*c10.x*c11.y*c12.y*c13x2*c23.y + 2*c10.x*c12.x*c12y2*c13.x*c23.y + 2*c10.x*c12.x*c12y2*c13.y*c23.x +\n            6*c10.x*c20.y*c13.x*c13y2*c23.x + 6*c10.x*c21.x*c13.x*c13y2*c22.y + 6*c10.x*c13.x*c21.y*c22.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c23.y + 6*c10.y*c20.x*c13.x*c13y2*c23.x + 2*c10.y*c11.y*c12.x*c13x2*c23.y -\n            3*c10.y*c11.y*c12.y*c13x2*c23.x + 2*c10.y*c12.x*c12y2*c13.x*c23.x + 6*c10.y*c21.x*c13.x*c22.x*c13y2 -\n            3*c11.x*c20.x*c12.x*c13y2*c23.y + 2*c11.x*c20.x*c12.y*c13y2*c23.x + c11.x*c11.y*c12y2*c13.x*c23.x -\n            3*c11.x*c12.x*c20.y*c13y2*c23.x - 3*c11.x*c12.x*c21.x*c13y2*c22.y - 3*c11.x*c12.x*c21.y*c22.x*c13y2 +\n            2*c11.x*c21.x*c12.y*c22.x*c13y2 + 4*c20.x*c11.y*c12.x*c13y2*c23.x + 4*c11.y*c12.x*c21.x*c22.x*c13y2 -\n            2*c10.x*c12x2*c12.y*c13.y*c23.y - 6*c10.y*c20.x*c13x2*c13.y*c23.y - 6*c10.y*c20.y*c13x2*c13.y*c23.x -\n            6*c10.y*c21.x*c13x2*c13.y*c22.y - 2*c10.y*c12x2*c12.y*c13.x*c23.y - 2*c10.y*c12x2*c12.y*c13.y*c23.x -\n            6*c10.y*c13x2*c21.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c23.y - 2*c11.x*c11y2*c13.x*c13.y*c23.x +\n            3*c20.x*c11.y*c12.y*c13x2*c23.y - 2*c20.x*c12.x*c12y2*c13.x*c23.y - 2*c20.x*c12.x*c12y2*c13.y*c23.x -\n            6*c20.x*c20.y*c13.x*c13y2*c23.x - 6*c20.x*c21.x*c13.x*c13y2*c22.y - 6*c20.x*c13.x*c21.y*c22.x*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c23.x + 3*c11.y*c21.x*c12.y*c13x2*c22.y + 3*c11.y*c12.y*c13x2*c21.y*c22.x -\n            2*c12.x*c20.y*c12y2*c13.x*c23.x - 2*c12.x*c21.x*c12y2*c13.x*c22.y - 2*c12.x*c21.x*c12y2*c22.x*c13.y -\n            2*c12.x*c12y2*c13.x*c21.y*c22.x - 6*c20.y*c21.x*c13.x*c22.x*c13y2 - c11y2*c12.x*c12.y*c13.x*c23.x +\n            2*c20.x*c12x2*c12.y*c13.y*c23.y + 6*c20.y*c13x2*c21.y*c22.x*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c23.y +\n            c11x2*c12.x*c12.y*c13.y*c23.y + 2*c12x2*c20.y*c12.y*c13.y*c23.x + 2*c12x2*c21.x*c12.y*c13.y*c22.y +\n            2*c12x2*c12.y*c21.y*c22.x*c13.y + c21x3*c13y3 + 3*c10x2*c13y3*c23.x - 3*c10y2*c13x3*c23.y +\n            3*c20x2*c13y3*c23.x + c11y3*c13x2*c23.x - c11x3*c13y2*c23.y - c11.x*c11y2*c13x2*c23.y +\n            c11x2*c11.y*c13y2*c23.x - 3*c10x2*c13.x*c13y2*c23.y + 3*c10y2*c13x2*c13.y*c23.x - c11x2*c12y2*c13.x*c23.y +\n            c11y2*c12x2*c13.y*c23.x - 3*c21x2*c13.x*c21.y*c13y2 - 3*c20x2*c13.x*c13y2*c23.y + 3*c20y2*c13x2*c13.y*c23.x +\n            c11.x*c12.x*c13.x*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) + c12x3*c13.y*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c10.y*c13x3*(6*c20.y*c23.y + 6*c21.y*c22.y) + c11.y*c12.x*c13x2*(-2*c20.y*c23.y - 2*c21.y*c22.y) +\n            c12x2*c12.y*c13.x*(2*c20.y*c23.y + 2*c21.y*c22.y) + c11.x*c12.y*c13x2*(-4*c20.y*c23.y - 4*c21.y*c22.y) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c23.y - 6*c21.y*c22.y) + c20.x*c13x2*c13.y*(6*c20.y*c23.y + 6*c21.y*c22.y) +\n            c21.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) + c13x3*(-2*c20.y*c21.y*c22.y - c20y2*c23.y -\n            c21.y*(2*c20.y*c22.y + c21y2) - c20.y*(2*c20.y*c23.y + 2*c21.y*c22.y)),\n        -c10.x*c11.x*c12.y*c13.x*c13.y*c22.y + c10.x*c11.y*c12.x*c13.x*c13.y*c22.y + 6*c10.x*c11.y*c12.y*c13.x*c22.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c13.y*c22.y - c10.y*c11.x*c12.y*c13.x*c22.x*c13.y + c10.y*c11.y*c12.x*c13.x*c22.x*c13.y +\n            c11.x*c11.y*c12.x*c12.y*c13.x*c22.y - c11.x*c11.y*c12.x*c12.y*c22.x*c13.y + c11.x*c20.x*c12.y*c13.x*c13.y*c22.y +\n            c11.x*c20.y*c12.y*c13.x*c22.x*c13.y + c11.x*c21.x*c12.y*c13.x*c21.y*c13.y - c20.x*c11.y*c12.x*c13.x*c13.y*c22.y -\n            6*c20.x*c11.y*c12.y*c13.x*c22.x*c13.y - c11.y*c12.x*c20.y*c13.x*c22.x*c13.y - c11.y*c12.x*c21.x*c13.x*c21.y*c13.y -\n            6*c10.x*c20.x*c22.x*c13y3 - 2*c10.x*c12y3*c13.x*c22.x + 2*c20.x*c12y3*c13.x*c22.x + 2*c10.y*c12x3*c13.y*c22.y -\n            6*c10.x*c10.y*c13.x*c22.x*c13y2 + 3*c10.x*c11.x*c12.x*c13y2*c22.y - 2*c10.x*c11.x*c12.y*c22.x*c13y2 -\n            4*c10.x*c11.y*c12.x*c22.x*c13y2 + 3*c10.y*c11.x*c12.x*c22.x*c13y2 + 6*c10.x*c10.y*c13x2*c13.y*c22.y +\n            6*c10.x*c20.x*c13.x*c13y2*c22.y - 3*c10.x*c11.y*c12.y*c13x2*c22.y + 2*c10.x*c12.x*c12y2*c13.x*c22.y +\n            2*c10.x*c12.x*c12y2*c22.x*c13.y + 6*c10.x*c20.y*c13.x*c22.x*c13y2 + 6*c10.x*c21.x*c13.x*c21.y*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c22.y + 6*c10.y*c20.x*c13.x*c22.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c22.y -\n            3*c10.y*c11.y*c12.y*c13x2*c22.x + 2*c10.y*c12.x*c12y2*c13.x*c22.x - 3*c11.x*c20.x*c12.x*c13y2*c22.y +\n            2*c11.x*c20.x*c12.y*c22.x*c13y2 + c11.x*c11.y*c12y2*c13.x*c22.x - 3*c11.x*c12.x*c20.y*c22.x*c13y2 -\n            3*c11.x*c12.x*c21.x*c21.y*c13y2 + 4*c20.x*c11.y*c12.x*c22.x*c13y2 - 2*c10.x*c12x2*c12.y*c13.y*c22.y -\n            6*c10.y*c20.x*c13x2*c13.y*c22.y - 6*c10.y*c20.y*c13x2*c22.x*c13.y - 6*c10.y*c21.x*c13x2*c21.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c22.y - 2*c10.y*c12x2*c12.y*c22.x*c13.y - c11.x*c11.y*c12x2*c13.y*c22.y -\n            2*c11.x*c11y2*c13.x*c22.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c22.y - 2*c20.x*c12.x*c12y2*c13.x*c22.y -\n            2*c20.x*c12.x*c12y2*c22.x*c13.y - 6*c20.x*c20.y*c13.x*c22.x*c13y2 - 6*c20.x*c21.x*c13.x*c21.y*c13y2 +\n            3*c11.y*c20.y*c12.y*c13x2*c22.x + 3*c11.y*c21.x*c12.y*c13x2*c21.y - 2*c12.x*c20.y*c12y2*c13.x*c22.x -\n            2*c12.x*c21.x*c12y2*c13.x*c21.y - c11y2*c12.x*c12.y*c13.x*c22.x + 2*c20.x*c12x2*c12.y*c13.y*c22.y -\n            3*c11.y*c21x2*c12.y*c13.x*c13.y + 6*c20.y*c21.x*c13x2*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c13.y*c22.y +\n            c11x2*c12.x*c12.y*c13.y*c22.y + 2*c12x2*c20.y*c12.y*c22.x*c13.y + 2*c12x2*c21.x*c12.y*c21.y*c13.y -\n            3*c10.x*c21x2*c13y3 + 3*c20.x*c21x2*c13y3 + 3*c10x2*c22.x*c13y3 - 3*c10y2*c13x3*c22.y + 3*c20x2*c22.x*c13y3 +\n            c21x2*c12y3*c13.x + c11y3*c13x2*c22.x - c11x3*c13y2*c22.y + 3*c10.y*c21x2*c13.x*c13y2 -\n            c11.x*c11y2*c13x2*c22.y + c11.x*c21x2*c12.y*c13y2 + 2*c11.y*c12.x*c21x2*c13y2 + c11x2*c11.y*c22.x*c13y2 -\n            c12.x*c21x2*c12y2*c13.y - 3*c20.y*c21x2*c13.x*c13y2 - 3*c10x2*c13.x*c13y2*c22.y + 3*c10y2*c13x2*c22.x*c13.y -\n            c11x2*c12y2*c13.x*c22.y + c11y2*c12x2*c22.x*c13.y - 3*c20x2*c13.x*c13y2*c22.y + 3*c20y2*c13x2*c22.x*c13.y +\n            c12x2*c12.y*c13.x*(2*c20.y*c22.y + c21y2) + c11.x*c12.x*c13.x*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c12x3*c13.y*(-2*c20.y*c22.y - c21y2) + c10.y*c13x3*(6*c20.y*c22.y + 3*c21y2) +\n            c11.y*c12.x*c13x2*(-2*c20.y*c22.y - c21y2) + c11.x*c12.y*c13x2*(-4*c20.y*c22.y - 2*c21y2) +\n            c10.x*c13x2*c13.y*(-6*c20.y*c22.y - 3*c21y2) + c20.x*c13x2*c13.y*(6*c20.y*c22.y + 3*c21y2) +\n            c13x3*(-2*c20.y*c21y2 - c20y2*c22.y - c20.y*(2*c20.y*c22.y + c21y2)),\n        -c10.x*c11.x*c12.y*c13.x*c21.y*c13.y + c10.x*c11.y*c12.x*c13.x*c21.y*c13.y + 6*c10.x*c11.y*c21.x*c12.y*c13.x*c13.y -\n            6*c10.y*c11.x*c12.x*c13.x*c21.y*c13.y - c10.y*c11.x*c21.x*c12.y*c13.x*c13.y + c10.y*c11.y*c12.x*c21.x*c13.x*c13.y -\n            c11.x*c11.y*c12.x*c21.x*c12.y*c13.y + c11.x*c11.y*c12.x*c12.y*c13.x*c21.y + c11.x*c20.x*c12.y*c13.x*c21.y*c13.y +\n            6*c11.x*c12.x*c20.y*c13.x*c21.y*c13.y + c11.x*c20.y*c21.x*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c13.x*c21.y*c13.y -\n            6*c20.x*c11.y*c21.x*c12.y*c13.x*c13.y - c11.y*c12.x*c20.y*c21.x*c13.x*c13.y - 6*c10.x*c20.x*c21.x*c13y3 -\n            2*c10.x*c21.x*c12y3*c13.x + 6*c10.y*c20.y*c13x3*c21.y + 2*c20.x*c21.x*c12y3*c13.x + 2*c10.y*c12x3*c21.y*c13.y -\n            2*c12x3*c20.y*c21.y*c13.y - 6*c10.x*c10.y*c21.x*c13.x*c13y2 + 3*c10.x*c11.x*c12.x*c21.y*c13y2 -\n            2*c10.x*c11.x*c21.x*c12.y*c13y2 - 4*c10.x*c11.y*c12.x*c21.x*c13y2 + 3*c10.y*c11.x*c12.x*c21.x*c13y2 +\n            6*c10.x*c10.y*c13x2*c21.y*c13.y + 6*c10.x*c20.x*c13.x*c21.y*c13y2 - 3*c10.x*c11.y*c12.y*c13x2*c21.y +\n            2*c10.x*c12.x*c21.x*c12y2*c13.y + 2*c10.x*c12.x*c12y2*c13.x*c21.y + 6*c10.x*c20.y*c21.x*c13.x*c13y2 +\n            4*c10.y*c11.x*c12.y*c13x2*c21.y + 6*c10.y*c20.x*c21.x*c13.x*c13y2 + 2*c10.y*c11.y*c12.x*c13x2*c21.y -\n            3*c10.y*c11.y*c21.x*c12.y*c13x2 + 2*c10.y*c12.x*c21.x*c12y2*c13.x - 3*c11.x*c20.x*c12.x*c21.y*c13y2 +\n            2*c11.x*c20.x*c21.x*c12.y*c13y2 + c11.x*c11.y*c21.x*c12y2*c13.x - 3*c11.x*c12.x*c20.y*c21.x*c13y2 +\n            4*c20.x*c11.y*c12.x*c21.x*c13y2 - 6*c10.x*c20.y*c13x2*c21.y*c13.y - 2*c10.x*c12x2*c12.y*c21.y*c13.y -\n            6*c10.y*c20.x*c13x2*c21.y*c13.y - 6*c10.y*c20.y*c21.x*c13x2*c13.y - 2*c10.y*c12x2*c21.x*c12.y*c13.y -\n            2*c10.y*c12x2*c12.y*c13.x*c21.y - c11.x*c11.y*c12x2*c21.y*c13.y - 4*c11.x*c20.y*c12.y*c13x2*c21.y -\n            2*c11.x*c11y2*c21.x*c13.x*c13.y + 3*c20.x*c11.y*c12.y*c13x2*c21.y - 2*c20.x*c12.x*c21.x*c12y2*c13.y -\n            2*c20.x*c12.x*c12y2*c13.x*c21.y - 6*c20.x*c20.y*c21.x*c13.x*c13y2 - 2*c11.y*c12.x*c20.y*c13x2*c21.y +\n            3*c11.y*c20.y*c21.x*c12.y*c13x2 - 2*c12.x*c20.y*c21.x*c12y2*c13.x - c11y2*c12.x*c21.x*c12.y*c13.x +\n            6*c20.x*c20.y*c13x2*c21.y*c13.y + 2*c20.x*c12x2*c12.y*c21.y*c13.y + 2*c11x2*c11.y*c13.x*c21.y*c13.y +\n            c11x2*c12.x*c12.y*c21.y*c13.y + 2*c12x2*c20.y*c21.x*c12.y*c13.y + 2*c12x2*c20.y*c12.y*c13.x*c21.y +\n            3*c10x2*c21.x*c13y3 - 3*c10y2*c13x3*c21.y + 3*c20x2*c21.x*c13y3 + c11y3*c21.x*c13x2 - c11x3*c21.y*c13y2 -\n            3*c20y2*c13x3*c21.y - c11.x*c11y2*c13x2*c21.y + c11x2*c11.y*c21.x*c13y2 - 3*c10x2*c13.x*c21.y*c13y2 +\n            3*c10y2*c21.x*c13x2*c13.y - c11x2*c12y2*c13.x*c21.y + c11y2*c12x2*c21.x*c13.y - 3*c20x2*c13.x*c21.y*c13y2 +\n            3*c20y2*c21.x*c13x2*c13.y,\n        c10.x*c10.y*c11.x*c12.y*c13.x*c13.y - c10.x*c10.y*c11.y*c12.x*c13.x*c13.y + c10.x*c11.x*c11.y*c12.x*c12.y*c13.y -\n            c10.y*c11.x*c11.y*c12.x*c12.y*c13.x - c10.x*c11.x*c20.y*c12.y*c13.x*c13.y + 6*c10.x*c20.x*c11.y*c12.y*c13.x*c13.y +\n            c10.x*c11.y*c12.x*c20.y*c13.x*c13.y - c10.y*c11.x*c20.x*c12.y*c13.x*c13.y - 6*c10.y*c11.x*c12.x*c20.y*c13.x*c13.y +\n            c10.y*c20.x*c11.y*c12.x*c13.x*c13.y - c11.x*c20.x*c11.y*c12.x*c12.y*c13.y + c11.x*c11.y*c12.x*c20.y*c12.y*c13.x +\n            c11.x*c20.x*c20.y*c12.y*c13.x*c13.y - c20.x*c11.y*c12.x*c20.y*c13.x*c13.y - 2*c10.x*c20.x*c12y3*c13.x +\n            2*c10.y*c12x3*c20.y*c13.y - 3*c10.x*c10.y*c11.x*c12.x*c13y2 - 6*c10.x*c10.y*c20.x*c13.x*c13y2 +\n            3*c10.x*c10.y*c11.y*c12.y*c13x2 - 2*c10.x*c10.y*c12.x*c12y2*c13.x - 2*c10.x*c11.x*c20.x*c12.y*c13y2 -\n            c10.x*c11.x*c11.y*c12y2*c13.x + 3*c10.x*c11.x*c12.x*c20.y*c13y2 - 4*c10.x*c20.x*c11.y*c12.x*c13y2 +\n            3*c10.y*c11.x*c20.x*c12.x*c13y2 + 6*c10.x*c10.y*c20.y*c13x2*c13.y + 2*c10.x*c10.y*c12x2*c12.y*c13.y +\n            2*c10.x*c11.x*c11y2*c13.x*c13.y + 2*c10.x*c20.x*c12.x*c12y2*c13.y + 6*c10.x*c20.x*c20.y*c13.x*c13y2 -\n            3*c10.x*c11.y*c20.y*c12.y*c13x2 + 2*c10.x*c12.x*c20.y*c12y2*c13.x + c10.x*c11y2*c12.x*c12.y*c13.x +\n            c10.y*c11.x*c11.y*c12x2*c13.y + 4*c10.y*c11.x*c20.y*c12.y*c13x2 - 3*c10.y*c20.x*c11.y*c12.y*c13x2 +\n            2*c10.y*c20.x*c12.x*c12y2*c13.x + 2*c10.y*c11.y*c12.x*c20.y*c13x2 + c11.x*c20.x*c11.y*c12y2*c13.x -\n            3*c11.x*c20.x*c12.x*c20.y*c13y2 - 2*c10.x*c12x2*c20.y*c12.y*c13.y - 6*c10.y*c20.x*c20.y*c13x2*c13.y -\n            2*c10.y*c20.x*c12x2*c12.y*c13.y - 2*c10.y*c11x2*c11.y*c13.x*c13.y - c10.y*c11x2*c12.x*c12.y*c13.y -\n            2*c10.y*c12x2*c20.y*c12.y*c13.x - 2*c11.x*c20.x*c11y2*c13.x*c13.y - c11.x*c11.y*c12x2*c20.y*c13.y +\n            3*c20.x*c11.y*c20.y*c12.y*c13x2 - 2*c20.x*c12.x*c20.y*c12y2*c13.x - c20.x*c11y2*c12.x*c12.y*c13.x +\n            3*c10y2*c11.x*c12.x*c13.x*c13.y + 3*c11.x*c12.x*c20y2*c13.x*c13.y + 2*c20.x*c12x2*c20.y*c12.y*c13.y -\n            3*c10x2*c11.y*c12.y*c13.x*c13.y + 2*c11x2*c11.y*c20.y*c13.x*c13.y + c11x2*c12.x*c20.y*c12.y*c13.y -\n            3*c20x2*c11.y*c12.y*c13.x*c13.y - c10x3*c13y3 + c10y3*c13x3 + c20x3*c13y3 - c20y3*c13x3 -\n            3*c10.x*c20x2*c13y3 - c10.x*c11y3*c13x2 + 3*c10x2*c20.x*c13y3 + c10.y*c11x3*c13y2 +\n            3*c10.y*c20y2*c13x3 + c20.x*c11y3*c13x2 + c10x2*c12y3*c13.x - 3*c10y2*c20.y*c13x3 - c10y2*c12x3*c13.y +\n            c20x2*c12y3*c13.x - c11x3*c20.y*c13y2 - c12x3*c20y2*c13.y - c10.x*c11x2*c11.y*c13y2 +\n            c10.y*c11.x*c11y2*c13x2 - 3*c10.x*c10y2*c13x2*c13.y - c10.x*c11y2*c12x2*c13.y + c10.y*c11x2*c12y2*c13.x -\n            c11.x*c11y2*c20.y*c13x2 + 3*c10x2*c10.y*c13.x*c13y2 + c10x2*c11.x*c12.y*c13y2 +\n            2*c10x2*c11.y*c12.x*c13y2 - 2*c10y2*c11.x*c12.y*c13x2 - c10y2*c11.y*c12.x*c13x2 + c11x2*c20.x*c11.y*c13y2 -\n            3*c10.x*c20y2*c13x2*c13.y + 3*c10.y*c20x2*c13.x*c13y2 + c11.x*c20x2*c12.y*c13y2 - 2*c11.x*c20y2*c12.y*c13x2 +\n            c20.x*c11y2*c12x2*c13.y - c11.y*c12.x*c20y2*c13x2 - c10x2*c12.x*c12y2*c13.y - 3*c10x2*c20.y*c13.x*c13y2 +\n            3*c10y2*c20.x*c13x2*c13.y + c10y2*c12x2*c12.y*c13.x - c11x2*c20.y*c12y2*c13.x + 2*c20x2*c11.y*c12.x*c13y2 +\n            3*c20.x*c20y2*c13x2*c13.y - c20x2*c12.x*c12y2*c13.y - 3*c20x2*c20.y*c13.x*c13y2 + c12x2*c20y2*c12.y*c13.x\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var s = roots[i];\n        var xRoots = new Polynomial(\n            c13.x,\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        var yRoots = new Polynomial(\n            c13.y,\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if ( xRoots.length > 0 && yRoots.length > 0 ) {\n            var TOLERANCE = 1e-4;\n\n            checkRoots:\n            for ( var j = 0; j < xRoots.length; j++ ) {\n                var xRoot = xRoots[j];\n                \n                if ( 0 <= xRoot && xRoot <= 1 ) {\n                    for ( var k = 0; k < yRoots.length; k++ ) {\n                        if ( Math.abs( xRoot - yRoots[k] ) < TOLERANCE ) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Circle\n*\n*****/\nIntersection.intersectBezier3Circle = function(p1, p2, p3, p4, c, r) {\n    return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n};\n\n\n/*****\n*\n*   intersectBezier3Ellipse\n*\n*****/\nIntersection.intersectBezier3Ellipse = function(p1, p2, p3, p4, ec, rx, ry) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n\n    var rxrx  = rx*rx;\n    var ryry  = ry*ry;\n    var poly = new Polynomial(\n        c3.x*c3.x*ryry + c3.y*c3.y*rxrx,\n        2*(c3.x*c2.x*ryry + c3.y*c2.y*rxrx),\n        2*(c3.x*c1.x*ryry + c3.y*c1.y*rxrx) + c2.x*c2.x*ryry + c2.y*c2.y*rxrx,\n        2*c3.x*ryry*(c0.x - ec.x) + 2*c3.y*rxrx*(c0.y - ec.y) +\n            2*(c2.x*c1.x*ryry + c2.y*c1.y*rxrx),\n        2*c2.x*ryry*(c0.x - ec.x) + 2*c2.y*rxrx*(c0.y - ec.y) +\n            c1.x*c1.x*ryry + c1.y*c1.y*rxrx,\n        2*c1.x*ryry*(c0.x - ec.x) + 2*c1.y*rxrx*(c0.y - ec.y),\n        c0.x*c0.x*ryry - 2*c0.y*ec.y*rxrx - 2*c0.x*ec.x*ryry +\n            c0.y*c0.y*rxrx + ec.x*ec.x*ryry + ec.y*ec.y*rxrx - rxrx*ryry\n    );\n    var roots = poly.getRootsInInterval(0,1);\n\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        result.points.push(\n            c3.multiply(t*t*t).add(c2.multiply(t*t).add(c1.multiply(t).add(c0)))\n        );\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Line\n*\n*   Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n*   sketch of the algorithm used here.  Without his help, I'm not sure when I\n*   would have figured out this intersection problem.\n*\n*****/\nIntersection.intersectBezier3Line = function(p1, p2, p3, p4, a1, a2) {\n    var a, b, c, d;       // temporary variables\n    var c3, c2, c1, c0;   // coefficients of cubic\n    var cl;               // c coefficient for normal form of line\n    var n;                // normal for normal form of line\n    var min = a1.min(a2); // used to determine if point is on line segment\n    var max = a1.max(a2); // used to determine if point is on line segment\n    var result = new Intersection(\"No Intersection\");\n    \n    // Start with Bezier using Bernstein polynomials for weighting functions:\n    //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n    //\n    // Expand and collect terms to form linear combinations of original Bezier\n    // controls.  This ends up with a vector cubic in t:\n    //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n    //             /\\                  /\\                /\\       /\\\n    //             ||                  ||                ||       ||\n    //             c3                  c2                c1       c0\n    \n    // Calculate the coefficients\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    c1 = new Vector2D(c.x, c.y);\n\n    c0 = new Vector2D(p1.x, p1.y);\n    \n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n    \n    // Determine new c coefficient\n    cl = a1.x*a2.y - a2.x*a1.y;\n\n    // ?Rotate each cubic coefficient using line for new coordinate system?\n    // Find roots of rotated cubic\n    roots = new Polynomial(\n        n.dot(c3),\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for ( var i = 0; i < roots.length; i++ ) {\n        var t = roots[i];\n\n        if ( 0 <= t && t <= 1 ) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            var p5 = p1.lerp(p2, t);\n            var p6 = p2.lerp(p3, t);\n            var p7 = p3.lerp(p4, t);\n\n            var p8 = p5.lerp(p6, t);\n            var p9 = p6.lerp(p7, t);\n\n            var p10 = p8.lerp(p9, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p10\n            if ( a1.x == a2.x ) {\n                if ( min.y <= p10.y && p10.y <= max.y ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p10 );\n                }\n            } else if ( a1.y == a2.y ) {\n                if ( min.x <= p10.x && p10.x <= max.x ) {\n                    result.status = \"Intersection\";\n                    result.appendPoint( p10 );\n                }\n            } else if ( p10.gte(min) && p10.lte(max) ) {\n                result.status = \"Intersection\";\n                result.appendPoint( p10 );\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Polygon\n*\n*****/\nIntersection.intersectBezier3Polygon = function(p1, p2, p3, p4, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n        var inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectBezier3Rectangle\n*\n*****/\nIntersection.intersectBezier3Rectangle = function(p1, p2, p3, p4, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n    var inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n    var inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n    var inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleCircle\n*\n*****/\nIntersection.intersectCircleCircle = function(c1, r1, c2, r2) {\n    var result;\n    \n    // Determine minimum and maximum radii where circles can intersect\n    var r_max = r1 + r2;\n    var r_min = Math.abs(r1 - r2);\n    \n    // Determine actual distance between circle circles\n    var c_dist = c1.distanceFrom( c2 );\n\n    if ( c_dist > r_max ) {\n        result = new Intersection(\"Outside\");\n    } else if ( c_dist < r_min ) {\n        result = new Intersection(\"Inside\");\n    } else {\n        result = new Intersection(\"Intersection\");\n\n        var a = (r1*r1 - r2*r2 + c_dist*c_dist) / ( 2*c_dist );\n        var h = Math.sqrt(r1*r1 - a*a);\n        var p = c1.lerp(c2, a/c_dist);\n        var b = h / c_dist;\n\n        result.points.push(\n            new Point2D(\n                p.x - b * (c2.y - c1.y),\n                p.y + b * (c2.x - c1.x)\n            )\n        );\n        result.points.push(\n            new Point2D(\n                p.x + b * (c2.y - c1.y),\n                p.y - b * (c2.x - c1.x)\n            )\n        );\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleEllipse\n*\n*****/\nIntersection.intersectCircleEllipse = function(cc, r, ec, rx, ry) {\n    return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n};\n\n\n/*****\n*\n*   intersectCircleLine\n*\n*****/\nIntersection.intersectCircleLine = function(c, r, a1, a2) {\n    var result;\n    var a  = (a2.x - a1.x) * (a2.x - a1.x) +\n             (a2.y - a1.y) * (a2.y - a1.y);\n    var b  = 2 * ( (a2.x - a1.x) * (a1.x - c.x) +\n                   (a2.y - a1.y) * (a1.y - c.y)   );\n    var cc = c.x*c.x + c.y*c.y + a1.x*a1.x + a1.y*a1.y -\n             2 * (c.x * a1.x + c.y * a1.y) - r*r;\n    var deter = b*b - 4*a*cc;\n\n    if ( deter < 0 ) {\n        result = new Intersection(\"Outside\");\n    } else if ( deter == 0 ) {\n        result = new Intersection(\"Tangent\");\n        // NOTE: should calculate this point\n    } else {\n        var e  = Math.sqrt(deter);\n        var u1 = ( -b + e ) / ( 2*a );\n        var u2 = ( -b - e ) / ( 2*a );\n\n        if ( (u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1) ) {\n            if ( (u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1) ) {\n                result = new Intersection(\"Outside\");\n            } else {\n                result = new Intersection(\"Inside\");\n            }\n        } else {\n            result = new Intersection(\"Intersection\");\n\n            if ( 0 <= u1 && u1 <= 1)\n                result.points.push( a1.lerp(a2, u1) );\n\n            if ( 0 <= u2 && u2 <= 1)\n                result.points.push( a1.lerp(a2, u2) );\n        }\n    }\n    \n    return result;\n};\n\n\n/*****\n*\n*   intersectCirclePolygon\n*\n*****/\nIntersection.intersectCirclePolygon = function(c, r, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n    var inter;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points[i];\n        var a2 = points[(i+1) % length];\n\n        inter = Intersection.intersectCircleLine(c, r, a1, a2);\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n    else\n        result.status = inter.status;\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectCircleRectangle\n*\n*****/\nIntersection.intersectCircleRectangle = function(c, r, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n    var inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n    var inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n    var inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n    else\n        result.status = inter1.status;\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseEllipse\n*   \n*   This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n*   code along with many other excellent examples are avaiable at his site:\n*   http://www.magic-software.com\n*\n*   NOTE: Rotation will need to be added to this function\n*\n*****/\nIntersection.intersectEllipseEllipse = function(c1, rx1, ry1, c2, rx2, ry2) {\n    var a = [\n        ry1*ry1, 0, rx1*rx1, -2*ry1*ry1*c1.x, -2*rx1*rx1*c1.y,\n        ry1*ry1*c1.x*c1.x + rx1*rx1*c1.y*c1.y - rx1*rx1*ry1*ry1\n    ];\n    var b = [\n        ry2*ry2, 0, rx2*rx2, -2*ry2*ry2*c2.x, -2*rx2*rx2*c2.y,\n        ry2*ry2*c2.x*c2.x + rx2*rx2*c2.y*c2.y - rx2*rx2*ry2*ry2\n    ];\n\n    var yPoly   = Intersection.bezout(a, b);\n    var yRoots  = yPoly.getRoots();\n    var epsilon = 1e-3;\n    var norm0   = ( a[0]*a[0] + 2*a[1]*a[1] + a[2]*a[2] ) * epsilon;\n    var norm1   = ( b[0]*b[0] + 2*b[1]*b[1] + b[2]*b[2] ) * epsilon;\n    var result  = new Intersection(\"No Intersection\");\n\n    for ( var y = 0; y < yRoots.length; y++ ) {\n        var xPoly = new Polynomial(\n            a[0],\n            a[3] + yRoots[y] * a[1],\n            a[5] + yRoots[y] * (a[4] + yRoots[y]*a[2])\n        );\n        var xRoots = xPoly.getRoots();\n\n        for ( var x = 0; x < xRoots.length; x++ ) {\n            var test =\n                ( a[0]*xRoots[x] + a[1]*yRoots[y] + a[3] ) * xRoots[x] + \n                ( a[2]*yRoots[y] + a[4] ) * yRoots[y] + a[5];\n            if ( Math.abs(test) < norm0 ) {\n                test =\n                    ( b[0]*xRoots[x] + b[1]*yRoots[y] + b[3] ) * xRoots[x] +\n                    ( b[2]*yRoots[y] + b[4] ) * yRoots[y] + b[5];\n                if ( Math.abs(test) < norm1 ) {\n                    result.appendPoint( new Point2D( xRoots[x], yRoots[y] ) );\n                }\n            }\n        }\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseLine\n*   \n*   NOTE: Rotation will need to be added to this function\n*\n*****/\nIntersection.intersectEllipseLine = function(c, rx, ry, a1, a2) {\n    var result;\n    var origin = new Vector2D(a1.x, a1.y);\n    var dir    = Vector2D.fromPoints(a1, a2);\n    var center = new Vector2D(c.x, c.y);\n    var diff   = origin.subtract(center);\n    var mDir   = new Vector2D( dir.x/(rx*rx),  dir.y/(ry*ry)  );\n    var mDiff  = new Vector2D( diff.x/(rx*rx), diff.y/(ry*ry) );\n\n    var a = dir.dot(mDir);\n    var b = dir.dot(mDiff);\n    var c = diff.dot(mDiff) - 1.0;\n    var d = b*b - a*c;\n\n    if ( d < 0 ) {\n        result = new Intersection(\"Outside\");\n    } else if ( d > 0 ) {\n        var root = Math.sqrt(d);\n        var t_a  = (-b - root) / a;\n        var t_b  = (-b + root) / a;\n\n        if ( (t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b) ) {\n            if ( (t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1) )\n                result = new Intersection(\"Outside\");\n            else\n                result = new Intersection(\"Inside\");\n        } else {\n            result = new Intersection(\"Intersection\");\n            if ( 0 <= t_a && t_a <= 1 )\n                result.appendPoint( a1.lerp(a2, t_a) );\n            if ( 0 <= t_b && t_b <= 1 )\n                result.appendPoint( a1.lerp(a2, t_b) );\n        }\n    } else {\n        var t = -b/a;\n        if ( 0 <= t && t <= 1 ) {\n            result = new Intersection(\"Intersection\");\n            result.appendPoint( a1.lerp(a2, t) );\n        } else {\n            result = new Intersection(\"Outside\");\n        }\n    }\n    \n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipsePolygon\n*\n*****/\nIntersection.intersectEllipsePolygon = function(c, rx, ry, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var b1 = points[i];\n        var b2 = points[(i+1) % length];\n        var inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectEllipseRectangle\n*\n*****/\nIntersection.intersectEllipseRectangle = function(c, rx, ry, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n    var inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n    var inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n    var inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLineLine\n*\n*****/\nIntersection.intersectLineLine = function(a1, a2, b1, b2) {\n    var result;\n    \n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if ( u_b != 0 ) {\n        var ua = ua_t / u_b;\n        var ub = ub_t / u_b;\n\n        if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        } else {\n            result = new Intersection(\"No Intersection\");\n        }\n    } else {\n        if ( ua_t == 0 || ub_t == 0 ) {\n            result = new Intersection(\"Coincident\");\n        } else {\n            result = new Intersection(\"Parallel\");\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLinePolygon\n*\n*****/\nIntersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var b1 = points[i];\n        var b2 = points[(i+1) % length];\n        var inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 ) result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectLineRectangle\n*\n*****/\nIntersection.intersectLineRectangle = function(a1, a2, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n    var inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n    var inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n    var inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectPolygonPolygon\n*\n*****/\nIntersection.intersectPolygonPolygon = function(points1, points2) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points1.length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var a1 = points1[i];\n        var a2 = points1[(i+1) % length];\n        var inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n\n};\n\n\n/*****\n*\n*   intersectPolygonRectangle\n*\n*****/\nIntersection.intersectPolygonRectangle = function(points, r1, r2) {\n    var min        = r1.min(r2);\n    var max        = r1.max(r2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLinePolygon(min, topRight, points);\n    var inter2 = Intersection.intersectLinePolygon(topRight, max, points);\n    var inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points);\n    var inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectRayRay\n*\n*****/\nIntersection.intersectRayRay = function(a1, a2, b1, b2) {\n    var result;\n    \n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if ( u_b != 0 ) {\n        var ua = ua_t / u_b;\n\n        result = new Intersection(\"Intersection\");\n        result.points.push(\n            new Point2D(\n                a1.x + ua * (a2.x - a1.x),\n                a1.y + ua * (a2.y - a1.y)\n            )\n        );\n    } else {\n        if ( ua_t == 0 || ub_t == 0 ) {\n            result = new Intersection(\"Coincident\");\n        } else {\n            result = new Intersection(\"Parallel\");\n        }\n    }\n\n    return result;\n};\n\n\n/*****\n*\n*   intersectRectangleRectangle\n*\n*****/\nIntersection.intersectRectangleRectangle = function(a1, a2, b1, b2) {\n    var min        = a1.min(a2);\n    var max        = a1.max(a2);\n    var topRight   = new Point2D( max.x, min.y );\n    var bottomLeft = new Point2D( min.x, max.y );\n    \n    var inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n    var inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n    var inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n    var inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n    \n    var result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if ( result.points.length > 0 )\n        result.status = \"Intersection\";\n\n    return result;\n};\n\n\n/*****\n*\n*   bezout\n*\n*   This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n*   code along with many other excellent examples are avaiable at his site:\n*   http://www.magic-software.com\n*\n*****/\nIntersection.bezout = function(e1, e2) {\n    var AB    = e1[0]*e2[1] - e2[0]*e1[1];\n    var AC    = e1[0]*e2[2] - e2[0]*e1[2];\n    var AD    = e1[0]*e2[3] - e2[0]*e1[3];\n    var AE    = e1[0]*e2[4] - e2[0]*e1[4];\n    var AF    = e1[0]*e2[5] - e2[0]*e1[5];\n    var BC    = e1[1]*e2[2] - e2[1]*e1[2];\n    var BE    = e1[1]*e2[4] - e2[1]*e1[4];\n    var BF    = e1[1]*e2[5] - e2[1]*e1[5];\n    var CD    = e1[2]*e2[3] - e2[2]*e1[3];\n    var DE    = e1[3]*e2[4] - e2[3]*e1[4];\n    var DF    = e1[3]*e2[5] - e2[3]*e1[5];\n    var BFpDE = BF + DE;\n    var BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB*BC - AC*AC,\n        AB*BEmCD + AD*BC - 2*AC*AE,\n        AB*BFpDE + AD*BEmCD - AE*AE - 2*AC*AF,\n        AB*DF + AD*BFpDE - 2*AE*AF,\n        AD*DF - AF*AF\n    );\n};\n\nmodule.exports = Intersection//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/intersectionjs/intersection.js\n");

/***/ }),

/***/ "./node_modules/point2d/index.js":
/*!***************************************!*\
  !*** ./node_modules/point2d/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * An immutable point in 2d space\n * @param {Number} x The x coordinate\n * @param {Number} y The y coordinate\n */\nfunction Point (x, y) {\n  this.x = x || 0;\n  this.y = y || 0;\n  Object.freeze(this);\n}\n\n/**\n * Returns the Euclidean distance between this point and another point\n * @param {Point} point The other point\n * @returns {Number} The Euclidean distance\n */\nPoint.prototype.distance = function (point) {\n  return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));\n};\n\n/**\n * Returns the Manhattan distance between this point and another point\n * @param {Point} point The other point\n * @returns {Number} The Manhattan distance\n */\nPoint.prototype.manhattanDistance = function (point) {\n  var scalePoint = this.sub(point).abs();\n  return scalePoint.x + scalePoint.y;\n};\n\n/**\n * Returns a new point with coordinates in absolute value\n * @returns {Point} The new point\n */\nPoint.prototype.abs = function () {\n  return new Point(Math.abs(this.x), Math.abs(this.y));\n};\n\n/**\n * Returns true if the x and y coordinate of this point equals the x and y coordinate of the other point\n * @param {Point} point The other point\n * @returns {Boolean} If the points equal\n */\nPoint.prototype.equals = function (point) {\n  return this.x === point.x && this.y === point.y;\n};\n\n/**\n * Returns a new point with the coordinates added together\n * @param {Point} point The other point\n * @returns {Point} A new point\n */\nPoint.prototype.add = function (point) {\n  return new Point(this.x + point.x, this.y + point.y);\n};\n\n/**\n * Returns a new point with the coordinates of this point subtracted by the other point\n * @param {Point} point The other point\n * @returns {Point} The new point\n */\nPoint.prototype.sub = function (point) {\n  return new Point(this.x - point.x, this.y - point.y);\n};\n\nmodule.exports = Point;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcG9pbnQyZC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9ub2RlX21vZHVsZXMvcG9pbnQyZC9pbmRleC5qcz9kZDdiIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBBbiBpbW11dGFibGUgcG9pbnQgaW4gMmQgc3BhY2VcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSB4IGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSB5IGNvb3JkaW5hdGVcbiAqL1xuZnVuY3Rpb24gUG9pbnQgKHgsIHkpIHtcbiAgdGhpcy54ID0geCB8fCAwO1xuICB0aGlzLnkgPSB5IHx8IDA7XG4gIE9iamVjdC5mcmVlemUodGhpcyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhpcyBwb2ludCBhbmQgYW5vdGhlciBwb2ludFxuICogQHBhcmFtIHtQb2ludH0gcG9pbnQgVGhlIG90aGVyIHBvaW50XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgRXVjbGlkZWFuIGRpc3RhbmNlXG4gKi9cblBvaW50LnByb3RvdHlwZS5kaXN0YW5jZSA9IGZ1bmN0aW9uIChwb2ludCkge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMueCAtIHBvaW50LngsIDIpICsgTWF0aC5wb3codGhpcy55IC0gcG9pbnQueSwgMikpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgYmV0d2VlbiB0aGlzIHBvaW50IGFuZCBhbm90aGVyIHBvaW50XG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludCBUaGUgb3RoZXIgcG9pbnRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBNYW5oYXR0YW4gZGlzdGFuY2VcbiAqL1xuUG9pbnQucHJvdG90eXBlLm1hbmhhdHRhbkRpc3RhbmNlID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gIHZhciBzY2FsZVBvaW50ID0gdGhpcy5zdWIocG9pbnQpLmFicygpO1xuICByZXR1cm4gc2NhbGVQb2ludC54ICsgc2NhbGVQb2ludC55O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHBvaW50IHdpdGggY29vcmRpbmF0ZXMgaW4gYWJzb2x1dGUgdmFsdWVcbiAqIEByZXR1cm5zIHtQb2ludH0gVGhlIG5ldyBwb2ludFxuICovXG5Qb2ludC5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IFBvaW50KE1hdGguYWJzKHRoaXMueCksIE1hdGguYWJzKHRoaXMueSkpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHggYW5kIHkgY29vcmRpbmF0ZSBvZiB0aGlzIHBvaW50IGVxdWFscyB0aGUgeCBhbmQgeSBjb29yZGluYXRlIG9mIHRoZSBvdGhlciBwb2ludFxuICogQHBhcmFtIHtQb2ludH0gcG9pbnQgVGhlIG90aGVyIHBvaW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSWYgdGhlIHBvaW50cyBlcXVhbFxuICovXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gIHJldHVybiB0aGlzLnggPT09IHBvaW50LnggJiYgdGhpcy55ID09PSBwb2ludC55O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHBvaW50IHdpdGggdGhlIGNvb3JkaW5hdGVzIGFkZGVkIHRvZ2V0aGVyXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludCBUaGUgb3RoZXIgcG9pbnRcbiAqIEByZXR1cm5zIHtQb2ludH0gQSBuZXcgcG9pbnRcbiAqL1xuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHBvaW50LngsIHRoaXMueSArIHBvaW50LnkpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHBvaW50IHdpdGggdGhlIGNvb3JkaW5hdGVzIG9mIHRoaXMgcG9pbnQgc3VidHJhY3RlZCBieSB0aGUgb3RoZXIgcG9pbnRcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50IFRoZSBvdGhlciBwb2ludFxuICogQHJldHVybnMge1BvaW50fSBUaGUgbmV3IHBvaW50XG4gKi9cblBvaW50LnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSBwb2ludC54LCB0aGlzLnkgLSBwb2ludC55KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/point2d/index.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, author, contributors, license, repository, bugs, devDependencies, scripts, engines, dependencies, keywords, main, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"complexviewer\\\",\\\"version\\\":\\\"2.0.0\\\",\\\"description\\\":\\\"A network visualisation that displays molecular interaction data, including detailed residue-level information such as binding sites. Used in EBI's Complex Portal and elsewhere.\\\",\\\"author\\\":{\\\"name\\\":\\\"Colin Combe\\\",\\\"email\\\":\\\"colin.combe@ed.ac.uk\\\"},\\\"contributors\\\":[{\\\"name\\\":\\\"Colin Combe\\\",\\\"email\\\":\\\"colin.combe@ed.ac.uk\\\"},{\\\"name\\\":\\\"Josh Heimbach\\\",\\\"email\\\":\\\"joshkh@gmail.com\\\"},{\\\"name\\\":\\\"Yo Yehudi\\\",\\\"email\\\":\\\"yochannah@gmail.com\\\"},{\\\"name\\\":\\\"Marine Dumousseau\\\",\\\"email\\\":\\\"\\\"}],\\\"license\\\":\\\"Apache-2.0\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git@github.com:MICommunity/ComplexViewer.git\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/MICommunity/ComplexViewer/issues\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.10.2\\\",\\\"@babel/preset-env\\\":\\\"^7.10.2\\\",\\\"babel-loader\\\":\\\"^8.1.0\\\",\\\"css-loader\\\":\\\"^3.6.0\\\",\\\"eslint\\\":\\\"^7.2.0\\\",\\\"file-loader\\\":\\\"^6.0.0\\\",\\\"style-loader\\\":\\\"^1.2.1\\\",\\\"url-loader\\\":\\\"^4.1.0\\\",\\\"webpack\\\":\\\"^4.43.0\\\",\\\"webpack-cli\\\":\\\"^3.3.11\\\",\\\"webpack-dev-server\\\":\\\"^3.11.0\\\",\\\"webpack-merge\\\":\\\"^4.2.2\\\"},\\\"scripts\\\":{\\\"clean\\\":\\\"rm dist/*\\\",\\\"start:dev\\\":\\\"webpack-dev-server --open --config webpack.dev.js\\\",\\\"build-dev\\\":\\\"rm dist/*; webpack -d --mode development --config webpack.dev.js\\\",\\\"build-prod\\\":\\\"rm dist/*; webpack -p --mode production --config webpack.prod.js\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=14.0.0\\\"},\\\"dependencies\\\":{\\\"colorbrewer\\\":\\\"^1.3.0\\\",\\\"core-js\\\":\\\"^3.6.5\\\",\\\"d3\\\":\\\"~3.5.5\\\",\\\"intersectionjs\\\":\\\"^1.0.1\\\",\\\"point2d\\\":\\\"^0.0.1\\\",\\\"d3-scale-chromatic\\\":\\\"^1.5.0\\\"},\\\"keywords\\\":[\\\"biojs\\\",\\\"protein\\\",\\\"interactions\\\",\\\"complexes\\\"],\\\"main\\\":\\\"src/js/app.js\\\"}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/css/xinet.css":
/*!***************************!*\
  !*** ./src/css/xinet.css ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./xinet.css */ \"./node_modules/css-loader/dist/cjs.js!./src/css/xinet.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3NzL3hpbmV0LmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvY3NzL3hpbmV0LmNzcz82ZDU3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi94aW5ldC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/css/xinet.css\n");

/***/ }),

/***/ "./src/js/annotationUtils.js":
/*!***********************************!*\
  !*** ./src/js/annotationUtils.js ***!
  \***********************************/
/*! exports provided: fetchAnnotations, chooseColors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetchAnnotations\", function() { return fetchAnnotations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"chooseColors\", function() { return chooseColors; });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-scale-chromatic */ \"./node_modules/d3-scale-chromatic/src/index.js\");\n/* harmony import */ var _viz_interactor_annotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./viz/interactor/annotation */ \"./src/js/viz/interactor/annotation.js\");\n/* harmony import */ var _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./viz/sequence-datum */ \"./src/js/viz/sequence-datum.js\");\n\n\n\n\n\n\n//todo - cache annotations in memory\nfunction fetchAnnotations(/*App*/ app, callback) {\n    // we only show annotations on proteins\n    const proteins = Array.from(app.participants.values()).filter(function (value) {\n        return value.type === \"protein\";\n    });\n\n    let protsAnnotated = 0;\n    const molCount = proteins.length;\n\n    for (let prot of proteins) {\n        getSuperFamFeatures(prot, function () {\n            protsAnnotated++;\n            if (protsAnnotated === molCount) {\n                callback();\n            }\n        });\n        getUniProtFeatures(prot, function () {\n            protsAnnotated++;\n            if (protsAnnotated === molCount) {\n                callback();\n            }\n        });\n    }\n}\n\nfunction extractUniprotAccession(id) {\n    const uniprotAccRegex = new RegExp(\"[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}\", \"i\");\n    const match = uniprotAccRegex.exec(id);\n    return match[0];\n}\n\nfunction getUniProtFeatures(prot, callback) {\n    const url = \"https://www.ebi.ac.uk/proteins/api/proteins/\" + extractUniprotAccession(prot.id);\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"json\"](url, function (json) {\n        let annotations = prot.annotationSets.get(\"UniprotKB\");\n        if (typeof annotations === \"undefined\") {\n            annotations = [];\n            prot.annotationSets.set(\"UniprotKB\", annotations);\n        }\n        const uniprotJsonFeatures = json.features.filter(function (ft) {\n            return ft.type === \"DOMAIN\";\n        });\n        for (let feature of uniprotJsonFeatures) {\n            const anno = new _viz_interactor_annotation__WEBPACK_IMPORTED_MODULE_2__[\"Annotation\"](feature.description, new _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_3__[\"SequenceDatum\"](null, feature.begin + \"-\" + feature.end));\n            // feature.seqDatum = new SequenceDatum(null, feature.begin + \"-\" + feature.end);\n            annotations.push(anno);\n        }\n        // prot.showHighlight(true);\n        callback();\n    });\n}\n\nfunction getSuperFamFeatures(prot, callback) {\n    const url = \"https://supfam.mrc-lmb.cam.ac.uk/SUPERFAMILY/cgi-bin/das/up/features?segment=\" + extractUniprotAccession(prot.id);\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"xml\"](url, function (xml) {\n        let annotations = prot.annotationSets.get(\"Superfamily\");\n        if (typeof annotations === \"undefined\") {\n            annotations = [];\n            prot.annotationSets.set(\"Superfamily\", annotations);\n        }\n        const xmlDoc = new DOMParser().parseFromString(new XMLSerializer().serializeToString(xml), \"text/xml\");\n        const xmlFeatures = xmlDoc.getElementsByTagName(\"FEATURE\");\n        for (let xmlFeature of xmlFeatures) {\n            const type = xmlFeature.getElementsByTagName(\"TYPE\")[0]; //might need to watch for text nodes getting mixed in here\n            const category = type.getAttribute(\"category\");\n            if (category === \"miscellaneous\") {\n                const name = type.getAttribute(\"id\");\n                const start = xmlFeature.getElementsByTagName(\"START\")[0].textContent;\n                const end = xmlFeature.getElementsByTagName(\"END\")[0].textContent;\n                annotations.push(new _viz_interactor_annotation__WEBPACK_IMPORTED_MODULE_2__[\"Annotation\"](name, new _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_3__[\"SequenceDatum\"](null, start + \"-\" + end)));\n            }\n        }\n        //~ console.log(JSON.stringify(features));\n        // prot.showHighlight(true);\n        callback();\n    });\n}\n\nfunction chooseColors(app) {\n    const categories = new Set();\n    for (let participant of app.participants.values()) {\n        for (let [annotationType, annotationSet] of participant.annotationSets) {\n            if (app.annotationSetsShown.get(annotationType) === true) {\n                for (let annotation of annotationSet.values()) {\n                    categories.add(annotation.description);\n                }\n            }\n        }\n    }\n\n    let colorScheme;\n    if (categories.size < 11) {\n        colorScheme = d3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"].ordinal().range(d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_1__[\"schemeTableau10\"]);//colorbrewer.Dark2[catCount].slice().reverse());\n    } else {\n        colorScheme = d3__WEBPACK_IMPORTED_MODULE_0__[\"scale\"].category20();\n    }\n\n    for (let participant of app.participants.values()) {\n        for (let [annotationType, annotations] of participant.annotationSets) {\n            if (app.annotationSetsShown.get(annotationType) === true) {\n                for (let anno of annotations) {\n\n                    let color;\n                    if (anno.description === \"No annotations\") {\n                        color = \"#eeeeee\";\n                    } else {\n                        color = colorScheme(anno.description);\n                    }\n\n                    //ToDO - way more of these are being created than needed\n                    app.createHatchedFill(\"checkers_\" + anno.description + \"_\" + color.toString(), color);\n                    const checkedFill = \"url('#checkers_\" + anno.description + \"_\" + color.toString() + \"')\";\n                    if (anno.fuzzyStart) {\n                        anno.fuzzyStart.setAttribute(\"fill\", checkedFill);\n                        anno.fuzzyStart.setAttribute(\"stroke\", color);\n                    }\n                    if (anno.certain) {\n                        anno.certain.setAttribute(\"fill\", color);\n                        anno.certain.setAttribute(\"stroke\", color);\n                    }\n                    if (anno.fuzzyEnd) {\n                        anno.fuzzyEnd.setAttribute(\"fill\", checkedFill);\n                        anno.fuzzyEnd.setAttribute(\"stroke\", color);\n                    }\n                }\n            }\n        }\n    }\n\n    app.featureColors = colorScheme;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/annotationUtils.js\n");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! exports provided: App */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"App\", function() { return App; });\n/* harmony import */ var _css_xinet_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/xinet.css */ \"./src/css/xinet.css\");\n/* harmony import */ var _css_xinet_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_xinet_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../package.json */ \"./package.json\", 1);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-scale-chromatic */ \"./node_modules/d3-scale-chromatic/src/index.js\");\n/* harmony import */ var _cola__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cola */ \"./src/js/cola.js\");\n/* harmony import */ var _cola__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_cola__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _read_mijson__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./read-mijson */ \"./src/js/read-mijson.js\");\n/* harmony import */ var _annotationUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./annotationUtils */ \"./src/js/annotationUtils.js\");\n/* harmony import */ var _svgexp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./svgexp */ \"./src/js/svgexp.js\");\n/* harmony import */ var _color_scheme_key__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./color-scheme-key */ \"./src/js/color-scheme-key.js\");\n/* harmony import */ var _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./viz/link/nary-link */ \"./src/js/viz/link/nary-link.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./config */ \"./src/js/config.js\");\n// eslint-disable-next-line no-unused-vars\n\n\n\n\n\n\n\n\n\n// import {SymbolKey} from \"./symbol-key\";\n\n\n\n\n// could refactor everything to use ES6 class syntax\n// but https://benmccormick.org/2015/04/07/es6-classes-and-backbone-js\n// \"ES6 classes don’t support adding properties directly to the class instance, only functions/methods\"\n// so backbone doesn't work\n// so continuing to use prototypical inheritance in things for time being\n\nfunction App(/*HTMLDivElement*/networkDiv) {\n    // this.debug = true; // things aren't exactly lined up in the bounding boxes cola is using, to do so breaks symetery of some things\n    this.el = networkDiv;\n\n    this.STATES = {};\n    this.STATES.MOUSE_UP = 0; //start state, also set when mouse up on svgElement\n    this.STATES.PANNING = 1; //set by mouse down on svgElement - left button, no shift or util\n    this.STATES.DRAGGING = 2; //set by mouse down on Protein or Link\n    this.STATES.ROTATING = 3; //set by mouse down on Rotator, drag?\n    this.STATES.SELECTING = 4; //set by mouse down on svgElement- right button or left button shift or util, drag\n\n    //avoids prob with 'save - web page complete'\n    this.el.textContent = \"\"; //https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript\n\n    this.d3cola = _cola__WEBPACK_IMPORTED_MODULE_4__[\"d3adaptor\"]();\n\n    const customMenuSel = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this.el)\n        .append(\"div\").classed(\"custom-menu-margin\", true)\n        .append(\"div\").classed(\"custom-menu\", true)\n        .append(\"ul\");\n\n    const self = this;\n    const collapse = customMenuSel.append(\"li\").classed(\"collapse\", true); //.append(\"button\");\n    collapse.text(\"Collapse\");\n    collapse[0][0].onclick = function (evt) {\n        self.collapseProtein(evt);\n    };\n    const scaleButtonsListItemSel = customMenuSel.append(\"li\").text(\"Scale: \");\n\n    this.barScales = [0.01, 0.2, 1, 2, 4, 8];\n    const scaleButtons = scaleButtonsListItemSel.selectAll(\"ul.custom-menu\")\n        .data(this.barScales)\n        .enter()\n        .append(\"div\")\n        .attr(\"class\", \"bar-scale\")\n        .append(\"label\");\n    scaleButtons.append(\"span\")\n        .text(function (d) {\n            if (d === 8) return \"AA\";\n            else return d;\n        });\n    scaleButtons.append(\"input\")\n        // .attr (\"id\", function(d) { return d*100; })\n        .attr(\"class\", function (d) {\n            return \"scaleButton scaleButton_\" + (d * 100);\n        })\n        .attr(\"name\", \"scaleButtons\")\n        .attr(\"type\", \"radio\")\n        .on(\"change\", function (d) {\n            self.preventDefaultsAndStopPropagation(d);\n            self.contextMenuProt.setStickScale(d, self.contextMenuPoint);\n        });\n\n    const contextMenu = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\".custom-menu-margin\").node();\n    contextMenu.onmouseout = function (evt) {\n        let e = evt.relatedTarget;\n        do {\n            if (e === this) return;\n            e = e.parentNode;\n        } while (e);\n        self.contextMenuProt = null;\n        d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this).style(\"display\", \"none\");\n    };\n\n\n    //create SVG element\n    this.svgElement = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"svg\");\n    this.svgElement.classList.add(\"complexViewerSVG\");\n\n    //add listeners\n    this.svgElement.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.svgElement.onmousemove = function (evt) {\n        self.mouseMove(evt);\n    };\n    this.svgElement.onmouseup = function (evt) {\n        self.mouseUp(evt);\n    };\n    this.svgElement.onmouseout = function (evt) {\n        self.hideTooltip(evt);\n    };\n    this.lastMouseUp = new Date().getTime();\n\n    this.svgElement.ontouchstart = function (evt) {\n        //console.log(\"svgElement touch start\");\n        self.touchStart(evt);\n    };\n    this.svgElement.ontouchmove = function (evt) {\n        // console.log(\"svgElement touch move\");\n        self.touchMove(evt);\n    };\n    this.svgElement.ontouchend = function (evt) {\n        // console.log(\"svgElement touch end\");\n        self.mouseUp(evt);\n    };\n\n    this.el.oncontextmenu = function (evt) {\n        if (evt.preventDefault) { // necessary for addEventListener, works with traditional\n            evt.preventDefault();\n        }\n        evt.returnValue = false; // necessary for attachEvent, works with traditional\n        return false; // works with traditional, not with attachEvent or addEventListener\n    };\n\n    //updated if legend changed\n    this.colorSchemeKeyDivs = new Set();\n    //functions that get interactor id of hover over thing\n    this.hoverListeners = new Set();\n\n    this.el.appendChild(this.svgElement);\n\n    // various groups needed\n    this.container = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.container.setAttribute(\"id\", \"container\");\n\n    const svg = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this.svgElement);\n    this.defs = svg.append(\"defs\");\n\n    this.acknowledgement = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    const ackText = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"text\");\n    ackText.innerHTML = \"<a href='https://academic.oup.com/bioinformatics/article/33/22/3673/4061280' target='_blank'><tspan x='0' dy='1.2em' style='text-decoration: underline'>ComplexViewer \"\n        + _package_json__WEBPACK_IMPORTED_MODULE_1__[\"version\"] + \"</tspan></a><tspan x='0' dy='1.2em'>by <a href='http://rappsilberlab.org/' target='_blank'>Rappsilber Laboratory</a></tspan>\";\n\n    this.acknowledgement.appendChild(ackText);\n    ackText.setAttribute(\"font-size\", \"8pt\");\n    this.svgElement.appendChild(this.acknowledgement);\n\n    this.naryLinks = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.naryLinks.setAttribute(\"id\", \"naryLinks\");\n    this.container.appendChild(this.naryLinks);\n\n    this.p_pLinksWide = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.p_pLinksWide.setAttribute(\"id\", \"p_pLinksWide\");\n    this.container.appendChild(this.p_pLinksWide);\n\n    this.highlights = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.highlights.setAttribute(\"class\", \"highlights\"); //interactors also contain highlight groups\n    this.container.appendChild(this.highlights);\n\n    this.res_resLinks = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.res_resLinks.setAttribute(\"id\", \"res_resLinks\");\n    this.container.appendChild(this.res_resLinks);\n\n    this.p_pLinks = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.p_pLinks.setAttribute(\"id\", \"p_pLinks\");\n    this.container.appendChild(this.p_pLinks);\n\n    //todo - have links above interactors?\n    this.proteinUpper = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.proteinUpper.setAttribute(\"id\", \"proteinUpper\");\n    this.container.appendChild(this.proteinUpper);\n\n    this.selfRes_resLinks = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"g\");\n    this.selfRes_resLinks.setAttribute(\"id\", \"res_resLinks\");\n    this.container.appendChild(this.selfRes_resLinks);\n\n    this.svgElement.appendChild(this.container);\n\n    //showing title as tooltips is NOT part of svg spec (even though some browsers do this)\n    //also more responsive / more control if we do out own\n    this.tooltip = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"text\");\n    this.tooltip.setAttribute(\"x\", \"0\");\n    this.tooltip.setAttribute(\"y\", \"0\");\n    const tooltipTextNode = document.createTextNode(\"tooltip\");\n    this.tooltip.classList.add(\"label\", \"tooltip\");\n\n    this.tooltip.appendChild(tooltipTextNode);\n\n    this.tooltip_bg = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"rect\");\n    this.tooltip_bg.classList.add(\"tooltip-background\");\n\n    this.tooltip_subBg = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_10__[\"svgns\"], \"rect\");\n    this.tooltip_subBg.classList.add(\"tooltip-sub-background\");\n\n    this.svgElement.appendChild(this.tooltip_subBg);\n    this.svgElement.appendChild(this.tooltip_bg);\n    this.svgElement.appendChild(this.tooltip);\n\n    this.annotationSetsShown = new Map();\n    this.annotationSetsShown.set(\"Interactor\", false);\n    this.annotationSetsShown.set(\"UniprotKB\", false);\n    this.annotationSetsShown.set(\"Superfamily\", false);\n    this.annotationSetsShown.set(\"MI Features\", true);\n\n    this.clear();\n}\n\nApp.prototype.createHatchedFill = function (name, color) {\n    if (!this.checkedHatchNames.has(name)) {\n        const pattern = this.defs.append(\"pattern\")\n            .attr(\"id\", name)\n            .attr(\"patternUnits\", \"userSpaceOnUse\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .attr(\"width\", 12)\n            .attr(\"height\", 12)\n            .attr(\"patternTransform\", \"rotate(45)\");\n\n        pattern.append(\"rect\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 2)\n            .attr(\"width\", 12)\n            .attr(\"height\", 4)\n            .attr(\"fill\", color);\n\n        pattern.append(\"rect\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 8)\n            .attr(\"width\", 12)\n            .attr(\"height\", 4)\n            .attr(\"fill\", color);\n\n        this.checkedHatchNames.add(name);\n    }\n};\n\nApp.prototype.clear = function () {\n    this.d3cola.stop();\n\n    //lighten colors\n    const complexColors = [];\n    for (let c of d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_3__[\"schemePastel2\"]) {//colorbrewer.Pastel2[8]) {\n        const hsl = d3__WEBPACK_IMPORTED_MODULE_2__[\"hsl\"](c);\n        hsl.l = 0.9;\n        complexColors.push(hsl + \"\");\n    }\n\n    _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__[\"NaryLink\"].naryColors = d3__WEBPACK_IMPORTED_MODULE_2__[\"scale\"].ordinal().range(complexColors);\n    this.defs.textContent = \"\";\n    this.checkedHatchNames = new Set();\n\n    this.naryLinks.textContent = \"\";\n    this.p_pLinksWide.textContent = \"\";\n    this.highlights.textContent = \"\";\n    this.p_pLinks.textContent = \"\";\n    this.res_resLinks.textContent = \"\";\n    this.proteinUpper.textContent = \"\";\n    this.selfRes_resLinks.textContent = \"\";\n\n    // if we are dragging something at the moment - this will be the element that is dragged\n    this.dragElement = null;\n    // from where did we start dragging\n    this.dragStart = {};\n\n    this.participants = new Map();\n    this.allNaryLinks = new Map();\n    this.allBinaryLinks = new Map();\n    this.allUnaryLinks = new Map();\n    this.allSequenceLinks = new Map();\n    this.complexes = [];\n\n    this.proteinCount = 0;\n    this.z = 1;\n    this.hideTooltip();\n    this.state = this.STATES.MOUSE_UP;\n};\n\nApp.prototype.collapseProtein = function () {\n    d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\".custom-menu-margin\").style(\"display\", \"none\");\n    this.contextMenuProt.setForm(0, this.contextMenuPoint);\n    this.contextMenuProt = null;\n};\n\nApp.prototype.init = function () {\n    this.d3cola.stop();\n    let maxSeqLength = 0;\n    for (let participant of this.participants.values()) {\n        if (participant.size > maxSeqLength) {\n            maxSeqLength = participant.size;\n        }\n    }\n    const width = this.svgElement.parentNode.clientWidth;\n    const defaultPixPerRes = width * 0.8 / maxSeqLength;\n    //console.log(\"defaultPixPerRes:\" + defaultPixPerRes);\n    // https://stackoverflow.com/questions/12141150/from-list-of-integers-get-number-closest-to-a-given-value/12141511#12141511\n    function takeClosest(myList, myNumber) {\n        const bisect = d3__WEBPACK_IMPORTED_MODULE_2__[\"bisector\"](function (d) {\n            return d;\n        }).left;\n        const pos = bisect(myList, myNumber);\n        if (pos === 0 || pos === 1) {\n            return myList[1]; // don't return smallest scale as default\n        }\n        if (pos === myList.length) {\n            return myList[myList.length - 1];\n        }\n        return myList[pos - 1];\n    }\n\n    this.defaultBarScale = takeClosest(this.barScales, defaultPixPerRes);\n    //console.log(\"default bar scale: \" + this.defaultBarScale)\n\n    for (let participant of this.participants.values()) {\n        if (participant.type != \"complex\") {\n            participant.setPosition(-500, -500);\n            this.proteinUpper.appendChild(participant.upperGroup);\n        }\n    }\n    for (let participant of this.participants.values()) {\n        if (participant.type === \"protein\") {\n            // participant.initSelfLinkSVG(); // todo - may not even do anything, not sure its working\n            participant.stickZoom = this.defaultBarScale;\n            if (this.participants.size < 4) {\n                participant.toStickNoTransition();\n            }\n        }\n    }\n    this.updateAnnotations();\n    const self = this;\n    Object(_annotationUtils__WEBPACK_IMPORTED_MODULE_6__[\"fetchAnnotations\"])(this, function () {\n        self.updateAnnotations();\n    });\n\n    this.checkLinks(); //totally needed, not sure why tbh todo - check this out\n    this.autoLayout();\n};\n\nApp.prototype.zoomToExtent = function () {\n    const width = this.svgElement.parentNode.clientWidth;\n    const height = this.svgElement.parentNode.clientHeight;\n    const bbox = this.container.getBBox();\n    let xr = (width / bbox.width).toFixed(4) - 0;\n    let yr = (height / bbox.height).toFixed(4) - 0;\n    let scaleFactor;\n    if (yr < xr) {\n        scaleFactor = yr;\n    } else {\n        scaleFactor = xr;\n    }\n    if (scaleFactor < 1) { ///didn't fit in div\n        //console.log(\"no fit\", scaleFactor);\n        xr = (width - 40) / (bbox.width);\n        yr = (height - 40) / (bbox.height);\n        let scaleFactor;\n        if (yr < xr) {\n            scaleFactor = yr;\n        } else {\n            scaleFactor = xr;\n        }\n\n        if (scaleFactor > this.z) {\n            scaleFactor = this.z;\n        }\n\n        //bbox.x + x = 0;\n        let x = -bbox.x + (20 / scaleFactor);\n        //box.y + y = 0\n        let y = -bbox.y + (20 / scaleFactor);\n        this.container.setAttribute(\"transform\", \"scale(\" + scaleFactor + \") translate(\" + x + \" \" + y + \") \");\n        this.z = this.container.getCTM().inverse().a;\n    } else {\n        //console.log(\"fit\", scaleFactor);\n        // this.container.setAttribute(\"transform\", \"scale(\" + 1 + \") translate(\" + -(width/2) + \" \" + -bbox.y + \")\");\n        const deltaWidth = width - bbox.width;\n        const deltaHeight = height - bbox.height;\n        //bbox.x + x = deltaWidth /2;\n        let x = (deltaWidth / 2) - bbox.x;\n        //box.y + y = deltaHeight / 2\n        let y = (deltaHeight / 2) - bbox.y;\n        this.container.setAttribute(\"transform\", \"scale(\" + 1 + \") translate(\" + x + \" \" + y + \")\");\n        this.z = 1;\n    }\n\n    //todo - following could be tided up by using acknowledgement bbox or positioning att's of text\n    this.acknowledgement.setAttribute(\"transform\", \"translate(\" + (width - 150) + \", \" + (height - 30) + \")\");\n};\n\n//listeners also attached to mouse events by Interactor (and Rotator) and Link, those consume their events\n//mouse down on svgElement must be allowed to propogate (to fire event on Prots/Links)\n\nApp.prototype.mouseDown = function (evt) {\n    //prevent default, but allow propogation\n    evt.preventDefault();\n    this.d3cola.stop();\n    this.dragStart = evt;\n    return false;\n};\n\n\nApp.prototype.touchStart = function (evt) {\n    //prevent default, but allow propogation\n    evt.preventDefault();\n    this.d3cola.stop();\n    this.dragStart = evt;\n    return false;\n};\n\n// dragging/rotation/panning/selecting\nApp.prototype.mouseMove = function (evt) {\n    // const p = this.getEventPoint(evt); // seems to be correct, see below\n    this.move(evt);\n};\n\nApp.prototype.touchMove = function (evt) {\n    // const p = this.getTouchEventPoint(evt); // seems to be correct, see below\n    this.move(evt);\n};\n\nApp.prototype.move = function (evt) {\n    const p = this.getEventPoint(evt);\n    const c = this.mouseToSVG(p.x, p.y);\n\n    if (this.dragElement != null) { //dragging or rotating\n        this.hideTooltip();\n\n        const startPoint = this.getEventPoint(this.dragStart);\n        const svgStartPoint = this.mouseToSVG(startPoint.x, startPoint.y);\n\n        const dx = svgStartPoint.x - c.x;\n        const dy = svgStartPoint.y - c.y;\n\n        if (this.state === this.STATES.DRAGGING) {\n            // we are currently dragging things around\n            let ox, oy, nx, ny;\n            if (!this.dragElement.ix) {\n                for (let participant of this.dragElement.participants) {\n                    participant.changePosition(dx, dy);\n                }\n                this.setAllLinkCoordinates();\n            } else {\n                ox = this.dragElement.ix;\n                oy = this.dragElement.iy;\n                nx = ox - dx;\n                ny = oy - dy;\n                this.dragElement.setPosition(nx, ny);\n                this.dragElement.setAllLinkCoordinates();\n            }\n            this.dragStart = evt;\n        } else { //not dragging or rotating yet, maybe we should start\n            // don't start dragging just on a click - we need to move the mouse a bit first\n            if (Math.sqrt(dx * dx + dy * dy) > (5 * this.z)) {\n                this.state = this.STATES.DRAGGING;\n            }\n        }\n    } else {\n        this.showTooltip(p);\n    }\n    return false;\n};\n\n// this ends all dragging and rotating\nApp.prototype.mouseUp = function (evt) { //could be tidied up\n    const time = new Date().getTime();\n    //console.log(\"Mouse up: \" + evt.srcElement + \" \" + (time - this.lastMouseUp));\n    this.preventDefaultsAndStopPropagation(evt);\n    //eliminate some spurious mouse up events\n    // if ((time - this.lastMouseUp) > 150) {\n\n    let p = this.getEventPoint(evt);\n    if (isNaN(p.x)) {\n        p = this.getEventPoint(this.dragStart);\n    }\n    const c = this.mouseToSVG(p.x, p.y);\n\n    if (this.dragElement && this.dragElement.type === \"protein\") { /// todo be consistent about how to check if thing is protein\n        if (!(this.state === this.STATES.DRAGGING || this.state === this.STATES.ROTATING)) { //not dragging or rotating\n            if (!this.dragElement.expanded) {\n                this.dragElement.setForm(1);\n            } else {\n                this.contextMenuProt = this.dragElement;\n                this.contextMenuPoint = c;\n                const menu = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\".custom-menu-margin\");\n                let pageX, pageY;\n                if (evt.pageX) {\n                    pageX = evt.pageX;\n                    pageY = evt.pageY;\n                } else {\n                    pageX = this.dragStart.touches[0].pageX;\n                    pageY = this.dragStart.touches[0].pageY;\n                }\n                menu.style(\"top\", (pageY - 20) + \"px\").style(\"left\", (pageX - 20) + \"px\").style(\"display\", \"block\");\n                d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](\".scaleButton_\" + (this.dragElement.stickZoom * 100)).property(\"checked\", true);\n            }\n        }\n        // }\n    }\n\n    this.dragElement = null;\n    this.dragStart = {};\n    this.state = this.STATES.MOUSE_UP;\n\n    this.lastMouseUp = time;\n    return false;\n};\n\n//gets mouse position - is there a better way?\nApp.prototype.getEventPoint = function (evt) {\n    const p = this.svgElement.createSVGPoint();\n    let element = this.svgElement.parentNode;\n    let top = 0,\n        left = 0;\n    do {\n        top += element.offsetTop || 0;\n        left += element.offsetLeft || 0;\n        element = element.offsetParent;\n    } while (element);\n    let pageX, pageY;\n    if (evt.touches && evt.touches.length > 0) {\n        pageX = evt.touches[0].pageX;\n        pageY = evt.touches[0].pageY;\n    } else if (evt.pageX) {\n        pageX = evt.pageX;\n        pageY = evt.pageY;\n    }\n    // else { //looks like bad idea\n    //     return this.getEventPoint(this.dragStart); //touch events ending\n    // }\n    p.x = pageX - left;\n    p.y = pageY - top;\n    return p;\n};\n\n//stop event propogation and defaults; only do what we ask\nApp.prototype.preventDefaultsAndStopPropagation = function (evt) {\n    if (evt.stopPropagation)\n        evt.stopPropagation();\n    if (evt.cancelBubble != null)\n        evt.cancelBubble = true;\n    if (evt.preventDefault)\n        evt.preventDefault();\n};\n\nApp.prototype.autoLayout = function () {\n    this.d3cola.stop();\n    const self = this;\n\n    // needed to ensure consistent results\n    for (let p of self.participants.values()) {\n        delete p.x;\n        delete p.y;\n        delete p.px;\n        delete p.py;\n        delete p.bounds;\n        p.fixed = 0;\n    }\n\n    //// prune leaves from network then layout, then add back leaves and layout again (fixes haemoglobin)\n    const pruned = [];\n    for (let participant of self.participants.values()) {\n        if (participant.binaryLinks.size > 2 && participant.type !== \"complex\") {\n            pruned.push(participant);\n        }\n    }\n    const allNodesExceptComplexes = Array.from(self.participants.values()).filter(function (value) {\n        return value.type !== \"complex\";\n    });\n\n    if (pruned.length < allNodesExceptComplexes.length\n        && pruned.length > 3 && self.participants.size < 9) {\n        // <9 include hemoglobin, possibly some other small cases, but is catious, tends to mess other things up\n        // console.log(prunedIn);\n        doLayout(pruned, true);\n    } else {\n        doLayout(allNodesExceptComplexes, self.complexes.length > 0);\n    }\n\n    function doLayout(nodes, preRun) {\n        const layoutObj = {}; // todo get rid\n        layoutObj.nodes = nodes;\n        layoutObj.links = [];\n\n        const molLookUp = {};\n        let mi = 0;\n        for (let mol of nodes) {\n            molLookUp[mol.id] = mi;\n            mi++;\n        }\n\n        for (let binaryLink of self.allBinaryLinks.values()) {\n            const fromMol = binaryLink.participants[0];\n            const toMol = binaryLink.participants[1];\n            // if (preRun || (fromMol.binaryLinks.size === 4 || toMol.binaryLinks.size == 4)) {\n            const source = fromMol; //molLookUp[fromMol.id];\n            const target = toMol; //molLookUp[toMol.id];\n\n            if (source !== target && nodes.indexOf(source) !== -1 && nodes.indexOf(target) !== -1) { // todo - check what this is doing\n                const linkObj = {};\n                linkObj.source = molLookUp[fromMol.id];\n                linkObj.target = molLookUp[toMol.id];\n                linkObj.id = binaryLink.id;\n                layoutObj.links.push(linkObj);\n            }\n            // }\n        }\n\n        const groups = [];\n        if (!preRun && self.complexes) {\n            for (let g of self.complexes) {\n                g.leaves = [];\n                g.groups = [];\n                for (let interactor of g.naryLink.participants) {\n                    if (interactor.type !== \"complex\") {\n                        g.leaves.push(layoutObj.nodes.indexOf(interactor));\n                    }\n                }\n                groups.push(g);\n            }\n            for (let g of self.complexes) {\n                for (let interactor of g.naryLink.participants) {\n                    if (interactor.type === \"complex\") {\n                        //console.log(groups.indexOf(interactor));\n                        g.groups.push(groups.indexOf(interactor));\n                    }\n                }\n            }\n        }\n\n        //console.log(\"groups\", groups);\n        delete self.d3cola._lastStress;\n        delete self.d3cola._alpha;\n        delete self.d3cola._descent;\n        delete self.d3cola._rootGroup;\n\n        let linkLength = (nodes.length < 30) ? 30 : 20;\n        const width = self.svgElement.parentNode.clientWidth;\n        const height = self.svgElement.parentNode.clientHeight;\n        //console.log(\"**\", layoutObj);\n        self.d3cola.size([height - 40, width - 40])\n            .nodes(layoutObj.nodes).groups(groups).links(layoutObj.links).avoidOverlaps(true);\n        let groupDebugSel, participantDebugSel;\n        if (self.debug) {\n            groupDebugSel = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](self.container).selectAll(\".group\")\n                .data(groups);\n\n            groupDebugSel.enter().append(\"rect\")\n                .classed(\"group\", true)\n                .attr({\n                    rx: 5,\n                    ry: 5\n                })\n                .style(\"stroke\", \"blue\")\n                .style(\"fill\", \"none\");\n\n            participantDebugSel = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](self.container).selectAll(\".node\")\n                .data(layoutObj.nodes);\n\n            participantDebugSel.enter().append(\"rect\")\n                .classed(\"node\", true)\n                .attr({\n                    rx: 5,\n                    ry: 5\n                })\n                .style(\"stroke\", \"red\")\n                .style(\"fill\", \"none\");\n\n            groupDebugSel.exit().remove();\n            participantDebugSel.exit().remove();\n        }\n\n        const startTime = Date.now();\n        self.d3cola.symmetricDiffLinkLengths(linkLength)\n            .on(\"tick\", function () {\n                if (Date.now() - startTime > 750) {//!preRun) {\n                    const nodes = self.d3cola.nodes();\n                    for (let node of nodes) {\n                        node.setPosition(node.x, node.y);\n                    }\n                    self.setAllLinkCoordinates();\n                    self.zoomToExtent();\n                    if (self.debug) {\n                        groupDebugSel.attr({\n                            x: function (d) {\n                                return d.bounds.x;// + (width / 2);\n                            },\n                            y: function (d) {\n                                return d.bounds.y;// + (height / 2);\n                            },\n                            width: function (d) {\n                                return d.bounds.width();\n                            },\n                            height: function (d) {\n                                return d.bounds.height();\n                            }\n                        });\n\n                        participantDebugSel.attr({\n                            x: function (d) {\n                                return d.bounds.x;// + (width / 2);\n                            },\n                            y: function (d) {\n                                return d.bounds.y;// + (height / 2);\n                            },\n                            width: function (d) {\n                                return d.bounds.width();\n                            },\n                            height: function (d) {\n                                return d.bounds.height();\n                            }\n                        });\n                    }\n                }\n            })\n            .on(\"end\", function () {\n                if (preRun) {\n                    // alert(\"initial run complete\");\n                    //     // for (let p of layoutObj.nodes) {\n                    //     //         p.fixed = 1;\n                    //     // }\n                    doLayout(allNodesExceptComplexes, false);\n                } else {\n                    for (let node of nodes) {\n                        node.setPosition(node.x, node.y);\n                    }\n                    self.setAllLinkCoordinates();\n                    self.zoomToExtent();\n                }\n            });\n        if (preRun) {\n            self.d3cola.start(23, 23, 0, 0, true);//, false, false);\n        } else {\n            self.d3cola.start(0, 23, 23, 0, true);//, false, false);\n        }\n    }\n};\n\nApp.prototype.getSVG = function () { //todo - somewhat broken, annotations missing\n    const svgSel = d3__WEBPACK_IMPORTED_MODULE_2__[\"select\"](this.el).selectAll(\"svg\");\n    const svgArr = [svgSel.node()];\n    const svgStrings = _svgexp__WEBPACK_IMPORTED_MODULE_7__[\"svgUtils\"].capture(svgArr);\n    return _svgexp__WEBPACK_IMPORTED_MODULE_7__[\"svgUtils\"].makeXMLStr(new XMLSerializer(), svgStrings[0]);\n};\n\n// transform the mouse-position into a position on the svg\nApp.prototype.mouseToSVG = function (x, y) {\n    const p = this.svgElement.createSVGPoint();\n    p.x = x;\n    p.y = y;\n    return p.matrixTransform(this.container.getCTM().inverse());\n};\n\n// reads MI JSON format\nApp.prototype.readMIJSON = function (miJson, expand = true) {\n    Object(_read_mijson__WEBPACK_IMPORTED_MODULE_5__[\"readMijson\"])(miJson, this, expand);\n    this.init();\n};\n\nApp.prototype.checkLinks = function () {\n    for (let link of this.allNaryLinks.values()) {\n        link.check();\n    }\n    for (let link of this.allBinaryLinks.values()) {\n        link.check();\n    }\n    for (let link of this.allUnaryLinks.values()) {\n        link.check();\n    }\n    for (let link of this.allSequenceLinks.values()) {\n        link.check();\n    }\n};\n\nApp.prototype.setAllLinkCoordinates = function () {\n    for (let link of this.allNaryLinks.values()) {\n        link.setLinkCoordinates();\n    }\n    for (let link of this.allBinaryLinks.values()) {\n        link.setLinkCoordinates();\n    }\n    for (let link of this.allUnaryLinks.values()) {\n        link.setLinkCoordinates();\n    }\n    for (let link of this.allSequenceLinks.values()) {\n        link.setLinkCoordinates();\n    }\n};\n\nApp.prototype.showTooltip = function (p) {\n    let ttX, ttY;\n    const length = this.tooltip.getComputedTextLength() + 16;\n    const width = this.svgElement.parentNode.clientWidth;\n    const height = this.svgElement.parentNode.clientHeight;\n    if (p.x + 20 + length < width) {\n        ttX = p.x;\n    } else {\n        ttX = width - length - 20;\n    }\n\n    if (p.y + 60 < height) {\n        ttY = p.y;\n    } else {\n        ttY = height - 60;\n    }\n    this.tooltip.setAttribute(\"x\", ttX + 22);\n    this.tooltip.setAttribute(\"y\", ttY + 47);\n    this.tooltip_bg.setAttribute(\"x\", ttX + 16);\n    this.tooltip_bg.setAttribute(\"y\", ttY + 28);\n    this.tooltip_subBg.setAttribute(\"x\", ttX + 16);\n    this.tooltip_subBg.setAttribute(\"y\", ttY + 28);\n};\n\nApp.prototype.setTooltip = function (text, color) {\n    if (text) {\n        this.tooltip.firstChild.data = text.toString().replace(/&(quot);/g, \"\\\"\");\n        this.tooltip.setAttribute(\"display\", \"block\");\n        const length = this.tooltip.getComputedTextLength();\n        this.tooltip_bg.setAttribute(\"width\", length + 16);\n        this.tooltip_subBg.setAttribute(\"width\", length + 16);\n        if (typeof color !== \"undefined\" && color != null) {\n            this.tooltip_bg.setAttribute(\"fill\", color);\n            this.tooltip_bg.setAttribute(\"stroke\", color);\n            this.tooltip_bg.setAttribute(\"fill-opacity\", \"0.0\");\n        } else {\n            this.tooltip_bg.setAttribute(\"fill\", \"white\");\n            this.tooltip_bg.setAttribute(\"stroke\", \"grey\");\n        }\n        // todo - whats this height for?\n        this.tooltip_bg.setAttribute(\"height\", \"28\");\n        this.tooltip_subBg.setAttribute(\"height\", \"28\");\n        this.tooltip_bg.setAttribute(\"display\", \"block\");\n        this.tooltip_subBg.setAttribute(\"display\", \"block\");\n    } else {\n        this.hideTooltip();\n    }\n};\n\nApp.prototype.hideTooltip = function () {\n    this.tooltip.setAttribute(\"display\", \"none\");\n    this.tooltip_bg.setAttribute(\"display\", \"none\");\n    this.tooltip_subBg.setAttribute(\"display\", \"none\");\n};\n\nApp.prototype.addColorSchemeKey = function (/*HTMLDivElement*/ div) {\n    this.colorSchemeKeyDivs.add(div);\n    _color_scheme_key__WEBPACK_IMPORTED_MODULE_8__[\"update\"](div, this);\n};\n\nApp.prototype.removeColorSchemeKey = function (/*HTMLDivElement*/ colorSchemeKeyDiv) {\n    this.colorSchemeKeyDivs.remove(colorSchemeKeyDiv);\n    colorSchemeKeyDiv.textContent = \"\";\n};\n\n//for backwards compatibility (noe?), tbh i might have made a bit of a mess here\nApp.prototype.setAnnotations = function (annoChoice) {\n    annoChoice = annoChoice.toUpperCase();\n    for (let annoType of this.annotationSetsShown.keys()) {\n        this.showAnnotations(annoType, annoChoice === annoType);\n    }\n};\n\nApp.prototype.showAnnotations = function (annoChoice, show) {\n    this.annotationSetsShown.set(annoChoice, show);\n    this.updateAnnotations();\n};\n\nApp.prototype.updateAnnotations = function () {\n    // //clear all annot's\n    for (let mol of this.participants.values()) {\n        if (mol.type === \"protein\") {\n            mol.clearPositionalFeatures();\n        }\n    }\n    Object(_annotationUtils__WEBPACK_IMPORTED_MODULE_6__[\"chooseColors\"])(this);\n    this.colorSchemeChanged();\n\n    for (let mol of this.participants.values()) {\n        if (mol.type === \"protein\") {\n            mol.updatePositionalFeatures();\n        }\n    }\n    Object(_annotationUtils__WEBPACK_IMPORTED_MODULE_6__[\"chooseColors\"])(this);\n    this.colorSchemeChanged();\n};\n\nApp.prototype.colorSchemeChanged = function () {\n    for (let div of this.colorSchemeKeyDivs) {\n        _color_scheme_key__WEBPACK_IMPORTED_MODULE_8__[\"update\"](div, this);\n    }\n};\n\nApp.prototype.getComplexColors = function () {\n    return _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__[\"NaryLink\"].naryColors;\n};\n\nApp.prototype.getFeatureColors = function () {\n    return this.featureColors;\n};\n\nApp.prototype.collapseAll = function () {\n    for (let participant of this.participants.values()) {\n        if (participant.expanded) {\n            participant.setForm(0);\n        }\n    }\n};\n\nApp.prototype.expandAll = function () {\n    for (let participant of this.participants.values()) {\n        if (participant.type === \"protein\" && !participant.expanded) {\n            participant.setForm(1);\n        }\n    }\n};\n\n//from noe\nApp.prototype.expandAndCollapseSelection = function (moleculesSelected) {\n    for (let participant of this.participants.values()) {\n        const molecule_id = participant.json.identifier.id;\n        if (moleculesSelected.includes(molecule_id)) {\n            if (!participant.expanded) {\n                participant.setForm(1);\n            }\n        } else if (participant.expanded) {\n            participant.setForm(0);\n        }\n    }\n};\n\n\nApp.prototype.addHoverListener = function (hoverListener) {\n    this.hoverListeners.add(hoverListener);\n};\n\nApp.prototype.removeHoverListener = function (hoverListener) {\n    this.hoverListeners.remove(hoverListener);\n};\n\nApp.prototype.notifyHoverListeners = function (interactorIdArr) {\n    for (let hl of this.hoverListeners) {\n        hl(interactorIdArr);\n    }\n};\n\n\n// export function makeSymbolKey(targetDiv){\n//     new SymbolKey(targetDiv);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/app.js\n");

/***/ }),

/***/ "./src/js/cola.js":
/*!************************!*\
  !*** ./src/js/cola.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./src/adaptor\"));\n__export(require(\"./src/d3adaptor\"));\n__export(require(\"./src/descent\"));\n__export(require(\"./src/geom\"));\n__export(require(\"./src/gridrouter\"));\n__export(require(\"./src/handledisconnected\"));\n__export(require(\"./src/layout\"));\n__export(require(\"./src/layout3d\"));\n__export(require(\"./src/linklengths\"));\n__export(require(\"./src/powergraph\"));\n__export(require(\"./src/pqueue\"));\n__export(require(\"./src/rbtree\"));\n__export(require(\"./src/rectangle\"));\n__export(require(\"./src/shortestpaths\"));\n__export(require(\"./src/vpsc\"));\n__export(require(\"./src/batch\"));\n\n},{\"./src/adaptor\":2,\"./src/batch\":3,\"./src/d3adaptor\":4,\"./src/descent\":7,\"./src/geom\":8,\"./src/gridrouter\":9,\"./src/handledisconnected\":10,\"./src/layout\":11,\"./src/layout3d\":12,\"./src/linklengths\":13,\"./src/powergraph\":14,\"./src/pqueue\":15,\"./src/rbtree\":16,\"./src/rectangle\":17,\"./src/shortestpaths\":18,\"./src/vpsc\":19}],2:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar layout_1 = require(\"./layout\");\nvar LayoutAdaptor = (function (_super) {\n    __extends(LayoutAdaptor, _super);\n    function LayoutAdaptor(options) {\n        var _this = _super.call(this) || this;\n        var self = _this;\n        var o = options;\n        if (o.trigger) {\n            _this.trigger = o.trigger;\n        }\n        if (o.kick) {\n            _this.kick = o.kick;\n        }\n        if (o.drag) {\n            _this.drag = o.drag;\n        }\n        if (o.on) {\n            _this.on = o.on;\n        }\n        _this.dragstart = _this.dragStart = layout_1.Layout.dragStart;\n        _this.dragend = _this.dragEnd = layout_1.Layout.dragEnd;\n        return _this;\n    }\n    LayoutAdaptor.prototype.trigger = function (e) { };\n    ;\n    LayoutAdaptor.prototype.kick = function () { };\n    ;\n    LayoutAdaptor.prototype.drag = function () { };\n    ;\n    LayoutAdaptor.prototype.on = function (eventType, listener) { return this; };\n    ;\n    return LayoutAdaptor;\n}(layout_1.Layout));\nexports.LayoutAdaptor = LayoutAdaptor;\nfunction adaptor(options) {\n    return new LayoutAdaptor(options);\n}\nexports.adaptor = adaptor;\n\n},{\"./layout\":11}],3:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar layout_1 = require(\"./layout\");\nvar gridrouter_1 = require(\"./gridrouter\");\nfunction gridify(pgLayout, nudgeGap, margin, groupMargin) {\n    pgLayout.cola.start(0, 0, 0, 10, false);\n    var gridrouter = route(pgLayout.cola.nodes(), pgLayout.cola.groups(), margin, groupMargin);\n    return gridrouter.routeEdges(pgLayout.powerGraph.powerEdges, nudgeGap, function (e) { return e.source.routerNode.id; }, function (e) { return e.target.routerNode.id; });\n}\nexports.gridify = gridify;\nfunction route(nodes, groups, margin, groupMargin) {\n    nodes.forEach(function (d) {\n        d.routerNode = {\n            name: d.name,\n            bounds: d.bounds.inflate(-margin)\n        };\n    });\n    groups.forEach(function (d) {\n        d.routerNode = {\n            bounds: d.bounds.inflate(-groupMargin),\n            children: (typeof d.groups !== 'undefined' ? d.groups.map(function (c) { return nodes.length + c.id; }) : [])\n                .concat(typeof d.leaves !== 'undefined' ? d.leaves.map(function (c) { return c.index; }) : [])\n        };\n    });\n    var gridRouterNodes = nodes.concat(groups).map(function (d, i) {\n        d.routerNode.id = i;\n        return d.routerNode;\n    });\n    return new gridrouter_1.GridRouter(gridRouterNodes, {\n        getChildren: function (v) { return v.children; },\n        getBounds: function (v) { return v.bounds; }\n    }, margin - groupMargin);\n}\nfunction powerGraphGridLayout(graph, size, grouppadding) {\n    var powerGraph;\n    graph.nodes.forEach(function (v, i) { return v.index = i; });\n    new layout_1.Layout()\n        .avoidOverlaps(false)\n        .nodes(graph.nodes)\n        .links(graph.links)\n        .powerGraphGroups(function (d) {\n        powerGraph = d;\n        powerGraph.groups.forEach(function (v) { return v.padding = grouppadding; });\n    });\n    var n = graph.nodes.length;\n    var edges = [];\n    var vs = graph.nodes.slice(0);\n    vs.forEach(function (v, i) { return v.index = i; });\n    powerGraph.groups.forEach(function (g) {\n        var sourceInd = g.index = g.id + n;\n        vs.push(g);\n        if (typeof g.leaves !== 'undefined')\n            g.leaves.forEach(function (v) { return edges.push({ source: sourceInd, target: v.index }); });\n        if (typeof g.groups !== 'undefined')\n            g.groups.forEach(function (gg) { return edges.push({ source: sourceInd, target: gg.id + n }); });\n    });\n    powerGraph.powerEdges.forEach(function (e) {\n        edges.push({ source: e.source.index, target: e.target.index });\n    });\n    new layout_1.Layout()\n        .size(size)\n        .nodes(vs)\n        .links(edges)\n        .avoidOverlaps(false)\n        .linkDistance(30)\n        .symmetricDiffLinkLengths(5)\n        .convergenceThreshold(1e-4)\n        .start(100, 0, 0, 0, false);\n    return {\n        cola: new layout_1.Layout()\n            .convergenceThreshold(1e-3)\n            .size(size)\n            .avoidOverlaps(true)\n            .nodes(graph.nodes)\n            .links(graph.links)\n            .groupCompactness(1e-4)\n            .linkDistance(30)\n            .symmetricDiffLinkLengths(5)\n            .powerGraphGroups(function (d) {\n            powerGraph = d;\n            powerGraph.groups.forEach(function (v) {\n                v.padding = grouppadding;\n            });\n        }).start(50, 0, 100, 0, false),\n        powerGraph: powerGraph\n    };\n}\nexports.powerGraphGridLayout = powerGraphGridLayout;\n\n},{\"./gridrouter\":9,\"./layout\":11}],4:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar d3v3 = require(\"./d3v3adaptor\");\nvar d3v4 = require(\"./d3v4adaptor\");\n;\nfunction d3adaptor(d3Context) {\n    if (!d3Context || isD3V3(d3Context)) {\n        return new d3v3.D3StyleLayoutAdaptor();\n    }\n    return new d3v4.D3StyleLayoutAdaptor(d3Context);\n}\nexports.d3adaptor = d3adaptor;\nfunction isD3V3(d3Context) {\n    var v3exp = /^3\\./;\n    return d3Context.version && d3Context.version.match(v3exp) !== null;\n}\n\n},{\"./d3v3adaptor\":5,\"./d3v4adaptor\":6}],5:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar layout_1 = require(\"./layout\");\nvar D3StyleLayoutAdaptor = (function (_super) {\n    __extends(D3StyleLayoutAdaptor, _super);\n    function D3StyleLayoutAdaptor() {\n        var _this = _super.call(this) || this;\n        _this.event = d3.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);\n        var d3layout = _this;\n        var drag;\n        _this.drag = function () {\n            if (!drag) {\n                var drag = d3.behavior.drag()\n                    .origin(layout_1.Layout.dragOrigin)\n                    .on(\"dragstart.d3adaptor\", layout_1.Layout.dragStart)\n                    .on(\"drag.d3adaptor\", function (d) {\n                    layout_1.Layout.drag(d, d3.event);\n                    d3layout.resume();\n                })\n                    .on(\"dragend.d3adaptor\", layout_1.Layout.dragEnd);\n            }\n            if (!arguments.length)\n                return drag;\n            this\n                .call(drag);\n        };\n        return _this;\n    }\n    D3StyleLayoutAdaptor.prototype.trigger = function (e) {\n        var d3event = { type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress };\n        this.event[d3event.type](d3event);\n    };\n    D3StyleLayoutAdaptor.prototype.kick = function () {\n        var _this = this;\n        d3.timer(function () { return _super.prototype.tick.call(_this); });\n    };\n    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {\n        if (typeof eventType === 'string') {\n            this.event.on(eventType, listener);\n        }\n        else {\n            this.event.on(layout_1.EventType[eventType], listener);\n        }\n        return this;\n    };\n    return D3StyleLayoutAdaptor;\n}(layout_1.Layout));\nexports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;\nfunction d3adaptor() {\n    return new D3StyleLayoutAdaptor();\n}\nexports.d3adaptor = d3adaptor;\n\n},{\"./layout\":11}],6:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar layout_1 = require(\"./layout\");\nvar D3StyleLayoutAdaptor = (function (_super) {\n    __extends(D3StyleLayoutAdaptor, _super);\n    function D3StyleLayoutAdaptor(d3Context) {\n        var _this = _super.call(this) || this;\n        _this.d3Context = d3Context;\n        _this.event = d3Context.dispatch(layout_1.EventType[layout_1.EventType.start], layout_1.EventType[layout_1.EventType.tick], layout_1.EventType[layout_1.EventType.end]);\n        var d3layout = _this;\n        var drag;\n        _this.drag = function () {\n            if (!drag) {\n                var drag = d3Context.drag()\n                    .subject(layout_1.Layout.dragOrigin)\n                    .on(\"start.d3adaptor\", layout_1.Layout.dragStart)\n                    .on(\"drag.d3adaptor\", function (d) {\n                    layout_1.Layout.drag(d, d3Context.event);\n                    d3layout.resume();\n                })\n                    .on(\"end.d3adaptor\", layout_1.Layout.dragEnd);\n            }\n            if (!arguments.length)\n                return drag;\n            arguments[0].call(drag);\n        };\n        return _this;\n    }\n    D3StyleLayoutAdaptor.prototype.trigger = function (e) {\n        var d3event = { type: layout_1.EventType[e.type], alpha: e.alpha, stress: e.stress };\n        this.event.call(d3event.type, d3event);\n    };\n    D3StyleLayoutAdaptor.prototype.kick = function () {\n        var _this = this;\n        var t = this.d3Context.timer(function () { return _super.prototype.tick.call(_this) && t.stop(); });\n    };\n    D3StyleLayoutAdaptor.prototype.on = function (eventType, listener) {\n        if (typeof eventType === 'string') {\n            this.event.on(eventType, listener);\n        }\n        else {\n            this.event.on(layout_1.EventType[eventType], listener);\n        }\n        return this;\n    };\n    return D3StyleLayoutAdaptor;\n}(layout_1.Layout));\nexports.D3StyleLayoutAdaptor = D3StyleLayoutAdaptor;\n\n},{\"./layout\":11}],7:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Locks = (function () {\n    function Locks() {\n        this.locks = {};\n    }\n    Locks.prototype.add = function (id, x) {\n        this.locks[id] = x;\n    };\n    Locks.prototype.clear = function () {\n        this.locks = {};\n    };\n    Locks.prototype.isEmpty = function () {\n        for (var l in this.locks)\n            return false;\n        return true;\n    };\n    Locks.prototype.apply = function (f) {\n        for (var l in this.locks) {\n            f(Number(l), this.locks[l]);\n        }\n    };\n    return Locks;\n}());\nexports.Locks = Locks;\nvar Descent = (function () {\n    function Descent(x, D, G) {\n        if (G === void 0) { G = null; }\n        this.D = D;\n        this.G = G;\n        this.threshold = 0.0001;\n        this.numGridSnapNodes = 0;\n        this.snapGridSize = 100;\n        this.snapStrength = 1000;\n        this.scaleSnapByMaxH = false;\n        this.random = new PseudoRandom();\n        this.project = null;\n        this.x = x;\n        this.k = x.length;\n        var n = this.n = x[0].length;\n        this.H = new Array(this.k);\n        this.g = new Array(this.k);\n        this.Hd = new Array(this.k);\n        this.a = new Array(this.k);\n        this.b = new Array(this.k);\n        this.c = new Array(this.k);\n        this.d = new Array(this.k);\n        this.e = new Array(this.k);\n        this.ia = new Array(this.k);\n        this.ib = new Array(this.k);\n        this.xtmp = new Array(this.k);\n        this.locks = new Locks();\n        this.minD = Number.MAX_VALUE;\n        var i = n, j;\n        while (i--) {\n            j = n;\n            while (--j > i) {\n                var d = D[i][j];\n                if (d > 0 && d < this.minD) {\n                    this.minD = d;\n                }\n            }\n        }\n        if (this.minD === Number.MAX_VALUE)\n            this.minD = 1;\n        i = this.k;\n        while (i--) {\n            this.g[i] = new Array(n);\n            this.H[i] = new Array(n);\n            j = n;\n            while (j--) {\n                this.H[i][j] = new Array(n);\n            }\n            this.Hd[i] = new Array(n);\n            this.a[i] = new Array(n);\n            this.b[i] = new Array(n);\n            this.c[i] = new Array(n);\n            this.d[i] = new Array(n);\n            this.e[i] = new Array(n);\n            this.ia[i] = new Array(n);\n            this.ib[i] = new Array(n);\n            this.xtmp[i] = new Array(n);\n        }\n    }\n    Descent.createSquareMatrix = function (n, f) {\n        var M = new Array(n);\n        for (var i = 0; i < n; ++i) {\n            M[i] = new Array(n);\n            for (var j = 0; j < n; ++j) {\n                M[i][j] = f(i, j);\n            }\n        }\n        return M;\n    };\n    Descent.prototype.offsetDir = function () {\n        var _this = this;\n        var u = new Array(this.k);\n        var l = 0;\n        for (var i = 0; i < this.k; ++i) {\n            var x = u[i] = this.random.getNextBetween(0.01, 1) - 0.5;\n            l += x * x;\n        }\n        l = Math.sqrt(l);\n        return u.map(function (x) { return x *= _this.minD / l; });\n    };\n    Descent.prototype.computeDerivatives = function (x) {\n        var _this = this;\n        var n = this.n;\n        if (n < 1)\n            return;\n        var i;\n        var d = new Array(this.k);\n        var d2 = new Array(this.k);\n        var Huu = new Array(this.k);\n        var maxH = 0;\n        for (var u_1 = 0; u_1 < n; ++u_1) {\n            for (i = 0; i < this.k; ++i)\n                Huu[i] = this.g[i][u_1] = 0;\n            for (var v = 0; v < n; ++v) {\n                if (u_1 === v)\n                    continue;\n                var maxDisplaces = n;\n                var distanceSquared = 0;\n                while (maxDisplaces--) {\n                    distanceSquared = 0;\n                    for (i = 0; i < this.k; ++i) {\n                        var dx_1 = d[i] = x[i][u_1] - x[i][v];\n                        distanceSquared += d2[i] = dx_1 * dx_1;\n                    }\n                    if (distanceSquared > 1e-9)\n                        break;\n                    var rd = this.offsetDir();\n                    for (i = 0; i < this.k; ++i)\n                        x[i][v] += rd[i];\n                }\n                var distance = Math.sqrt(distanceSquared);\n                var idealDistance = this.D[u_1][v];\n                var weight = this.G != null ? this.G[u_1][v] : 1;\n                if (weight > 1 && distance > idealDistance || !isFinite(idealDistance)) {\n                    for (i = 0; i < this.k; ++i)\n                        this.H[i][u_1][v] = 0;\n                    continue;\n                }\n                if (weight > 1) {\n                    weight = 1;\n                }\n                var idealDistSquared = idealDistance * idealDistance, gs = 2 * weight * (distance - idealDistance) / (idealDistSquared * distance), distanceCubed = distanceSquared * distance, hs = 2 * -weight / (idealDistSquared * distanceCubed);\n                if (!isFinite(gs))\n                    console.log(gs);\n                for (i = 0; i < this.k; ++i) {\n                    this.g[i][u_1] += d[i] * gs;\n                    Huu[i] -= this.H[i][u_1][v] = hs * (2 * distanceCubed + idealDistance * (d2[i] - distanceSquared));\n                }\n            }\n            for (i = 0; i < this.k; ++i)\n                maxH = Math.max(maxH, this.H[i][u_1][u_1] = Huu[i]);\n        }\n        var r = this.snapGridSize / 2;\n        var g = this.snapGridSize;\n        var w = this.snapStrength;\n        var k = w / (r * r);\n        var numNodes = this.numGridSnapNodes;\n        for (var u = 0; u < numNodes; ++u) {\n            for (i = 0; i < this.k; ++i) {\n                var xiu = this.x[i][u];\n                var m = xiu / g;\n                var f = m % 1;\n                var q = m - f;\n                var a = Math.abs(f);\n                var dx = (a <= 0.5) ? xiu - q * g :\n                    (xiu > 0) ? xiu - (q + 1) * g : xiu - (q - 1) * g;\n                if (-r < dx && dx <= r) {\n                    if (this.scaleSnapByMaxH) {\n                        this.g[i][u] += maxH * k * dx;\n                        this.H[i][u][u] += maxH * k;\n                    }\n                    else {\n                        this.g[i][u] += k * dx;\n                        this.H[i][u][u] += k;\n                    }\n                }\n            }\n        }\n        if (!this.locks.isEmpty()) {\n            this.locks.apply(function (u, p) {\n                for (i = 0; i < _this.k; ++i) {\n                    _this.H[i][u][u] += maxH;\n                    _this.g[i][u] -= maxH * (p[i] - x[i][u]);\n                }\n            });\n        }\n    };\n    Descent.dotProd = function (a, b) {\n        var x = 0, i = a.length;\n        while (i--)\n            x += a[i] * b[i];\n        return x;\n    };\n    Descent.rightMultiply = function (m, v, r) {\n        var i = m.length;\n        while (i--)\n            r[i] = Descent.dotProd(m[i], v);\n    };\n    Descent.prototype.computeStepSize = function (d) {\n        var numerator = 0, denominator = 0;\n        for (var i = 0; i < this.k; ++i) {\n            numerator += Descent.dotProd(this.g[i], d[i]);\n            Descent.rightMultiply(this.H[i], d[i], this.Hd[i]);\n            denominator += Descent.dotProd(d[i], this.Hd[i]);\n        }\n        if (denominator === 0 || !isFinite(denominator))\n            return 0;\n        return 1 * numerator / denominator;\n    };\n    Descent.prototype.reduceStress = function () {\n        this.computeDerivatives(this.x);\n        var alpha = this.computeStepSize(this.g);\n        for (var i = 0; i < this.k; ++i) {\n            this.takeDescentStep(this.x[i], this.g[i], alpha);\n        }\n        return this.computeStress();\n    };\n    Descent.copy = function (a, b) {\n        var m = a.length, n = b[0].length;\n        for (var i = 0; i < m; ++i) {\n            for (var j = 0; j < n; ++j) {\n                b[i][j] = a[i][j];\n            }\n        }\n    };\n    Descent.prototype.stepAndProject = function (x0, r, d, stepSize) {\n        Descent.copy(x0, r);\n        this.takeDescentStep(r[0], d[0], stepSize);\n        if (this.project)\n            this.project[0](x0[0], x0[1], r[0]);\n        this.takeDescentStep(r[1], d[1], stepSize);\n        if (this.project)\n            this.project[1](r[0], x0[1], r[1]);\n        for (var i = 2; i < this.k; i++)\n            this.takeDescentStep(r[i], d[i], stepSize);\n    };\n    Descent.mApply = function (m, n, f) {\n        var i = m;\n        while (i-- > 0) {\n            var j = n;\n            while (j-- > 0)\n                f(i, j);\n        }\n    };\n    Descent.prototype.matrixApply = function (f) {\n        Descent.mApply(this.k, this.n, f);\n    };\n    Descent.prototype.computeNextPosition = function (x0, r) {\n        var _this = this;\n        this.computeDerivatives(x0);\n        var alpha = this.computeStepSize(this.g);\n        this.stepAndProject(x0, r, this.g, alpha);\n        if (this.project) {\n            this.matrixApply(function (i, j) { return _this.e[i][j] = x0[i][j] - r[i][j]; });\n            var beta = this.computeStepSize(this.e);\n            beta = Math.max(0.2, Math.min(beta, 1));\n            this.stepAndProject(x0, r, this.e, beta);\n        }\n    };\n    Descent.prototype.run = function (iterations) {\n        var stress = Number.MAX_VALUE, converged = false;\n        while (!converged && iterations-- > 0) {\n            var s = this.rungeKutta();\n            converged = Math.abs(stress / s - 1) < this.threshold;\n            stress = s;\n        }\n        return stress;\n    };\n    Descent.prototype.rungeKutta = function () {\n        var _this = this;\n        this.computeNextPosition(this.x, this.a);\n        Descent.mid(this.x, this.a, this.ia);\n        this.computeNextPosition(this.ia, this.b);\n        Descent.mid(this.x, this.b, this.ib);\n        this.computeNextPosition(this.ib, this.c);\n        this.computeNextPosition(this.c, this.d);\n        var disp = 0;\n        this.matrixApply(function (i, j) {\n            var x = (_this.a[i][j] + 2.0 * _this.b[i][j] + 2.0 * _this.c[i][j] + _this.d[i][j]) / 6.0, d = _this.x[i][j] - x;\n            disp += d * d;\n            _this.x[i][j] = x;\n        });\n        return disp;\n    };\n    Descent.mid = function (a, b, m) {\n        Descent.mApply(a.length, a[0].length, function (i, j) {\n            return m[i][j] = a[i][j] + (b[i][j] - a[i][j]) / 2.0;\n        });\n    };\n    Descent.prototype.takeDescentStep = function (x, d, stepSize) {\n        for (var i = 0; i < this.n; ++i) {\n            x[i] = x[i] - stepSize * d[i];\n        }\n    };\n    Descent.prototype.computeStress = function () {\n        var stress = 0;\n        for (var u = 0, nMinus1 = this.n - 1; u < nMinus1; ++u) {\n            for (var v = u + 1, n = this.n; v < n; ++v) {\n                var l = 0;\n                for (var i = 0; i < this.k; ++i) {\n                    var dx = this.x[i][u] - this.x[i][v];\n                    l += dx * dx;\n                }\n                l = Math.sqrt(l);\n                var d = this.D[u][v];\n                if (!isFinite(d))\n                    continue;\n                var rl = d - l;\n                var d2 = d * d;\n                stress += rl * rl / d2;\n            }\n        }\n        return stress;\n    };\n    Descent.zeroDistance = 1e-10;\n    return Descent;\n}());\nexports.Descent = Descent;\nvar PseudoRandom = (function () {\n    function PseudoRandom(seed) {\n        if (seed === void 0) { seed = 1; }\n        this.seed = seed;\n        this.a = 214013;\n        this.c = 2531011;\n        this.m = 2147483648;\n        this.range = 32767;\n    }\n    PseudoRandom.prototype.getNext = function () {\n        this.seed = (this.seed * this.a + this.c) % this.m;\n        return (this.seed >> 16) / this.range;\n    };\n    PseudoRandom.prototype.getNextBetween = function (min, max) {\n        return min + this.getNext() * (max - min);\n    };\n    return PseudoRandom;\n}());\nexports.PseudoRandom = PseudoRandom;\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rectangle_1 = require(\"./rectangle\");\nvar Point = (function () {\n    function Point() {\n    }\n    return Point;\n}());\nexports.Point = Point;\nvar LineSegment = (function () {\n    function LineSegment(x1, y1, x2, y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }\n    return LineSegment;\n}());\nexports.LineSegment = LineSegment;\nvar PolyPoint = (function (_super) {\n    __extends(PolyPoint, _super);\n    function PolyPoint() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PolyPoint;\n}(Point));\nexports.PolyPoint = PolyPoint;\nfunction isLeft(P0, P1, P2) {\n    return (P1.x - P0.x) * (P2.y - P0.y) - (P2.x - P0.x) * (P1.y - P0.y);\n}\nexports.isLeft = isLeft;\nfunction above(p, vi, vj) {\n    return isLeft(p, vi, vj) > 0;\n}\nfunction below(p, vi, vj) {\n    return isLeft(p, vi, vj) < 0;\n}\nfunction ConvexHull(S) {\n    var P = S.slice(0).sort(function (a, b) { return a.x !== b.x ? b.x - a.x : b.y - a.y; });\n    var n = S.length, i;\n    var minmin = 0;\n    var xmin = P[0].x;\n    for (i = 1; i < n; ++i) {\n        if (P[i].x !== xmin)\n            break;\n    }\n    var minmax = i - 1;\n    var H = [];\n    H.push(P[minmin]);\n    if (minmax === n - 1) {\n        if (P[minmax].y !== P[minmin].y)\n            H.push(P[minmax]);\n    }\n    else {\n        var maxmin, maxmax = n - 1;\n        var xmax = P[n - 1].x;\n        for (i = n - 2; i >= 0; i--)\n            if (P[i].x !== xmax)\n                break;\n        maxmin = i + 1;\n        i = minmax;\n        while (++i <= maxmin) {\n            if (isLeft(P[minmin], P[maxmin], P[i]) >= 0 && i < maxmin)\n                continue;\n            while (H.length > 1) {\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                    break;\n                else\n                    H.length -= 1;\n            }\n            if (i != minmin)\n                H.push(P[i]);\n        }\n        if (maxmax != maxmin)\n            H.push(P[maxmax]);\n        var bot = H.length;\n        i = maxmin;\n        while (--i >= minmax) {\n            if (isLeft(P[maxmax], P[minmax], P[i]) >= 0 && i > minmax)\n                continue;\n            while (H.length > bot) {\n                if (isLeft(H[H.length - 2], H[H.length - 1], P[i]) > 0)\n                    break;\n                else\n                    H.length -= 1;\n            }\n            if (i != minmin)\n                H.push(P[i]);\n        }\n    }\n    return H;\n}\nexports.ConvexHull = ConvexHull;\nfunction clockwiseRadialSweep(p, P, f) {\n    P.slice(0).sort(function (a, b) { return Math.atan2(a.y - p.y, a.x - p.x) - Math.atan2(b.y - p.y, b.x - p.x); }).forEach(f);\n}\nexports.clockwiseRadialSweep = clockwiseRadialSweep;\nfunction nextPolyPoint(p, ps) {\n    if (p.polyIndex === ps.length - 1)\n        return ps[0];\n    return ps[p.polyIndex + 1];\n}\nfunction prevPolyPoint(p, ps) {\n    if (p.polyIndex === 0)\n        return ps[ps.length - 1];\n    return ps[p.polyIndex - 1];\n}\nfunction tangent_PointPolyC(P, V) {\n    var Vclosed = V.slice(0);\n    Vclosed.push(V[0]);\n    return { rtan: Rtangent_PointPolyC(P, Vclosed), ltan: Ltangent_PointPolyC(P, Vclosed) };\n}\nfunction Rtangent_PointPolyC(P, V) {\n    var n = V.length - 1;\n    var a, b, c;\n    var upA, dnC;\n    if (below(P, V[1], V[0]) && !above(P, V[n - 1], V[0]))\n        return 0;\n    for (a = 0, b = n;;) {\n        if (b - a === 1)\n            if (above(P, V[a], V[b]))\n                return a;\n            else\n                return b;\n        c = Math.floor((a + b) / 2);\n        dnC = below(P, V[c + 1], V[c]);\n        if (dnC && !above(P, V[c - 1], V[c]))\n            return c;\n        upA = above(P, V[a + 1], V[a]);\n        if (upA) {\n            if (dnC)\n                b = c;\n            else {\n                if (above(P, V[a], V[c]))\n                    b = c;\n                else\n                    a = c;\n            }\n        }\n        else {\n            if (!dnC)\n                a = c;\n            else {\n                if (below(P, V[a], V[c]))\n                    b = c;\n                else\n                    a = c;\n            }\n        }\n    }\n}\nfunction Ltangent_PointPolyC(P, V) {\n    var n = V.length - 1;\n    var a, b, c;\n    var dnA, dnC;\n    if (above(P, V[n - 1], V[0]) && !below(P, V[1], V[0]))\n        return 0;\n    for (a = 0, b = n;;) {\n        if (b - a === 1)\n            if (below(P, V[a], V[b]))\n                return a;\n            else\n                return b;\n        c = Math.floor((a + b) / 2);\n        dnC = below(P, V[c + 1], V[c]);\n        if (above(P, V[c - 1], V[c]) && !dnC)\n            return c;\n        dnA = below(P, V[a + 1], V[a]);\n        if (dnA) {\n            if (!dnC)\n                b = c;\n            else {\n                if (below(P, V[a], V[c]))\n                    b = c;\n                else\n                    a = c;\n            }\n        }\n        else {\n            if (dnC)\n                a = c;\n            else {\n                if (above(P, V[a], V[c]))\n                    b = c;\n                else\n                    a = c;\n            }\n        }\n    }\n}\nfunction tangent_PolyPolyC(V, W, t1, t2, cmp1, cmp2) {\n    var ix1, ix2;\n    ix1 = t1(W[0], V);\n    ix2 = t2(V[ix1], W);\n    var done = false;\n    while (!done) {\n        done = true;\n        while (true) {\n            if (ix1 === V.length - 1)\n                ix1 = 0;\n            if (cmp1(W[ix2], V[ix1], V[ix1 + 1]))\n                break;\n            ++ix1;\n        }\n        while (true) {\n            if (ix2 === 0)\n                ix2 = W.length - 1;\n            if (cmp2(V[ix1], W[ix2], W[ix2 - 1]))\n                break;\n            --ix2;\n            done = false;\n        }\n    }\n    return { t1: ix1, t2: ix2 };\n}\nexports.tangent_PolyPolyC = tangent_PolyPolyC;\nfunction LRtangent_PolyPolyC(V, W) {\n    var rl = RLtangent_PolyPolyC(W, V);\n    return { t1: rl.t2, t2: rl.t1 };\n}\nexports.LRtangent_PolyPolyC = LRtangent_PolyPolyC;\nfunction RLtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Ltangent_PointPolyC, above, below);\n}\nexports.RLtangent_PolyPolyC = RLtangent_PolyPolyC;\nfunction LLtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Ltangent_PointPolyC, Ltangent_PointPolyC, below, below);\n}\nexports.LLtangent_PolyPolyC = LLtangent_PolyPolyC;\nfunction RRtangent_PolyPolyC(V, W) {\n    return tangent_PolyPolyC(V, W, Rtangent_PointPolyC, Rtangent_PointPolyC, above, above);\n}\nexports.RRtangent_PolyPolyC = RRtangent_PolyPolyC;\nvar BiTangent = (function () {\n    function BiTangent(t1, t2) {\n        this.t1 = t1;\n        this.t2 = t2;\n    }\n    return BiTangent;\n}());\nexports.BiTangent = BiTangent;\nvar BiTangents = (function () {\n    function BiTangents() {\n    }\n    return BiTangents;\n}());\nexports.BiTangents = BiTangents;\nvar TVGPoint = (function (_super) {\n    __extends(TVGPoint, _super);\n    function TVGPoint() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TVGPoint;\n}(Point));\nexports.TVGPoint = TVGPoint;\nvar VisibilityVertex = (function () {\n    function VisibilityVertex(id, polyid, polyvertid, p) {\n        this.id = id;\n        this.polyid = polyid;\n        this.polyvertid = polyvertid;\n        this.p = p;\n        p.vv = this;\n    }\n    return VisibilityVertex;\n}());\nexports.VisibilityVertex = VisibilityVertex;\nvar VisibilityEdge = (function () {\n    function VisibilityEdge(source, target) {\n        this.source = source;\n        this.target = target;\n    }\n    VisibilityEdge.prototype.length = function () {\n        var dx = this.source.p.x - this.target.p.x;\n        var dy = this.source.p.y - this.target.p.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    return VisibilityEdge;\n}());\nexports.VisibilityEdge = VisibilityEdge;\nvar TangentVisibilityGraph = (function () {\n    function TangentVisibilityGraph(P, g0) {\n        this.P = P;\n        this.V = [];\n        this.E = [];\n        if (!g0) {\n            var n = P.length;\n            for (var i = 0; i < n; i++) {\n                var p = P[i];\n                for (var j = 0; j < p.length; ++j) {\n                    var pj = p[j], vv = new VisibilityVertex(this.V.length, i, j, pj);\n                    this.V.push(vv);\n                    if (j > 0)\n                        this.E.push(new VisibilityEdge(p[j - 1].vv, vv));\n                }\n                if (p.length > 1)\n                    this.E.push(new VisibilityEdge(p[0].vv, p[p.length - 1].vv));\n            }\n            for (var i = 0; i < n - 1; i++) {\n                var Pi = P[i];\n                for (var j = i + 1; j < n; j++) {\n                    var Pj = P[j], t = tangents(Pi, Pj);\n                    for (var q in t) {\n                        var c = t[q], source = Pi[c.t1], target = Pj[c.t2];\n                        this.addEdgeIfVisible(source, target, i, j);\n                    }\n                }\n            }\n        }\n        else {\n            this.V = g0.V.slice(0);\n            this.E = g0.E.slice(0);\n        }\n    }\n    TangentVisibilityGraph.prototype.addEdgeIfVisible = function (u, v, i1, i2) {\n        if (!this.intersectsPolys(new LineSegment(u.x, u.y, v.x, v.y), i1, i2)) {\n            this.E.push(new VisibilityEdge(u.vv, v.vv));\n        }\n    };\n    TangentVisibilityGraph.prototype.addPoint = function (p, i1) {\n        var n = this.P.length;\n        this.V.push(new VisibilityVertex(this.V.length, n, 0, p));\n        for (var i = 0; i < n; ++i) {\n            if (i === i1)\n                continue;\n            var poly = this.P[i], t = tangent_PointPolyC(p, poly);\n            this.addEdgeIfVisible(p, poly[t.ltan], i1, i);\n            this.addEdgeIfVisible(p, poly[t.rtan], i1, i);\n        }\n        return p.vv;\n    };\n    TangentVisibilityGraph.prototype.intersectsPolys = function (l, i1, i2) {\n        for (var i = 0, n = this.P.length; i < n; ++i) {\n            if (i != i1 && i != i2 && intersects(l, this.P[i]).length > 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return TangentVisibilityGraph;\n}());\nexports.TangentVisibilityGraph = TangentVisibilityGraph;\nfunction intersects(l, P) {\n    var ints = [];\n    for (var i = 1, n = P.length; i < n; ++i) {\n        var int = rectangle_1.Rectangle.lineIntersection(l.x1, l.y1, l.x2, l.y2, P[i - 1].x, P[i - 1].y, P[i].x, P[i].y);\n        if (int)\n            ints.push(int);\n    }\n    return ints;\n}\nfunction tangents(V, W) {\n    var m = V.length - 1, n = W.length - 1;\n    var bt = new BiTangents();\n    for (var i = 0; i <= m; ++i) {\n        for (var j = 0; j <= n; ++j) {\n            var v1 = V[i == 0 ? m : i - 1];\n            var v2 = V[i];\n            var v3 = V[i == m ? 0 : i + 1];\n            var w1 = W[j == 0 ? n : j - 1];\n            var w2 = W[j];\n            var w3 = W[j == n ? 0 : j + 1];\n            var v1v2w2 = isLeft(v1, v2, w2);\n            var v2w1w2 = isLeft(v2, w1, w2);\n            var v2w2w3 = isLeft(v2, w2, w3);\n            var w1w2v2 = isLeft(w1, w2, v2);\n            var w2v1v2 = isLeft(w2, v1, v2);\n            var w2v2v3 = isLeft(w2, v2, v3);\n            if (v1v2w2 >= 0 && v2w1w2 >= 0 && v2w2w3 < 0\n                && w1w2v2 >= 0 && w2v1v2 >= 0 && w2v2v3 < 0) {\n                bt.ll = new BiTangent(i, j);\n            }\n            else if (v1v2w2 <= 0 && v2w1w2 <= 0 && v2w2w3 > 0\n                && w1w2v2 <= 0 && w2v1v2 <= 0 && w2v2v3 > 0) {\n                bt.rr = new BiTangent(i, j);\n            }\n            else if (v1v2w2 <= 0 && v2w1w2 > 0 && v2w2w3 <= 0\n                && w1w2v2 >= 0 && w2v1v2 < 0 && w2v2v3 >= 0) {\n                bt.rl = new BiTangent(i, j);\n            }\n            else if (v1v2w2 >= 0 && v2w1w2 < 0 && v2w2w3 >= 0\n                && w1w2v2 <= 0 && w2v1v2 > 0 && w2v2v3 <= 0) {\n                bt.lr = new BiTangent(i, j);\n            }\n        }\n    }\n    return bt;\n}\nexports.tangents = tangents;\nfunction isPointInsidePoly(p, poly) {\n    for (var i = 1, n = poly.length; i < n; ++i)\n        if (below(poly[i - 1], poly[i], p))\n            return false;\n    return true;\n}\nfunction isAnyPInQ(p, q) {\n    return !p.every(function (v) { return !isPointInsidePoly(v, q); });\n}\nfunction polysOverlap(p, q) {\n    if (isAnyPInQ(p, q))\n        return true;\n    if (isAnyPInQ(q, p))\n        return true;\n    for (var i = 1, n = p.length; i < n; ++i) {\n        var v = p[i], u = p[i - 1];\n        if (intersects(new LineSegment(u.x, u.y, v.x, v.y), q).length > 0)\n            return true;\n    }\n    return false;\n}\nexports.polysOverlap = polysOverlap;\n\n},{\"./rectangle\":17}],9:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rectangle_1 = require(\"./rectangle\");\nvar vpsc_1 = require(\"./vpsc\");\nvar shortestpaths_1 = require(\"./shortestpaths\");\nvar NodeWrapper = (function () {\n    function NodeWrapper(id, rect, children) {\n        this.id = id;\n        this.rect = rect;\n        this.children = children;\n        this.leaf = typeof children === 'undefined' || children.length === 0;\n    }\n    return NodeWrapper;\n}());\nexports.NodeWrapper = NodeWrapper;\nvar Vert = (function () {\n    function Vert(id, x, y, node, line) {\n        if (node === void 0) { node = null; }\n        if (line === void 0) { line = null; }\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.node = node;\n        this.line = line;\n    }\n    return Vert;\n}());\nexports.Vert = Vert;\nvar LongestCommonSubsequence = (function () {\n    function LongestCommonSubsequence(s, t) {\n        this.s = s;\n        this.t = t;\n        var mf = LongestCommonSubsequence.findMatch(s, t);\n        var tr = t.slice(0).reverse();\n        var mr = LongestCommonSubsequence.findMatch(s, tr);\n        if (mf.length >= mr.length) {\n            this.length = mf.length;\n            this.si = mf.si;\n            this.ti = mf.ti;\n            this.reversed = false;\n        }\n        else {\n            this.length = mr.length;\n            this.si = mr.si;\n            this.ti = t.length - mr.ti - mr.length;\n            this.reversed = true;\n        }\n    }\n    LongestCommonSubsequence.findMatch = function (s, t) {\n        var m = s.length;\n        var n = t.length;\n        var match = { length: 0, si: -1, ti: -1 };\n        var l = new Array(m);\n        for (var i = 0; i < m; i++) {\n            l[i] = new Array(n);\n            for (var j = 0; j < n; j++)\n                if (s[i] === t[j]) {\n                    var v = l[i][j] = (i === 0 || j === 0) ? 1 : l[i - 1][j - 1] + 1;\n                    if (v > match.length) {\n                        match.length = v;\n                        match.si = i - v + 1;\n                        match.ti = j - v + 1;\n                    }\n                    ;\n                }\n                else\n                    l[i][j] = 0;\n        }\n        return match;\n    };\n    LongestCommonSubsequence.prototype.getSequence = function () {\n        return this.length >= 0 ? this.s.slice(this.si, this.si + this.length) : [];\n    };\n    return LongestCommonSubsequence;\n}());\nexports.LongestCommonSubsequence = LongestCommonSubsequence;\nvar GridRouter = (function () {\n    function GridRouter(originalnodes, accessor, groupPadding) {\n        var _this = this;\n        if (groupPadding === void 0) { groupPadding = 12; }\n        this.originalnodes = originalnodes;\n        this.groupPadding = groupPadding;\n        this.leaves = null;\n        this.nodes = originalnodes.map(function (v, i) { return new NodeWrapper(i, accessor.getBounds(v), accessor.getChildren(v)); });\n        this.leaves = this.nodes.filter(function (v) { return v.leaf; });\n        this.groups = this.nodes.filter(function (g) { return !g.leaf; });\n        this.cols = this.getGridLines('x');\n        this.rows = this.getGridLines('y');\n        this.groups.forEach(function (v) {\n            return v.children.forEach(function (c) { return _this.nodes[c].parent = v; });\n        });\n        this.root = { children: [] };\n        this.nodes.forEach(function (v) {\n            if (typeof v.parent === 'undefined') {\n                v.parent = _this.root;\n                _this.root.children.push(v.id);\n            }\n            v.ports = [];\n        });\n        this.backToFront = this.nodes.slice(0);\n        this.backToFront.sort(function (x, y) { return _this.getDepth(x) - _this.getDepth(y); });\n        var frontToBackGroups = this.backToFront.slice(0).reverse().filter(function (g) { return !g.leaf; });\n        frontToBackGroups.forEach(function (v) {\n            var r = rectangle_1.Rectangle.empty();\n            v.children.forEach(function (c) { return r = r.union(_this.nodes[c].rect); });\n            v.rect = r.inflate(_this.groupPadding);\n        });\n        var colMids = this.midPoints(this.cols.map(function (r) { return r.pos; }));\n        var rowMids = this.midPoints(this.rows.map(function (r) { return r.pos; }));\n        var rowx = colMids[0], rowX = colMids[colMids.length - 1];\n        var coly = rowMids[0], colY = rowMids[rowMids.length - 1];\n        var hlines = this.rows.map(function (r) { return ({ x1: rowx, x2: rowX, y1: r.pos, y2: r.pos }); })\n            .concat(rowMids.map(function (m) { return ({ x1: rowx, x2: rowX, y1: m, y2: m }); }));\n        var vlines = this.cols.map(function (c) { return ({ x1: c.pos, x2: c.pos, y1: coly, y2: colY }); })\n            .concat(colMids.map(function (m) { return ({ x1: m, x2: m, y1: coly, y2: colY }); }));\n        var lines = hlines.concat(vlines);\n        lines.forEach(function (l) { return l.verts = []; });\n        this.verts = [];\n        this.edges = [];\n        hlines.forEach(function (h) {\n            return vlines.forEach(function (v) {\n                var p = new Vert(_this.verts.length, v.x1, h.y1);\n                h.verts.push(p);\n                v.verts.push(p);\n                _this.verts.push(p);\n                var i = _this.backToFront.length;\n                while (i-- > 0) {\n                    var node = _this.backToFront[i], r = node.rect;\n                    var dx = Math.abs(p.x - r.cx()), dy = Math.abs(p.y - r.cy());\n                    if (dx < r.width() / 2 && dy < r.height() / 2) {\n                        p.node = node;\n                        break;\n                    }\n                }\n            });\n        });\n        lines.forEach(function (l, li) {\n            _this.nodes.forEach(function (v, i) {\n                v.rect.lineIntersections(l.x1, l.y1, l.x2, l.y2).forEach(function (intersect, j) {\n                    var p = new Vert(_this.verts.length, intersect.x, intersect.y, v, l);\n                    _this.verts.push(p);\n                    l.verts.push(p);\n                    v.ports.push(p);\n                });\n            });\n            var isHoriz = Math.abs(l.y1 - l.y2) < 0.1;\n            var delta = function (a, b) { return isHoriz ? b.x - a.x : b.y - a.y; };\n            l.verts.sort(delta);\n            for (var i = 1; i < l.verts.length; i++) {\n                var u = l.verts[i - 1], v = l.verts[i];\n                if (u.node && u.node === v.node && u.node.leaf)\n                    continue;\n                _this.edges.push({ source: u.id, target: v.id, length: Math.abs(delta(u, v)) });\n            }\n        });\n    }\n    GridRouter.prototype.avg = function (a) { return a.reduce(function (x, y) { return x + y; }) / a.length; };\n    GridRouter.prototype.getGridLines = function (axis) {\n        var columns = [];\n        var ls = this.leaves.slice(0, this.leaves.length);\n        while (ls.length > 0) {\n            var overlapping = ls.filter(function (v) { return v.rect['overlap' + axis.toUpperCase()](ls[0].rect); });\n            var col = {\n                nodes: overlapping,\n                pos: this.avg(overlapping.map(function (v) { return v.rect['c' + axis](); }))\n            };\n            columns.push(col);\n            col.nodes.forEach(function (v) { return ls.splice(ls.indexOf(v), 1); });\n        }\n        columns.sort(function (a, b) { return a.pos - b.pos; });\n        return columns;\n    };\n    GridRouter.prototype.getDepth = function (v) {\n        var depth = 0;\n        while (v.parent !== this.root) {\n            depth++;\n            v = v.parent;\n        }\n        return depth;\n    };\n    GridRouter.prototype.midPoints = function (a) {\n        var gap = a[1] - a[0];\n        var mids = [a[0] - gap / 2];\n        for (var i = 1; i < a.length; i++) {\n            mids.push((a[i] + a[i - 1]) / 2);\n        }\n        mids.push(a[a.length - 1] + gap / 2);\n        return mids;\n    };\n    GridRouter.prototype.findLineage = function (v) {\n        var lineage = [v];\n        do {\n            v = v.parent;\n            lineage.push(v);\n        } while (v !== this.root);\n        return lineage.reverse();\n    };\n    GridRouter.prototype.findAncestorPathBetween = function (a, b) {\n        var aa = this.findLineage(a), ba = this.findLineage(b), i = 0;\n        while (aa[i] === ba[i])\n            i++;\n        return { commonAncestor: aa[i - 1], lineages: aa.slice(i).concat(ba.slice(i)) };\n    };\n    GridRouter.prototype.siblingObstacles = function (a, b) {\n        var _this = this;\n        var path = this.findAncestorPathBetween(a, b);\n        var lineageLookup = {};\n        path.lineages.forEach(function (v) { return lineageLookup[v.id] = {}; });\n        var obstacles = path.commonAncestor.children.filter(function (v) { return !(v in lineageLookup); });\n        path.lineages\n            .filter(function (v) { return v.parent !== path.commonAncestor; })\n            .forEach(function (v) { return obstacles = obstacles.concat(v.parent.children.filter(function (c) { return c !== v.id; })); });\n        return obstacles.map(function (v) { return _this.nodes[v]; });\n    };\n    GridRouter.getSegmentSets = function (routes, x, y) {\n        var vsegments = [];\n        for (var ei = 0; ei < routes.length; ei++) {\n            var route = routes[ei];\n            for (var si = 0; si < route.length; si++) {\n                var s = route[si];\n                s.edgeid = ei;\n                s.i = si;\n                var sdx = s[1][x] - s[0][x];\n                if (Math.abs(sdx) < 0.1) {\n                    vsegments.push(s);\n                }\n            }\n        }\n        vsegments.sort(function (a, b) { return a[0][x] - b[0][x]; });\n        var vsegmentsets = [];\n        var segmentset = null;\n        for (var i = 0; i < vsegments.length; i++) {\n            var s = vsegments[i];\n            if (!segmentset || Math.abs(s[0][x] - segmentset.pos) > 0.1) {\n                segmentset = { pos: s[0][x], segments: [] };\n                vsegmentsets.push(segmentset);\n            }\n            segmentset.segments.push(s);\n        }\n        return vsegmentsets;\n    };\n    GridRouter.nudgeSegs = function (x, y, routes, segments, leftOf, gap) {\n        var n = segments.length;\n        if (n <= 1)\n            return;\n        var vs = segments.map(function (s) { return new vpsc_1.Variable(s[0][x]); });\n        var cs = [];\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                if (i === j)\n                    continue;\n                var s1 = segments[i], s2 = segments[j], e1 = s1.edgeid, e2 = s2.edgeid, lind = -1, rind = -1;\n                if (x == 'x') {\n                    if (leftOf(e1, e2)) {\n                        if (s1[0][y] < s1[1][y]) {\n                            lind = j, rind = i;\n                        }\n                        else {\n                            lind = i, rind = j;\n                        }\n                    }\n                }\n                else {\n                    if (leftOf(e1, e2)) {\n                        if (s1[0][y] < s1[1][y]) {\n                            lind = i, rind = j;\n                        }\n                        else {\n                            lind = j, rind = i;\n                        }\n                    }\n                }\n                if (lind >= 0) {\n                    cs.push(new vpsc_1.Constraint(vs[lind], vs[rind], gap));\n                }\n            }\n        }\n        var solver = new vpsc_1.Solver(vs, cs);\n        solver.solve();\n        vs.forEach(function (v, i) {\n            var s = segments[i];\n            var pos = v.position();\n            s[0][x] = s[1][x] = pos;\n            var route = routes[s.edgeid];\n            if (s.i > 0)\n                route[s.i - 1][1][x] = pos;\n            if (s.i < route.length - 1)\n                route[s.i + 1][0][x] = pos;\n        });\n    };\n    GridRouter.nudgeSegments = function (routes, x, y, leftOf, gap) {\n        var vsegmentsets = GridRouter.getSegmentSets(routes, x, y);\n        for (var i = 0; i < vsegmentsets.length; i++) {\n            var ss = vsegmentsets[i];\n            var events = [];\n            for (var j = 0; j < ss.segments.length; j++) {\n                var s = ss.segments[j];\n                events.push({ type: 0, s: s, pos: Math.min(s[0][y], s[1][y]) });\n                events.push({ type: 1, s: s, pos: Math.max(s[0][y], s[1][y]) });\n            }\n            events.sort(function (a, b) { return a.pos - b.pos + a.type - b.type; });\n            var open = [];\n            var openCount = 0;\n            events.forEach(function (e) {\n                if (e.type === 0) {\n                    open.push(e.s);\n                    openCount++;\n                }\n                else {\n                    openCount--;\n                }\n                if (openCount == 0) {\n                    GridRouter.nudgeSegs(x, y, routes, open, leftOf, gap);\n                    open = [];\n                }\n            });\n        }\n    };\n    GridRouter.prototype.routeEdges = function (edges, nudgeGap, source, target) {\n        var _this = this;\n        var routePaths = edges.map(function (e) { return _this.route(source(e), target(e)); });\n        var order = GridRouter.orderEdges(routePaths);\n        var routes = routePaths.map(function (e) { return GridRouter.makeSegments(e); });\n        GridRouter.nudgeSegments(routes, 'x', 'y', order, nudgeGap);\n        GridRouter.nudgeSegments(routes, 'y', 'x', order, nudgeGap);\n        GridRouter.unreverseEdges(routes, routePaths);\n        return routes;\n    };\n    GridRouter.unreverseEdges = function (routes, routePaths) {\n        routes.forEach(function (segments, i) {\n            var path = routePaths[i];\n            if (path.reversed) {\n                segments.reverse();\n                segments.forEach(function (segment) {\n                    segment.reverse();\n                });\n            }\n        });\n    };\n    GridRouter.angleBetween2Lines = function (line1, line2) {\n        var angle1 = Math.atan2(line1[0].y - line1[1].y, line1[0].x - line1[1].x);\n        var angle2 = Math.atan2(line2[0].y - line2[1].y, line2[0].x - line2[1].x);\n        var diff = angle1 - angle2;\n        if (diff > Math.PI || diff < -Math.PI) {\n            diff = angle2 - angle1;\n        }\n        return diff;\n    };\n    GridRouter.isLeft = function (a, b, c) {\n        return ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) <= 0;\n    };\n    GridRouter.getOrder = function (pairs) {\n        var outgoing = {};\n        for (var i = 0; i < pairs.length; i++) {\n            var p = pairs[i];\n            if (typeof outgoing[p.l] === 'undefined')\n                outgoing[p.l] = {};\n            outgoing[p.l][p.r] = true;\n        }\n        return function (l, r) { return typeof outgoing[l] !== 'undefined' && outgoing[l][r]; };\n    };\n    GridRouter.orderEdges = function (edges) {\n        var edgeOrder = [];\n        for (var i = 0; i < edges.length - 1; i++) {\n            for (var j = i + 1; j < edges.length; j++) {\n                var e = edges[i], f = edges[j], lcs = new LongestCommonSubsequence(e, f);\n                var u, vi, vj;\n                if (lcs.length === 0)\n                    continue;\n                if (lcs.reversed) {\n                    f.reverse();\n                    f.reversed = true;\n                    lcs = new LongestCommonSubsequence(e, f);\n                }\n                if ((lcs.si <= 0 || lcs.ti <= 0) &&\n                    (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length)) {\n                    edgeOrder.push({ l: i, r: j });\n                    continue;\n                }\n                if (lcs.si + lcs.length >= e.length || lcs.ti + lcs.length >= f.length) {\n                    u = e[lcs.si + 1];\n                    vj = e[lcs.si - 1];\n                    vi = f[lcs.ti - 1];\n                }\n                else {\n                    u = e[lcs.si + lcs.length - 2];\n                    vi = e[lcs.si + lcs.length];\n                    vj = f[lcs.ti + lcs.length];\n                }\n                if (GridRouter.isLeft(u, vi, vj)) {\n                    edgeOrder.push({ l: j, r: i });\n                }\n                else {\n                    edgeOrder.push({ l: i, r: j });\n                }\n            }\n        }\n        return GridRouter.getOrder(edgeOrder);\n    };\n    GridRouter.makeSegments = function (path) {\n        function copyPoint(p) {\n            return { x: p.x, y: p.y };\n        }\n        var isStraight = function (a, b, c) { return Math.abs((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)) < 0.001; };\n        var segments = [];\n        var a = copyPoint(path[0]);\n        for (var i = 1; i < path.length; i++) {\n            var b = copyPoint(path[i]), c = i < path.length - 1 ? path[i + 1] : null;\n            if (!c || !isStraight(a, b, c)) {\n                segments.push([a, b]);\n                a = b;\n            }\n        }\n        return segments;\n    };\n    GridRouter.prototype.route = function (s, t) {\n        var _this = this;\n        var source = this.nodes[s], target = this.nodes[t];\n        this.obstacles = this.siblingObstacles(source, target);\n        var obstacleLookup = {};\n        this.obstacles.forEach(function (o) { return obstacleLookup[o.id] = o; });\n        this.passableEdges = this.edges.filter(function (e) {\n            var u = _this.verts[e.source], v = _this.verts[e.target];\n            return !(u.node && u.node.id in obstacleLookup\n                || v.node && v.node.id in obstacleLookup);\n        });\n        for (var i = 1; i < source.ports.length; i++) {\n            var u = source.ports[0].id;\n            var v = source.ports[i].id;\n            this.passableEdges.push({\n                source: u,\n                target: v,\n                length: 0\n            });\n        }\n        for (var i = 1; i < target.ports.length; i++) {\n            var u = target.ports[0].id;\n            var v = target.ports[i].id;\n            this.passableEdges.push({\n                source: u,\n                target: v,\n                length: 0\n            });\n        }\n        var getSource = function (e) { return e.source; }, getTarget = function (e) { return e.target; }, getLength = function (e) { return e.length; };\n        var shortestPathCalculator = new shortestpaths_1.Calculator(this.verts.length, this.passableEdges, getSource, getTarget, getLength);\n        var bendPenalty = function (u, v, w) {\n            var a = _this.verts[u], b = _this.verts[v], c = _this.verts[w];\n            var dx = Math.abs(c.x - a.x), dy = Math.abs(c.y - a.y);\n            if (a.node === source && a.node === b.node || b.node === target && b.node === c.node)\n                return 0;\n            return dx > 1 && dy > 1 ? 1000 : 0;\n        };\n        var shortestPath = shortestPathCalculator.PathFromNodeToNodeWithPrevCost(source.ports[0].id, target.ports[0].id, bendPenalty);\n        var pathPoints = shortestPath.reverse().map(function (vi) { return _this.verts[vi]; });\n        pathPoints.push(this.nodes[target.id].ports[0]);\n        return pathPoints.filter(function (v, i) {\n            return !(i < pathPoints.length - 1 && pathPoints[i + 1].node === source && v.node === source\n                || i > 0 && v.node === target && pathPoints[i - 1].node === target);\n        });\n    };\n    GridRouter.getRoutePath = function (route, cornerradius, arrowwidth, arrowheight) {\n        var result = {\n            routepath: 'M ' + route[0][0].x + ' ' + route[0][0].y + ' ',\n            arrowpath: ''\n        };\n        if (route.length > 1) {\n            for (var i = 0; i < route.length; i++) {\n                var li = route[i];\n                var x = li[1].x, y = li[1].y;\n                var dx = x - li[0].x;\n                var dy = y - li[0].y;\n                if (i < route.length - 1) {\n                    if (Math.abs(dx) > 0) {\n                        x -= dx / Math.abs(dx) * cornerradius;\n                    }\n                    else {\n                        y -= dy / Math.abs(dy) * cornerradius;\n                    }\n                    result.routepath += 'L ' + x + ' ' + y + ' ';\n                    var l = route[i + 1];\n                    var x0 = l[0].x, y0 = l[0].y;\n                    var x1 = l[1].x;\n                    var y1 = l[1].y;\n                    dx = x1 - x0;\n                    dy = y1 - y0;\n                    var angle = GridRouter.angleBetween2Lines(li, l) < 0 ? 1 : 0;\n                    var x2, y2;\n                    if (Math.abs(dx) > 0) {\n                        x2 = x0 + dx / Math.abs(dx) * cornerradius;\n                        y2 = y0;\n                    }\n                    else {\n                        x2 = x0;\n                        y2 = y0 + dy / Math.abs(dy) * cornerradius;\n                    }\n                    var cx = Math.abs(x2 - x);\n                    var cy = Math.abs(y2 - y);\n                    result.routepath += 'A ' + cx + ' ' + cy + ' 0 0 ' + angle + ' ' + x2 + ' ' + y2 + ' ';\n                }\n                else {\n                    var arrowtip = [x, y];\n                    var arrowcorner1, arrowcorner2;\n                    if (Math.abs(dx) > 0) {\n                        x -= dx / Math.abs(dx) * arrowheight;\n                        arrowcorner1 = [x, y + arrowwidth];\n                        arrowcorner2 = [x, y - arrowwidth];\n                    }\n                    else {\n                        y -= dy / Math.abs(dy) * arrowheight;\n                        arrowcorner1 = [x + arrowwidth, y];\n                        arrowcorner2 = [x - arrowwidth, y];\n                    }\n                    result.routepath += 'L ' + x + ' ' + y + ' ';\n                    if (arrowheight > 0) {\n                        result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                            + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n                    }\n                }\n            }\n        }\n        else {\n            var li = route[0];\n            var x = li[1].x, y = li[1].y;\n            var dx = x - li[0].x;\n            var dy = y - li[0].y;\n            var arrowtip = [x, y];\n            var arrowcorner1, arrowcorner2;\n            if (Math.abs(dx) > 0) {\n                x -= dx / Math.abs(dx) * arrowheight;\n                arrowcorner1 = [x, y + arrowwidth];\n                arrowcorner2 = [x, y - arrowwidth];\n            }\n            else {\n                y -= dy / Math.abs(dy) * arrowheight;\n                arrowcorner1 = [x + arrowwidth, y];\n                arrowcorner2 = [x - arrowwidth, y];\n            }\n            result.routepath += 'L ' + x + ' ' + y + ' ';\n            if (arrowheight > 0) {\n                result.arrowpath = 'M ' + arrowtip[0] + ' ' + arrowtip[1] + ' L ' + arrowcorner1[0] + ' ' + arrowcorner1[1]\n                    + ' L ' + arrowcorner2[0] + ' ' + arrowcorner2[1];\n            }\n        }\n        return result;\n    };\n    return GridRouter;\n}());\nexports.GridRouter = GridRouter;\n\n},{\"./rectangle\":17,\"./shortestpaths\":18,\"./vpsc\":19}],10:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar packingOptions = {\n    PADDING: 10,\n    GOLDEN_SECTION: (1 + Math.sqrt(5)) / 2,\n    FLOAT_EPSILON: 0.0001,\n    MAX_INERATIONS: 100\n};\nfunction applyPacking(graphs, w, h, node_size, desired_ratio, centerGraph) {\n    if (desired_ratio === void 0) { desired_ratio = 1; }\n    if (centerGraph === void 0) { centerGraph = true; }\n    var init_x = 0, init_y = 0, svg_width = w, svg_height = h, desired_ratio = typeof desired_ratio !== 'undefined' ? desired_ratio : 1, node_size = typeof node_size !== 'undefined' ? node_size : 0, real_width = 0, real_height = 0, min_width = 0, global_bottom = 0, line = [];\n    if (graphs.length == 0)\n        return;\n    calculate_bb(graphs);\n    apply(graphs, desired_ratio);\n    if (centerGraph) {\n        put_nodes_to_right_positions(graphs);\n    }\n    function calculate_bb(graphs) {\n        graphs.forEach(function (g) {\n            calculate_single_bb(g);\n        });\n        function calculate_single_bb(graph) {\n            var min_x = Number.MAX_VALUE, min_y = Number.MAX_VALUE, max_x = 0, max_y = 0;\n            graph.array.forEach(function (v) {\n                var w = typeof v.width !== 'undefined' ? v.width : node_size;\n                var h = typeof v.height !== 'undefined' ? v.height : node_size;\n                w /= 2;\n                h /= 2;\n                max_x = Math.max(v.x + w, max_x);\n                min_x = Math.min(v.x - w, min_x);\n                max_y = Math.max(v.y + h, max_y);\n                min_y = Math.min(v.y - h, min_y);\n            });\n            graph.width = max_x - min_x;\n            graph.height = max_y - min_y;\n        }\n    }\n    function put_nodes_to_right_positions(graphs) {\n        graphs.forEach(function (g) {\n            var center = { x: 0, y: 0 };\n            g.array.forEach(function (node) {\n                center.x += node.x;\n                center.y += node.y;\n            });\n            center.x /= g.array.length;\n            center.y /= g.array.length;\n            var corner = { x: center.x - g.width / 2, y: center.y - g.height / 2 };\n            var offset = { x: g.x - corner.x + svg_width / 2 - real_width / 2, y: g.y - corner.y + svg_height / 2 - real_height / 2 };\n            g.array.forEach(function (node) {\n                node.x += offset.x;\n                node.y += offset.y;\n            });\n        });\n    }\n    function apply(data, desired_ratio) {\n        var curr_best_f = Number.POSITIVE_INFINITY;\n        var curr_best = 0;\n        data.sort(function (a, b) { return b.height - a.height; });\n        min_width = data.reduce(function (a, b) {\n            return a.width < b.width ? a.width : b.width;\n        });\n        var left = x1 = min_width;\n        var right = x2 = get_entire_width(data);\n        var iterationCounter = 0;\n        var f_x1 = Number.MAX_VALUE;\n        var f_x2 = Number.MAX_VALUE;\n        var flag = -1;\n        var dx = Number.MAX_VALUE;\n        var df = Number.MAX_VALUE;\n        while ((dx > min_width) || df > packingOptions.FLOAT_EPSILON) {\n            if (flag != 1) {\n                var x1 = right - (right - left) / packingOptions.GOLDEN_SECTION;\n                var f_x1 = step(data, x1);\n            }\n            if (flag != 0) {\n                var x2 = left + (right - left) / packingOptions.GOLDEN_SECTION;\n                var f_x2 = step(data, x2);\n            }\n            dx = Math.abs(x1 - x2);\n            df = Math.abs(f_x1 - f_x2);\n            if (f_x1 < curr_best_f) {\n                curr_best_f = f_x1;\n                curr_best = x1;\n            }\n            if (f_x2 < curr_best_f) {\n                curr_best_f = f_x2;\n                curr_best = x2;\n            }\n            if (f_x1 > f_x2) {\n                left = x1;\n                x1 = x2;\n                f_x1 = f_x2;\n                flag = 1;\n            }\n            else {\n                right = x2;\n                x2 = x1;\n                f_x2 = f_x1;\n                flag = 0;\n            }\n            if (iterationCounter++ > 100) {\n                break;\n            }\n        }\n        step(data, curr_best);\n    }\n    function step(data, max_width) {\n        line = [];\n        real_width = 0;\n        real_height = 0;\n        global_bottom = init_y;\n        for (var i = 0; i < data.length; i++) {\n            var o = data[i];\n            put_rect(o, max_width);\n        }\n        return Math.abs(get_real_ratio() - desired_ratio);\n    }\n    function put_rect(rect, max_width) {\n        var parent = undefined;\n        for (var i = 0; i < line.length; i++) {\n            if ((line[i].space_left >= rect.height) && (line[i].x + line[i].width + rect.width + packingOptions.PADDING - max_width) <= packingOptions.FLOAT_EPSILON) {\n                parent = line[i];\n                break;\n            }\n        }\n        line.push(rect);\n        if (parent !== undefined) {\n            rect.x = parent.x + parent.width + packingOptions.PADDING;\n            rect.y = parent.bottom;\n            rect.space_left = rect.height;\n            rect.bottom = rect.y;\n            parent.space_left -= rect.height + packingOptions.PADDING;\n            parent.bottom += rect.height + packingOptions.PADDING;\n        }\n        else {\n            rect.y = global_bottom;\n            global_bottom += rect.height + packingOptions.PADDING;\n            rect.x = init_x;\n            rect.bottom = rect.y;\n            rect.space_left = rect.height;\n        }\n        if (rect.y + rect.height - real_height > -packingOptions.FLOAT_EPSILON)\n            real_height = rect.y + rect.height - init_y;\n        if (rect.x + rect.width - real_width > -packingOptions.FLOAT_EPSILON)\n            real_width = rect.x + rect.width - init_x;\n    }\n    ;\n    function get_entire_width(data) {\n        var width = 0;\n        data.forEach(function (d) { return width += d.width + packingOptions.PADDING; });\n        return width;\n    }\n    function get_real_ratio() {\n        return (real_width / real_height);\n    }\n}\nexports.applyPacking = applyPacking;\nfunction separateGraphs(nodes, links) {\n    var marks = {};\n    var ways = {};\n    var graphs = [];\n    var clusters = 0;\n    for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n        var n1 = link.source;\n        var n2 = link.target;\n        if (ways[n1.index])\n            ways[n1.index].push(n2);\n        else\n            ways[n1.index] = [n2];\n        if (ways[n2.index])\n            ways[n2.index].push(n1);\n        else\n            ways[n2.index] = [n1];\n    }\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (marks[node.index])\n            continue;\n        explore_node(node, true);\n    }\n    function explore_node(n, is_new) {\n        if (marks[n.index] !== undefined)\n            return;\n        if (is_new) {\n            clusters++;\n            graphs.push({ array: [] });\n        }\n        marks[n.index] = clusters;\n        graphs[clusters - 1].array.push(n);\n        var adjacent = ways[n.index];\n        if (!adjacent)\n            return;\n        for (var j = 0; j < adjacent.length; j++) {\n            explore_node(adjacent[j], false);\n        }\n    }\n    return graphs;\n}\nexports.separateGraphs = separateGraphs;\n\n},{}],11:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar powergraph = require(\"./powergraph\");\nvar linklengths_1 = require(\"./linklengths\");\nvar descent_1 = require(\"./descent\");\nvar rectangle_1 = require(\"./rectangle\");\nvar shortestpaths_1 = require(\"./shortestpaths\");\nvar geom_1 = require(\"./geom\");\nvar handledisconnected_1 = require(\"./handledisconnected\");\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"start\"] = 0] = \"start\";\n    EventType[EventType[\"tick\"] = 1] = \"tick\";\n    EventType[EventType[\"end\"] = 2] = \"end\";\n})(EventType = exports.EventType || (exports.EventType = {}));\n;\nfunction isGroup(g) {\n    return typeof g.leaves !== 'undefined' || typeof g.groups !== 'undefined';\n}\nvar Layout = (function () {\n    function Layout() {\n        var _this = this;\n        this._canvasSize = [1, 1];\n        this._linkDistance = 20;\n        this._defaultNodeSize = 10;\n        this._linkLengthCalculator = null;\n        this._linkType = null;\n        this._avoidOverlaps = false;\n        this._handleDisconnected = true;\n        this._running = false;\n        this._nodes = [];\n        this._groups = [];\n        this._rootGroup = null;\n        this._links = [];\n        this._constraints = [];\n        this._distanceMatrix = null;\n        this._descent = null;\n        this._directedLinkConstraints = null;\n        this._threshold = 0.01;\n        this._visibilityGraph = null;\n        this._groupCompactness = 1e-6;\n        this.event = null;\n        this.linkAccessor = {\n            getSourceIndex: Layout.getSourceIndex,\n            getTargetIndex: Layout.getTargetIndex,\n            setLength: Layout.setLinkLength,\n            getType: function (l) { return typeof _this._linkType === \"function\" ? _this._linkType(l) : 0; }\n        };\n    }\n    Layout.prototype.on = function (e, listener) {\n        if (!this.event)\n            this.event = {};\n        if (typeof e === 'string') {\n            this.event[EventType[e]] = listener;\n        }\n        else {\n            this.event[e] = listener;\n        }\n        return this;\n    };\n    Layout.prototype.trigger = function (e) {\n        if (this.event && typeof this.event[e.type] !== 'undefined') {\n            this.event[e.type](e);\n        }\n    };\n    Layout.prototype.kick = function () {\n        while (!this.tick())\n            ;\n    };\n    Layout.prototype.tick = function () {\n        if (this._alpha < this._threshold) {\n            this._running = false;\n            this.trigger({ type: EventType.end, alpha: this._alpha = 0, stress: this._lastStress });\n            return true;\n        }\n        var n = this._nodes.length, m = this._links.length;\n        var o, i;\n        this._descent.locks.clear();\n        for (i = 0; i < n; ++i) {\n            o = this._nodes[i];\n            if (o.fixed) {\n                if (typeof o.px === 'undefined' || typeof o.py === 'undefined') {\n                    o.px = o.x;\n                    o.py = o.y;\n                }\n                var p = [o.px, o.py];\n                this._descent.locks.add(i, p);\n            }\n        }\n        var s1 = this._descent.rungeKutta();\n        if (s1 === 0) {\n            this._alpha = 0;\n        }\n        else if (typeof this._lastStress !== 'undefined') {\n            this._alpha = s1;\n        }\n        this._lastStress = s1;\n        this.updateNodePositions();\n        this.trigger({ type: EventType.tick, alpha: this._alpha, stress: this._lastStress });\n        return false;\n    };\n    Layout.prototype.updateNodePositions = function () {\n        var x = this._descent.x[0], y = this._descent.x[1];\n        var o, i = this._nodes.length;\n        while (i--) {\n            o = this._nodes[i];\n            o.x = x[i];\n            o.y = y[i];\n        }\n    };\n    Layout.prototype.nodes = function (v) {\n        if (!v) {\n            if (this._nodes.length === 0 && this._links.length > 0) {\n                var n = 0;\n                this._links.forEach(function (l) {\n                    n = Math.max(n, l.source, l.target);\n                });\n                this._nodes = new Array(++n);\n                for (var i = 0; i < n; ++i) {\n                    this._nodes[i] = {};\n                }\n            }\n            return this._nodes;\n        }\n        this._nodes = v;\n        return this;\n    };\n    Layout.prototype.groups = function (x) {\n        var _this = this;\n        if (!x)\n            return this._groups;\n        this._groups = x;\n        this._rootGroup = {};\n        this._groups.forEach(function (g) {\n            if (typeof g.padding === \"undefined\")\n                g.padding = 1;\n            if (typeof g.leaves !== \"undefined\") {\n                g.leaves.forEach(function (v, i) {\n                    if (typeof v === 'number')\n                        (g.leaves[i] = _this._nodes[v]).parent = g;\n                });\n            }\n            if (typeof g.groups !== \"undefined\") {\n                g.groups.forEach(function (gi, i) {\n                    if (typeof gi === 'number')\n                        (g.groups[i] = _this._groups[gi]).parent = g;\n                });\n            }\n        });\n        this._rootGroup.leaves = this._nodes.filter(function (v) { return typeof v.parent === 'undefined'; });\n        this._rootGroup.groups = this._groups.filter(function (g) { return typeof g.parent === 'undefined'; });\n        return this;\n    };\n    Layout.prototype.powerGraphGroups = function (f) {\n        var g = powergraph.getGroups(this._nodes, this._links, this.linkAccessor, this._rootGroup);\n        this.groups(g.groups);\n        f(g);\n        return this;\n    };\n    Layout.prototype.avoidOverlaps = function (v) {\n        if (!arguments.length)\n            return this._avoidOverlaps;\n        this._avoidOverlaps = v;\n        return this;\n    };\n    Layout.prototype.handleDisconnected = function (v) {\n        if (!arguments.length)\n            return this._handleDisconnected;\n        this._handleDisconnected = v;\n        return this;\n    };\n    Layout.prototype.flowLayout = function (axis, minSeparation) {\n        if (!arguments.length)\n            axis = 'y';\n        this._directedLinkConstraints = {\n            axis: axis,\n            getMinSeparation: typeof minSeparation === 'number' ? function () { return minSeparation; } : minSeparation\n        };\n        return this;\n    };\n    Layout.prototype.links = function (x) {\n        if (!arguments.length)\n            return this._links;\n        this._links = x;\n        return this;\n    };\n    Layout.prototype.constraints = function (c) {\n        if (!arguments.length)\n            return this._constraints;\n        this._constraints = c;\n        return this;\n    };\n    Layout.prototype.distanceMatrix = function (d) {\n        if (!arguments.length)\n            return this._distanceMatrix;\n        this._distanceMatrix = d;\n        return this;\n    };\n    Layout.prototype.size = function (x) {\n        if (!x)\n            return this._canvasSize;\n        this._canvasSize = x;\n        return this;\n    };\n    Layout.prototype.defaultNodeSize = function (x) {\n        if (!x)\n            return this._defaultNodeSize;\n        this._defaultNodeSize = x;\n        return this;\n    };\n    Layout.prototype.groupCompactness = function (x) {\n        if (!x)\n            return this._groupCompactness;\n        this._groupCompactness = x;\n        return this;\n    };\n    Layout.prototype.linkDistance = function (x) {\n        if (!x) {\n            return this._linkDistance;\n        }\n        this._linkDistance = typeof x === \"function\" ? x : +x;\n        this._linkLengthCalculator = null;\n        return this;\n    };\n    Layout.prototype.linkType = function (f) {\n        this._linkType = f;\n        return this;\n    };\n    Layout.prototype.convergenceThreshold = function (x) {\n        if (!x)\n            return this._threshold;\n        this._threshold = typeof x === \"function\" ? x : +x;\n        return this;\n    };\n    Layout.prototype.alpha = function (x) {\n        if (!arguments.length)\n            return this._alpha;\n        else {\n            x = +x;\n            if (this._alpha) {\n                if (x > 0)\n                    this._alpha = x;\n                else\n                    this._alpha = 0;\n            }\n            else if (x > 0) {\n                if (!this._running) {\n                    this._running = true;\n                    this.trigger({ type: EventType.start, alpha: this._alpha = x });\n                    this.kick();\n                }\n            }\n            return this;\n        }\n    };\n    Layout.prototype.getLinkLength = function (link) {\n        return typeof this._linkDistance === \"function\" ? +(this._linkDistance(link)) : this._linkDistance;\n    };\n    Layout.setLinkLength = function (link, length) {\n        link.length = length;\n    };\n    Layout.prototype.getLinkType = function (link) {\n        return typeof this._linkType === \"function\" ? this._linkType(link) : 0;\n    };\n    Layout.prototype.symmetricDiffLinkLengths = function (idealLength, w) {\n        var _this = this;\n        if (w === void 0) { w = 1; }\n        this.linkDistance(function (l) { return idealLength * l.length; });\n        this._linkLengthCalculator = function () { return linklengths_1.symmetricDiffLinkLengths(_this._links, _this.linkAccessor, w); };\n        return this;\n    };\n    Layout.prototype.jaccardLinkLengths = function (idealLength, w) {\n        var _this = this;\n        if (w === void 0) { w = 1; }\n        this.linkDistance(function (l) { return idealLength * l.length; });\n        this._linkLengthCalculator = function () { return linklengths_1.jaccardLinkLengths(_this._links, _this.linkAccessor, w); };\n        return this;\n    };\n    Layout.prototype.start = function (initialUnconstrainedIterations, initialUserConstraintIterations, initialAllConstraintsIterations, gridSnapIterations, keepRunning, centerGraph) {\n        var _this = this;\n        if (initialUnconstrainedIterations === void 0) { initialUnconstrainedIterations = 0; }\n        if (initialUserConstraintIterations === void 0) { initialUserConstraintIterations = 0; }\n        if (initialAllConstraintsIterations === void 0) { initialAllConstraintsIterations = 0; }\n        if (gridSnapIterations === void 0) { gridSnapIterations = 0; }\n        if (keepRunning === void 0) { keepRunning = true; }\n        if (centerGraph === void 0) { centerGraph = true; }\n        var i, j, n = this.nodes().length, N = n + 2 * this._groups.length, m = this._links.length, w = this._canvasSize[0], h = this._canvasSize[1];\n        var x = new Array(N), y = new Array(N);\n        var G = null;\n        var ao = this._avoidOverlaps;\n        this._nodes.forEach(function (v, i) {\n            v.index = i;\n            if (typeof v.x === 'undefined') {\n                v.x = w / 2, v.y = h / 2;\n            }\n            x[i] = v.x, y[i] = v.y;\n        });\n        if (this._linkLengthCalculator)\n            this._linkLengthCalculator();\n        var distances;\n        if (this._distanceMatrix) {\n            distances = this._distanceMatrix;\n        }\n        else {\n            distances = (new shortestpaths_1.Calculator(N, this._links, Layout.getSourceIndex, Layout.getTargetIndex, function (l) { return _this.getLinkLength(l); })).DistanceMatrix();\n            G = descent_1.Descent.createSquareMatrix(N, function () { return 2; });\n            this._links.forEach(function (l) {\n                if (typeof l.source == \"number\")\n                    l.source = _this._nodes[l.source];\n                if (typeof l.target == \"number\")\n                    l.target = _this._nodes[l.target];\n            });\n            this._links.forEach(function (e) {\n                var u = Layout.getSourceIndex(e), v = Layout.getTargetIndex(e);\n                G[u][v] = G[v][u] = e.weight || 1;\n            });\n        }\n        var D = descent_1.Descent.createSquareMatrix(N, function (i, j) {\n            return distances[i][j];\n        });\n        if (this._rootGroup && typeof this._rootGroup.groups !== 'undefined') {\n            var i = n;\n            var addAttraction = function (i, j, strength, idealDistance) {\n                G[i][j] = G[j][i] = strength;\n                D[i][j] = D[j][i] = idealDistance;\n            };\n            this._groups.forEach(function (g) {\n                addAttraction(i, i + 1, _this._groupCompactness, 0.1);\n                if (typeof g.bounds === 'undefined') {\n                    x[i] = w / 2, y[i++] = h / 2;\n                    x[i] = w / 2, y[i++] = h / 2;\n                }\n                else {\n                    x[i] = g.bounds.x, y[i++] = g.bounds.y;\n                    x[i] = g.bounds.X, y[i++] = g.bounds.Y;\n                }\n            });\n        }\n        else\n            this._rootGroup = { leaves: this._nodes, groups: [] };\n        var curConstraints = this._constraints || [];\n        if (this._directedLinkConstraints) {\n            this.linkAccessor.getMinSeparation = this._directedLinkConstraints.getMinSeparation;\n            curConstraints = curConstraints.concat(linklengths_1.generateDirectedEdgeConstraints(n, this._links, this._directedLinkConstraints.axis, (this.linkAccessor)));\n        }\n        this.avoidOverlaps(false);\n        this._descent = new descent_1.Descent([x, y], D);\n        this._descent.locks.clear();\n        for (var i = 0; i < n; ++i) {\n            var o = this._nodes[i];\n            if (o.fixed) {\n                o.px = o.x;\n                o.py = o.y;\n                var p = [o.x, o.y];\n                this._descent.locks.add(i, p);\n            }\n        }\n        this._descent.threshold = this._threshold;\n        this.initialLayout(initialUnconstrainedIterations, x, y);\n        if (curConstraints.length > 0)\n            this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints).projectFunctions();\n        this._descent.run(initialUserConstraintIterations);\n        this.separateOverlappingComponents(w, h, centerGraph);\n        this.avoidOverlaps(ao);\n        if (ao) {\n            this._nodes.forEach(function (v, i) { v.x = x[i], v.y = y[i]; });\n            this._descent.project = new rectangle_1.Projection(this._nodes, this._groups, this._rootGroup, curConstraints, true).projectFunctions();\n            this._nodes.forEach(function (v, i) { x[i] = v.x, y[i] = v.y; });\n        }\n        this._descent.G = G;\n        this._descent.run(initialAllConstraintsIterations);\n        if (gridSnapIterations) {\n            this._descent.snapStrength = 1000;\n            this._descent.snapGridSize = this._nodes[0].width;\n            this._descent.numGridSnapNodes = n;\n            this._descent.scaleSnapByMaxH = n != N;\n            var G0 = descent_1.Descent.createSquareMatrix(N, function (i, j) {\n                if (i >= n || j >= n)\n                    return G[i][j];\n                return 0;\n            });\n            this._descent.G = G0;\n            this._descent.run(gridSnapIterations);\n        }\n        this.updateNodePositions();\n        this.separateOverlappingComponents(w, h, centerGraph);\n        return keepRunning ? this.resume() : this;\n    };\n    Layout.prototype.initialLayout = function (iterations, x, y) {\n        if (this._groups.length > 0 && iterations > 0) {\n            var n = this._nodes.length;\n            var edges = this._links.map(function (e) { return ({ source: e.source.index, target: e.target.index }); });\n            var vs = this._nodes.map(function (v) { return ({ index: v.index }); });\n            this._groups.forEach(function (g, i) {\n                vs.push({ index: g.index = n + i });\n            });\n            this._groups.forEach(function (g, i) {\n                if (typeof g.leaves !== 'undefined')\n                    g.leaves.forEach(function (v) { return edges.push({ source: g.index, target: v.index }); });\n                if (typeof g.groups !== 'undefined')\n                    g.groups.forEach(function (gg) { return edges.push({ source: g.index, target: gg.index }); });\n            });\n            new Layout()\n                .size(this.size())\n                .nodes(vs)\n                .links(edges)\n                .avoidOverlaps(false)\n                .linkDistance(this.linkDistance())\n                .symmetricDiffLinkLengths(5)\n                .convergenceThreshold(1e-4)\n                .start(iterations, 0, 0, 0, false);\n            this._nodes.forEach(function (v) {\n                x[v.index] = vs[v.index].x;\n                y[v.index] = vs[v.index].y;\n            });\n        }\n        else {\n            this._descent.run(iterations);\n        }\n    };\n    Layout.prototype.separateOverlappingComponents = function (width, height, centerGraph) {\n        var _this = this;\n        if (centerGraph === void 0) { centerGraph = true; }\n        if (!this._distanceMatrix && this._handleDisconnected) {\n            var x_1 = this._descent.x[0], y_1 = this._descent.x[1];\n            this._nodes.forEach(function (v, i) { v.x = x_1[i], v.y = y_1[i]; });\n            var graphs = handledisconnected_1.separateGraphs(this._nodes, this._links);\n            handledisconnected_1.applyPacking(graphs, width, height, this._defaultNodeSize, (height / width), centerGraph);\n            this._nodes.forEach(function (v, i) {\n                _this._descent.x[0][i] = v.x, _this._descent.x[1][i] = v.y;\n                if (v.bounds) {\n                    v.bounds.setXCentre(v.x);\n                    v.bounds.setYCentre(v.y);\n                }\n            });\n        }\n    };\n    Layout.prototype.resume = function () {\n        return this.alpha(0.1);\n    };\n    Layout.prototype.stop = function () {\n        return this.alpha(0);\n    };\n    Layout.prototype.prepareEdgeRouting = function (nodeMargin) {\n        if (nodeMargin === void 0) { nodeMargin = 0; }\n        this._visibilityGraph = new geom_1.TangentVisibilityGraph(this._nodes.map(function (v) {\n            return v.bounds.inflate(-nodeMargin).vertices();\n        }));\n    };\n    Layout.prototype.routeEdge = function (edge, ah, draw) {\n        if (ah === void 0) { ah = 5; }\n        var lineData = [];\n        var vg2 = new geom_1.TangentVisibilityGraph(this._visibilityGraph.P, { V: this._visibilityGraph.V, E: this._visibilityGraph.E }), port1 = { x: edge.source.x, y: edge.source.y }, port2 = { x: edge.target.x, y: edge.target.y }, start = vg2.addPoint(port1, edge.source.index), end = vg2.addPoint(port2, edge.target.index);\n        vg2.addEdgeIfVisible(port1, port2, edge.source.index, edge.target.index);\n        if (typeof draw !== 'undefined') {\n            draw(vg2);\n        }\n        var sourceInd = function (e) { return e.source.id; }, targetInd = function (e) { return e.target.id; }, length = function (e) { return e.length(); }, spCalc = new shortestpaths_1.Calculator(vg2.V.length, vg2.E, sourceInd, targetInd, length), shortestPath = spCalc.PathFromNodeToNode(start.id, end.id);\n        if (shortestPath.length === 1 || shortestPath.length === vg2.V.length) {\n            var route = rectangle_1.makeEdgeBetween(edge.source.innerBounds, edge.target.innerBounds, ah);\n            lineData = [route.sourceIntersection, route.arrowStart];\n        }\n        else {\n            var n = shortestPath.length - 2, p = vg2.V[shortestPath[n]].p, q = vg2.V[shortestPath[0]].p, lineData = [edge.source.innerBounds.rayIntersection(p.x, p.y)];\n            for (var i = n; i >= 0; --i)\n                lineData.push(vg2.V[shortestPath[i]].p);\n            lineData.push(rectangle_1.makeEdgeTo(q, edge.target.innerBounds, ah));\n        }\n        return lineData;\n    };\n    Layout.getSourceIndex = function (e) {\n        return typeof e.source === 'number' ? e.source : e.source.index;\n    };\n    Layout.getTargetIndex = function (e) {\n        return typeof e.target === 'number' ? e.target : e.target.index;\n    };\n    Layout.linkId = function (e) {\n        return Layout.getSourceIndex(e) + \"-\" + Layout.getTargetIndex(e);\n    };\n    Layout.dragStart = function (d) {\n        if (isGroup(d)) {\n            Layout.storeOffset(d, Layout.dragOrigin(d));\n        }\n        else {\n            Layout.stopNode(d);\n            d.fixed |= 2;\n        }\n    };\n    Layout.stopNode = function (v) {\n        v.px = v.x;\n        v.py = v.y;\n    };\n    Layout.storeOffset = function (d, origin) {\n        if (typeof d.leaves !== 'undefined') {\n            d.leaves.forEach(function (v) {\n                v.fixed |= 2;\n                Layout.stopNode(v);\n                v._dragGroupOffsetX = v.x - origin.x;\n                v._dragGroupOffsetY = v.y - origin.y;\n            });\n        }\n        if (typeof d.groups !== 'undefined') {\n            d.groups.forEach(function (g) { return Layout.storeOffset(g, origin); });\n        }\n    };\n    Layout.dragOrigin = function (d) {\n        if (isGroup(d)) {\n            return {\n                x: d.bounds.cx(),\n                y: d.bounds.cy()\n            };\n        }\n        else {\n            return d;\n        }\n    };\n    Layout.drag = function (d, position) {\n        if (isGroup(d)) {\n            if (typeof d.leaves !== 'undefined') {\n                d.leaves.forEach(function (v) {\n                    d.bounds.setXCentre(position.x);\n                    d.bounds.setYCentre(position.y);\n                    v.px = v._dragGroupOffsetX + position.x;\n                    v.py = v._dragGroupOffsetY + position.y;\n                });\n            }\n            if (typeof d.groups !== 'undefined') {\n                d.groups.forEach(function (g) { return Layout.drag(g, position); });\n            }\n        }\n        else {\n            d.px = position.x;\n            d.py = position.y;\n        }\n    };\n    Layout.dragEnd = function (d) {\n        if (isGroup(d)) {\n            if (typeof d.leaves !== 'undefined') {\n                d.leaves.forEach(function (v) {\n                    Layout.dragEnd(v);\n                    delete v._dragGroupOffsetX;\n                    delete v._dragGroupOffsetY;\n                });\n            }\n            if (typeof d.groups !== 'undefined') {\n                d.groups.forEach(Layout.dragEnd);\n            }\n        }\n        else {\n            d.fixed &= ~6;\n        }\n    };\n    Layout.mouseOver = function (d) {\n        d.fixed |= 4;\n        d.px = d.x, d.py = d.y;\n    };\n    Layout.mouseOut = function (d) {\n        d.fixed &= ~4;\n    };\n    return Layout;\n}());\nexports.Layout = Layout;\n\n},{\"./descent\":7,\"./geom\":8,\"./handledisconnected\":10,\"./linklengths\":13,\"./powergraph\":14,\"./rectangle\":17,\"./shortestpaths\":18}],12:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar shortestpaths_1 = require(\"./shortestpaths\");\nvar descent_1 = require(\"./descent\");\nvar rectangle_1 = require(\"./rectangle\");\nvar linklengths_1 = require(\"./linklengths\");\nvar Link3D = (function () {\n    function Link3D(source, target) {\n        this.source = source;\n        this.target = target;\n    }\n    Link3D.prototype.actualLength = function (x) {\n        var _this = this;\n        return Math.sqrt(x.reduce(function (c, v) {\n            var dx = v[_this.target] - v[_this.source];\n            return c + dx * dx;\n        }, 0));\n    };\n    return Link3D;\n}());\nexports.Link3D = Link3D;\nvar Node3D = (function () {\n    function Node3D(x, y, z) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    return Node3D;\n}());\nexports.Node3D = Node3D;\nvar Layout3D = (function () {\n    function Layout3D(nodes, links, idealLinkLength) {\n        var _this = this;\n        if (idealLinkLength === void 0) { idealLinkLength = 1; }\n        this.nodes = nodes;\n        this.links = links;\n        this.idealLinkLength = idealLinkLength;\n        this.constraints = null;\n        this.useJaccardLinkLengths = true;\n        this.result = new Array(Layout3D.k);\n        for (var i = 0; i < Layout3D.k; ++i) {\n            this.result[i] = new Array(nodes.length);\n        }\n        nodes.forEach(function (v, i) {\n            for (var _i = 0, _a = Layout3D.dims; _i < _a.length; _i++) {\n                var dim = _a[_i];\n                if (typeof v[dim] == 'undefined')\n                    v[dim] = Math.random();\n            }\n            _this.result[0][i] = v.x;\n            _this.result[1][i] = v.y;\n            _this.result[2][i] = v.z;\n        });\n    }\n    ;\n    Layout3D.prototype.linkLength = function (l) {\n        return l.actualLength(this.result);\n    };\n    Layout3D.prototype.start = function (iterations) {\n        var _this = this;\n        if (iterations === void 0) { iterations = 100; }\n        var n = this.nodes.length;\n        var linkAccessor = new LinkAccessor();\n        if (this.useJaccardLinkLengths)\n            linklengths_1.jaccardLinkLengths(this.links, linkAccessor, 1.5);\n        this.links.forEach(function (e) { return e.length *= _this.idealLinkLength; });\n        var distanceMatrix = (new shortestpaths_1.Calculator(n, this.links, function (e) { return e.source; }, function (e) { return e.target; }, function (e) { return e.length; })).DistanceMatrix();\n        var D = descent_1.Descent.createSquareMatrix(n, function (i, j) { return distanceMatrix[i][j]; });\n        var G = descent_1.Descent.createSquareMatrix(n, function () { return 2; });\n        this.links.forEach(function (_a) {\n            var source = _a.source, target = _a.target;\n            return G[source][target] = G[target][source] = 1;\n        });\n        this.descent = new descent_1.Descent(this.result, D);\n        this.descent.threshold = 1e-3;\n        this.descent.G = G;\n        if (this.constraints)\n            this.descent.project = new rectangle_1.Projection(this.nodes, null, null, this.constraints).projectFunctions();\n        for (var i = 0; i < this.nodes.length; i++) {\n            var v = this.nodes[i];\n            if (v.fixed) {\n                this.descent.locks.add(i, [v.x, v.y, v.z]);\n            }\n        }\n        this.descent.run(iterations);\n        return this;\n    };\n    Layout3D.prototype.tick = function () {\n        this.descent.locks.clear();\n        for (var i = 0; i < this.nodes.length; i++) {\n            var v = this.nodes[i];\n            if (v.fixed) {\n                this.descent.locks.add(i, [v.x, v.y, v.z]);\n            }\n        }\n        return this.descent.rungeKutta();\n    };\n    Layout3D.dims = ['x', 'y', 'z'];\n    Layout3D.k = Layout3D.dims.length;\n    return Layout3D;\n}());\nexports.Layout3D = Layout3D;\nvar LinkAccessor = (function () {\n    function LinkAccessor() {\n    }\n    LinkAccessor.prototype.getSourceIndex = function (e) { return e.source; };\n    LinkAccessor.prototype.getTargetIndex = function (e) { return e.target; };\n    LinkAccessor.prototype.getLength = function (e) { return e.length; };\n    LinkAccessor.prototype.setLength = function (e, l) { e.length = l; };\n    return LinkAccessor;\n}());\n\n},{\"./descent\":7,\"./linklengths\":13,\"./rectangle\":17,\"./shortestpaths\":18}],13:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction unionCount(a, b) {\n    var u = {};\n    for (var i in a)\n        u[i] = {};\n    for (var i in b)\n        u[i] = {};\n    return Object.keys(u).length;\n}\nfunction intersectionCount(a, b) {\n    var n = 0;\n    for (var i in a)\n        if (typeof b[i] !== 'undefined')\n            ++n;\n    return n;\n}\nfunction getNeighbours(links, la) {\n    var neighbours = {};\n    var addNeighbours = function (u, v) {\n        if (typeof neighbours[u] === 'undefined')\n            neighbours[u] = {};\n        neighbours[u][v] = {};\n    };\n    links.forEach(function (e) {\n        var u = la.getSourceIndex(e), v = la.getTargetIndex(e);\n        addNeighbours(u, v);\n        addNeighbours(v, u);\n    });\n    return neighbours;\n}\nfunction computeLinkLengths(links, w, f, la) {\n    var neighbours = getNeighbours(links, la);\n    links.forEach(function (l) {\n        var a = neighbours[la.getSourceIndex(l)];\n        var b = neighbours[la.getTargetIndex(l)];\n        la.setLength(l, 1 + w * f(a, b));\n    });\n}\nfunction symmetricDiffLinkLengths(links, la, w) {\n    if (w === void 0) { w = 1; }\n    computeLinkLengths(links, w, function (a, b) { return Math.sqrt(unionCount(a, b) - intersectionCount(a, b)); }, la);\n}\nexports.symmetricDiffLinkLengths = symmetricDiffLinkLengths;\nfunction jaccardLinkLengths(links, la, w) {\n    if (w === void 0) { w = 1; }\n    computeLinkLengths(links, w, function (a, b) {\n        return Math.min(Object.keys(a).length, Object.keys(b).length) < 1.1 ? 0 : intersectionCount(a, b) / unionCount(a, b);\n    }, la);\n}\nexports.jaccardLinkLengths = jaccardLinkLengths;\nfunction generateDirectedEdgeConstraints(n, links, axis, la) {\n    var components = stronglyConnectedComponents(n, links, la);\n    var nodes = {};\n    components.forEach(function (c, i) {\n        return c.forEach(function (v) { return nodes[v] = i; });\n    });\n    var constraints = [];\n    links.forEach(function (l) {\n        var ui = la.getSourceIndex(l), vi = la.getTargetIndex(l), u = nodes[ui], v = nodes[vi];\n        if (u !== v) {\n            constraints.push({\n                axis: axis,\n                left: ui,\n                right: vi,\n                gap: la.getMinSeparation(l)\n            });\n        }\n    });\n    return constraints;\n}\nexports.generateDirectedEdgeConstraints = generateDirectedEdgeConstraints;\nfunction stronglyConnectedComponents(numVertices, edges, la) {\n    var nodes = [];\n    var index = 0;\n    var stack = [];\n    var components = [];\n    function strongConnect(v) {\n        v.index = v.lowlink = index++;\n        stack.push(v);\n        v.onStack = true;\n        for (var _i = 0, _a = v.out; _i < _a.length; _i++) {\n            var w = _a[_i];\n            if (typeof w.index === 'undefined') {\n                strongConnect(w);\n                v.lowlink = Math.min(v.lowlink, w.lowlink);\n            }\n            else if (w.onStack) {\n                v.lowlink = Math.min(v.lowlink, w.index);\n            }\n        }\n        if (v.lowlink === v.index) {\n            var component = [];\n            while (stack.length) {\n                w = stack.pop();\n                w.onStack = false;\n                component.push(w);\n                if (w === v)\n                    break;\n            }\n            components.push(component.map(function (v) { return v.id; }));\n        }\n    }\n    for (var i = 0; i < numVertices; i++) {\n        nodes.push({ id: i, out: [] });\n    }\n    for (var _i = 0, edges_1 = edges; _i < edges_1.length; _i++) {\n        var e = edges_1[_i];\n        var v_1 = nodes[la.getSourceIndex(e)], w = nodes[la.getTargetIndex(e)];\n        v_1.out.push(w);\n    }\n    for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n        var v = nodes_1[_a];\n        if (typeof v.index === 'undefined')\n            strongConnect(v);\n    }\n    return components;\n}\nexports.stronglyConnectedComponents = stronglyConnectedComponents;\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PowerEdge = (function () {\n    function PowerEdge(source, target, type) {\n        this.source = source;\n        this.target = target;\n        this.type = type;\n    }\n    return PowerEdge;\n}());\nexports.PowerEdge = PowerEdge;\nvar Configuration = (function () {\n    function Configuration(n, edges, linkAccessor, rootGroup) {\n        var _this = this;\n        this.linkAccessor = linkAccessor;\n        this.modules = new Array(n);\n        this.roots = [];\n        if (rootGroup) {\n            this.initModulesFromGroup(rootGroup);\n        }\n        else {\n            this.roots.push(new ModuleSet());\n            for (var i = 0; i < n; ++i)\n                this.roots[0].add(this.modules[i] = new Module(i));\n        }\n        this.R = edges.length;\n        edges.forEach(function (e) {\n            var s = _this.modules[linkAccessor.getSourceIndex(e)], t = _this.modules[linkAccessor.getTargetIndex(e)], type = linkAccessor.getType(e);\n            s.outgoing.add(type, t);\n            t.incoming.add(type, s);\n        });\n    }\n    Configuration.prototype.initModulesFromGroup = function (group) {\n        var moduleSet = new ModuleSet();\n        this.roots.push(moduleSet);\n        for (var i = 0; i < group.leaves.length; ++i) {\n            var node = group.leaves[i];\n            var module = new Module(node.id);\n            this.modules[node.id] = module;\n            moduleSet.add(module);\n        }\n        if (group.groups) {\n            for (var j = 0; j < group.groups.length; ++j) {\n                var child = group.groups[j];\n                var definition = {};\n                for (var prop in child)\n                    if (prop !== \"leaves\" && prop !== \"groups\" && child.hasOwnProperty(prop))\n                        definition[prop] = child[prop];\n                moduleSet.add(new Module(-1 - j, new LinkSets(), new LinkSets(), this.initModulesFromGroup(child), definition));\n            }\n        }\n        return moduleSet;\n    };\n    Configuration.prototype.merge = function (a, b, k) {\n        if (k === void 0) { k = 0; }\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n        var children = new ModuleSet();\n        children.add(a);\n        children.add(b);\n        var m = new Module(this.modules.length, outInt, inInt, children);\n        this.modules.push(m);\n        var update = function (s, i, o) {\n            s.forAll(function (ms, linktype) {\n                ms.forAll(function (n) {\n                    var nls = n[i];\n                    nls.add(linktype, m);\n                    nls.remove(linktype, a);\n                    nls.remove(linktype, b);\n                    a[o].remove(linktype, n);\n                    b[o].remove(linktype, n);\n                });\n            });\n        };\n        update(outInt, \"incoming\", \"outgoing\");\n        update(inInt, \"outgoing\", \"incoming\");\n        this.R -= inInt.count() + outInt.count();\n        this.roots[k].remove(a);\n        this.roots[k].remove(b);\n        this.roots[k].add(m);\n        return m;\n    };\n    Configuration.prototype.rootMerges = function (k) {\n        if (k === void 0) { k = 0; }\n        var rs = this.roots[k].modules();\n        var n = rs.length;\n        var merges = new Array(n * (n - 1));\n        var ctr = 0;\n        for (var i = 0, i_ = n - 1; i < i_; ++i) {\n            for (var j = i + 1; j < n; ++j) {\n                var a = rs[i], b = rs[j];\n                merges[ctr] = { id: ctr, nEdges: this.nEdges(a, b), a: a, b: b };\n                ctr++;\n            }\n        }\n        return merges;\n    };\n    Configuration.prototype.greedyMerge = function () {\n        for (var i = 0; i < this.roots.length; ++i) {\n            if (this.roots[i].modules().length < 2)\n                continue;\n            var ms = this.rootMerges(i).sort(function (a, b) { return a.nEdges == b.nEdges ? a.id - b.id : a.nEdges - b.nEdges; });\n            var m = ms[0];\n            if (m.nEdges >= this.R)\n                continue;\n            this.merge(m.a, m.b, i);\n            return true;\n        }\n    };\n    Configuration.prototype.nEdges = function (a, b) {\n        var inInt = a.incoming.intersection(b.incoming), outInt = a.outgoing.intersection(b.outgoing);\n        return this.R - inInt.count() - outInt.count();\n    };\n    Configuration.prototype.getGroupHierarchy = function (retargetedEdges) {\n        var _this = this;\n        var groups = [];\n        var root = {};\n        toGroups(this.roots[0], root, groups);\n        var es = this.allEdges();\n        es.forEach(function (e) {\n            var a = _this.modules[e.source];\n            var b = _this.modules[e.target];\n            retargetedEdges.push(new PowerEdge(typeof a.gid === \"undefined\" ? e.source : groups[a.gid], typeof b.gid === \"undefined\" ? e.target : groups[b.gid], e.type));\n        });\n        return groups;\n    };\n    Configuration.prototype.allEdges = function () {\n        var es = [];\n        Configuration.getEdges(this.roots[0], es);\n        return es;\n    };\n    Configuration.getEdges = function (modules, es) {\n        modules.forAll(function (m) {\n            m.getEdges(es);\n            Configuration.getEdges(m.children, es);\n        });\n    };\n    return Configuration;\n}());\nexports.Configuration = Configuration;\nfunction toGroups(modules, group, groups) {\n    modules.forAll(function (m) {\n        if (m.isLeaf()) {\n            if (!group.leaves)\n                group.leaves = [];\n            group.leaves.push(m.id);\n        }\n        else {\n            var g = group;\n            m.gid = groups.length;\n            if (!m.isIsland() || m.isPredefined()) {\n                g = { id: m.gid };\n                if (m.isPredefined())\n                    for (var prop in m.definition)\n                        g[prop] = m.definition[prop];\n                if (!group.groups)\n                    group.groups = [];\n                group.groups.push(m.gid);\n                groups.push(g);\n            }\n            toGroups(m.children, g, groups);\n        }\n    });\n}\nvar Module = (function () {\n    function Module(id, outgoing, incoming, children, definition) {\n        if (outgoing === void 0) { outgoing = new LinkSets(); }\n        if (incoming === void 0) { incoming = new LinkSets(); }\n        if (children === void 0) { children = new ModuleSet(); }\n        this.id = id;\n        this.outgoing = outgoing;\n        this.incoming = incoming;\n        this.children = children;\n        this.definition = definition;\n    }\n    Module.prototype.getEdges = function (es) {\n        var _this = this;\n        this.outgoing.forAll(function (ms, edgetype) {\n            ms.forAll(function (target) {\n                es.push(new PowerEdge(_this.id, target.id, edgetype));\n            });\n        });\n    };\n    Module.prototype.isLeaf = function () {\n        return this.children.count() === 0;\n    };\n    Module.prototype.isIsland = function () {\n        return this.outgoing.count() === 0 && this.incoming.count() === 0;\n    };\n    Module.prototype.isPredefined = function () {\n        return typeof this.definition !== \"undefined\";\n    };\n    return Module;\n}());\nexports.Module = Module;\nfunction intersection(m, n) {\n    var i = {};\n    for (var v in m)\n        if (v in n)\n            i[v] = m[v];\n    return i;\n}\nvar ModuleSet = (function () {\n    function ModuleSet() {\n        this.table = {};\n    }\n    ModuleSet.prototype.count = function () {\n        return Object.keys(this.table).length;\n    };\n    ModuleSet.prototype.intersection = function (other) {\n        var result = new ModuleSet();\n        result.table = intersection(this.table, other.table);\n        return result;\n    };\n    ModuleSet.prototype.intersectionCount = function (other) {\n        return this.intersection(other).count();\n    };\n    ModuleSet.prototype.contains = function (id) {\n        return id in this.table;\n    };\n    ModuleSet.prototype.add = function (m) {\n        this.table[m.id] = m;\n    };\n    ModuleSet.prototype.remove = function (m) {\n        delete this.table[m.id];\n    };\n    ModuleSet.prototype.forAll = function (f) {\n        for (var mid in this.table) {\n            f(this.table[mid]);\n        }\n    };\n    ModuleSet.prototype.modules = function () {\n        var vs = [];\n        this.forAll(function (m) {\n            if (!m.isPredefined())\n                vs.push(m);\n        });\n        return vs;\n    };\n    return ModuleSet;\n}());\nexports.ModuleSet = ModuleSet;\nvar LinkSets = (function () {\n    function LinkSets() {\n        this.sets = {};\n        this.n = 0;\n    }\n    LinkSets.prototype.count = function () {\n        return this.n;\n    };\n    LinkSets.prototype.contains = function (id) {\n        var result = false;\n        this.forAllModules(function (m) {\n            if (!result && m.id == id) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    LinkSets.prototype.add = function (linktype, m) {\n        var s = linktype in this.sets ? this.sets[linktype] : this.sets[linktype] = new ModuleSet();\n        s.add(m);\n        ++this.n;\n    };\n    LinkSets.prototype.remove = function (linktype, m) {\n        var ms = this.sets[linktype];\n        ms.remove(m);\n        if (ms.count() === 0) {\n            delete this.sets[linktype];\n        }\n        --this.n;\n    };\n    LinkSets.prototype.forAll = function (f) {\n        for (var linktype in this.sets) {\n            f(this.sets[linktype], Number(linktype));\n        }\n    };\n    LinkSets.prototype.forAllModules = function (f) {\n        this.forAll(function (ms, lt) { return ms.forAll(f); });\n    };\n    LinkSets.prototype.intersection = function (other) {\n        var result = new LinkSets();\n        this.forAll(function (ms, lt) {\n            if (lt in other.sets) {\n                var i = ms.intersection(other.sets[lt]), n = i.count();\n                if (n > 0) {\n                    result.sets[lt] = i;\n                    result.n += n;\n                }\n            }\n        });\n        return result;\n    };\n    return LinkSets;\n}());\nexports.LinkSets = LinkSets;\nfunction intersectionCount(m, n) {\n    return Object.keys(intersection(m, n)).length;\n}\nfunction getGroups(nodes, links, la, rootGroup) {\n    var n = nodes.length, c = new Configuration(n, links, la, rootGroup);\n    while (c.greedyMerge())\n        ;\n    var powerEdges = [];\n    var g = c.getGroupHierarchy(powerEdges);\n    powerEdges.forEach(function (e) {\n        var f = function (end) {\n            var g = e[end];\n            if (typeof g == \"number\")\n                e[end] = nodes[g];\n        };\n        f(\"source\");\n        f(\"target\");\n    });\n    return { groups: g, powerEdges: powerEdges };\n}\nexports.getGroups = getGroups;\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PairingHeap = (function () {\n    function PairingHeap(elem) {\n        this.elem = elem;\n        this.subheaps = [];\n    }\n    PairingHeap.prototype.toString = function (selector) {\n        var str = \"\", needComma = false;\n        for (var i = 0; i < this.subheaps.length; ++i) {\n            var subheap = this.subheaps[i];\n            if (!subheap.elem) {\n                needComma = false;\n                continue;\n            }\n            if (needComma) {\n                str = str + \",\";\n            }\n            str = str + subheap.toString(selector);\n            needComma = true;\n        }\n        if (str !== \"\") {\n            str = \"(\" + str + \")\";\n        }\n        return (this.elem ? selector(this.elem) : \"\") + str;\n    };\n    PairingHeap.prototype.forEach = function (f) {\n        if (!this.empty()) {\n            f(this.elem, this);\n            this.subheaps.forEach(function (s) { return s.forEach(f); });\n        }\n    };\n    PairingHeap.prototype.count = function () {\n        return this.empty() ? 0 : 1 + this.subheaps.reduce(function (n, h) {\n            return n + h.count();\n        }, 0);\n    };\n    PairingHeap.prototype.min = function () {\n        return this.elem;\n    };\n    PairingHeap.prototype.empty = function () {\n        return this.elem == null;\n    };\n    PairingHeap.prototype.contains = function (h) {\n        if (this === h)\n            return true;\n        for (var i = 0; i < this.subheaps.length; i++) {\n            if (this.subheaps[i].contains(h))\n                return true;\n        }\n        return false;\n    };\n    PairingHeap.prototype.isHeap = function (lessThan) {\n        var _this = this;\n        return this.subheaps.every(function (h) { return lessThan(_this.elem, h.elem) && h.isHeap(lessThan); });\n    };\n    PairingHeap.prototype.insert = function (obj, lessThan) {\n        return this.merge(new PairingHeap(obj), lessThan);\n    };\n    PairingHeap.prototype.merge = function (heap2, lessThan) {\n        if (this.empty())\n            return heap2;\n        else if (heap2.empty())\n            return this;\n        else if (lessThan(this.elem, heap2.elem)) {\n            this.subheaps.push(heap2);\n            return this;\n        }\n        else {\n            heap2.subheaps.push(this);\n            return heap2;\n        }\n    };\n    PairingHeap.prototype.removeMin = function (lessThan) {\n        if (this.empty())\n            return null;\n        else\n            return this.mergePairs(lessThan);\n    };\n    PairingHeap.prototype.mergePairs = function (lessThan) {\n        if (this.subheaps.length == 0)\n            return new PairingHeap(null);\n        else if (this.subheaps.length == 1) {\n            return this.subheaps[0];\n        }\n        else {\n            var firstPair = this.subheaps.pop().merge(this.subheaps.pop(), lessThan);\n            var remaining = this.mergePairs(lessThan);\n            return firstPair.merge(remaining, lessThan);\n        }\n    };\n    PairingHeap.prototype.decreaseKey = function (subheap, newValue, setHeapNode, lessThan) {\n        var newHeap = subheap.removeMin(lessThan);\n        subheap.elem = newHeap.elem;\n        subheap.subheaps = newHeap.subheaps;\n        if (setHeapNode !== null && newHeap.elem !== null) {\n            setHeapNode(subheap.elem, subheap);\n        }\n        var pairingNode = new PairingHeap(newValue);\n        if (setHeapNode !== null) {\n            setHeapNode(newValue, pairingNode);\n        }\n        return this.merge(pairingNode, lessThan);\n    };\n    return PairingHeap;\n}());\nexports.PairingHeap = PairingHeap;\nvar PriorityQueue = (function () {\n    function PriorityQueue(lessThan) {\n        this.lessThan = lessThan;\n    }\n    PriorityQueue.prototype.top = function () {\n        if (this.empty()) {\n            return null;\n        }\n        return this.root.elem;\n    };\n    PriorityQueue.prototype.push = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var pairingNode;\n        for (var i = 0, arg; arg = args[i]; ++i) {\n            pairingNode = new PairingHeap(arg);\n            this.root = this.empty() ?\n                pairingNode : this.root.merge(pairingNode, this.lessThan);\n        }\n        return pairingNode;\n    };\n    PriorityQueue.prototype.empty = function () {\n        return !this.root || !this.root.elem;\n    };\n    PriorityQueue.prototype.isHeap = function () {\n        return this.root.isHeap(this.lessThan);\n    };\n    PriorityQueue.prototype.forEach = function (f) {\n        this.root.forEach(f);\n    };\n    PriorityQueue.prototype.pop = function () {\n        if (this.empty()) {\n            return null;\n        }\n        var obj = this.root.min();\n        this.root = this.root.removeMin(this.lessThan);\n        return obj;\n    };\n    PriorityQueue.prototype.reduceKey = function (heapNode, newKey, setHeapNode) {\n        if (setHeapNode === void 0) { setHeapNode = null; }\n        this.root = this.root.decreaseKey(heapNode, newKey, setHeapNode, this.lessThan);\n    };\n    PriorityQueue.prototype.toString = function (selector) {\n        return this.root.toString(selector);\n    };\n    PriorityQueue.prototype.count = function () {\n        return this.root.count();\n    };\n    return PriorityQueue;\n}());\nexports.PriorityQueue = PriorityQueue;\n\n},{}],16:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TreeBase = (function () {\n    function TreeBase() {\n        this.findIter = function (data) {\n            var res = this._root;\n            var iter = this.iterator();\n            while (res !== null) {\n                var c = this._comparator(data, res.data);\n                if (c === 0) {\n                    iter._cursor = res;\n                    return iter;\n                }\n                else {\n                    iter._ancestors.push(res);\n                    res = res.get_child(c > 0);\n                }\n            }\n            return null;\n        };\n    }\n    TreeBase.prototype.clear = function () {\n        this._root = null;\n        this.size = 0;\n    };\n    ;\n    TreeBase.prototype.find = function (data) {\n        var res = this._root;\n        while (res !== null) {\n            var c = this._comparator(data, res.data);\n            if (c === 0) {\n                return res.data;\n            }\n            else {\n                res = res.get_child(c > 0);\n            }\n        }\n        return null;\n    };\n    ;\n    TreeBase.prototype.lowerBound = function (data) {\n        return this._bound(data, this._comparator);\n    };\n    ;\n    TreeBase.prototype.upperBound = function (data) {\n        var cmp = this._comparator;\n        function reverse_cmp(a, b) {\n            return cmp(b, a);\n        }\n        return this._bound(data, reverse_cmp);\n    };\n    ;\n    TreeBase.prototype.min = function () {\n        var res = this._root;\n        if (res === null) {\n            return null;\n        }\n        while (res.left !== null) {\n            res = res.left;\n        }\n        return res.data;\n    };\n    ;\n    TreeBase.prototype.max = function () {\n        var res = this._root;\n        if (res === null) {\n            return null;\n        }\n        while (res.right !== null) {\n            res = res.right;\n        }\n        return res.data;\n    };\n    ;\n    TreeBase.prototype.iterator = function () {\n        return new Iterator(this);\n    };\n    ;\n    TreeBase.prototype.each = function (cb) {\n        var it = this.iterator(), data;\n        while ((data = it.next()) !== null) {\n            cb(data);\n        }\n    };\n    ;\n    TreeBase.prototype.reach = function (cb) {\n        var it = this.iterator(), data;\n        while ((data = it.prev()) !== null) {\n            cb(data);\n        }\n    };\n    ;\n    TreeBase.prototype._bound = function (data, cmp) {\n        var cur = this._root;\n        var iter = this.iterator();\n        while (cur !== null) {\n            var c = this._comparator(data, cur.data);\n            if (c === 0) {\n                iter._cursor = cur;\n                return iter;\n            }\n            iter._ancestors.push(cur);\n            cur = cur.get_child(c > 0);\n        }\n        for (var i = iter._ancestors.length - 1; i >= 0; --i) {\n            cur = iter._ancestors[i];\n            if (cmp(data, cur.data) > 0) {\n                iter._cursor = cur;\n                iter._ancestors.length = i;\n                return iter;\n            }\n        }\n        iter._ancestors.length = 0;\n        return iter;\n    };\n    ;\n    return TreeBase;\n}());\nexports.TreeBase = TreeBase;\nvar Iterator = (function () {\n    function Iterator(tree) {\n        this._tree = tree;\n        this._ancestors = [];\n        this._cursor = null;\n    }\n    Iterator.prototype.data = function () {\n        return this._cursor !== null ? this._cursor.data : null;\n    };\n    ;\n    Iterator.prototype.next = function () {\n        if (this._cursor === null) {\n            var root = this._tree._root;\n            if (root !== null) {\n                this._minNode(root);\n            }\n        }\n        else {\n            if (this._cursor.right === null) {\n                var save;\n                do {\n                    save = this._cursor;\n                    if (this._ancestors.length) {\n                        this._cursor = this._ancestors.pop();\n                    }\n                    else {\n                        this._cursor = null;\n                        break;\n                    }\n                } while (this._cursor.right === save);\n            }\n            else {\n                this._ancestors.push(this._cursor);\n                this._minNode(this._cursor.right);\n            }\n        }\n        return this._cursor !== null ? this._cursor.data : null;\n    };\n    ;\n    Iterator.prototype.prev = function () {\n        if (this._cursor === null) {\n            var root = this._tree._root;\n            if (root !== null) {\n                this._maxNode(root);\n            }\n        }\n        else {\n            if (this._cursor.left === null) {\n                var save;\n                do {\n                    save = this._cursor;\n                    if (this._ancestors.length) {\n                        this._cursor = this._ancestors.pop();\n                    }\n                    else {\n                        this._cursor = null;\n                        break;\n                    }\n                } while (this._cursor.left === save);\n            }\n            else {\n                this._ancestors.push(this._cursor);\n                this._maxNode(this._cursor.left);\n            }\n        }\n        return this._cursor !== null ? this._cursor.data : null;\n    };\n    ;\n    Iterator.prototype._minNode = function (start) {\n        while (start.left !== null) {\n            this._ancestors.push(start);\n            start = start.left;\n        }\n        this._cursor = start;\n    };\n    ;\n    Iterator.prototype._maxNode = function (start) {\n        while (start.right !== null) {\n            this._ancestors.push(start);\n            start = start.right;\n        }\n        this._cursor = start;\n    };\n    ;\n    return Iterator;\n}());\nexports.Iterator = Iterator;\nvar Node = (function () {\n    function Node(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n        this.red = true;\n    }\n    Node.prototype.get_child = function (dir) {\n        return dir ? this.right : this.left;\n    };\n    ;\n    Node.prototype.set_child = function (dir, val) {\n        if (dir) {\n            this.right = val;\n        }\n        else {\n            this.left = val;\n        }\n    };\n    ;\n    return Node;\n}());\nvar RBTree = (function (_super) {\n    __extends(RBTree, _super);\n    function RBTree(comparator) {\n        var _this = _super.call(this) || this;\n        _this._root = null;\n        _this._comparator = comparator;\n        _this.size = 0;\n        return _this;\n    }\n    RBTree.prototype.insert = function (data) {\n        var ret = false;\n        if (this._root === null) {\n            this._root = new Node(data);\n            ret = true;\n            this.size++;\n        }\n        else {\n            var head = new Node(undefined);\n            var dir = false;\n            var last = false;\n            var gp = null;\n            var ggp = head;\n            var p = null;\n            var node = this._root;\n            ggp.right = this._root;\n            while (true) {\n                if (node === null) {\n                    node = new Node(data);\n                    p.set_child(dir, node);\n                    ret = true;\n                    this.size++;\n                }\n                else if (RBTree.is_red(node.left) && RBTree.is_red(node.right)) {\n                    node.red = true;\n                    node.left.red = false;\n                    node.right.red = false;\n                }\n                if (RBTree.is_red(node) && RBTree.is_red(p)) {\n                    var dir2 = ggp.right === gp;\n                    if (node === p.get_child(last)) {\n                        ggp.set_child(dir2, RBTree.single_rotate(gp, !last));\n                    }\n                    else {\n                        ggp.set_child(dir2, RBTree.double_rotate(gp, !last));\n                    }\n                }\n                var cmp = this._comparator(node.data, data);\n                if (cmp === 0) {\n                    break;\n                }\n                last = dir;\n                dir = cmp < 0;\n                if (gp !== null) {\n                    ggp = gp;\n                }\n                gp = p;\n                p = node;\n                node = node.get_child(dir);\n            }\n            this._root = head.right;\n        }\n        this._root.red = false;\n        return ret;\n    };\n    ;\n    RBTree.prototype.remove = function (data) {\n        if (this._root === null) {\n            return false;\n        }\n        var head = new Node(undefined);\n        var node = head;\n        node.right = this._root;\n        var p = null;\n        var gp = null;\n        var found = null;\n        var dir = true;\n        while (node.get_child(dir) !== null) {\n            var last = dir;\n            gp = p;\n            p = node;\n            node = node.get_child(dir);\n            var cmp = this._comparator(data, node.data);\n            dir = cmp > 0;\n            if (cmp === 0) {\n                found = node;\n            }\n            if (!RBTree.is_red(node) && !RBTree.is_red(node.get_child(dir))) {\n                if (RBTree.is_red(node.get_child(!dir))) {\n                    var sr = RBTree.single_rotate(node, dir);\n                    p.set_child(last, sr);\n                    p = sr;\n                }\n                else if (!RBTree.is_red(node.get_child(!dir))) {\n                    var sibling = p.get_child(!last);\n                    if (sibling !== null) {\n                        if (!RBTree.is_red(sibling.get_child(!last)) && !RBTree.is_red(sibling.get_child(last))) {\n                            p.red = false;\n                            sibling.red = true;\n                            node.red = true;\n                        }\n                        else {\n                            var dir2 = gp.right === p;\n                            if (RBTree.is_red(sibling.get_child(last))) {\n                                gp.set_child(dir2, RBTree.double_rotate(p, last));\n                            }\n                            else if (RBTree.is_red(sibling.get_child(!last))) {\n                                gp.set_child(dir2, RBTree.single_rotate(p, last));\n                            }\n                            var gpc = gp.get_child(dir2);\n                            gpc.red = true;\n                            node.red = true;\n                            gpc.left.red = false;\n                            gpc.right.red = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (found !== null) {\n            found.data = node.data;\n            p.set_child(p.right === node, node.get_child(node.left === null));\n            this.size--;\n        }\n        this._root = head.right;\n        if (this._root !== null) {\n            this._root.red = false;\n        }\n        return found !== null;\n    };\n    ;\n    RBTree.is_red = function (node) {\n        return node !== null && node.red;\n    };\n    RBTree.single_rotate = function (root, dir) {\n        var save = root.get_child(!dir);\n        root.set_child(!dir, save.get_child(dir));\n        save.set_child(dir, root);\n        root.red = true;\n        save.red = false;\n        return save;\n    };\n    RBTree.double_rotate = function (root, dir) {\n        root.set_child(!dir, RBTree.single_rotate(root.get_child(!dir), !dir));\n        return RBTree.single_rotate(root, dir);\n    };\n    return RBTree;\n}(TreeBase));\nexports.RBTree = RBTree;\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vpsc_1 = require(\"./vpsc\");\nvar rbtree_1 = require(\"./rbtree\");\nfunction computeGroupBounds(g) {\n    g.bounds = typeof g.leaves !== \"undefined\" ?\n        g.leaves.reduce(function (r, c) { return c.bounds.union(r); }, Rectangle.empty()) :\n        Rectangle.empty();\n    if (typeof g.groups !== \"undefined\")\n        g.bounds = g.groups.reduce(function (r, c) { return computeGroupBounds(c).union(r); }, g.bounds);\n    g.bounds = g.bounds.inflate(g.padding);\n    return g.bounds;\n}\nexports.computeGroupBounds = computeGroupBounds;\nvar Rectangle = (function () {\n    function Rectangle(x, X, y, Y) {\n        this.x = x;\n        this.X = X;\n        this.y = y;\n        this.Y = Y;\n    }\n    Rectangle.empty = function () { return new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY); };\n    Rectangle.prototype.cx = function () { return (this.x + this.X) / 2; };\n    Rectangle.prototype.cy = function () { return (this.y + this.Y) / 2; };\n    Rectangle.prototype.overlapX = function (r) {\n        var ux = this.cx(), vx = r.cx();\n        if (ux <= vx && r.x < this.X)\n            return this.X - r.x;\n        if (vx <= ux && this.x < r.X)\n            return r.X - this.x;\n        return 0;\n    };\n    Rectangle.prototype.overlapY = function (r) {\n        var uy = this.cy(), vy = r.cy();\n        if (uy <= vy && r.y < this.Y)\n            return this.Y - r.y;\n        if (vy <= uy && this.y < r.Y)\n            return r.Y - this.y;\n        return 0;\n    };\n    Rectangle.prototype.setXCentre = function (cx) {\n        var dx = cx - this.cx();\n        this.x += dx;\n        this.X += dx;\n    };\n    Rectangle.prototype.setYCentre = function (cy) {\n        var dy = cy - this.cy();\n        this.y += dy;\n        this.Y += dy;\n    };\n    Rectangle.prototype.width = function () {\n        return this.X - this.x;\n    };\n    Rectangle.prototype.height = function () {\n        return this.Y - this.y;\n    };\n    Rectangle.prototype.union = function (r) {\n        return new Rectangle(Math.min(this.x, r.x), Math.max(this.X, r.X), Math.min(this.y, r.y), Math.max(this.Y, r.Y));\n    };\n    Rectangle.prototype.lineIntersections = function (x1, y1, x2, y2) {\n        var sides = [[this.x, this.y, this.X, this.y],\n            [this.X, this.y, this.X, this.Y],\n            [this.X, this.Y, this.x, this.Y],\n            [this.x, this.Y, this.x, this.y]];\n        var intersections = [];\n        for (var i = 0; i < 4; ++i) {\n            var r = Rectangle.lineIntersection(x1, y1, x2, y2, sides[i][0], sides[i][1], sides[i][2], sides[i][3]);\n            if (r !== null)\n                intersections.push({ x: r.x, y: r.y });\n        }\n        return intersections;\n    };\n    Rectangle.prototype.rayIntersection = function (x2, y2) {\n        var ints = this.lineIntersections(this.cx(), this.cy(), x2, y2);\n        return ints.length > 0 ? ints[0] : null;\n    };\n    Rectangle.prototype.vertices = function () {\n        return [\n            { x: this.x, y: this.y },\n            { x: this.X, y: this.y },\n            { x: this.X, y: this.Y },\n            { x: this.x, y: this.Y }\n        ];\n    };\n    Rectangle.lineIntersection = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n        var dx12 = x2 - x1, dx34 = x4 - x3, dy12 = y2 - y1, dy34 = y4 - y3, denominator = dy34 * dx12 - dx34 * dy12;\n        if (denominator == 0)\n            return null;\n        var dx31 = x1 - x3, dy31 = y1 - y3, numa = dx34 * dy31 - dy34 * dx31, a = numa / denominator, numb = dx12 * dy31 - dy12 * dx31, b = numb / denominator;\n        if (a >= 0 && a <= 1 && b >= 0 && b <= 1) {\n            return {\n                x: x1 + a * dx12,\n                y: y1 + a * dy12\n            };\n        }\n        return null;\n    };\n    Rectangle.prototype.inflate = function (pad) {\n        return new Rectangle(this.x - pad, this.X + pad, this.y - pad, this.Y + pad);\n    };\n    return Rectangle;\n}());\nexports.Rectangle = Rectangle;\nfunction makeEdgeBetween(source, target, ah) {\n    var si = source.rayIntersection(target.cx(), target.cy()) || { x: source.cx(), y: source.cy() }, ti = target.rayIntersection(source.cx(), source.cy()) || { x: target.cx(), y: target.cy() }, dx = ti.x - si.x, dy = ti.y - si.y, l = Math.sqrt(dx * dx + dy * dy), al = l - ah;\n    return {\n        sourceIntersection: si,\n        targetIntersection: ti,\n        arrowStart: { x: si.x + al * dx / l, y: si.y + al * dy / l }\n    };\n}\nexports.makeEdgeBetween = makeEdgeBetween;\nfunction makeEdgeTo(s, target, ah) {\n    var ti = target.rayIntersection(s.x, s.y);\n    if (!ti)\n        ti = { x: target.cx(), y: target.cy() };\n    var dx = ti.x - s.x, dy = ti.y - s.y, l = Math.sqrt(dx * dx + dy * dy);\n    return { x: ti.x - ah * dx / l, y: ti.y - ah * dy / l };\n}\nexports.makeEdgeTo = makeEdgeTo;\nvar Node = (function () {\n    function Node(v, r, pos) {\n        this.v = v;\n        this.r = r;\n        this.pos = pos;\n        this.prev = makeRBTree();\n        this.next = makeRBTree();\n    }\n    return Node;\n}());\nvar Event = (function () {\n    function Event(isOpen, v, pos) {\n        this.isOpen = isOpen;\n        this.v = v;\n        this.pos = pos;\n    }\n    return Event;\n}());\nfunction compareEvents(a, b) {\n    if (a.pos > b.pos) {\n        return 1;\n    }\n    if (a.pos < b.pos) {\n        return -1;\n    }\n    if (a.isOpen) {\n        return -1;\n    }\n    if (b.isOpen) {\n        return 1;\n    }\n    return 0;\n}\nfunction makeRBTree() {\n    return new rbtree_1.RBTree(function (a, b) { return a.pos - b.pos; });\n}\nvar xRect = {\n    getCentre: function (r) { return r.cx(); },\n    getOpen: function (r) { return r.y; },\n    getClose: function (r) { return r.Y; },\n    getSize: function (r) { return r.width(); },\n    makeRect: function (open, close, center, size) { return new Rectangle(center - size / 2, center + size / 2, open, close); },\n    findNeighbours: findXNeighbours\n};\nvar yRect = {\n    getCentre: function (r) { return r.cy(); },\n    getOpen: function (r) { return r.x; },\n    getClose: function (r) { return r.X; },\n    getSize: function (r) { return r.height(); },\n    makeRect: function (open, close, center, size) { return new Rectangle(open, close, center - size / 2, center + size / 2); },\n    findNeighbours: findYNeighbours\n};\nfunction generateGroupConstraints(root, f, minSep, isContained) {\n    if (isContained === void 0) { isContained = false; }\n    var padding = root.padding, gn = typeof root.groups !== 'undefined' ? root.groups.length : 0, ln = typeof root.leaves !== 'undefined' ? root.leaves.length : 0, childConstraints = !gn ? []\n        : root.groups.reduce(function (ccs, g) { return ccs.concat(generateGroupConstraints(g, f, minSep, true)); }, []), n = (isContained ? 2 : 0) + ln + gn, vs = new Array(n), rs = new Array(n), i = 0, add = function (r, v) { rs[i] = r; vs[i++] = v; };\n    if (isContained) {\n        var b = root.bounds, c = f.getCentre(b), s = f.getSize(b) / 2, open = f.getOpen(b), close = f.getClose(b), min = c - s + padding / 2, max = c + s - padding / 2;\n        root.minVar.desiredPosition = min;\n        add(f.makeRect(open, close, min, padding), root.minVar);\n        root.maxVar.desiredPosition = max;\n        add(f.makeRect(open, close, max, padding), root.maxVar);\n    }\n    if (ln)\n        root.leaves.forEach(function (l) { return add(l.bounds, l.variable); });\n    if (gn)\n        root.groups.forEach(function (g) {\n            var b = g.bounds;\n            add(f.makeRect(f.getOpen(b), f.getClose(b), f.getCentre(b), f.getSize(b)), g.minVar);\n        });\n    var cs = generateConstraints(rs, vs, f, minSep);\n    if (gn) {\n        vs.forEach(function (v) { v.cOut = [], v.cIn = []; });\n        cs.forEach(function (c) { c.left.cOut.push(c), c.right.cIn.push(c); });\n        root.groups.forEach(function (g) {\n            var gapAdjustment = (g.padding - f.getSize(g.bounds)) / 2;\n            g.minVar.cIn.forEach(function (c) { return c.gap += gapAdjustment; });\n            g.minVar.cOut.forEach(function (c) { c.left = g.maxVar; c.gap += gapAdjustment; });\n        });\n    }\n    return childConstraints.concat(cs);\n}\nfunction generateConstraints(rs, vars, rect, minSep) {\n    var i, n = rs.length;\n    var N = 2 * n;\n    console.assert(vars.length >= n);\n    var events = new Array(N);\n    for (i = 0; i < n; ++i) {\n        var r = rs[i];\n        var v = new Node(vars[i], r, rect.getCentre(r));\n        events[i] = new Event(true, v, rect.getOpen(r));\n        events[i + n] = new Event(false, v, rect.getClose(r));\n    }\n    events.sort(compareEvents);\n    var cs = new Array();\n    var scanline = makeRBTree();\n    for (i = 0; i < N; ++i) {\n        var e = events[i];\n        var v = e.v;\n        if (e.isOpen) {\n            scanline.insert(v);\n            rect.findNeighbours(v, scanline);\n        }\n        else {\n            scanline.remove(v);\n            var makeConstraint = function (l, r) {\n                var sep = (rect.getSize(l.r) + rect.getSize(r.r)) / 2 + minSep;\n                cs.push(new vpsc_1.Constraint(l.v, r.v, sep));\n            };\n            var visitNeighbours = function (forward, reverse, mkcon) {\n                var u, it = v[forward].iterator();\n                while ((u = it[forward]()) !== null) {\n                    mkcon(u, v);\n                    u[reverse].remove(v);\n                }\n            };\n            visitNeighbours(\"prev\", \"next\", function (u, v) { return makeConstraint(u, v); });\n            visitNeighbours(\"next\", \"prev\", function (u, v) { return makeConstraint(v, u); });\n        }\n    }\n    console.assert(scanline.size === 0);\n    return cs;\n}\nfunction findXNeighbours(v, scanline) {\n    var f = function (forward, reverse) {\n        var it = scanline.findIter(v);\n        var u;\n        while ((u = it[forward]()) !== null) {\n            var uovervX = u.r.overlapX(v.r);\n            if (uovervX <= 0 || uovervX <= u.r.overlapY(v.r)) {\n                v[forward].insert(u);\n                u[reverse].insert(v);\n            }\n            if (uovervX <= 0) {\n                break;\n            }\n        }\n    };\n    f(\"next\", \"prev\");\n    f(\"prev\", \"next\");\n}\nfunction findYNeighbours(v, scanline) {\n    var f = function (forward, reverse) {\n        var u = scanline.findIter(v)[forward]();\n        if (u !== null && u.r.overlapX(v.r) > 0) {\n            v[forward].insert(u);\n            u[reverse].insert(v);\n        }\n    };\n    f(\"next\", \"prev\");\n    f(\"prev\", \"next\");\n}\nfunction generateXConstraints(rs, vars) {\n    return generateConstraints(rs, vars, xRect, 1e-6);\n}\nexports.generateXConstraints = generateXConstraints;\nfunction generateYConstraints(rs, vars) {\n    return generateConstraints(rs, vars, yRect, 1e-6);\n}\nexports.generateYConstraints = generateYConstraints;\nfunction generateXGroupConstraints(root) {\n    return generateGroupConstraints(root, xRect, 1e-6);\n}\nexports.generateXGroupConstraints = generateXGroupConstraints;\nfunction generateYGroupConstraints(root) {\n    return generateGroupConstraints(root, yRect, 1e-6);\n}\nexports.generateYGroupConstraints = generateYGroupConstraints;\nfunction removeOverlaps(rs) {\n    var vs = rs.map(function (r) { return new vpsc_1.Variable(r.cx()); });\n    var cs = generateXConstraints(rs, vs);\n    var solver = new vpsc_1.Solver(vs, cs);\n    solver.solve();\n    vs.forEach(function (v, i) { return rs[i].setXCentre(v.position()); });\n    vs = rs.map(function (r) { return new vpsc_1.Variable(r.cy()); });\n    cs = generateYConstraints(rs, vs);\n    solver = new vpsc_1.Solver(vs, cs);\n    solver.solve();\n    vs.forEach(function (v, i) { return rs[i].setYCentre(v.position()); });\n}\nexports.removeOverlaps = removeOverlaps;\nvar IndexedVariable = (function (_super) {\n    __extends(IndexedVariable, _super);\n    function IndexedVariable(index, w) {\n        var _this = _super.call(this, 0, w) || this;\n        _this.index = index;\n        return _this;\n    }\n    return IndexedVariable;\n}(vpsc_1.Variable));\nexports.IndexedVariable = IndexedVariable;\nvar Projection = (function () {\n    function Projection(nodes, groups, rootGroup, constraints, avoidOverlaps) {\n        var _this = this;\n        if (rootGroup === void 0) { rootGroup = null; }\n        if (constraints === void 0) { constraints = null; }\n        if (avoidOverlaps === void 0) { avoidOverlaps = false; }\n        this.nodes = nodes;\n        this.groups = groups;\n        this.rootGroup = rootGroup;\n        this.avoidOverlaps = avoidOverlaps;\n        this.variables = nodes.map(function (v, i) {\n            return v.variable = new IndexedVariable(i, 1);\n        });\n        if (constraints)\n            this.createConstraints(constraints);\n        if (avoidOverlaps && rootGroup && typeof rootGroup.groups !== 'undefined') {\n            nodes.forEach(function (v) {\n                if (!v.width || !v.height) {\n                    v.bounds = new Rectangle(v.x, v.x, v.y, v.y);\n                    return;\n                }\n                var w2 = v.width / 2, h2 = v.height / 2;\n                v.bounds = new Rectangle(v.x - w2, v.x + w2, v.y - h2, v.y + h2);\n            });\n            computeGroupBounds(rootGroup);\n            var i = nodes.length;\n            groups.forEach(function (g) {\n                _this.variables[i] = g.minVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n                _this.variables[i] = g.maxVar = new IndexedVariable(i++, typeof g.stiffness !== \"undefined\" ? g.stiffness : 0.01);\n            });\n        }\n    }\n    Projection.prototype.createSeparation = function (c) {\n        return new vpsc_1.Constraint(this.nodes[c.left].variable, this.nodes[c.right].variable, c.gap, typeof c.equality !== \"undefined\" ? c.equality : false);\n    };\n    Projection.prototype.makeFeasible = function (c) {\n        var _this = this;\n        if (!this.avoidOverlaps)\n            return;\n        var axis = 'x', dim = 'width';\n        if (c.axis === 'x')\n            axis = 'y', dim = 'height';\n        var vs = c.offsets.map(function (o) { return _this.nodes[o.node]; }).sort(function (a, b) { return a[axis] - b[axis]; });\n        var p = null;\n        vs.forEach(function (v) {\n            if (p) {\n                var nextPos = p[axis] + p[dim];\n                if (nextPos > v[axis]) {\n                    v[axis] = nextPos;\n                }\n            }\n            p = v;\n        });\n    };\n    Projection.prototype.createAlignment = function (c) {\n        var _this = this;\n        var u = this.nodes[c.offsets[0].node].variable;\n        this.makeFeasible(c);\n        var cs = c.axis === 'x' ? this.xConstraints : this.yConstraints;\n        c.offsets.slice(1).forEach(function (o) {\n            var v = _this.nodes[o.node].variable;\n            cs.push(new vpsc_1.Constraint(u, v, o.offset, true));\n        });\n    };\n    Projection.prototype.createConstraints = function (constraints) {\n        var _this = this;\n        var isSep = function (c) { return typeof c.type === 'undefined' || c.type === 'separation'; };\n        this.xConstraints = constraints\n            .filter(function (c) { return c.axis === \"x\" && isSep(c); })\n            .map(function (c) { return _this.createSeparation(c); });\n        this.yConstraints = constraints\n            .filter(function (c) { return c.axis === \"y\" && isSep(c); })\n            .map(function (c) { return _this.createSeparation(c); });\n        constraints\n            .filter(function (c) { return c.type === 'alignment'; })\n            .forEach(function (c) { return _this.createAlignment(c); });\n    };\n    Projection.prototype.setupVariablesAndBounds = function (x0, y0, desired, getDesired) {\n        this.nodes.forEach(function (v, i) {\n            if (v.fixed) {\n                v.variable.weight = v.fixedWeight ? v.fixedWeight : 1000;\n                desired[i] = getDesired(v);\n            }\n            else {\n                v.variable.weight = 1;\n            }\n            var w = (v.width || 0) / 2, h = (v.height || 0) / 2;\n            var ix = x0[i], iy = y0[i];\n            v.bounds = new Rectangle(ix - w, ix + w, iy - h, iy + h);\n        });\n    };\n    Projection.prototype.xProject = function (x0, y0, x) {\n        if (!this.rootGroup && !(this.avoidOverlaps || this.xConstraints))\n            return;\n        this.project(x0, y0, x0, x, function (v) { return v.px; }, this.xConstraints, generateXGroupConstraints, function (v) { return v.bounds.setXCentre(x[v.variable.index] = v.variable.position()); }, function (g) {\n            var xmin = x[g.minVar.index] = g.minVar.position();\n            var xmax = x[g.maxVar.index] = g.maxVar.position();\n            var p2 = g.padding / 2;\n            g.bounds.x = xmin - p2;\n            g.bounds.X = xmax + p2;\n        });\n    };\n    Projection.prototype.yProject = function (x0, y0, y) {\n        if (!this.rootGroup && !this.yConstraints)\n            return;\n        this.project(x0, y0, y0, y, function (v) { return v.py; }, this.yConstraints, generateYGroupConstraints, function (v) { return v.bounds.setYCentre(y[v.variable.index] = v.variable.position()); }, function (g) {\n            var ymin = y[g.minVar.index] = g.minVar.position();\n            var ymax = y[g.maxVar.index] = g.maxVar.position();\n            var p2 = g.padding / 2;\n            g.bounds.y = ymin - p2;\n            ;\n            g.bounds.Y = ymax + p2;\n        });\n    };\n    Projection.prototype.projectFunctions = function () {\n        var _this = this;\n        return [\n            function (x0, y0, x) { return _this.xProject(x0, y0, x); },\n            function (x0, y0, y) { return _this.yProject(x0, y0, y); }\n        ];\n    };\n    Projection.prototype.project = function (x0, y0, start, desired, getDesired, cs, generateConstraints, updateNodeBounds, updateGroupBounds) {\n        this.setupVariablesAndBounds(x0, y0, desired, getDesired);\n        if (this.rootGroup && this.avoidOverlaps) {\n            computeGroupBounds(this.rootGroup);\n            cs = cs.concat(generateConstraints(this.rootGroup));\n        }\n        this.solve(this.variables, cs, start, desired);\n        this.nodes.forEach(updateNodeBounds);\n        if (this.rootGroup && this.avoidOverlaps) {\n            this.groups.forEach(updateGroupBounds);\n            computeGroupBounds(this.rootGroup);\n        }\n    };\n    Projection.prototype.solve = function (vs, cs, starting, desired) {\n        var solver = new vpsc_1.Solver(vs, cs);\n        solver.setStartingPositions(starting);\n        solver.setDesiredPositions(desired);\n        solver.solve();\n    };\n    return Projection;\n}());\nexports.Projection = Projection;\n\n},{\"./rbtree\":16,\"./vpsc\":19}],18:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pqueue_1 = require(\"./pqueue\");\nvar Neighbour = (function () {\n    function Neighbour(id, distance) {\n        this.id = id;\n        this.distance = distance;\n    }\n    return Neighbour;\n}());\nvar Node = (function () {\n    function Node(id) {\n        this.id = id;\n        this.neighbours = [];\n    }\n    return Node;\n}());\nvar QueueEntry = (function () {\n    function QueueEntry(node, prev, d) {\n        this.node = node;\n        this.prev = prev;\n        this.d = d;\n    }\n    return QueueEntry;\n}());\nvar Calculator = (function () {\n    function Calculator(n, es, getSourceIndex, getTargetIndex, getLength) {\n        this.n = n;\n        this.es = es;\n        this.neighbours = new Array(this.n);\n        var i = this.n;\n        while (i--)\n            this.neighbours[i] = new Node(i);\n        i = this.es.length;\n        while (i--) {\n            var e = this.es[i];\n            var u = getSourceIndex(e), v = getTargetIndex(e);\n            var d = getLength(e);\n            this.neighbours[u].neighbours.push(new Neighbour(v, d));\n            this.neighbours[v].neighbours.push(new Neighbour(u, d));\n        }\n    }\n    Calculator.prototype.DistanceMatrix = function () {\n        var D = new Array(this.n);\n        for (var i = 0; i < this.n; ++i) {\n            D[i] = this.dijkstraNeighbours(i);\n        }\n        return D;\n    };\n    Calculator.prototype.DistancesFromNode = function (start) {\n        return this.dijkstraNeighbours(start);\n    };\n    Calculator.prototype.PathFromNodeToNode = function (start, end) {\n        return this.dijkstraNeighbours(start, end);\n    };\n    Calculator.prototype.PathFromNodeToNodeWithPrevCost = function (start, end, prevCost) {\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), u = this.neighbours[start], qu = new QueueEntry(u, null, 0), visitedFrom = {};\n        q.push(qu);\n        while (!q.empty()) {\n            qu = q.pop();\n            u = qu.node;\n            if (u.id === end) {\n                break;\n            }\n            var i = u.neighbours.length;\n            while (i--) {\n                var neighbour = u.neighbours[i], v = this.neighbours[neighbour.id];\n                if (qu.prev && v.id === qu.prev.node.id)\n                    continue;\n                var viduid = v.id + ',' + u.id;\n                if (viduid in visitedFrom && visitedFrom[viduid] <= qu.d)\n                    continue;\n                var cc = qu.prev ? prevCost(qu.prev.node.id, u.id, v.id) : 0, t = qu.d + neighbour.distance + cc;\n                visitedFrom[viduid] = t;\n                q.push(new QueueEntry(v, qu, t));\n            }\n        }\n        var path = [];\n        while (qu.prev) {\n            qu = qu.prev;\n            path.push(qu.node.id);\n        }\n        return path;\n    };\n    Calculator.prototype.dijkstraNeighbours = function (start, dest) {\n        if (dest === void 0) { dest = -1; }\n        var q = new pqueue_1.PriorityQueue(function (a, b) { return a.d <= b.d; }), i = this.neighbours.length, d = new Array(i);\n        while (i--) {\n            var node = this.neighbours[i];\n            node.d = i === start ? 0 : Number.POSITIVE_INFINITY;\n            node.q = q.push(node);\n        }\n        while (!q.empty()) {\n            var u = q.pop();\n            d[u.id] = u.d;\n            if (u.id === dest) {\n                var path = [];\n                var v = u;\n                while (typeof v.prev !== 'undefined') {\n                    path.push(v.prev.id);\n                    v = v.prev;\n                }\n                return path;\n            }\n            i = u.neighbours.length;\n            while (i--) {\n                var neighbour = u.neighbours[i];\n                var v = this.neighbours[neighbour.id];\n                var t = u.d + neighbour.distance;\n                if (u.d !== Number.MAX_VALUE && v.d > t) {\n                    v.d = t;\n                    v.prev = u;\n                    q.reduceKey(v.q, v, function (e, q) { return e.q = q; });\n                }\n            }\n        }\n        return d;\n    };\n    return Calculator;\n}());\nexports.Calculator = Calculator;\n\n},{\"./pqueue\":15}],19:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PositionStats = (function () {\n    function PositionStats(scale) {\n        this.scale = scale;\n        this.AB = 0;\n        this.AD = 0;\n        this.A2 = 0;\n    }\n    PositionStats.prototype.addVariable = function (v) {\n        var ai = this.scale / v.scale;\n        var bi = v.offset / v.scale;\n        var wi = v.weight;\n        this.AB += wi * ai * bi;\n        this.AD += wi * ai * v.desiredPosition;\n        this.A2 += wi * ai * ai;\n    };\n    PositionStats.prototype.getPosn = function () {\n        return (this.AD - this.AB) / this.A2;\n    };\n    return PositionStats;\n}());\nexports.PositionStats = PositionStats;\nvar Constraint = (function () {\n    function Constraint(left, right, gap, equality) {\n        if (equality === void 0) { equality = false; }\n        this.left = left;\n        this.right = right;\n        this.gap = gap;\n        this.equality = equality;\n        this.active = false;\n        this.unsatisfiable = false;\n        this.left = left;\n        this.right = right;\n        this.gap = gap;\n        this.equality = equality;\n    }\n    Constraint.prototype.slack = function () {\n        return this.unsatisfiable ? Number.MAX_VALUE\n            : this.right.scale * this.right.position() - this.gap\n                - this.left.scale * this.left.position();\n    };\n    return Constraint;\n}());\nexports.Constraint = Constraint;\nvar Variable = (function () {\n    function Variable(desiredPosition, weight, scale) {\n        if (weight === void 0) { weight = 1; }\n        if (scale === void 0) { scale = 1; }\n        this.desiredPosition = desiredPosition;\n        this.weight = weight;\n        this.scale = scale;\n        this.offset = 0;\n    }\n    Variable.prototype.dfdv = function () {\n        return 2.0 * this.weight * (this.position() - this.desiredPosition);\n    };\n    Variable.prototype.position = function () {\n        return (this.block.ps.scale * this.block.posn + this.offset) / this.scale;\n    };\n    Variable.prototype.visitNeighbours = function (prev, f) {\n        var ff = function (c, next) { return c.active && prev !== next && f(c, next); };\n        this.cOut.forEach(function (c) { return ff(c, c.right); });\n        this.cIn.forEach(function (c) { return ff(c, c.left); });\n    };\n    return Variable;\n}());\nexports.Variable = Variable;\nvar Block = (function () {\n    function Block(v) {\n        this.vars = [];\n        v.offset = 0;\n        this.ps = new PositionStats(v.scale);\n        this.addVariable(v);\n    }\n    Block.prototype.addVariable = function (v) {\n        v.block = this;\n        this.vars.push(v);\n        this.ps.addVariable(v);\n        this.posn = this.ps.getPosn();\n    };\n    Block.prototype.updateWeightedPosition = function () {\n        this.ps.AB = this.ps.AD = this.ps.A2 = 0;\n        for (var i = 0, n = this.vars.length; i < n; ++i)\n            this.ps.addVariable(this.vars[i]);\n        this.posn = this.ps.getPosn();\n    };\n    Block.prototype.compute_lm = function (v, u, postAction) {\n        var _this = this;\n        var dfdv = v.dfdv();\n        v.visitNeighbours(u, function (c, next) {\n            var _dfdv = _this.compute_lm(next, v, postAction);\n            if (next === c.right) {\n                dfdv += _dfdv * c.left.scale;\n                c.lm = _dfdv;\n            }\n            else {\n                dfdv += _dfdv * c.right.scale;\n                c.lm = -_dfdv;\n            }\n            postAction(c);\n        });\n        return dfdv / v.scale;\n    };\n    Block.prototype.populateSplitBlock = function (v, prev) {\n        var _this = this;\n        v.visitNeighbours(prev, function (c, next) {\n            next.offset = v.offset + (next === c.right ? c.gap : -c.gap);\n            _this.addVariable(next);\n            _this.populateSplitBlock(next, v);\n        });\n    };\n    Block.prototype.traverse = function (visit, acc, v, prev) {\n        var _this = this;\n        if (v === void 0) { v = this.vars[0]; }\n        if (prev === void 0) { prev = null; }\n        v.visitNeighbours(prev, function (c, next) {\n            acc.push(visit(c));\n            _this.traverse(visit, acc, next, v);\n        });\n    };\n    Block.prototype.findMinLM = function () {\n        var m = null;\n        this.compute_lm(this.vars[0], null, function (c) {\n            if (!c.equality && (m === null || c.lm < m.lm))\n                m = c;\n        });\n        return m;\n    };\n    Block.prototype.findMinLMBetween = function (lv, rv) {\n        this.compute_lm(lv, null, function () { });\n        var m = null;\n        this.findPath(lv, null, rv, function (c, next) {\n            if (!c.equality && c.right === next && (m === null || c.lm < m.lm))\n                m = c;\n        });\n        return m;\n    };\n    Block.prototype.findPath = function (v, prev, to, visit) {\n        var _this = this;\n        var endFound = false;\n        v.visitNeighbours(prev, function (c, next) {\n            if (!endFound && (next === to || _this.findPath(next, v, to, visit))) {\n                endFound = true;\n                visit(c, next);\n            }\n        });\n        return endFound;\n    };\n    Block.prototype.isActiveDirectedPathBetween = function (u, v) {\n        if (u === v)\n            return true;\n        var i = u.cOut.length;\n        while (i--) {\n            var c = u.cOut[i];\n            if (c.active && this.isActiveDirectedPathBetween(c.right, v))\n                return true;\n        }\n        return false;\n    };\n    Block.split = function (c) {\n        c.active = false;\n        return [Block.createSplitBlock(c.left), Block.createSplitBlock(c.right)];\n    };\n    Block.createSplitBlock = function (startVar) {\n        var b = new Block(startVar);\n        b.populateSplitBlock(startVar, null);\n        return b;\n    };\n    Block.prototype.splitBetween = function (vl, vr) {\n        var c = this.findMinLMBetween(vl, vr);\n        if (c !== null) {\n            var bs = Block.split(c);\n            return { constraint: c, lb: bs[0], rb: bs[1] };\n        }\n        return null;\n    };\n    Block.prototype.mergeAcross = function (b, c, dist) {\n        c.active = true;\n        for (var i = 0, n = b.vars.length; i < n; ++i) {\n            var v = b.vars[i];\n            v.offset += dist;\n            this.addVariable(v);\n        }\n        this.posn = this.ps.getPosn();\n    };\n    Block.prototype.cost = function () {\n        var sum = 0, i = this.vars.length;\n        while (i--) {\n            var v = this.vars[i], d = v.position() - v.desiredPosition;\n            sum += d * d * v.weight;\n        }\n        return sum;\n    };\n    return Block;\n}());\nexports.Block = Block;\nvar Blocks = (function () {\n    function Blocks(vs) {\n        this.vs = vs;\n        var n = vs.length;\n        this.list = new Array(n);\n        while (n--) {\n            var b = new Block(vs[n]);\n            this.list[n] = b;\n            b.blockInd = n;\n        }\n    }\n    Blocks.prototype.cost = function () {\n        var sum = 0, i = this.list.length;\n        while (i--)\n            sum += this.list[i].cost();\n        return sum;\n    };\n    Blocks.prototype.insert = function (b) {\n        b.blockInd = this.list.length;\n        this.list.push(b);\n    };\n    Blocks.prototype.remove = function (b) {\n        var last = this.list.length - 1;\n        var swapBlock = this.list[last];\n        this.list.length = last;\n        if (b !== swapBlock) {\n            this.list[b.blockInd] = swapBlock;\n            swapBlock.blockInd = b.blockInd;\n        }\n    };\n    Blocks.prototype.merge = function (c) {\n        var l = c.left.block, r = c.right.block;\n        var dist = c.right.offset - c.left.offset - c.gap;\n        if (l.vars.length < r.vars.length) {\n            r.mergeAcross(l, c, dist);\n            this.remove(l);\n        }\n        else {\n            l.mergeAcross(r, c, -dist);\n            this.remove(r);\n        }\n    };\n    Blocks.prototype.forEach = function (f) {\n        this.list.forEach(f);\n    };\n    Blocks.prototype.updateBlockPositions = function () {\n        this.list.forEach(function (b) { return b.updateWeightedPosition(); });\n    };\n    Blocks.prototype.split = function (inactive) {\n        var _this = this;\n        this.updateBlockPositions();\n        this.list.forEach(function (b) {\n            var v = b.findMinLM();\n            if (v !== null && v.lm < Solver.LAGRANGIAN_TOLERANCE) {\n                b = v.left.block;\n                Block.split(v).forEach(function (nb) { return _this.insert(nb); });\n                _this.remove(b);\n                inactive.push(v);\n            }\n        });\n    };\n    return Blocks;\n}());\nexports.Blocks = Blocks;\nvar Solver = (function () {\n    function Solver(vs, cs) {\n        this.vs = vs;\n        this.cs = cs;\n        this.vs = vs;\n        vs.forEach(function (v) {\n            v.cIn = [], v.cOut = [];\n        });\n        this.cs = cs;\n        cs.forEach(function (c) {\n            c.left.cOut.push(c);\n            c.right.cIn.push(c);\n        });\n        this.inactive = cs.map(function (c) { c.active = false; return c; });\n        this.bs = null;\n    }\n    Solver.prototype.cost = function () {\n        return this.bs.cost();\n    };\n    Solver.prototype.setStartingPositions = function (ps) {\n        this.inactive = this.cs.map(function (c) { c.active = false; return c; });\n        this.bs = new Blocks(this.vs);\n        this.bs.forEach(function (b, i) { return b.posn = ps[i]; });\n    };\n    Solver.prototype.setDesiredPositions = function (ps) {\n        this.vs.forEach(function (v, i) { return v.desiredPosition = ps[i]; });\n    };\n    Solver.prototype.mostViolated = function () {\n        var minSlack = Number.MAX_VALUE, v = null, l = this.inactive, n = l.length, deletePoint = n;\n        for (var i = 0; i < n; ++i) {\n            var c = l[i];\n            if (c.unsatisfiable)\n                continue;\n            var slack = c.slack();\n            if (c.equality || slack < minSlack) {\n                minSlack = slack;\n                v = c;\n                deletePoint = i;\n                if (c.equality)\n                    break;\n            }\n        }\n        if (deletePoint !== n &&\n            (minSlack < Solver.ZERO_UPPERBOUND && !v.active || v.equality)) {\n            l[deletePoint] = l[n - 1];\n            l.length = n - 1;\n        }\n        return v;\n    };\n    Solver.prototype.satisfy = function () {\n        if (this.bs == null) {\n            this.bs = new Blocks(this.vs);\n        }\n        this.bs.split(this.inactive);\n        var v = null;\n        while ((v = this.mostViolated()) && (v.equality || v.slack() < Solver.ZERO_UPPERBOUND && !v.active)) {\n            var lb = v.left.block, rb = v.right.block;\n            if (lb !== rb) {\n                this.bs.merge(v);\n            }\n            else {\n                if (lb.isActiveDirectedPathBetween(v.right, v.left)) {\n                    v.unsatisfiable = true;\n                    continue;\n                }\n                var split = lb.splitBetween(v.left, v.right);\n                if (split !== null) {\n                    this.bs.insert(split.lb);\n                    this.bs.insert(split.rb);\n                    this.bs.remove(lb);\n                    this.inactive.push(split.constraint);\n                }\n                else {\n                    v.unsatisfiable = true;\n                    continue;\n                }\n                if (v.slack() >= 0) {\n                    this.inactive.push(v);\n                }\n                else {\n                    this.bs.merge(v);\n                }\n            }\n        }\n    };\n    Solver.prototype.solve = function () {\n        this.satisfy();\n        var lastcost = Number.MAX_VALUE, cost = this.bs.cost();\n        while (Math.abs(lastcost - cost) > 0.0001) {\n            this.satisfy();\n            lastcost = cost;\n            cost = this.bs.cost();\n        }\n        return cost;\n    };\n    Solver.LAGRANGIAN_TOLERANCE = -1e-4;\n    Solver.ZERO_UPPERBOUND = -1e-10;\n    return Solver;\n}());\nexports.Solver = Solver;\nfunction removeOverlapInOneDimension(spans, lowerBound, upperBound) {\n    var vs = spans.map(function (s) { return new Variable(s.desiredCenter); });\n    var cs = [];\n    var n = spans.length;\n    for (var i = 0; i < n - 1; i++) {\n        var left = spans[i], right = spans[i + 1];\n        cs.push(new Constraint(vs[i], vs[i + 1], (left.size + right.size) / 2));\n    }\n    var leftMost = vs[0], rightMost = vs[n - 1], leftMostSize = spans[0].size / 2, rightMostSize = spans[n - 1].size / 2;\n    var vLower = null, vUpper = null;\n    if (lowerBound) {\n        vLower = new Variable(lowerBound, leftMost.weight * 1000);\n        vs.push(vLower);\n        cs.push(new Constraint(vLower, leftMost, leftMostSize));\n    }\n    if (upperBound) {\n        vUpper = new Variable(upperBound, rightMost.weight * 1000);\n        vs.push(vUpper);\n        cs.push(new Constraint(rightMost, vUpper, rightMostSize));\n    }\n    var solver = new Solver(vs, cs);\n    solver.solve();\n    return {\n        newCenters: vs.slice(0, spans.length).map(function (v) { return v.position(); }),\n        lowerBound: vLower ? vLower.position() : leftMost.position() - leftMostSize,\n        upperBound: vUpper ? vUpper.position() : rightMost.position() + rightMostSize\n    };\n}\nexports.removeOverlapInOneDimension = removeOverlapInOneDimension;\n\n},{}]},{},[1])(1)\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvY29sYS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvY29sYS5qcz81MWM0Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmNvbGEgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9hZGFwdG9yXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9kM2FkYXB0b3JcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2Rlc2NlbnRcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2dlb21cIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2dyaWRyb3V0ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2hhbmRsZWRpc2Nvbm5lY3RlZFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvbGF5b3V0XCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9sYXlvdXQzZFwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvbGlua2xlbmd0aHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3Bvd2VyZ3JhcGhcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3BxdWV1ZVwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9zcmMvcmJ0cmVlXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NyYy9yZWN0YW5nbGVcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3Nob3J0ZXN0cGF0aHNcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL3Zwc2NcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vc3JjL2JhdGNoXCIpKTtcblxufSx7XCIuL3NyYy9hZGFwdG9yXCI6MixcIi4vc3JjL2JhdGNoXCI6MyxcIi4vc3JjL2QzYWRhcHRvclwiOjQsXCIuL3NyYy9kZXNjZW50XCI6NyxcIi4vc3JjL2dlb21cIjo4LFwiLi9zcmMvZ3JpZHJvdXRlclwiOjksXCIuL3NyYy9oYW5kbGVkaXNjb25uZWN0ZWRcIjoxMCxcIi4vc3JjL2xheW91dFwiOjExLFwiLi9zcmMvbGF5b3V0M2RcIjoxMixcIi4vc3JjL2xpbmtsZW5ndGhzXCI6MTMsXCIuL3NyYy9wb3dlcmdyYXBoXCI6MTQsXCIuL3NyYy9wcXVldWVcIjoxNSxcIi4vc3JjL3JidHJlZVwiOjE2LFwiLi9zcmMvcmVjdGFuZ2xlXCI6MTcsXCIuL3NyYy9zaG9ydGVzdHBhdGhzXCI6MTgsXCIuL3NyYy92cHNjXCI6MTl9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGF5b3V0XzEgPSByZXF1aXJlKFwiLi9sYXlvdXRcIik7XG52YXIgTGF5b3V0QWRhcHRvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKExheW91dEFkYXB0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGF5b3V0QWRhcHRvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBzZWxmID0gX3RoaXM7XG4gICAgICAgIHZhciBvID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG8udHJpZ2dlcikge1xuICAgICAgICAgICAgX3RoaXMudHJpZ2dlciA9IG8udHJpZ2dlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoby5raWNrKSB7XG4gICAgICAgICAgICBfdGhpcy5raWNrID0gby5raWNrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvLmRyYWcpIHtcbiAgICAgICAgICAgIF90aGlzLmRyYWcgPSBvLmRyYWc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG8ub24pIHtcbiAgICAgICAgICAgIF90aGlzLm9uID0gby5vbjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5kcmFnc3RhcnQgPSBfdGhpcy5kcmFnU3RhcnQgPSBsYXlvdXRfMS5MYXlvdXQuZHJhZ1N0YXJ0O1xuICAgICAgICBfdGhpcy5kcmFnZW5kID0gX3RoaXMuZHJhZ0VuZCA9IGxheW91dF8xLkxheW91dC5kcmFnRW5kO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIExheW91dEFkYXB0b3IucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZSkgeyB9O1xuICAgIDtcbiAgICBMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS5raWNrID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIDtcbiAgICBMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS5kcmFnID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIDtcbiAgICBMYXlvdXRBZGFwdG9yLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGxpc3RlbmVyKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIDtcbiAgICByZXR1cm4gTGF5b3V0QWRhcHRvcjtcbn0obGF5b3V0XzEuTGF5b3V0KSk7XG5leHBvcnRzLkxheW91dEFkYXB0b3IgPSBMYXlvdXRBZGFwdG9yO1xuZnVuY3Rpb24gYWRhcHRvcihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBMYXlvdXRBZGFwdG9yKG9wdGlvbnMpO1xufVxuZXhwb3J0cy5hZGFwdG9yID0gYWRhcHRvcjtcblxufSx7XCIuL2xheW91dFwiOjExfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsYXlvdXRfMSA9IHJlcXVpcmUoXCIuL2xheW91dFwiKTtcbnZhciBncmlkcm91dGVyXzEgPSByZXF1aXJlKFwiLi9ncmlkcm91dGVyXCIpO1xuZnVuY3Rpb24gZ3JpZGlmeShwZ0xheW91dCwgbnVkZ2VHYXAsIG1hcmdpbiwgZ3JvdXBNYXJnaW4pIHtcbiAgICBwZ0xheW91dC5jb2xhLnN0YXJ0KDAsIDAsIDAsIDEwLCBmYWxzZSk7XG4gICAgdmFyIGdyaWRyb3V0ZXIgPSByb3V0ZShwZ0xheW91dC5jb2xhLm5vZGVzKCksIHBnTGF5b3V0LmNvbGEuZ3JvdXBzKCksIG1hcmdpbiwgZ3JvdXBNYXJnaW4pO1xuICAgIHJldHVybiBncmlkcm91dGVyLnJvdXRlRWRnZXMocGdMYXlvdXQucG93ZXJHcmFwaC5wb3dlckVkZ2VzLCBudWRnZUdhcCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuc291cmNlLnJvdXRlck5vZGUuaWQ7IH0sIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnRhcmdldC5yb3V0ZXJOb2RlLmlkOyB9KTtcbn1cbmV4cG9ydHMuZ3JpZGlmeSA9IGdyaWRpZnk7XG5mdW5jdGlvbiByb3V0ZShub2RlcywgZ3JvdXBzLCBtYXJnaW4sIGdyb3VwTWFyZ2luKSB7XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICBkLnJvdXRlck5vZGUgPSB7XG4gICAgICAgICAgICBuYW1lOiBkLm5hbWUsXG4gICAgICAgICAgICBib3VuZHM6IGQuYm91bmRzLmluZmxhdGUoLW1hcmdpbilcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgICBkLnJvdXRlck5vZGUgPSB7XG4gICAgICAgICAgICBib3VuZHM6IGQuYm91bmRzLmluZmxhdGUoLWdyb3VwTWFyZ2luKSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiAodHlwZW9mIGQuZ3JvdXBzICE9PSAndW5kZWZpbmVkJyA/IGQuZ3JvdXBzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gbm9kZXMubGVuZ3RoICsgYy5pZDsgfSkgOiBbXSlcbiAgICAgICAgICAgICAgICAuY29uY2F0KHR5cGVvZiBkLmxlYXZlcyAhPT0gJ3VuZGVmaW5lZCcgPyBkLmxlYXZlcy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuaW5kZXg7IH0pIDogW10pXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgdmFyIGdyaWRSb3V0ZXJOb2RlcyA9IG5vZGVzLmNvbmNhdChncm91cHMpLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgICAgICBkLnJvdXRlck5vZGUuaWQgPSBpO1xuICAgICAgICByZXR1cm4gZC5yb3V0ZXJOb2RlO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgZ3JpZHJvdXRlcl8xLkdyaWRSb3V0ZXIoZ3JpZFJvdXRlck5vZGVzLCB7XG4gICAgICAgIGdldENoaWxkcmVuOiBmdW5jdGlvbiAodikgeyByZXR1cm4gdi5jaGlsZHJlbjsgfSxcbiAgICAgICAgZ2V0Qm91bmRzOiBmdW5jdGlvbiAodikgeyByZXR1cm4gdi5ib3VuZHM7IH1cbiAgICB9LCBtYXJnaW4gLSBncm91cE1hcmdpbik7XG59XG5mdW5jdGlvbiBwb3dlckdyYXBoR3JpZExheW91dChncmFwaCwgc2l6ZSwgZ3JvdXBwYWRkaW5nKSB7XG4gICAgdmFyIHBvd2VyR3JhcGg7XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gdi5pbmRleCA9IGk7IH0pO1xuICAgIG5ldyBsYXlvdXRfMS5MYXlvdXQoKVxuICAgICAgICAuYXZvaWRPdmVybGFwcyhmYWxzZSlcbiAgICAgICAgLm5vZGVzKGdyYXBoLm5vZGVzKVxuICAgICAgICAubGlua3MoZ3JhcGgubGlua3MpXG4gICAgICAgIC5wb3dlckdyYXBoR3JvdXBzKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHBvd2VyR3JhcGggPSBkO1xuICAgICAgICBwb3dlckdyYXBoLmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnBhZGRpbmcgPSBncm91cHBhZGRpbmc7IH0pO1xuICAgIH0pO1xuICAgIHZhciBuID0gZ3JhcGgubm9kZXMubGVuZ3RoO1xuICAgIHZhciBlZGdlcyA9IFtdO1xuICAgIHZhciB2cyA9IGdyYXBoLm5vZGVzLnNsaWNlKDApO1xuICAgIHZzLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIHYuaW5kZXggPSBpOyB9KTtcbiAgICBwb3dlckdyYXBoLmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChnKSB7XG4gICAgICAgIHZhciBzb3VyY2VJbmQgPSBnLmluZGV4ID0gZy5pZCArIG47XG4gICAgICAgIHZzLnB1c2goZyk7XG4gICAgICAgIGlmICh0eXBlb2YgZy5sZWF2ZXMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgZy5sZWF2ZXMuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gZWRnZXMucHVzaCh7IHNvdXJjZTogc291cmNlSW5kLCB0YXJnZXQ6IHYuaW5kZXggfSk7IH0pO1xuICAgICAgICBpZiAodHlwZW9mIGcuZ3JvdXBzICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIGcuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdnKSB7IHJldHVybiBlZGdlcy5wdXNoKHsgc291cmNlOiBzb3VyY2VJbmQsIHRhcmdldDogZ2cuaWQgKyBuIH0pOyB9KTtcbiAgICB9KTtcbiAgICBwb3dlckdyYXBoLnBvd2VyRWRnZXMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBlZGdlcy5wdXNoKHsgc291cmNlOiBlLnNvdXJjZS5pbmRleCwgdGFyZ2V0OiBlLnRhcmdldC5pbmRleCB9KTtcbiAgICB9KTtcbiAgICBuZXcgbGF5b3V0XzEuTGF5b3V0KClcbiAgICAgICAgLnNpemUoc2l6ZSlcbiAgICAgICAgLm5vZGVzKHZzKVxuICAgICAgICAubGlua3MoZWRnZXMpXG4gICAgICAgIC5hdm9pZE92ZXJsYXBzKGZhbHNlKVxuICAgICAgICAubGlua0Rpc3RhbmNlKDMwKVxuICAgICAgICAuc3ltbWV0cmljRGlmZkxpbmtMZW5ndGhzKDUpXG4gICAgICAgIC5jb252ZXJnZW5jZVRocmVzaG9sZCgxZS00KVxuICAgICAgICAuc3RhcnQoMTAwLCAwLCAwLCAwLCBmYWxzZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29sYTogbmV3IGxheW91dF8xLkxheW91dCgpXG4gICAgICAgICAgICAuY29udmVyZ2VuY2VUaHJlc2hvbGQoMWUtMylcbiAgICAgICAgICAgIC5zaXplKHNpemUpXG4gICAgICAgICAgICAuYXZvaWRPdmVybGFwcyh0cnVlKVxuICAgICAgICAgICAgLm5vZGVzKGdyYXBoLm5vZGVzKVxuICAgICAgICAgICAgLmxpbmtzKGdyYXBoLmxpbmtzKVxuICAgICAgICAgICAgLmdyb3VwQ29tcGFjdG5lc3MoMWUtNClcbiAgICAgICAgICAgIC5saW5rRGlzdGFuY2UoMzApXG4gICAgICAgICAgICAuc3ltbWV0cmljRGlmZkxpbmtMZW5ndGhzKDUpXG4gICAgICAgICAgICAucG93ZXJHcmFwaEdyb3VwcyhmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcG93ZXJHcmFwaCA9IGQ7XG4gICAgICAgICAgICBwb3dlckdyYXBoLmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgdi5wYWRkaW5nID0gZ3JvdXBwYWRkaW5nO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnN0YXJ0KDUwLCAwLCAxMDAsIDAsIGZhbHNlKSxcbiAgICAgICAgcG93ZXJHcmFwaDogcG93ZXJHcmFwaFxuICAgIH07XG59XG5leHBvcnRzLnBvd2VyR3JhcGhHcmlkTGF5b3V0ID0gcG93ZXJHcmFwaEdyaWRMYXlvdXQ7XG5cbn0se1wiLi9ncmlkcm91dGVyXCI6OSxcIi4vbGF5b3V0XCI6MTF9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGQzdjMgPSByZXF1aXJlKFwiLi9kM3YzYWRhcHRvclwiKTtcbnZhciBkM3Y0ID0gcmVxdWlyZShcIi4vZDN2NGFkYXB0b3JcIik7XG47XG5mdW5jdGlvbiBkM2FkYXB0b3IoZDNDb250ZXh0KSB7XG4gICAgaWYgKCFkM0NvbnRleHQgfHwgaXNEM1YzKGQzQ29udGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkM3YzLkQzU3R5bGVMYXlvdXRBZGFwdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgZDN2NC5EM1N0eWxlTGF5b3V0QWRhcHRvcihkM0NvbnRleHQpO1xufVxuZXhwb3J0cy5kM2FkYXB0b3IgPSBkM2FkYXB0b3I7XG5mdW5jdGlvbiBpc0QzVjMoZDNDb250ZXh0KSB7XG4gICAgdmFyIHYzZXhwID0gL14zXFwuLztcbiAgICByZXR1cm4gZDNDb250ZXh0LnZlcnNpb24gJiYgZDNDb250ZXh0LnZlcnNpb24ubWF0Y2godjNleHApICE9PSBudWxsO1xufVxuXG59LHtcIi4vZDN2M2FkYXB0b3JcIjo1LFwiLi9kM3Y0YWRhcHRvclwiOjZ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGF5b3V0XzEgPSByZXF1aXJlKFwiLi9sYXlvdXRcIik7XG52YXIgRDNTdHlsZUxheW91dEFkYXB0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEM1N0eWxlTGF5b3V0QWRhcHRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEM1N0eWxlTGF5b3V0QWRhcHRvcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZXZlbnQgPSBkMy5kaXNwYXRjaChsYXlvdXRfMS5FdmVudFR5cGVbbGF5b3V0XzEuRXZlbnRUeXBlLnN0YXJ0XSwgbGF5b3V0XzEuRXZlbnRUeXBlW2xheW91dF8xLkV2ZW50VHlwZS50aWNrXSwgbGF5b3V0XzEuRXZlbnRUeXBlW2xheW91dF8xLkV2ZW50VHlwZS5lbmRdKTtcbiAgICAgICAgdmFyIGQzbGF5b3V0ID0gX3RoaXM7XG4gICAgICAgIHZhciBkcmFnO1xuICAgICAgICBfdGhpcy5kcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFkcmFnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgICAgICAgICAgICAgICAgLm9yaWdpbihsYXlvdXRfMS5MYXlvdXQuZHJhZ09yaWdpbilcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZ3N0YXJ0LmQzYWRhcHRvclwiLCBsYXlvdXRfMS5MYXlvdXQuZHJhZ1N0YXJ0KVxuICAgICAgICAgICAgICAgICAgICAub24oXCJkcmFnLmQzYWRhcHRvclwiLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXRfMS5MYXlvdXQuZHJhZyhkLCBkMy5ldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGQzbGF5b3V0LnJlc3VtZSgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbihcImRyYWdlbmQuZDNhZGFwdG9yXCIsIGxheW91dF8xLkxheW91dC5kcmFnRW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhZztcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICAuY2FsbChkcmFnKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEM1N0eWxlTGF5b3V0QWRhcHRvci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBkM2V2ZW50ID0geyB0eXBlOiBsYXlvdXRfMS5FdmVudFR5cGVbZS50eXBlXSwgYWxwaGE6IGUuYWxwaGEsIHN0cmVzczogZS5zdHJlc3MgfTtcbiAgICAgICAgdGhpcy5ldmVudFtkM2V2ZW50LnR5cGVdKGQzZXZlbnQpO1xuICAgIH07XG4gICAgRDNTdHlsZUxheW91dEFkYXB0b3IucHJvdG90eXBlLmtpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGQzLnRpbWVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUudGljay5jYWxsKF90aGlzKTsgfSk7XG4gICAgfTtcbiAgICBEM1N0eWxlTGF5b3V0QWRhcHRvci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50VHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnQub24oZXZlbnRUeXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50Lm9uKGxheW91dF8xLkV2ZW50VHlwZVtldmVudFR5cGVdLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gRDNTdHlsZUxheW91dEFkYXB0b3I7XG59KGxheW91dF8xLkxheW91dCkpO1xuZXhwb3J0cy5EM1N0eWxlTGF5b3V0QWRhcHRvciA9IEQzU3R5bGVMYXlvdXRBZGFwdG9yO1xuZnVuY3Rpb24gZDNhZGFwdG9yKCkge1xuICAgIHJldHVybiBuZXcgRDNTdHlsZUxheW91dEFkYXB0b3IoKTtcbn1cbmV4cG9ydHMuZDNhZGFwdG9yID0gZDNhZGFwdG9yO1xuXG59LHtcIi4vbGF5b3V0XCI6MTF9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGF5b3V0XzEgPSByZXF1aXJlKFwiLi9sYXlvdXRcIik7XG52YXIgRDNTdHlsZUxheW91dEFkYXB0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEM1N0eWxlTGF5b3V0QWRhcHRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEM1N0eWxlTGF5b3V0QWRhcHRvcihkM0NvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZDNDb250ZXh0ID0gZDNDb250ZXh0O1xuICAgICAgICBfdGhpcy5ldmVudCA9IGQzQ29udGV4dC5kaXNwYXRjaChsYXlvdXRfMS5FdmVudFR5cGVbbGF5b3V0XzEuRXZlbnRUeXBlLnN0YXJ0XSwgbGF5b3V0XzEuRXZlbnRUeXBlW2xheW91dF8xLkV2ZW50VHlwZS50aWNrXSwgbGF5b3V0XzEuRXZlbnRUeXBlW2xheW91dF8xLkV2ZW50VHlwZS5lbmRdKTtcbiAgICAgICAgdmFyIGQzbGF5b3V0ID0gX3RoaXM7XG4gICAgICAgIHZhciBkcmFnO1xuICAgICAgICBfdGhpcy5kcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFkcmFnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWcgPSBkM0NvbnRleHQuZHJhZygpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJqZWN0KGxheW91dF8xLkxheW91dC5kcmFnT3JpZ2luKVxuICAgICAgICAgICAgICAgICAgICAub24oXCJzdGFydC5kM2FkYXB0b3JcIiwgbGF5b3V0XzEuTGF5b3V0LmRyYWdTdGFydClcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZHJhZy5kM2FkYXB0b3JcIiwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0XzEuTGF5b3V0LmRyYWcoZCwgZDNDb250ZXh0LmV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZDNsYXlvdXQucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiZW5kLmQzYWRhcHRvclwiLCBsYXlvdXRfMS5MYXlvdXQuZHJhZ0VuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyYWc7XG4gICAgICAgICAgICBhcmd1bWVudHNbMF0uY2FsbChkcmFnKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEM1N0eWxlTGF5b3V0QWRhcHRvci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBkM2V2ZW50ID0geyB0eXBlOiBsYXlvdXRfMS5FdmVudFR5cGVbZS50eXBlXSwgYWxwaGE6IGUuYWxwaGEsIHN0cmVzczogZS5zdHJlc3MgfTtcbiAgICAgICAgdGhpcy5ldmVudC5jYWxsKGQzZXZlbnQudHlwZSwgZDNldmVudCk7XG4gICAgfTtcbiAgICBEM1N0eWxlTGF5b3V0QWRhcHRvci5wcm90b3R5cGUua2ljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHQgPSB0aGlzLmQzQ29udGV4dC50aW1lcihmdW5jdGlvbiAoKSB7IHJldHVybiBfc3VwZXIucHJvdG90eXBlLnRpY2suY2FsbChfdGhpcykgJiYgdC5zdG9wKCk7IH0pO1xuICAgIH07XG4gICAgRDNTdHlsZUxheW91dEFkYXB0b3IucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudFR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50Lm9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ldmVudC5vbihsYXlvdXRfMS5FdmVudFR5cGVbZXZlbnRUeXBlXSwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEQzU3R5bGVMYXlvdXRBZGFwdG9yO1xufShsYXlvdXRfMS5MYXlvdXQpKTtcbmV4cG9ydHMuRDNTdHlsZUxheW91dEFkYXB0b3IgPSBEM1N0eWxlTGF5b3V0QWRhcHRvcjtcblxufSx7XCIuL2xheW91dFwiOjExfV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMb2NrcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9ja3MoKSB7XG4gICAgICAgIHRoaXMubG9ja3MgPSB7fTtcbiAgICB9XG4gICAgTG9ja3MucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChpZCwgeCkge1xuICAgICAgICB0aGlzLmxvY2tzW2lkXSA9IHg7XG4gICAgfTtcbiAgICBMb2Nrcy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubG9ja3MgPSB7fTtcbiAgICB9O1xuICAgIExvY2tzLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBsIGluIHRoaXMubG9ja3MpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgTG9ja3MucHJvdG90eXBlLmFwcGx5ID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgZm9yICh2YXIgbCBpbiB0aGlzLmxvY2tzKSB7XG4gICAgICAgICAgICBmKE51bWJlcihsKSwgdGhpcy5sb2Nrc1tsXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBMb2Nrcztcbn0oKSk7XG5leHBvcnRzLkxvY2tzID0gTG9ja3M7XG52YXIgRGVzY2VudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVzY2VudCh4LCBELCBHKSB7XG4gICAgICAgIGlmIChHID09PSB2b2lkIDApIHsgRyA9IG51bGw7IH1cbiAgICAgICAgdGhpcy5EID0gRDtcbiAgICAgICAgdGhpcy5HID0gRztcbiAgICAgICAgdGhpcy50aHJlc2hvbGQgPSAwLjAwMDE7XG4gICAgICAgIHRoaXMubnVtR3JpZFNuYXBOb2RlcyA9IDA7XG4gICAgICAgIHRoaXMuc25hcEdyaWRTaXplID0gMTAwO1xuICAgICAgICB0aGlzLnNuYXBTdHJlbmd0aCA9IDEwMDA7XG4gICAgICAgIHRoaXMuc2NhbGVTbmFwQnlNYXhIID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmFuZG9tID0gbmV3IFBzZXVkb1JhbmRvbSgpO1xuICAgICAgICB0aGlzLnByb2plY3QgPSBudWxsO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLmsgPSB4Lmxlbmd0aDtcbiAgICAgICAgdmFyIG4gPSB0aGlzLm4gPSB4WzBdLmxlbmd0aDtcbiAgICAgICAgdGhpcy5IID0gbmV3IEFycmF5KHRoaXMuayk7XG4gICAgICAgIHRoaXMuZyA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB0aGlzLkhkID0gbmV3IEFycmF5KHRoaXMuayk7XG4gICAgICAgIHRoaXMuYSA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB0aGlzLmIgPSBuZXcgQXJyYXkodGhpcy5rKTtcbiAgICAgICAgdGhpcy5jID0gbmV3IEFycmF5KHRoaXMuayk7XG4gICAgICAgIHRoaXMuZCA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB0aGlzLmUgPSBuZXcgQXJyYXkodGhpcy5rKTtcbiAgICAgICAgdGhpcy5pYSA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB0aGlzLmliID0gbmV3IEFycmF5KHRoaXMuayk7XG4gICAgICAgIHRoaXMueHRtcCA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB0aGlzLmxvY2tzID0gbmV3IExvY2tzKCk7XG4gICAgICAgIHRoaXMubWluRCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIHZhciBpID0gbiwgajtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaiA9IG47XG4gICAgICAgICAgICB3aGlsZSAoLS1qID4gaSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gRFtpXVtqXTtcbiAgICAgICAgICAgICAgICBpZiAoZCA+IDAgJiYgZCA8IHRoaXMubWluRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbkQgPSBkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5taW5EID09PSBOdW1iZXIuTUFYX1ZBTFVFKVxuICAgICAgICAgICAgdGhpcy5taW5EID0gMTtcbiAgICAgICAgaSA9IHRoaXMuaztcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgdGhpcy5nW2ldID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgdGhpcy5IW2ldID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgaiA9IG47XG4gICAgICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5IW2ldW2pdID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5IZFtpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuYVtpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuYltpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuY1tpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuZFtpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuZVtpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIHRoaXMuaWFbaV0gPSBuZXcgQXJyYXkobik7XG4gICAgICAgICAgICB0aGlzLmliW2ldID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgdGhpcy54dG1wW2ldID0gbmV3IEFycmF5KG4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIERlc2NlbnQuY3JlYXRlU3F1YXJlTWF0cml4ID0gZnVuY3Rpb24gKG4sIGYpIHtcbiAgICAgICAgdmFyIE0gPSBuZXcgQXJyYXkobik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICBNW2ldID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyArK2opIHtcbiAgICAgICAgICAgICAgICBNW2ldW2pdID0gZihpLCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTTtcbiAgICB9O1xuICAgIERlc2NlbnQucHJvdG90eXBlLm9mZnNldERpciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHUgPSBuZXcgQXJyYXkodGhpcy5rKTtcbiAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuazsgKytpKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHVbaV0gPSB0aGlzLnJhbmRvbS5nZXROZXh0QmV0d2VlbigwLjAxLCAxKSAtIDAuNTtcbiAgICAgICAgICAgIGwgKz0geCAqIHg7XG4gICAgICAgIH1cbiAgICAgICAgbCA9IE1hdGguc3FydChsKTtcbiAgICAgICAgcmV0dXJuIHUubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICo9IF90aGlzLm1pbkQgLyBsOyB9KTtcbiAgICB9O1xuICAgIERlc2NlbnQucHJvdG90eXBlLmNvbXB1dGVEZXJpdmF0aXZlcyA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBuID0gdGhpcy5uO1xuICAgICAgICBpZiAobiA8IDEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgZCA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB2YXIgZDIgPSBuZXcgQXJyYXkodGhpcy5rKTtcbiAgICAgICAgdmFyIEh1dSA9IG5ldyBBcnJheSh0aGlzLmspO1xuICAgICAgICB2YXIgbWF4SCA9IDA7XG4gICAgICAgIGZvciAodmFyIHVfMSA9IDA7IHVfMSA8IG47ICsrdV8xKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5rOyArK2kpXG4gICAgICAgICAgICAgICAgSHV1W2ldID0gdGhpcy5nW2ldW3VfMV0gPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBuOyArK3YpIHtcbiAgICAgICAgICAgICAgICBpZiAodV8xID09PSB2KVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4RGlzcGxhY2VzID0gbjtcbiAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VTcXVhcmVkID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAobWF4RGlzcGxhY2VzLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VTcXVhcmVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuazsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHhfMSA9IGRbaV0gPSB4W2ldW3VfMV0gLSB4W2ldW3ZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VTcXVhcmVkICs9IGQyW2ldID0gZHhfMSAqIGR4XzE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlU3F1YXJlZCA+IDFlLTkpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJkID0gdGhpcy5vZmZzZXREaXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuazsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgeFtpXVt2XSArPSByZFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KGRpc3RhbmNlU3F1YXJlZCk7XG4gICAgICAgICAgICAgICAgdmFyIGlkZWFsRGlzdGFuY2UgPSB0aGlzLkRbdV8xXVt2XTtcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0ID0gdGhpcy5HICE9IG51bGwgPyB0aGlzLkdbdV8xXVt2XSA6IDE7XG4gICAgICAgICAgICAgICAgaWYgKHdlaWdodCA+IDEgJiYgZGlzdGFuY2UgPiBpZGVhbERpc3RhbmNlIHx8ICFpc0Zpbml0ZShpZGVhbERpc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5rOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkhbaV1bdV8xXVt2XSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod2VpZ2h0ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaWRlYWxEaXN0U3F1YXJlZCA9IGlkZWFsRGlzdGFuY2UgKiBpZGVhbERpc3RhbmNlLCBncyA9IDIgKiB3ZWlnaHQgKiAoZGlzdGFuY2UgLSBpZGVhbERpc3RhbmNlKSAvIChpZGVhbERpc3RTcXVhcmVkICogZGlzdGFuY2UpLCBkaXN0YW5jZUN1YmVkID0gZGlzdGFuY2VTcXVhcmVkICogZGlzdGFuY2UsIGhzID0gMiAqIC13ZWlnaHQgLyAoaWRlYWxEaXN0U3F1YXJlZCAqIGRpc3RhbmNlQ3ViZWQpO1xuICAgICAgICAgICAgICAgIGlmICghaXNGaW5pdGUoZ3MpKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhncyk7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuazsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ1tpXVt1XzFdICs9IGRbaV0gKiBncztcbiAgICAgICAgICAgICAgICAgICAgSHV1W2ldIC09IHRoaXMuSFtpXVt1XzFdW3ZdID0gaHMgKiAoMiAqIGRpc3RhbmNlQ3ViZWQgKyBpZGVhbERpc3RhbmNlICogKGQyW2ldIC0gZGlzdGFuY2VTcXVhcmVkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuazsgKytpKVxuICAgICAgICAgICAgICAgIG1heEggPSBNYXRoLm1heChtYXhILCB0aGlzLkhbaV1bdV8xXVt1XzFdID0gSHV1W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IHRoaXMuc25hcEdyaWRTaXplIC8gMjtcbiAgICAgICAgdmFyIGcgPSB0aGlzLnNuYXBHcmlkU2l6ZTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLnNuYXBTdHJlbmd0aDtcbiAgICAgICAgdmFyIGsgPSB3IC8gKHIgKiByKTtcbiAgICAgICAgdmFyIG51bU5vZGVzID0gdGhpcy5udW1HcmlkU25hcE5vZGVzO1xuICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IG51bU5vZGVzOyArK3UpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLms7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciB4aXUgPSB0aGlzLnhbaV1bdV07XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB4aXUgLyBnO1xuICAgICAgICAgICAgICAgIHZhciBmID0gbSAlIDE7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSBtIC0gZjtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IE1hdGguYWJzKGYpO1xuICAgICAgICAgICAgICAgIHZhciBkeCA9IChhIDw9IDAuNSkgPyB4aXUgLSBxICogZyA6XG4gICAgICAgICAgICAgICAgICAgICh4aXUgPiAwKSA/IHhpdSAtIChxICsgMSkgKiBnIDogeGl1IC0gKHEgLSAxKSAqIGc7XG4gICAgICAgICAgICAgICAgaWYgKC1yIDwgZHggJiYgZHggPD0gcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FsZVNuYXBCeU1heEgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ1tpXVt1XSArPSBtYXhIICogayAqIGR4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5IW2ldW3VdW3VdICs9IG1heEggKiBrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nW2ldW3VdICs9IGsgKiBkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSFtpXVt1XVt1XSArPSBrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5sb2Nrcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9ja3MuYXBwbHkoZnVuY3Rpb24gKHUsIHApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgX3RoaXMuazsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLkhbaV1bdV1bdV0gKz0gbWF4SDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ1tpXVt1XSAtPSBtYXhIICogKHBbaV0gLSB4W2ldW3VdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVzY2VudC5kb3RQcm9kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIHggPSAwLCBpID0gYS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICB4ICs9IGFbaV0gKiBiW2ldO1xuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xuICAgIERlc2NlbnQucmlnaHRNdWx0aXBseSA9IGZ1bmN0aW9uIChtLCB2LCByKSB7XG4gICAgICAgIHZhciBpID0gbS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICByW2ldID0gRGVzY2VudC5kb3RQcm9kKG1baV0sIHYpO1xuICAgIH07XG4gICAgRGVzY2VudC5wcm90b3R5cGUuY29tcHV0ZVN0ZXBTaXplID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgdmFyIG51bWVyYXRvciA9IDAsIGRlbm9taW5hdG9yID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLms7ICsraSkge1xuICAgICAgICAgICAgbnVtZXJhdG9yICs9IERlc2NlbnQuZG90UHJvZCh0aGlzLmdbaV0sIGRbaV0pO1xuICAgICAgICAgICAgRGVzY2VudC5yaWdodE11bHRpcGx5KHRoaXMuSFtpXSwgZFtpXSwgdGhpcy5IZFtpXSk7XG4gICAgICAgICAgICBkZW5vbWluYXRvciArPSBEZXNjZW50LmRvdFByb2QoZFtpXSwgdGhpcy5IZFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbm9taW5hdG9yID09PSAwIHx8ICFpc0Zpbml0ZShkZW5vbWluYXRvcikpXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIDEgKiBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcbiAgICB9O1xuICAgIERlc2NlbnQucHJvdG90eXBlLnJlZHVjZVN0cmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb21wdXRlRGVyaXZhdGl2ZXModGhpcy54KTtcbiAgICAgICAgdmFyIGFscGhhID0gdGhpcy5jb21wdXRlU3RlcFNpemUodGhpcy5nKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLms7ICsraSkge1xuICAgICAgICAgICAgdGhpcy50YWtlRGVzY2VudFN0ZXAodGhpcy54W2ldLCB0aGlzLmdbaV0sIGFscGhhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlU3RyZXNzKCk7XG4gICAgfTtcbiAgICBEZXNjZW50LmNvcHkgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgbSA9IGEubGVuZ3RoLCBuID0gYlswXS5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbTsgKytpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG47ICsraikge1xuICAgICAgICAgICAgICAgIGJbaV1bal0gPSBhW2ldW2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXNjZW50LnByb3RvdHlwZS5zdGVwQW5kUHJvamVjdCA9IGZ1bmN0aW9uICh4MCwgciwgZCwgc3RlcFNpemUpIHtcbiAgICAgICAgRGVzY2VudC5jb3B5KHgwLCByKTtcbiAgICAgICAgdGhpcy50YWtlRGVzY2VudFN0ZXAoclswXSwgZFswXSwgc3RlcFNpemUpO1xuICAgICAgICBpZiAodGhpcy5wcm9qZWN0KVxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0WzBdKHgwWzBdLCB4MFsxXSwgclswXSk7XG4gICAgICAgIHRoaXMudGFrZURlc2NlbnRTdGVwKHJbMV0sIGRbMV0sIHN0ZXBTaXplKTtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdClcbiAgICAgICAgICAgIHRoaXMucHJvamVjdFsxXShyWzBdLCB4MFsxXSwgclsxXSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgdGhpcy5rOyBpKyspXG4gICAgICAgICAgICB0aGlzLnRha2VEZXNjZW50U3RlcChyW2ldLCBkW2ldLCBzdGVwU2l6ZSk7XG4gICAgfTtcbiAgICBEZXNjZW50Lm1BcHBseSA9IGZ1bmN0aW9uIChtLCBuLCBmKSB7XG4gICAgICAgIHZhciBpID0gbTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICAgIHZhciBqID0gbjtcbiAgICAgICAgICAgIHdoaWxlIChqLS0gPiAwKVxuICAgICAgICAgICAgICAgIGYoaSwgaik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlc2NlbnQucHJvdG90eXBlLm1hdHJpeEFwcGx5ID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgRGVzY2VudC5tQXBwbHkodGhpcy5rLCB0aGlzLm4sIGYpO1xuICAgIH07XG4gICAgRGVzY2VudC5wcm90b3R5cGUuY29tcHV0ZU5leHRQb3NpdGlvbiA9IGZ1bmN0aW9uICh4MCwgcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbXB1dGVEZXJpdmF0aXZlcyh4MCk7XG4gICAgICAgIHZhciBhbHBoYSA9IHRoaXMuY29tcHV0ZVN0ZXBTaXplKHRoaXMuZyk7XG4gICAgICAgIHRoaXMuc3RlcEFuZFByb2plY3QoeDAsIHIsIHRoaXMuZywgYWxwaGEpO1xuICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XG4gICAgICAgICAgICB0aGlzLm1hdHJpeEFwcGx5KGZ1bmN0aW9uIChpLCBqKSB7IHJldHVybiBfdGhpcy5lW2ldW2pdID0geDBbaV1bal0gLSByW2ldW2pdOyB9KTtcbiAgICAgICAgICAgIHZhciBiZXRhID0gdGhpcy5jb21wdXRlU3RlcFNpemUodGhpcy5lKTtcbiAgICAgICAgICAgIGJldGEgPSBNYXRoLm1heCgwLjIsIE1hdGgubWluKGJldGEsIDEpKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcEFuZFByb2plY3QoeDAsIHIsIHRoaXMuZSwgYmV0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERlc2NlbnQucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChpdGVyYXRpb25zKSB7XG4gICAgICAgIHZhciBzdHJlc3MgPSBOdW1iZXIuTUFYX1ZBTFVFLCBjb252ZXJnZWQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKCFjb252ZXJnZWQgJiYgaXRlcmF0aW9ucy0tID4gMCkge1xuICAgICAgICAgICAgdmFyIHMgPSB0aGlzLnJ1bmdlS3V0dGEoKTtcbiAgICAgICAgICAgIGNvbnZlcmdlZCA9IE1hdGguYWJzKHN0cmVzcyAvIHMgLSAxKSA8IHRoaXMudGhyZXNob2xkO1xuICAgICAgICAgICAgc3RyZXNzID0gcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyZXNzO1xuICAgIH07XG4gICAgRGVzY2VudC5wcm90b3R5cGUucnVuZ2VLdXR0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb21wdXRlTmV4dFBvc2l0aW9uKHRoaXMueCwgdGhpcy5hKTtcbiAgICAgICAgRGVzY2VudC5taWQodGhpcy54LCB0aGlzLmEsIHRoaXMuaWEpO1xuICAgICAgICB0aGlzLmNvbXB1dGVOZXh0UG9zaXRpb24odGhpcy5pYSwgdGhpcy5iKTtcbiAgICAgICAgRGVzY2VudC5taWQodGhpcy54LCB0aGlzLmIsIHRoaXMuaWIpO1xuICAgICAgICB0aGlzLmNvbXB1dGVOZXh0UG9zaXRpb24odGhpcy5pYiwgdGhpcy5jKTtcbiAgICAgICAgdGhpcy5jb21wdXRlTmV4dFBvc2l0aW9uKHRoaXMuYywgdGhpcy5kKTtcbiAgICAgICAgdmFyIGRpc3AgPSAwO1xuICAgICAgICB0aGlzLm1hdHJpeEFwcGx5KGZ1bmN0aW9uIChpLCBqKSB7XG4gICAgICAgICAgICB2YXIgeCA9IChfdGhpcy5hW2ldW2pdICsgMi4wICogX3RoaXMuYltpXVtqXSArIDIuMCAqIF90aGlzLmNbaV1bal0gKyBfdGhpcy5kW2ldW2pdKSAvIDYuMCwgZCA9IF90aGlzLnhbaV1bal0gLSB4O1xuICAgICAgICAgICAgZGlzcCArPSBkICogZDtcbiAgICAgICAgICAgIF90aGlzLnhbaV1bal0gPSB4O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRpc3A7XG4gICAgfTtcbiAgICBEZXNjZW50Lm1pZCA9IGZ1bmN0aW9uIChhLCBiLCBtKSB7XG4gICAgICAgIERlc2NlbnQubUFwcGx5KGEubGVuZ3RoLCBhWzBdLmxlbmd0aCwgZnVuY3Rpb24gKGksIGopIHtcbiAgICAgICAgICAgIHJldHVybiBtW2ldW2pdID0gYVtpXVtqXSArIChiW2ldW2pdIC0gYVtpXVtqXSkgLyAyLjA7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRGVzY2VudC5wcm90b3R5cGUudGFrZURlc2NlbnRTdGVwID0gZnVuY3Rpb24gKHgsIGQsIHN0ZXBTaXplKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uOyArK2kpIHtcbiAgICAgICAgICAgIHhbaV0gPSB4W2ldIC0gc3RlcFNpemUgKiBkW2ldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEZXNjZW50LnByb3RvdHlwZS5jb21wdXRlU3RyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RyZXNzID0gMDtcbiAgICAgICAgZm9yICh2YXIgdSA9IDAsIG5NaW51czEgPSB0aGlzLm4gLSAxOyB1IDwgbk1pbnVzMTsgKyt1KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB2ID0gdSArIDEsIG4gPSB0aGlzLm47IHYgPCBuOyArK3YpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLms7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSB0aGlzLnhbaV1bdV0gLSB0aGlzLnhbaV1bdl07XG4gICAgICAgICAgICAgICAgICAgIGwgKz0gZHggKiBkeDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbCA9IE1hdGguc3FydChsKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuRFt1XVt2XTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGQpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB2YXIgcmwgPSBkIC0gbDtcbiAgICAgICAgICAgICAgICB2YXIgZDIgPSBkICogZDtcbiAgICAgICAgICAgICAgICBzdHJlc3MgKz0gcmwgKiBybCAvIGQyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHJlc3M7XG4gICAgfTtcbiAgICBEZXNjZW50Lnplcm9EaXN0YW5jZSA9IDFlLTEwO1xuICAgIHJldHVybiBEZXNjZW50O1xufSgpKTtcbmV4cG9ydHMuRGVzY2VudCA9IERlc2NlbnQ7XG52YXIgUHNldWRvUmFuZG9tID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQc2V1ZG9SYW5kb20oc2VlZCkge1xuICAgICAgICBpZiAoc2VlZCA9PT0gdm9pZCAwKSB7IHNlZWQgPSAxOyB9XG4gICAgICAgIHRoaXMuc2VlZCA9IHNlZWQ7XG4gICAgICAgIHRoaXMuYSA9IDIxNDAxMztcbiAgICAgICAgdGhpcy5jID0gMjUzMTAxMTtcbiAgICAgICAgdGhpcy5tID0gMjE0NzQ4MzY0ODtcbiAgICAgICAgdGhpcy5yYW5nZSA9IDMyNzY3O1xuICAgIH1cbiAgICBQc2V1ZG9SYW5kb20ucHJvdG90eXBlLmdldE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2VlZCA9ICh0aGlzLnNlZWQgKiB0aGlzLmEgKyB0aGlzLmMpICUgdGhpcy5tO1xuICAgICAgICByZXR1cm4gKHRoaXMuc2VlZCA+PiAxNikgLyB0aGlzLnJhbmdlO1xuICAgIH07XG4gICAgUHNldWRvUmFuZG9tLnByb3RvdHlwZS5nZXROZXh0QmV0d2VlbiA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gbWluICsgdGhpcy5nZXROZXh0KCkgKiAobWF4IC0gbWluKTtcbiAgICB9O1xuICAgIHJldHVybiBQc2V1ZG9SYW5kb207XG59KCkpO1xuZXhwb3J0cy5Qc2V1ZG9SYW5kb20gPSBQc2V1ZG9SYW5kb207XG5cbn0se31dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWN0YW5nbGVfMSA9IHJlcXVpcmUoXCIuL3JlY3RhbmdsZVwiKTtcbnZhciBQb2ludCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUG9pbnQoKSB7XG4gICAgfVxuICAgIHJldHVybiBQb2ludDtcbn0oKSk7XG5leHBvcnRzLlBvaW50ID0gUG9pbnQ7XG52YXIgTGluZVNlZ21lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExpbmVTZWdtZW50KHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgIHRoaXMueDEgPSB4MTtcbiAgICAgICAgdGhpcy55MSA9IHkxO1xuICAgICAgICB0aGlzLngyID0geDI7XG4gICAgICAgIHRoaXMueTIgPSB5MjtcbiAgICB9XG4gICAgcmV0dXJuIExpbmVTZWdtZW50O1xufSgpKTtcbmV4cG9ydHMuTGluZVNlZ21lbnQgPSBMaW5lU2VnbWVudDtcbnZhciBQb2x5UG9pbnQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQb2x5UG9pbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUG9seVBvaW50KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBQb2x5UG9pbnQ7XG59KFBvaW50KSk7XG5leHBvcnRzLlBvbHlQb2ludCA9IFBvbHlQb2ludDtcbmZ1bmN0aW9uIGlzTGVmdChQMCwgUDEsIFAyKSB7XG4gICAgcmV0dXJuIChQMS54IC0gUDAueCkgKiAoUDIueSAtIFAwLnkpIC0gKFAyLnggLSBQMC54KSAqIChQMS55IC0gUDAueSk7XG59XG5leHBvcnRzLmlzTGVmdCA9IGlzTGVmdDtcbmZ1bmN0aW9uIGFib3ZlKHAsIHZpLCB2aikge1xuICAgIHJldHVybiBpc0xlZnQocCwgdmksIHZqKSA+IDA7XG59XG5mdW5jdGlvbiBiZWxvdyhwLCB2aSwgdmopIHtcbiAgICByZXR1cm4gaXNMZWZ0KHAsIHZpLCB2aikgPCAwO1xufVxuZnVuY3Rpb24gQ29udmV4SHVsbChTKSB7XG4gICAgdmFyIFAgPSBTLnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEueCAhPT0gYi54ID8gYi54IC0gYS54IDogYi55IC0gYS55OyB9KTtcbiAgICB2YXIgbiA9IFMubGVuZ3RoLCBpO1xuICAgIHZhciBtaW5taW4gPSAwO1xuICAgIHZhciB4bWluID0gUFswXS54O1xuICAgIGZvciAoaSA9IDE7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKFBbaV0ueCAhPT0geG1pbilcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgbWlubWF4ID0gaSAtIDE7XG4gICAgdmFyIEggPSBbXTtcbiAgICBILnB1c2goUFttaW5taW5dKTtcbiAgICBpZiAobWlubWF4ID09PSBuIC0gMSkge1xuICAgICAgICBpZiAoUFttaW5tYXhdLnkgIT09IFBbbWlubWluXS55KVxuICAgICAgICAgICAgSC5wdXNoKFBbbWlubWF4XSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbWF4bWluLCBtYXhtYXggPSBuIC0gMTtcbiAgICAgICAgdmFyIHhtYXggPSBQW24gLSAxXS54O1xuICAgICAgICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyBpLS0pXG4gICAgICAgICAgICBpZiAoUFtpXS54ICE9PSB4bWF4KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBtYXhtaW4gPSBpICsgMTtcbiAgICAgICAgaSA9IG1pbm1heDtcbiAgICAgICAgd2hpbGUgKCsraSA8PSBtYXhtaW4pIHtcbiAgICAgICAgICAgIGlmIChpc0xlZnQoUFttaW5taW5dLCBQW21heG1pbl0sIFBbaV0pID49IDAgJiYgaSA8IG1heG1pbilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHdoaWxlIChILmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMZWZ0KEhbSC5sZW5ndGggLSAyXSwgSFtILmxlbmd0aCAtIDFdLCBQW2ldKSA+IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgSC5sZW5ndGggLT0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpICE9IG1pbm1pbilcbiAgICAgICAgICAgICAgICBILnB1c2goUFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heG1heCAhPSBtYXhtaW4pXG4gICAgICAgICAgICBILnB1c2goUFttYXhtYXhdKTtcbiAgICAgICAgdmFyIGJvdCA9IEgubGVuZ3RoO1xuICAgICAgICBpID0gbWF4bWluO1xuICAgICAgICB3aGlsZSAoLS1pID49IG1pbm1heCkge1xuICAgICAgICAgICAgaWYgKGlzTGVmdChQW21heG1heF0sIFBbbWlubWF4XSwgUFtpXSkgPj0gMCAmJiBpID4gbWlubWF4KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgd2hpbGUgKEgubGVuZ3RoID4gYm90KSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTGVmdChIW0gubGVuZ3RoIC0gMl0sIEhbSC5sZW5ndGggLSAxXSwgUFtpXSkgPiAwKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIEgubGVuZ3RoIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSAhPSBtaW5taW4pXG4gICAgICAgICAgICAgICAgSC5wdXNoKFBbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBIO1xufVxuZXhwb3J0cy5Db252ZXhIdWxsID0gQ29udmV4SHVsbDtcbmZ1bmN0aW9uIGNsb2Nrd2lzZVJhZGlhbFN3ZWVwKHAsIFAsIGYpIHtcbiAgICBQLnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIE1hdGguYXRhbjIoYS55IC0gcC55LCBhLnggLSBwLngpIC0gTWF0aC5hdGFuMihiLnkgLSBwLnksIGIueCAtIHAueCk7IH0pLmZvckVhY2goZik7XG59XG5leHBvcnRzLmNsb2Nrd2lzZVJhZGlhbFN3ZWVwID0gY2xvY2t3aXNlUmFkaWFsU3dlZXA7XG5mdW5jdGlvbiBuZXh0UG9seVBvaW50KHAsIHBzKSB7XG4gICAgaWYgKHAucG9seUluZGV4ID09PSBwcy5sZW5ndGggLSAxKVxuICAgICAgICByZXR1cm4gcHNbMF07XG4gICAgcmV0dXJuIHBzW3AucG9seUluZGV4ICsgMV07XG59XG5mdW5jdGlvbiBwcmV2UG9seVBvaW50KHAsIHBzKSB7XG4gICAgaWYgKHAucG9seUluZGV4ID09PSAwKVxuICAgICAgICByZXR1cm4gcHNbcHMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHBzW3AucG9seUluZGV4IC0gMV07XG59XG5mdW5jdGlvbiB0YW5nZW50X1BvaW50UG9seUMoUCwgVikge1xuICAgIHZhciBWY2xvc2VkID0gVi5zbGljZSgwKTtcbiAgICBWY2xvc2VkLnB1c2goVlswXSk7XG4gICAgcmV0dXJuIHsgcnRhbjogUnRhbmdlbnRfUG9pbnRQb2x5QyhQLCBWY2xvc2VkKSwgbHRhbjogTHRhbmdlbnRfUG9pbnRQb2x5QyhQLCBWY2xvc2VkKSB9O1xufVxuZnVuY3Rpb24gUnRhbmdlbnRfUG9pbnRQb2x5QyhQLCBWKSB7XG4gICAgdmFyIG4gPSBWLmxlbmd0aCAtIDE7XG4gICAgdmFyIGEsIGIsIGM7XG4gICAgdmFyIHVwQSwgZG5DO1xuICAgIGlmIChiZWxvdyhQLCBWWzFdLCBWWzBdKSAmJiAhYWJvdmUoUCwgVltuIC0gMV0sIFZbMF0pKVxuICAgICAgICByZXR1cm4gMDtcbiAgICBmb3IgKGEgPSAwLCBiID0gbjs7KSB7XG4gICAgICAgIGlmIChiIC0gYSA9PT0gMSlcbiAgICAgICAgICAgIGlmIChhYm92ZShQLCBWW2FdLCBWW2JdKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgYyA9IE1hdGguZmxvb3IoKGEgKyBiKSAvIDIpO1xuICAgICAgICBkbkMgPSBiZWxvdyhQLCBWW2MgKyAxXSwgVltjXSk7XG4gICAgICAgIGlmIChkbkMgJiYgIWFib3ZlKFAsIFZbYyAtIDFdLCBWW2NdKSlcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICB1cEEgPSBhYm92ZShQLCBWW2EgKyAxXSwgVlthXSk7XG4gICAgICAgIGlmICh1cEEpIHtcbiAgICAgICAgICAgIGlmIChkbkMpXG4gICAgICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJvdmUoUCwgVlthXSwgVltjXSkpXG4gICAgICAgICAgICAgICAgICAgIGIgPSBjO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWRuQylcbiAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChiZWxvdyhQLCBWW2FdLCBWW2NdKSlcbiAgICAgICAgICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIEx0YW5nZW50X1BvaW50UG9seUMoUCwgVikge1xuICAgIHZhciBuID0gVi5sZW5ndGggLSAxO1xuICAgIHZhciBhLCBiLCBjO1xuICAgIHZhciBkbkEsIGRuQztcbiAgICBpZiAoYWJvdmUoUCwgVltuIC0gMV0sIFZbMF0pICYmICFiZWxvdyhQLCBWWzFdLCBWWzBdKSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgZm9yIChhID0gMCwgYiA9IG47Oykge1xuICAgICAgICBpZiAoYiAtIGEgPT09IDEpXG4gICAgICAgICAgICBpZiAoYmVsb3coUCwgVlthXSwgVltiXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIGMgPSBNYXRoLmZsb29yKChhICsgYikgLyAyKTtcbiAgICAgICAgZG5DID0gYmVsb3coUCwgVltjICsgMV0sIFZbY10pO1xuICAgICAgICBpZiAoYWJvdmUoUCwgVltjIC0gMV0sIFZbY10pICYmICFkbkMpXG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgZG5BID0gYmVsb3coUCwgVlthICsgMV0sIFZbYV0pO1xuICAgICAgICBpZiAoZG5BKSB7XG4gICAgICAgICAgICBpZiAoIWRuQylcbiAgICAgICAgICAgICAgICBiID0gYztcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChiZWxvdyhQLCBWW2FdLCBWW2NdKSlcbiAgICAgICAgICAgICAgICAgICAgYiA9IGM7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBhID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkbkMpXG4gICAgICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJvdmUoUCwgVlthXSwgVltjXSkpXG4gICAgICAgICAgICAgICAgICAgIGIgPSBjO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYSA9IGM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0YW5nZW50X1BvbHlQb2x5QyhWLCBXLCB0MSwgdDIsIGNtcDEsIGNtcDIpIHtcbiAgICB2YXIgaXgxLCBpeDI7XG4gICAgaXgxID0gdDEoV1swXSwgVik7XG4gICAgaXgyID0gdDIoVltpeDFdLCBXKTtcbiAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChpeDEgPT09IFYubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICBpeDEgPSAwO1xuICAgICAgICAgICAgaWYgKGNtcDEoV1tpeDJdLCBWW2l4MV0sIFZbaXgxICsgMV0pKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgKytpeDE7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChpeDIgPT09IDApXG4gICAgICAgICAgICAgICAgaXgyID0gVy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGNtcDIoVltpeDFdLCBXW2l4Ml0sIFdbaXgyIC0gMV0pKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLS1peDI7XG4gICAgICAgICAgICBkb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdDE6IGl4MSwgdDI6IGl4MiB9O1xufVxuZXhwb3J0cy50YW5nZW50X1BvbHlQb2x5QyA9IHRhbmdlbnRfUG9seVBvbHlDO1xuZnVuY3Rpb24gTFJ0YW5nZW50X1BvbHlQb2x5QyhWLCBXKSB7XG4gICAgdmFyIHJsID0gUkx0YW5nZW50X1BvbHlQb2x5QyhXLCBWKTtcbiAgICByZXR1cm4geyB0MTogcmwudDIsIHQyOiBybC50MSB9O1xufVxuZXhwb3J0cy5MUnRhbmdlbnRfUG9seVBvbHlDID0gTFJ0YW5nZW50X1BvbHlQb2x5QztcbmZ1bmN0aW9uIFJMdGFuZ2VudF9Qb2x5UG9seUMoViwgVykge1xuICAgIHJldHVybiB0YW5nZW50X1BvbHlQb2x5QyhWLCBXLCBSdGFuZ2VudF9Qb2ludFBvbHlDLCBMdGFuZ2VudF9Qb2ludFBvbHlDLCBhYm92ZSwgYmVsb3cpO1xufVxuZXhwb3J0cy5STHRhbmdlbnRfUG9seVBvbHlDID0gUkx0YW5nZW50X1BvbHlQb2x5QztcbmZ1bmN0aW9uIExMdGFuZ2VudF9Qb2x5UG9seUMoViwgVykge1xuICAgIHJldHVybiB0YW5nZW50X1BvbHlQb2x5QyhWLCBXLCBMdGFuZ2VudF9Qb2ludFBvbHlDLCBMdGFuZ2VudF9Qb2ludFBvbHlDLCBiZWxvdywgYmVsb3cpO1xufVxuZXhwb3J0cy5MTHRhbmdlbnRfUG9seVBvbHlDID0gTEx0YW5nZW50X1BvbHlQb2x5QztcbmZ1bmN0aW9uIFJSdGFuZ2VudF9Qb2x5UG9seUMoViwgVykge1xuICAgIHJldHVybiB0YW5nZW50X1BvbHlQb2x5QyhWLCBXLCBSdGFuZ2VudF9Qb2ludFBvbHlDLCBSdGFuZ2VudF9Qb2ludFBvbHlDLCBhYm92ZSwgYWJvdmUpO1xufVxuZXhwb3J0cy5SUnRhbmdlbnRfUG9seVBvbHlDID0gUlJ0YW5nZW50X1BvbHlQb2x5QztcbnZhciBCaVRhbmdlbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJpVGFuZ2VudCh0MSwgdDIpIHtcbiAgICAgICAgdGhpcy50MSA9IHQxO1xuICAgICAgICB0aGlzLnQyID0gdDI7XG4gICAgfVxuICAgIHJldHVybiBCaVRhbmdlbnQ7XG59KCkpO1xuZXhwb3J0cy5CaVRhbmdlbnQgPSBCaVRhbmdlbnQ7XG52YXIgQmlUYW5nZW50cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmlUYW5nZW50cygpIHtcbiAgICB9XG4gICAgcmV0dXJuIEJpVGFuZ2VudHM7XG59KCkpO1xuZXhwb3J0cy5CaVRhbmdlbnRzID0gQmlUYW5nZW50cztcbnZhciBUVkdQb2ludCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRWR1BvaW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRWR1BvaW50KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUVkdQb2ludDtcbn0oUG9pbnQpKTtcbmV4cG9ydHMuVFZHUG9pbnQgPSBUVkdQb2ludDtcbnZhciBWaXNpYmlsaXR5VmVydGV4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaXNpYmlsaXR5VmVydGV4KGlkLCBwb2x5aWQsIHBvbHl2ZXJ0aWQsIHApIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLnBvbHlpZCA9IHBvbHlpZDtcbiAgICAgICAgdGhpcy5wb2x5dmVydGlkID0gcG9seXZlcnRpZDtcbiAgICAgICAgdGhpcy5wID0gcDtcbiAgICAgICAgcC52diA9IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBWaXNpYmlsaXR5VmVydGV4O1xufSgpKTtcbmV4cG9ydHMuVmlzaWJpbGl0eVZlcnRleCA9IFZpc2liaWxpdHlWZXJ0ZXg7XG52YXIgVmlzaWJpbGl0eUVkZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpc2liaWxpdHlFZGdlKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB9XG4gICAgVmlzaWJpbGl0eUVkZ2UucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGR4ID0gdGhpcy5zb3VyY2UucC54IC0gdGhpcy50YXJnZXQucC54O1xuICAgICAgICB2YXIgZHkgPSB0aGlzLnNvdXJjZS5wLnkgLSB0aGlzLnRhcmdldC5wLnk7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIH07XG4gICAgcmV0dXJuIFZpc2liaWxpdHlFZGdlO1xufSgpKTtcbmV4cG9ydHMuVmlzaWJpbGl0eUVkZ2UgPSBWaXNpYmlsaXR5RWRnZTtcbnZhciBUYW5nZW50VmlzaWJpbGl0eUdyYXBoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYW5nZW50VmlzaWJpbGl0eUdyYXBoKFAsIGcwKSB7XG4gICAgICAgIHRoaXMuUCA9IFA7XG4gICAgICAgIHRoaXMuViA9IFtdO1xuICAgICAgICB0aGlzLkUgPSBbXTtcbiAgICAgICAgaWYgKCFnMCkge1xuICAgICAgICAgICAgdmFyIG4gPSBQLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBQW2ldO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcC5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGogPSBwW2pdLCB2diA9IG5ldyBWaXNpYmlsaXR5VmVydGV4KHRoaXMuVi5sZW5ndGgsIGksIGosIHBqKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5WLnB1c2godnYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkUucHVzaChuZXcgVmlzaWJpbGl0eUVkZ2UocFtqIC0gMV0udnYsIHZ2KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRS5wdXNoKG5ldyBWaXNpYmlsaXR5RWRnZShwWzBdLnZ2LCBwW3AubGVuZ3RoIC0gMV0udnYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbiAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBQaSA9IFBbaV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBQaiA9IFBbal0sIHQgPSB0YW5nZW50cyhQaSwgUGopO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBxIGluIHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdFtxXSwgc291cmNlID0gUGlbYy50MV0sIHRhcmdldCA9IFBqW2MudDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFZGdlSWZWaXNpYmxlKHNvdXJjZSwgdGFyZ2V0LCBpLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuViA9IGcwLlYuc2xpY2UoMCk7XG4gICAgICAgICAgICB0aGlzLkUgPSBnMC5FLnNsaWNlKDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRhbmdlbnRWaXNpYmlsaXR5R3JhcGgucHJvdG90eXBlLmFkZEVkZ2VJZlZpc2libGUgPSBmdW5jdGlvbiAodSwgdiwgaTEsIGkyKSB7XG4gICAgICAgIGlmICghdGhpcy5pbnRlcnNlY3RzUG9seXMobmV3IExpbmVTZWdtZW50KHUueCwgdS55LCB2LngsIHYueSksIGkxLCBpMikpIHtcbiAgICAgICAgICAgIHRoaXMuRS5wdXNoKG5ldyBWaXNpYmlsaXR5RWRnZSh1LnZ2LCB2LnZ2KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRhbmdlbnRWaXNpYmlsaXR5R3JhcGgucHJvdG90eXBlLmFkZFBvaW50ID0gZnVuY3Rpb24gKHAsIGkxKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5QLmxlbmd0aDtcbiAgICAgICAgdGhpcy5WLnB1c2gobmV3IFZpc2liaWxpdHlWZXJ0ZXgodGhpcy5WLmxlbmd0aCwgbiwgMCwgcCkpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IGkxKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHBvbHkgPSB0aGlzLlBbaV0sIHQgPSB0YW5nZW50X1BvaW50UG9seUMocCwgcG9seSk7XG4gICAgICAgICAgICB0aGlzLmFkZEVkZ2VJZlZpc2libGUocCwgcG9seVt0Lmx0YW5dLCBpMSwgaSk7XG4gICAgICAgICAgICB0aGlzLmFkZEVkZ2VJZlZpc2libGUocCwgcG9seVt0LnJ0YW5dLCBpMSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHAudnY7XG4gICAgfTtcbiAgICBUYW5nZW50VmlzaWJpbGl0eUdyYXBoLnByb3RvdHlwZS5pbnRlcnNlY3RzUG9seXMgPSBmdW5jdGlvbiAobCwgaTEsIGkyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdGhpcy5QLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgaWYgKGkgIT0gaTEgJiYgaSAhPSBpMiAmJiBpbnRlcnNlY3RzKGwsIHRoaXMuUFtpXSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBUYW5nZW50VmlzaWJpbGl0eUdyYXBoO1xufSgpKTtcbmV4cG9ydHMuVGFuZ2VudFZpc2liaWxpdHlHcmFwaCA9IFRhbmdlbnRWaXNpYmlsaXR5R3JhcGg7XG5mdW5jdGlvbiBpbnRlcnNlY3RzKGwsIFApIHtcbiAgICB2YXIgaW50cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAxLCBuID0gUC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIGludCA9IHJlY3RhbmdsZV8xLlJlY3RhbmdsZS5saW5lSW50ZXJzZWN0aW9uKGwueDEsIGwueTEsIGwueDIsIGwueTIsIFBbaSAtIDFdLngsIFBbaSAtIDFdLnksIFBbaV0ueCwgUFtpXS55KTtcbiAgICAgICAgaWYgKGludClcbiAgICAgICAgICAgIGludHMucHVzaChpbnQpO1xuICAgIH1cbiAgICByZXR1cm4gaW50cztcbn1cbmZ1bmN0aW9uIHRhbmdlbnRzKFYsIFcpIHtcbiAgICB2YXIgbSA9IFYubGVuZ3RoIC0gMSwgbiA9IFcubGVuZ3RoIC0gMTtcbiAgICB2YXIgYnQgPSBuZXcgQmlUYW5nZW50cygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IG07ICsraSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8PSBuOyArK2opIHtcbiAgICAgICAgICAgIHZhciB2MSA9IFZbaSA9PSAwID8gbSA6IGkgLSAxXTtcbiAgICAgICAgICAgIHZhciB2MiA9IFZbaV07XG4gICAgICAgICAgICB2YXIgdjMgPSBWW2kgPT0gbSA/IDAgOiBpICsgMV07XG4gICAgICAgICAgICB2YXIgdzEgPSBXW2ogPT0gMCA/IG4gOiBqIC0gMV07XG4gICAgICAgICAgICB2YXIgdzIgPSBXW2pdO1xuICAgICAgICAgICAgdmFyIHczID0gV1tqID09IG4gPyAwIDogaiArIDFdO1xuICAgICAgICAgICAgdmFyIHYxdjJ3MiA9IGlzTGVmdCh2MSwgdjIsIHcyKTtcbiAgICAgICAgICAgIHZhciB2MncxdzIgPSBpc0xlZnQodjIsIHcxLCB3Mik7XG4gICAgICAgICAgICB2YXIgdjJ3MnczID0gaXNMZWZ0KHYyLCB3MiwgdzMpO1xuICAgICAgICAgICAgdmFyIHcxdzJ2MiA9IGlzTGVmdCh3MSwgdzIsIHYyKTtcbiAgICAgICAgICAgIHZhciB3MnYxdjIgPSBpc0xlZnQodzIsIHYxLCB2Mik7XG4gICAgICAgICAgICB2YXIgdzJ2MnYzID0gaXNMZWZ0KHcyLCB2MiwgdjMpO1xuICAgICAgICAgICAgaWYgKHYxdjJ3MiA+PSAwICYmIHYydzF3MiA+PSAwICYmIHYydzJ3MyA8IDBcbiAgICAgICAgICAgICAgICAmJiB3MXcydjIgPj0gMCAmJiB3MnYxdjIgPj0gMCAmJiB3MnYydjMgPCAwKSB7XG4gICAgICAgICAgICAgICAgYnQubGwgPSBuZXcgQmlUYW5nZW50KGksIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodjF2MncyIDw9IDAgJiYgdjJ3MXcyIDw9IDAgJiYgdjJ3MnczID4gMFxuICAgICAgICAgICAgICAgICYmIHcxdzJ2MiA8PSAwICYmIHcydjF2MiA8PSAwICYmIHcydjJ2MyA+IDApIHtcbiAgICAgICAgICAgICAgICBidC5yciA9IG5ldyBCaVRhbmdlbnQoaSwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2MXYydzIgPD0gMCAmJiB2MncxdzIgPiAwICYmIHYydzJ3MyA8PSAwXG4gICAgICAgICAgICAgICAgJiYgdzF3MnYyID49IDAgJiYgdzJ2MXYyIDwgMCAmJiB3MnYydjMgPj0gMCkge1xuICAgICAgICAgICAgICAgIGJ0LnJsID0gbmV3IEJpVGFuZ2VudChpLCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHYxdjJ3MiA+PSAwICYmIHYydzF3MiA8IDAgJiYgdjJ3MnczID49IDBcbiAgICAgICAgICAgICAgICAmJiB3MXcydjIgPD0gMCAmJiB3MnYxdjIgPiAwICYmIHcydjJ2MyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgYnQubHIgPSBuZXcgQmlUYW5nZW50KGksIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidDtcbn1cbmV4cG9ydHMudGFuZ2VudHMgPSB0YW5nZW50cztcbmZ1bmN0aW9uIGlzUG9pbnRJbnNpZGVQb2x5KHAsIHBvbHkpIHtcbiAgICBmb3IgKHZhciBpID0gMSwgbiA9IHBvbHkubGVuZ3RoOyBpIDwgbjsgKytpKVxuICAgICAgICBpZiAoYmVsb3cocG9seVtpIC0gMV0sIHBvbHlbaV0sIHApKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNBbnlQSW5RKHAsIHEpIHtcbiAgICByZXR1cm4gIXAuZXZlcnkoZnVuY3Rpb24gKHYpIHsgcmV0dXJuICFpc1BvaW50SW5zaWRlUG9seSh2LCBxKTsgfSk7XG59XG5mdW5jdGlvbiBwb2x5c092ZXJsYXAocCwgcSkge1xuICAgIGlmIChpc0FueVBJblEocCwgcSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChpc0FueVBJblEocSwgcCkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAxLCBuID0gcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIHYgPSBwW2ldLCB1ID0gcFtpIC0gMV07XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKG5ldyBMaW5lU2VnbWVudCh1LngsIHUueSwgdi54LCB2LnkpLCBxKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucG9seXNPdmVybGFwID0gcG9seXNPdmVybGFwO1xuXG59LHtcIi4vcmVjdGFuZ2xlXCI6MTd9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlY3RhbmdsZV8xID0gcmVxdWlyZShcIi4vcmVjdGFuZ2xlXCIpO1xudmFyIHZwc2NfMSA9IHJlcXVpcmUoXCIuL3Zwc2NcIik7XG52YXIgc2hvcnRlc3RwYXRoc18xID0gcmVxdWlyZShcIi4vc2hvcnRlc3RwYXRoc1wiKTtcbnZhciBOb2RlV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9kZVdyYXBwZXIoaWQsIHJlY3QsIGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5yZWN0ID0gcmVjdDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB0aGlzLmxlYWYgPSB0eXBlb2YgY2hpbGRyZW4gPT09ICd1bmRlZmluZWQnIHx8IGNoaWxkcmVuLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgcmV0dXJuIE5vZGVXcmFwcGVyO1xufSgpKTtcbmV4cG9ydHMuTm9kZVdyYXBwZXIgPSBOb2RlV3JhcHBlcjtcbnZhciBWZXJ0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWZXJ0KGlkLCB4LCB5LCBub2RlLCBsaW5lKSB7XG4gICAgICAgIGlmIChub2RlID09PSB2b2lkIDApIHsgbm9kZSA9IG51bGw7IH1cbiAgICAgICAgaWYgKGxpbmUgPT09IHZvaWQgMCkgeyBsaW5lID0gbnVsbDsgfVxuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgfVxuICAgIHJldHVybiBWZXJ0O1xufSgpKTtcbmV4cG9ydHMuVmVydCA9IFZlcnQ7XG52YXIgTG9uZ2VzdENvbW1vblN1YnNlcXVlbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb25nZXN0Q29tbW9uU3Vic2VxdWVuY2UocywgdCkge1xuICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICB0aGlzLnQgPSB0O1xuICAgICAgICB2YXIgbWYgPSBMb25nZXN0Q29tbW9uU3Vic2VxdWVuY2UuZmluZE1hdGNoKHMsIHQpO1xuICAgICAgICB2YXIgdHIgPSB0LnNsaWNlKDApLnJldmVyc2UoKTtcbiAgICAgICAgdmFyIG1yID0gTG9uZ2VzdENvbW1vblN1YnNlcXVlbmNlLmZpbmRNYXRjaChzLCB0cik7XG4gICAgICAgIGlmIChtZi5sZW5ndGggPj0gbXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IG1mLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuc2kgPSBtZi5zaTtcbiAgICAgICAgICAgIHRoaXMudGkgPSBtZi50aTtcbiAgICAgICAgICAgIHRoaXMucmV2ZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbXIubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zaSA9IG1yLnNpO1xuICAgICAgICAgICAgdGhpcy50aSA9IHQubGVuZ3RoIC0gbXIudGkgLSBtci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnJldmVyc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBMb25nZXN0Q29tbW9uU3Vic2VxdWVuY2UuZmluZE1hdGNoID0gZnVuY3Rpb24gKHMsIHQpIHtcbiAgICAgICAgdmFyIG0gPSBzLmxlbmd0aDtcbiAgICAgICAgdmFyIG4gPSB0Lmxlbmd0aDtcbiAgICAgICAgdmFyIG1hdGNoID0geyBsZW5ndGg6IDAsIHNpOiAtMSwgdGk6IC0xIH07XG4gICAgICAgIHZhciBsID0gbmV3IEFycmF5KG0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG07IGkrKykge1xuICAgICAgICAgICAgbFtpXSA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbjsgaisrKVxuICAgICAgICAgICAgICAgIGlmIChzW2ldID09PSB0W2pdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gbFtpXVtqXSA9IChpID09PSAwIHx8IGogPT09IDApID8gMSA6IGxbaSAtIDFdW2ogLSAxXSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID4gbWF0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC5sZW5ndGggPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2guc2kgPSBpIC0gdiArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC50aSA9IGogLSB2ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbFtpXVtqXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH07XG4gICAgTG9uZ2VzdENvbW1vblN1YnNlcXVlbmNlLnByb3RvdHlwZS5nZXRTZXF1ZW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzLnMuc2xpY2UodGhpcy5zaSwgdGhpcy5zaSArIHRoaXMubGVuZ3RoKSA6IFtdO1xuICAgIH07XG4gICAgcmV0dXJuIExvbmdlc3RDb21tb25TdWJzZXF1ZW5jZTtcbn0oKSk7XG5leHBvcnRzLkxvbmdlc3RDb21tb25TdWJzZXF1ZW5jZSA9IExvbmdlc3RDb21tb25TdWJzZXF1ZW5jZTtcbnZhciBHcmlkUm91dGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcmlkUm91dGVyKG9yaWdpbmFsbm9kZXMsIGFjY2Vzc29yLCBncm91cFBhZGRpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGdyb3VwUGFkZGluZyA9PT0gdm9pZCAwKSB7IGdyb3VwUGFkZGluZyA9IDEyOyB9XG4gICAgICAgIHRoaXMub3JpZ2luYWxub2RlcyA9IG9yaWdpbmFsbm9kZXM7XG4gICAgICAgIHRoaXMuZ3JvdXBQYWRkaW5nID0gZ3JvdXBQYWRkaW5nO1xuICAgICAgICB0aGlzLmxlYXZlcyA9IG51bGw7XG4gICAgICAgIHRoaXMubm9kZXMgPSBvcmlnaW5hbG5vZGVzLm1hcChmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gbmV3IE5vZGVXcmFwcGVyKGksIGFjY2Vzc29yLmdldEJvdW5kcyh2KSwgYWNjZXNzb3IuZ2V0Q2hpbGRyZW4odikpOyB9KTtcbiAgICAgICAgdGhpcy5sZWF2ZXMgPSB0aGlzLm5vZGVzLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gdi5sZWFmOyB9KTtcbiAgICAgICAgdGhpcy5ncm91cHMgPSB0aGlzLm5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZykgeyByZXR1cm4gIWcubGVhZjsgfSk7XG4gICAgICAgIHRoaXMuY29scyA9IHRoaXMuZ2V0R3JpZExpbmVzKCd4Jyk7XG4gICAgICAgIHRoaXMucm93cyA9IHRoaXMuZ2V0R3JpZExpbmVzKCd5Jyk7XG4gICAgICAgIHRoaXMuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHJldHVybiB2LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIF90aGlzLm5vZGVzW2NdLnBhcmVudCA9IHY7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yb290ID0geyBjaGlsZHJlbjogW10gfTtcbiAgICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHYucGFyZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHYucGFyZW50ID0gX3RoaXMucm9vdDtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290LmNoaWxkcmVuLnB1c2godi5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2LnBvcnRzID0gW107XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJhY2tUb0Zyb250ID0gdGhpcy5ub2Rlcy5zbGljZSgwKTtcbiAgICAgICAgdGhpcy5iYWNrVG9Gcm9udC5zb3J0KGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBfdGhpcy5nZXREZXB0aCh4KSAtIF90aGlzLmdldERlcHRoKHkpOyB9KTtcbiAgICAgICAgdmFyIGZyb250VG9CYWNrR3JvdXBzID0gdGhpcy5iYWNrVG9Gcm9udC5zbGljZSgwKS5yZXZlcnNlKCkuZmlsdGVyKGZ1bmN0aW9uIChnKSB7IHJldHVybiAhZy5sZWFmOyB9KTtcbiAgICAgICAgZnJvbnRUb0JhY2tHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdmFyIHIgPSByZWN0YW5nbGVfMS5SZWN0YW5nbGUuZW1wdHkoKTtcbiAgICAgICAgICAgIHYuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gciA9IHIudW5pb24oX3RoaXMubm9kZXNbY10ucmVjdCk7IH0pO1xuICAgICAgICAgICAgdi5yZWN0ID0gci5pbmZsYXRlKF90aGlzLmdyb3VwUGFkZGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgY29sTWlkcyA9IHRoaXMubWlkUG9pbnRzKHRoaXMuY29scy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucG9zOyB9KSk7XG4gICAgICAgIHZhciByb3dNaWRzID0gdGhpcy5taWRQb2ludHModGhpcy5yb3dzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gci5wb3M7IH0pKTtcbiAgICAgICAgdmFyIHJvd3ggPSBjb2xNaWRzWzBdLCByb3dYID0gY29sTWlkc1tjb2xNaWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgY29seSA9IHJvd01pZHNbMF0sIGNvbFkgPSByb3dNaWRzW3Jvd01pZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBobGluZXMgPSB0aGlzLnJvd3MubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiAoeyB4MTogcm93eCwgeDI6IHJvd1gsIHkxOiByLnBvcywgeTI6IHIucG9zIH0pOyB9KVxuICAgICAgICAgICAgLmNvbmNhdChyb3dNaWRzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gKHsgeDE6IHJvd3gsIHgyOiByb3dYLCB5MTogbSwgeTI6IG0gfSk7IH0pKTtcbiAgICAgICAgdmFyIHZsaW5lcyA9IHRoaXMuY29scy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICh7IHgxOiBjLnBvcywgeDI6IGMucG9zLCB5MTogY29seSwgeTI6IGNvbFkgfSk7IH0pXG4gICAgICAgICAgICAuY29uY2F0KGNvbE1pZHMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiAoeyB4MTogbSwgeDI6IG0sIHkxOiBjb2x5LCB5MjogY29sWSB9KTsgfSkpO1xuICAgICAgICB2YXIgbGluZXMgPSBobGluZXMuY29uY2F0KHZsaW5lcyk7XG4gICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwudmVydHMgPSBbXTsgfSk7XG4gICAgICAgIHRoaXMudmVydHMgPSBbXTtcbiAgICAgICAgdGhpcy5lZGdlcyA9IFtdO1xuICAgICAgICBobGluZXMuZm9yRWFjaChmdW5jdGlvbiAoaCkge1xuICAgICAgICAgICAgcmV0dXJuIHZsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBuZXcgVmVydChfdGhpcy52ZXJ0cy5sZW5ndGgsIHYueDEsIGgueTEpO1xuICAgICAgICAgICAgICAgIGgudmVydHMucHVzaChwKTtcbiAgICAgICAgICAgICAgICB2LnZlcnRzLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgX3RoaXMudmVydHMucHVzaChwKTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IF90aGlzLmJhY2tUb0Zyb250Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IF90aGlzLmJhY2tUb0Zyb250W2ldLCByID0gbm9kZS5yZWN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSBNYXRoLmFicyhwLnggLSByLmN4KCkpLCBkeSA9IE1hdGguYWJzKHAueSAtIHIuY3koKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkeCA8IHIud2lkdGgoKSAvIDIgJiYgZHkgPCByLmhlaWdodCgpIC8gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsLCBsaSkge1xuICAgICAgICAgICAgX3RoaXMubm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgICAgIHYucmVjdC5saW5lSW50ZXJzZWN0aW9ucyhsLngxLCBsLnkxLCBsLngyLCBsLnkyKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcnNlY3QsIGopIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBuZXcgVmVydChfdGhpcy52ZXJ0cy5sZW5ndGgsIGludGVyc2VjdC54LCBpbnRlcnNlY3QueSwgdiwgbCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZlcnRzLnB1c2gocCk7XG4gICAgICAgICAgICAgICAgICAgIGwudmVydHMucHVzaChwKTtcbiAgICAgICAgICAgICAgICAgICAgdi5wb3J0cy5wdXNoKHApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaXNIb3JpeiA9IE1hdGguYWJzKGwueTEgLSBsLnkyKSA8IDAuMTtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBpc0hvcml6ID8gYi54IC0gYS54IDogYi55IC0gYS55OyB9O1xuICAgICAgICAgICAgbC52ZXJ0cy5zb3J0KGRlbHRhKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbC52ZXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gbC52ZXJ0c1tpIC0gMV0sIHYgPSBsLnZlcnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh1Lm5vZGUgJiYgdS5ub2RlID09PSB2Lm5vZGUgJiYgdS5ub2RlLmxlYWYpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLmVkZ2VzLnB1c2goeyBzb3VyY2U6IHUuaWQsIHRhcmdldDogdi5pZCwgbGVuZ3RoOiBNYXRoLmFicyhkZWx0YSh1LCB2KSkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBHcmlkUm91dGVyLnByb3RvdHlwZS5hdmcgPSBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5yZWR1Y2UoZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHggKyB5OyB9KSAvIGEubGVuZ3RoOyB9O1xuICAgIEdyaWRSb3V0ZXIucHJvdG90eXBlLmdldEdyaWRMaW5lcyA9IGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZhciBjb2x1bW5zID0gW107XG4gICAgICAgIHZhciBscyA9IHRoaXMubGVhdmVzLnNsaWNlKDAsIHRoaXMubGVhdmVzLmxlbmd0aCk7XG4gICAgICAgIHdoaWxlIChscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgb3ZlcmxhcHBpbmcgPSBscy5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYucmVjdFsnb3ZlcmxhcCcgKyBheGlzLnRvVXBwZXJDYXNlKCldKGxzWzBdLnJlY3QpOyB9KTtcbiAgICAgICAgICAgIHZhciBjb2wgPSB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IG92ZXJsYXBwaW5nLFxuICAgICAgICAgICAgICAgIHBvczogdGhpcy5hdmcob3ZlcmxhcHBpbmcubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnJlY3RbJ2MnICsgYXhpc10oKTsgfSkpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKGNvbCk7XG4gICAgICAgICAgICBjb2wubm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gbHMuc3BsaWNlKGxzLmluZGV4T2YodiksIDEpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW5zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEucG9zIC0gYi5wb3M7IH0pO1xuICAgICAgICByZXR1cm4gY29sdW1ucztcbiAgICB9O1xuICAgIEdyaWRSb3V0ZXIucHJvdG90eXBlLmdldERlcHRoID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgICAgd2hpbGUgKHYucGFyZW50ICE9PSB0aGlzLnJvb3QpIHtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgICB2ID0gdi5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlcHRoO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5wcm90b3R5cGUubWlkUG9pbnRzID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgdmFyIGdhcCA9IGFbMV0gLSBhWzBdO1xuICAgICAgICB2YXIgbWlkcyA9IFthWzBdIC0gZ2FwIC8gMl07XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbWlkcy5wdXNoKChhW2ldICsgYVtpIC0gMV0pIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgbWlkcy5wdXNoKGFbYS5sZW5ndGggLSAxXSArIGdhcCAvIDIpO1xuICAgICAgICByZXR1cm4gbWlkcztcbiAgICB9O1xuICAgIEdyaWRSb3V0ZXIucHJvdG90eXBlLmZpbmRMaW5lYWdlID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdmFyIGxpbmVhZ2UgPSBbdl07XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHYgPSB2LnBhcmVudDtcbiAgICAgICAgICAgIGxpbmVhZ2UucHVzaCh2KTtcbiAgICAgICAgfSB3aGlsZSAodiAhPT0gdGhpcy5yb290KTtcbiAgICAgICAgcmV0dXJuIGxpbmVhZ2UucmV2ZXJzZSgpO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5wcm90b3R5cGUuZmluZEFuY2VzdG9yUGF0aEJldHdlZW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgYWEgPSB0aGlzLmZpbmRMaW5lYWdlKGEpLCBiYSA9IHRoaXMuZmluZExpbmVhZ2UoYiksIGkgPSAwO1xuICAgICAgICB3aGlsZSAoYWFbaV0gPT09IGJhW2ldKVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICByZXR1cm4geyBjb21tb25BbmNlc3RvcjogYWFbaSAtIDFdLCBsaW5lYWdlczogYWEuc2xpY2UoaSkuY29uY2F0KGJhLnNsaWNlKGkpKSB9O1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5wcm90b3R5cGUuc2libGluZ09ic3RhY2xlcyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwYXRoID0gdGhpcy5maW5kQW5jZXN0b3JQYXRoQmV0d2VlbihhLCBiKTtcbiAgICAgICAgdmFyIGxpbmVhZ2VMb29rdXAgPSB7fTtcbiAgICAgICAgcGF0aC5saW5lYWdlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7IHJldHVybiBsaW5lYWdlTG9va3VwW3YuaWRdID0ge307IH0pO1xuICAgICAgICB2YXIgb2JzdGFjbGVzID0gcGF0aC5jb21tb25BbmNlc3Rvci5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuICEodiBpbiBsaW5lYWdlTG9va3VwKTsgfSk7XG4gICAgICAgIHBhdGgubGluZWFnZXNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYucGFyZW50ICE9PSBwYXRoLmNvbW1vbkFuY2VzdG9yOyB9KVxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG9ic3RhY2xlcyA9IG9ic3RhY2xlcy5jb25jYXQodi5wYXJlbnQuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjICE9PSB2LmlkOyB9KSk7IH0pO1xuICAgICAgICByZXR1cm4gb2JzdGFjbGVzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gX3RoaXMubm9kZXNbdl07IH0pO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5nZXRTZWdtZW50U2V0cyA9IGZ1bmN0aW9uIChyb3V0ZXMsIHgsIHkpIHtcbiAgICAgICAgdmFyIHZzZWdtZW50cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBlaSA9IDA7IGVpIDwgcm91dGVzLmxlbmd0aDsgZWkrKykge1xuICAgICAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2VpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCByb3V0ZS5sZW5ndGg7IHNpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHJvdXRlW3NpXTtcbiAgICAgICAgICAgICAgICBzLmVkZ2VpZCA9IGVpO1xuICAgICAgICAgICAgICAgIHMuaSA9IHNpO1xuICAgICAgICAgICAgICAgIHZhciBzZHggPSBzWzFdW3hdIC0gc1swXVt4XTtcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoc2R4KSA8IDAuMSkge1xuICAgICAgICAgICAgICAgICAgICB2c2VnbWVudHMucHVzaChzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdnNlZ21lbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF1beF0gLSBiWzBdW3hdOyB9KTtcbiAgICAgICAgdmFyIHZzZWdtZW50c2V0cyA9IFtdO1xuICAgICAgICB2YXIgc2VnbWVudHNldCA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHZzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICghc2VnbWVudHNldCB8fCBNYXRoLmFicyhzWzBdW3hdIC0gc2VnbWVudHNldC5wb3MpID4gMC4xKSB7XG4gICAgICAgICAgICAgICAgc2VnbWVudHNldCA9IHsgcG9zOiBzWzBdW3hdLCBzZWdtZW50czogW10gfTtcbiAgICAgICAgICAgICAgICB2c2VnbWVudHNldHMucHVzaChzZWdtZW50c2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZ21lbnRzZXQuc2VnbWVudHMucHVzaChzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdnNlZ21lbnRzZXRzO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5udWRnZVNlZ3MgPSBmdW5jdGlvbiAoeCwgeSwgcm91dGVzLCBzZWdtZW50cywgbGVmdE9mLCBnYXApIHtcbiAgICAgICAgdmFyIG4gPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIGlmIChuIDw9IDEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciB2cyA9IHNlZ21lbnRzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gbmV3IHZwc2NfMS5WYXJpYWJsZShzWzBdW3hdKTsgfSk7XG4gICAgICAgIHZhciBjcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gailcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIHMxID0gc2VnbWVudHNbaV0sIHMyID0gc2VnbWVudHNbal0sIGUxID0gczEuZWRnZWlkLCBlMiA9IHMyLmVkZ2VpZCwgbGluZCA9IC0xLCByaW5kID0gLTE7XG4gICAgICAgICAgICAgICAgaWYgKHggPT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0T2YoZTEsIGUyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxWzBdW3ldIDwgczFbMV1beV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5kID0gaiwgcmluZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5kID0gaSwgcmluZCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0T2YoZTEsIGUyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxWzBdW3ldIDwgczFbMV1beV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5kID0gaSwgcmluZCA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5kID0gaiwgcmluZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxpbmQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjcy5wdXNoKG5ldyB2cHNjXzEuQ29uc3RyYWludCh2c1tsaW5kXSwgdnNbcmluZF0sIGdhcCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc29sdmVyID0gbmV3IHZwc2NfMS5Tb2x2ZXIodnMsIGNzKTtcbiAgICAgICAgc29sdmVyLnNvbHZlKCk7XG4gICAgICAgIHZzLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIHZhciBzID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICB2YXIgcG9zID0gdi5wb3NpdGlvbigpO1xuICAgICAgICAgICAgc1swXVt4XSA9IHNbMV1beF0gPSBwb3M7XG4gICAgICAgICAgICB2YXIgcm91dGUgPSByb3V0ZXNbcy5lZGdlaWRdO1xuICAgICAgICAgICAgaWYgKHMuaSA+IDApXG4gICAgICAgICAgICAgICAgcm91dGVbcy5pIC0gMV1bMV1beF0gPSBwb3M7XG4gICAgICAgICAgICBpZiAocy5pIDwgcm91dGUubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICByb3V0ZVtzLmkgKyAxXVswXVt4XSA9IHBvcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBHcmlkUm91dGVyLm51ZGdlU2VnbWVudHMgPSBmdW5jdGlvbiAocm91dGVzLCB4LCB5LCBsZWZ0T2YsIGdhcCkge1xuICAgICAgICB2YXIgdnNlZ21lbnRzZXRzID0gR3JpZFJvdXRlci5nZXRTZWdtZW50U2V0cyhyb3V0ZXMsIHgsIHkpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZzZWdtZW50c2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNzID0gdnNlZ21lbnRzZXRzW2ldO1xuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzcy5zZWdtZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBzID0gc3Muc2VnbWVudHNbal07XG4gICAgICAgICAgICAgICAgZXZlbnRzLnB1c2goeyB0eXBlOiAwLCBzOiBzLCBwb3M6IE1hdGgubWluKHNbMF1beV0sIHNbMV1beV0pIH0pO1xuICAgICAgICAgICAgICAgIGV2ZW50cy5wdXNoKHsgdHlwZTogMSwgczogcywgcG9zOiBNYXRoLm1heChzWzBdW3ldLCBzWzFdW3ldKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLnBvcyAtIGIucG9zICsgYS50eXBlIC0gYi50eXBlOyB9KTtcbiAgICAgICAgICAgIHZhciBvcGVuID0gW107XG4gICAgICAgICAgICB2YXIgb3BlbkNvdW50ID0gMDtcbiAgICAgICAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvcGVuLnB1c2goZS5zKTtcbiAgICAgICAgICAgICAgICAgICAgb3BlbkNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcGVuQ291bnQtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wZW5Db3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIEdyaWRSb3V0ZXIubnVkZ2VTZWdzKHgsIHksIHJvdXRlcywgb3BlbiwgbGVmdE9mLCBnYXApO1xuICAgICAgICAgICAgICAgICAgICBvcGVuID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEdyaWRSb3V0ZXIucHJvdG90eXBlLnJvdXRlRWRnZXMgPSBmdW5jdGlvbiAoZWRnZXMsIG51ZGdlR2FwLCBzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcm91dGVQYXRocyA9IGVkZ2VzLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMucm91dGUoc291cmNlKGUpLCB0YXJnZXQoZSkpOyB9KTtcbiAgICAgICAgdmFyIG9yZGVyID0gR3JpZFJvdXRlci5vcmRlckVkZ2VzKHJvdXRlUGF0aHMpO1xuICAgICAgICB2YXIgcm91dGVzID0gcm91dGVQYXRocy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEdyaWRSb3V0ZXIubWFrZVNlZ21lbnRzKGUpOyB9KTtcbiAgICAgICAgR3JpZFJvdXRlci5udWRnZVNlZ21lbnRzKHJvdXRlcywgJ3gnLCAneScsIG9yZGVyLCBudWRnZUdhcCk7XG4gICAgICAgIEdyaWRSb3V0ZXIubnVkZ2VTZWdtZW50cyhyb3V0ZXMsICd5JywgJ3gnLCBvcmRlciwgbnVkZ2VHYXApO1xuICAgICAgICBHcmlkUm91dGVyLnVucmV2ZXJzZUVkZ2VzKHJvdXRlcywgcm91dGVQYXRocyk7XG4gICAgICAgIHJldHVybiByb3V0ZXM7XG4gICAgfTtcbiAgICBHcmlkUm91dGVyLnVucmV2ZXJzZUVkZ2VzID0gZnVuY3Rpb24gKHJvdXRlcywgcm91dGVQYXRocykge1xuICAgICAgICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc2VnbWVudHMsIGkpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gcm91dGVQYXRoc1tpXTtcbiAgICAgICAgICAgIGlmIChwYXRoLnJldmVyc2VkKSB7XG4gICAgICAgICAgICAgICAgc2VnbWVudHMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudC5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5hbmdsZUJldHdlZW4yTGluZXMgPSBmdW5jdGlvbiAobGluZTEsIGxpbmUyKSB7XG4gICAgICAgIHZhciBhbmdsZTEgPSBNYXRoLmF0YW4yKGxpbmUxWzBdLnkgLSBsaW5lMVsxXS55LCBsaW5lMVswXS54IC0gbGluZTFbMV0ueCk7XG4gICAgICAgIHZhciBhbmdsZTIgPSBNYXRoLmF0YW4yKGxpbmUyWzBdLnkgLSBsaW5lMlsxXS55LCBsaW5lMlswXS54IC0gbGluZTJbMV0ueCk7XG4gICAgICAgIHZhciBkaWZmID0gYW5nbGUxIC0gYW5nbGUyO1xuICAgICAgICBpZiAoZGlmZiA+IE1hdGguUEkgfHwgZGlmZiA8IC1NYXRoLlBJKSB7XG4gICAgICAgICAgICBkaWZmID0gYW5nbGUyIC0gYW5nbGUxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5pc0xlZnQgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICByZXR1cm4gKChiLnggLSBhLngpICogKGMueSAtIGEueSkgLSAoYi55IC0gYS55KSAqIChjLnggLSBhLngpKSA8PSAwO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5nZXRPcmRlciA9IGZ1bmN0aW9uIChwYWlycykge1xuICAgICAgICB2YXIgb3V0Z29pbmcgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3V0Z29pbmdbcC5sXSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgb3V0Z29pbmdbcC5sXSA9IHt9O1xuICAgICAgICAgICAgb3V0Z29pbmdbcC5sXVtwLnJdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGwsIHIpIHsgcmV0dXJuIHR5cGVvZiBvdXRnb2luZ1tsXSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3V0Z29pbmdbbF1bcl07IH07XG4gICAgfTtcbiAgICBHcmlkUm91dGVyLm9yZGVyRWRnZXMgPSBmdW5jdGlvbiAoZWRnZXMpIHtcbiAgICAgICAgdmFyIGVkZ2VPcmRlciA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZWRnZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGVkZ2VzW2ldLCBmID0gZWRnZXNbal0sIGxjcyA9IG5ldyBMb25nZXN0Q29tbW9uU3Vic2VxdWVuY2UoZSwgZik7XG4gICAgICAgICAgICAgICAgdmFyIHUsIHZpLCB2ajtcbiAgICAgICAgICAgICAgICBpZiAobGNzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGxjcy5yZXZlcnNlZCkge1xuICAgICAgICAgICAgICAgICAgICBmLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZi5yZXZlcnNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxjcyA9IG5ldyBMb25nZXN0Q29tbW9uU3Vic2VxdWVuY2UoZSwgZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgobGNzLnNpIDw9IDAgfHwgbGNzLnRpIDw9IDApICYmXG4gICAgICAgICAgICAgICAgICAgIChsY3Muc2kgKyBsY3MubGVuZ3RoID49IGUubGVuZ3RoIHx8IGxjcy50aSArIGxjcy5sZW5ndGggPj0gZi5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2VPcmRlci5wdXNoKHsgbDogaSwgcjogaiB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsY3Muc2kgKyBsY3MubGVuZ3RoID49IGUubGVuZ3RoIHx8IGxjcy50aSArIGxjcy5sZW5ndGggPj0gZi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdSA9IGVbbGNzLnNpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHZqID0gZVtsY3Muc2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmkgPSBmW2xjcy50aSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdSA9IGVbbGNzLnNpICsgbGNzLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICB2aSA9IGVbbGNzLnNpICsgbGNzLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgICAgIHZqID0gZltsY3MudGkgKyBsY3MubGVuZ3RoXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKEdyaWRSb3V0ZXIuaXNMZWZ0KHUsIHZpLCB2aikpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZU9yZGVyLnB1c2goeyBsOiBqLCByOiBpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZU9yZGVyLnB1c2goeyBsOiBpLCByOiBqIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gR3JpZFJvdXRlci5nZXRPcmRlcihlZGdlT3JkZXIpO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5tYWtlU2VnbWVudHMgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICBmdW5jdGlvbiBjb3B5UG9pbnQocCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgeDogcC54LCB5OiBwLnkgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNTdHJhaWdodCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBNYXRoLmFicygoYi54IC0gYS54KSAqIChjLnkgLSBhLnkpIC0gKGIueSAtIGEueSkgKiAoYy54IC0gYS54KSkgPCAwLjAwMTsgfTtcbiAgICAgICAgdmFyIHNlZ21lbnRzID0gW107XG4gICAgICAgIHZhciBhID0gY29weVBvaW50KHBhdGhbMF0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBiID0gY29weVBvaW50KHBhdGhbaV0pLCBjID0gaSA8IHBhdGgubGVuZ3RoIC0gMSA/IHBhdGhbaSArIDFdIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghYyB8fCAhaXNTdHJhaWdodChhLCBiLCBjKSkge1xuICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goW2EsIGJdKTtcbiAgICAgICAgICAgICAgICBhID0gYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgfTtcbiAgICBHcmlkUm91dGVyLnByb3RvdHlwZS5yb3V0ZSA9IGZ1bmN0aW9uIChzLCB0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLm5vZGVzW3NdLCB0YXJnZXQgPSB0aGlzLm5vZGVzW3RdO1xuICAgICAgICB0aGlzLm9ic3RhY2xlcyA9IHRoaXMuc2libGluZ09ic3RhY2xlcyhzb3VyY2UsIHRhcmdldCk7XG4gICAgICAgIHZhciBvYnN0YWNsZUxvb2t1cCA9IHt9O1xuICAgICAgICB0aGlzLm9ic3RhY2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvYnN0YWNsZUxvb2t1cFtvLmlkXSA9IG87IH0pO1xuICAgICAgICB0aGlzLnBhc3NhYmxlRWRnZXMgPSB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIHUgPSBfdGhpcy52ZXJ0c1tlLnNvdXJjZV0sIHYgPSBfdGhpcy52ZXJ0c1tlLnRhcmdldF07XG4gICAgICAgICAgICByZXR1cm4gISh1Lm5vZGUgJiYgdS5ub2RlLmlkIGluIG9ic3RhY2xlTG9va3VwXG4gICAgICAgICAgICAgICAgfHwgdi5ub2RlICYmIHYubm9kZS5pZCBpbiBvYnN0YWNsZUxvb2t1cCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNvdXJjZS5wb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHUgPSBzb3VyY2UucG9ydHNbMF0uaWQ7XG4gICAgICAgICAgICB2YXIgdiA9IHNvdXJjZS5wb3J0c1tpXS5pZDtcbiAgICAgICAgICAgIHRoaXMucGFzc2FibGVFZGdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB2LFxuICAgICAgICAgICAgICAgIGxlbmd0aDogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0YXJnZXQucG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB1ID0gdGFyZ2V0LnBvcnRzWzBdLmlkO1xuICAgICAgICAgICAgdmFyIHYgPSB0YXJnZXQucG9ydHNbaV0uaWQ7XG4gICAgICAgICAgICB0aGlzLnBhc3NhYmxlRWRnZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgc291cmNlOiB1LFxuICAgICAgICAgICAgICAgIHRhcmdldDogdixcbiAgICAgICAgICAgICAgICBsZW5ndGg6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBnZXRTb3VyY2UgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zb3VyY2U7IH0sIGdldFRhcmdldCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnRhcmdldDsgfSwgZ2V0TGVuZ3RoID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubGVuZ3RoOyB9O1xuICAgICAgICB2YXIgc2hvcnRlc3RQYXRoQ2FsY3VsYXRvciA9IG5ldyBzaG9ydGVzdHBhdGhzXzEuQ2FsY3VsYXRvcih0aGlzLnZlcnRzLmxlbmd0aCwgdGhpcy5wYXNzYWJsZUVkZ2VzLCBnZXRTb3VyY2UsIGdldFRhcmdldCwgZ2V0TGVuZ3RoKTtcbiAgICAgICAgdmFyIGJlbmRQZW5hbHR5ID0gZnVuY3Rpb24gKHUsIHYsIHcpIHtcbiAgICAgICAgICAgIHZhciBhID0gX3RoaXMudmVydHNbdV0sIGIgPSBfdGhpcy52ZXJ0c1t2XSwgYyA9IF90aGlzLnZlcnRzW3ddO1xuICAgICAgICAgICAgdmFyIGR4ID0gTWF0aC5hYnMoYy54IC0gYS54KSwgZHkgPSBNYXRoLmFicyhjLnkgLSBhLnkpO1xuICAgICAgICAgICAgaWYgKGEubm9kZSA9PT0gc291cmNlICYmIGEubm9kZSA9PT0gYi5ub2RlIHx8IGIubm9kZSA9PT0gdGFyZ2V0ICYmIGIubm9kZSA9PT0gYy5ub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgcmV0dXJuIGR4ID4gMSAmJiBkeSA+IDEgPyAxMDAwIDogMDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNob3J0ZXN0UGF0aCA9IHNob3J0ZXN0UGF0aENhbGN1bGF0b3IuUGF0aEZyb21Ob2RlVG9Ob2RlV2l0aFByZXZDb3N0KHNvdXJjZS5wb3J0c1swXS5pZCwgdGFyZ2V0LnBvcnRzWzBdLmlkLCBiZW5kUGVuYWx0eSk7XG4gICAgICAgIHZhciBwYXRoUG9pbnRzID0gc2hvcnRlc3RQYXRoLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24gKHZpKSB7IHJldHVybiBfdGhpcy52ZXJ0c1t2aV07IH0pO1xuICAgICAgICBwYXRoUG9pbnRzLnB1c2godGhpcy5ub2Rlc1t0YXJnZXQuaWRdLnBvcnRzWzBdKTtcbiAgICAgICAgcmV0dXJuIHBhdGhQb2ludHMuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gIShpIDwgcGF0aFBvaW50cy5sZW5ndGggLSAxICYmIHBhdGhQb2ludHNbaSArIDFdLm5vZGUgPT09IHNvdXJjZSAmJiB2Lm5vZGUgPT09IHNvdXJjZVxuICAgICAgICAgICAgICAgIHx8IGkgPiAwICYmIHYubm9kZSA9PT0gdGFyZ2V0ICYmIHBhdGhQb2ludHNbaSAtIDFdLm5vZGUgPT09IHRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgR3JpZFJvdXRlci5nZXRSb3V0ZVBhdGggPSBmdW5jdGlvbiAocm91dGUsIGNvcm5lcnJhZGl1cywgYXJyb3d3aWR0aCwgYXJyb3doZWlnaHQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHJvdXRlcGF0aDogJ00gJyArIHJvdXRlWzBdWzBdLnggKyAnICcgKyByb3V0ZVswXVswXS55ICsgJyAnLFxuICAgICAgICAgICAgYXJyb3dwYXRoOiAnJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAocm91dGUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBsaSA9IHJvdXRlW2ldO1xuICAgICAgICAgICAgICAgIHZhciB4ID0gbGlbMV0ueCwgeSA9IGxpWzFdLnk7XG4gICAgICAgICAgICAgICAgdmFyIGR4ID0geCAtIGxpWzBdLng7XG4gICAgICAgICAgICAgICAgdmFyIGR5ID0geSAtIGxpWzBdLnk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPCByb3V0ZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4IC09IGR4IC8gTWF0aC5hYnMoZHgpICogY29ybmVycmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeSAtPSBkeSAvIE1hdGguYWJzKGR5KSAqIGNvcm5lcnJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucm91dGVwYXRoICs9ICdMICcgKyB4ICsgJyAnICsgeSArICcgJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSByb3V0ZVtpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MCA9IGxbMF0ueCwgeTAgPSBsWzBdLnk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4MSA9IGxbMV0ueDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkxID0gbFsxXS55O1xuICAgICAgICAgICAgICAgICAgICBkeCA9IHgxIC0geDA7XG4gICAgICAgICAgICAgICAgICAgIGR5ID0geTEgLSB5MDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gR3JpZFJvdXRlci5hbmdsZUJldHdlZW4yTGluZXMobGksIGwpIDwgMCA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeDIsIHkyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHgpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIgPSB4MCArIGR4IC8gTWF0aC5hYnMoZHgpICogY29ybmVycmFkaXVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgeTIgPSB5MDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyID0geDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB5MiA9IHkwICsgZHkgLyBNYXRoLmFicyhkeSkgKiBjb3JuZXJyYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN4ID0gTWF0aC5hYnMoeDIgLSB4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN5ID0gTWF0aC5hYnMoeTIgLSB5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJvdXRlcGF0aCArPSAnQSAnICsgY3ggKyAnICcgKyBjeSArICcgMCAwICcgKyBhbmdsZSArICcgJyArIHgyICsgJyAnICsgeTIgKyAnICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyb3d0aXAgPSBbeCwgeV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnJvd2Nvcm5lcjEsIGFycm93Y29ybmVyMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGR4KSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggLT0gZHggLyBNYXRoLmFicyhkeCkgKiBhcnJvd2hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93Y29ybmVyMSA9IFt4LCB5ICsgYXJyb3d3aWR0aF07XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJvd2Nvcm5lcjIgPSBbeCwgeSAtIGFycm93d2lkdGhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeSAtPSBkeSAvIE1hdGguYWJzKGR5KSAqIGFycm93aGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3djb3JuZXIxID0gW3ggKyBhcnJvd3dpZHRoLCB5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93Y29ybmVyMiA9IFt4IC0gYXJyb3d3aWR0aCwgeV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJvdXRlcGF0aCArPSAnTCAnICsgeCArICcgJyArIHkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJvd2hlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcnJvd3BhdGggPSAnTSAnICsgYXJyb3d0aXBbMF0gKyAnICcgKyBhcnJvd3RpcFsxXSArICcgTCAnICsgYXJyb3djb3JuZXIxWzBdICsgJyAnICsgYXJyb3djb3JuZXIxWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnIEwgJyArIGFycm93Y29ybmVyMlswXSArICcgJyArIGFycm93Y29ybmVyMlsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsaSA9IHJvdXRlWzBdO1xuICAgICAgICAgICAgdmFyIHggPSBsaVsxXS54LCB5ID0gbGlbMV0ueTtcbiAgICAgICAgICAgIHZhciBkeCA9IHggLSBsaVswXS54O1xuICAgICAgICAgICAgdmFyIGR5ID0geSAtIGxpWzBdLnk7XG4gICAgICAgICAgICB2YXIgYXJyb3d0aXAgPSBbeCwgeV07XG4gICAgICAgICAgICB2YXIgYXJyb3djb3JuZXIxLCBhcnJvd2Nvcm5lcjI7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHgpID4gMCkge1xuICAgICAgICAgICAgICAgIHggLT0gZHggLyBNYXRoLmFicyhkeCkgKiBhcnJvd2hlaWdodDtcbiAgICAgICAgICAgICAgICBhcnJvd2Nvcm5lcjEgPSBbeCwgeSArIGFycm93d2lkdGhdO1xuICAgICAgICAgICAgICAgIGFycm93Y29ybmVyMiA9IFt4LCB5IC0gYXJyb3d3aWR0aF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5IC09IGR5IC8gTWF0aC5hYnMoZHkpICogYXJyb3doZWlnaHQ7XG4gICAgICAgICAgICAgICAgYXJyb3djb3JuZXIxID0gW3ggKyBhcnJvd3dpZHRoLCB5XTtcbiAgICAgICAgICAgICAgICBhcnJvd2Nvcm5lcjIgPSBbeCAtIGFycm93d2lkdGgsIHldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnJvdXRlcGF0aCArPSAnTCAnICsgeCArICcgJyArIHkgKyAnICc7XG4gICAgICAgICAgICBpZiAoYXJyb3doZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmFycm93cGF0aCA9ICdNICcgKyBhcnJvd3RpcFswXSArICcgJyArIGFycm93dGlwWzFdICsgJyBMICcgKyBhcnJvd2Nvcm5lcjFbMF0gKyAnICcgKyBhcnJvd2Nvcm5lcjFbMV1cbiAgICAgICAgICAgICAgICAgICAgKyAnIEwgJyArIGFycm93Y29ybmVyMlswXSArICcgJyArIGFycm93Y29ybmVyMlsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIEdyaWRSb3V0ZXI7XG59KCkpO1xuZXhwb3J0cy5HcmlkUm91dGVyID0gR3JpZFJvdXRlcjtcblxufSx7XCIuL3JlY3RhbmdsZVwiOjE3LFwiLi9zaG9ydGVzdHBhdGhzXCI6MTgsXCIuL3Zwc2NcIjoxOX1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHBhY2tpbmdPcHRpb25zID0ge1xuICAgIFBBRERJTkc6IDEwLFxuICAgIEdPTERFTl9TRUNUSU9OOiAoMSArIE1hdGguc3FydCg1KSkgLyAyLFxuICAgIEZMT0FUX0VQU0lMT046IDAuMDAwMSxcbiAgICBNQVhfSU5FUkFUSU9OUzogMTAwXG59O1xuZnVuY3Rpb24gYXBwbHlQYWNraW5nKGdyYXBocywgdywgaCwgbm9kZV9zaXplLCBkZXNpcmVkX3JhdGlvLCBjZW50ZXJHcmFwaCkge1xuICAgIGlmIChkZXNpcmVkX3JhdGlvID09PSB2b2lkIDApIHsgZGVzaXJlZF9yYXRpbyA9IDE7IH1cbiAgICBpZiAoY2VudGVyR3JhcGggPT09IHZvaWQgMCkgeyBjZW50ZXJHcmFwaCA9IHRydWU7IH1cbiAgICB2YXIgaW5pdF94ID0gMCwgaW5pdF95ID0gMCwgc3ZnX3dpZHRoID0gdywgc3ZnX2hlaWdodCA9IGgsIGRlc2lyZWRfcmF0aW8gPSB0eXBlb2YgZGVzaXJlZF9yYXRpbyAhPT0gJ3VuZGVmaW5lZCcgPyBkZXNpcmVkX3JhdGlvIDogMSwgbm9kZV9zaXplID0gdHlwZW9mIG5vZGVfc2l6ZSAhPT0gJ3VuZGVmaW5lZCcgPyBub2RlX3NpemUgOiAwLCByZWFsX3dpZHRoID0gMCwgcmVhbF9oZWlnaHQgPSAwLCBtaW5fd2lkdGggPSAwLCBnbG9iYWxfYm90dG9tID0gMCwgbGluZSA9IFtdO1xuICAgIGlmIChncmFwaHMubGVuZ3RoID09IDApXG4gICAgICAgIHJldHVybjtcbiAgICBjYWxjdWxhdGVfYmIoZ3JhcGhzKTtcbiAgICBhcHBseShncmFwaHMsIGRlc2lyZWRfcmF0aW8pO1xuICAgIGlmIChjZW50ZXJHcmFwaCkge1xuICAgICAgICBwdXRfbm9kZXNfdG9fcmlnaHRfcG9zaXRpb25zKGdyYXBocyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZV9iYihncmFwaHMpIHtcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGcpIHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZV9zaW5nbGVfYmIoZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVfc2luZ2xlX2JiKGdyYXBoKSB7XG4gICAgICAgICAgICB2YXIgbWluX3ggPSBOdW1iZXIuTUFYX1ZBTFVFLCBtaW5feSA9IE51bWJlci5NQVhfVkFMVUUsIG1heF94ID0gMCwgbWF4X3kgPSAwO1xuICAgICAgICAgICAgZ3JhcGguYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gdHlwZW9mIHYud2lkdGggIT09ICd1bmRlZmluZWQnID8gdi53aWR0aCA6IG5vZGVfc2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IHR5cGVvZiB2LmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgPyB2LmhlaWdodCA6IG5vZGVfc2l6ZTtcbiAgICAgICAgICAgICAgICB3IC89IDI7XG4gICAgICAgICAgICAgICAgaCAvPSAyO1xuICAgICAgICAgICAgICAgIG1heF94ID0gTWF0aC5tYXgodi54ICsgdywgbWF4X3gpO1xuICAgICAgICAgICAgICAgIG1pbl94ID0gTWF0aC5taW4odi54IC0gdywgbWluX3gpO1xuICAgICAgICAgICAgICAgIG1heF95ID0gTWF0aC5tYXgodi55ICsgaCwgbWF4X3kpO1xuICAgICAgICAgICAgICAgIG1pbl95ID0gTWF0aC5taW4odi55IC0gaCwgbWluX3kpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBncmFwaC53aWR0aCA9IG1heF94IC0gbWluX3g7XG4gICAgICAgICAgICBncmFwaC5oZWlnaHQgPSBtYXhfeSAtIG1pbl95O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHB1dF9ub2Rlc190b19yaWdodF9wb3NpdGlvbnMoZ3JhcGhzKSB7XG4gICAgICAgIGdyYXBocy5mb3JFYWNoKGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICB2YXIgY2VudGVyID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgICAgICBnLmFycmF5LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjZW50ZXIueCArPSBub2RlLng7XG4gICAgICAgICAgICAgICAgY2VudGVyLnkgKz0gbm9kZS55O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjZW50ZXIueCAvPSBnLmFycmF5Lmxlbmd0aDtcbiAgICAgICAgICAgIGNlbnRlci55IC89IGcuYXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNvcm5lciA9IHsgeDogY2VudGVyLnggLSBnLndpZHRoIC8gMiwgeTogY2VudGVyLnkgLSBnLmhlaWdodCAvIDIgfTtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB7IHg6IGcueCAtIGNvcm5lci54ICsgc3ZnX3dpZHRoIC8gMiAtIHJlYWxfd2lkdGggLyAyLCB5OiBnLnkgLSBjb3JuZXIueSArIHN2Z19oZWlnaHQgLyAyIC0gcmVhbF9oZWlnaHQgLyAyIH07XG4gICAgICAgICAgICBnLmFycmF5LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnggKz0gb2Zmc2V0Lng7XG4gICAgICAgICAgICAgICAgbm9kZS55ICs9IG9mZnNldC55O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseShkYXRhLCBkZXNpcmVkX3JhdGlvKSB7XG4gICAgICAgIHZhciBjdXJyX2Jlc3RfZiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgdmFyIGN1cnJfYmVzdCA9IDA7XG4gICAgICAgIGRhdGEuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYi5oZWlnaHQgLSBhLmhlaWdodDsgfSk7XG4gICAgICAgIG1pbl93aWR0aCA9IGRhdGEucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS53aWR0aCA8IGIud2lkdGggPyBhLndpZHRoIDogYi53aWR0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBsZWZ0ID0geDEgPSBtaW5fd2lkdGg7XG4gICAgICAgIHZhciByaWdodCA9IHgyID0gZ2V0X2VudGlyZV93aWR0aChkYXRhKTtcbiAgICAgICAgdmFyIGl0ZXJhdGlvbkNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgZl94MSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICAgIHZhciBmX3gyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdmFyIGZsYWcgPSAtMTtcbiAgICAgICAgdmFyIGR4ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgdmFyIGRmID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgd2hpbGUgKChkeCA+IG1pbl93aWR0aCkgfHwgZGYgPiBwYWNraW5nT3B0aW9ucy5GTE9BVF9FUFNJTE9OKSB7XG4gICAgICAgICAgICBpZiAoZmxhZyAhPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIHgxID0gcmlnaHQgLSAocmlnaHQgLSBsZWZ0KSAvIHBhY2tpbmdPcHRpb25zLkdPTERFTl9TRUNUSU9OO1xuICAgICAgICAgICAgICAgIHZhciBmX3gxID0gc3RlcChkYXRhLCB4MSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZyAhPSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHgyID0gbGVmdCArIChyaWdodCAtIGxlZnQpIC8gcGFja2luZ09wdGlvbnMuR09MREVOX1NFQ1RJT047XG4gICAgICAgICAgICAgICAgdmFyIGZfeDIgPSBzdGVwKGRhdGEsIHgyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGR4ID0gTWF0aC5hYnMoeDEgLSB4Mik7XG4gICAgICAgICAgICBkZiA9IE1hdGguYWJzKGZfeDEgLSBmX3gyKTtcbiAgICAgICAgICAgIGlmIChmX3gxIDwgY3Vycl9iZXN0X2YpIHtcbiAgICAgICAgICAgICAgICBjdXJyX2Jlc3RfZiA9IGZfeDE7XG4gICAgICAgICAgICAgICAgY3Vycl9iZXN0ID0geDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZl94MiA8IGN1cnJfYmVzdF9mKSB7XG4gICAgICAgICAgICAgICAgY3Vycl9iZXN0X2YgPSBmX3gyO1xuICAgICAgICAgICAgICAgIGN1cnJfYmVzdCA9IHgyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZfeDEgPiBmX3gyKSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IHgxO1xuICAgICAgICAgICAgICAgIHgxID0geDI7XG4gICAgICAgICAgICAgICAgZl94MSA9IGZfeDI7XG4gICAgICAgICAgICAgICAgZmxhZyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByaWdodCA9IHgyO1xuICAgICAgICAgICAgICAgIHgyID0geDE7XG4gICAgICAgICAgICAgICAgZl94MiA9IGZfeDE7XG4gICAgICAgICAgICAgICAgZmxhZyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlcmF0aW9uQ291bnRlcisrID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RlcChkYXRhLCBjdXJyX2Jlc3QpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGVwKGRhdGEsIG1heF93aWR0aCkge1xuICAgICAgICBsaW5lID0gW107XG4gICAgICAgIHJlYWxfd2lkdGggPSAwO1xuICAgICAgICByZWFsX2hlaWdodCA9IDA7XG4gICAgICAgIGdsb2JhbF9ib3R0b20gPSBpbml0X3k7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG8gPSBkYXRhW2ldO1xuICAgICAgICAgICAgcHV0X3JlY3QobywgbWF4X3dpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoZ2V0X3JlYWxfcmF0aW8oKSAtIGRlc2lyZWRfcmF0aW8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdXRfcmVjdChyZWN0LCBtYXhfd2lkdGgpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGxpbmVbaV0uc3BhY2VfbGVmdCA+PSByZWN0LmhlaWdodCkgJiYgKGxpbmVbaV0ueCArIGxpbmVbaV0ud2lkdGggKyByZWN0LndpZHRoICsgcGFja2luZ09wdGlvbnMuUEFERElORyAtIG1heF93aWR0aCkgPD0gcGFja2luZ09wdGlvbnMuRkxPQVRfRVBTSUxPTikge1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IGxpbmVbaV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGluZS5wdXNoKHJlY3QpO1xuICAgICAgICBpZiAocGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlY3QueCA9IHBhcmVudC54ICsgcGFyZW50LndpZHRoICsgcGFja2luZ09wdGlvbnMuUEFERElORztcbiAgICAgICAgICAgIHJlY3QueSA9IHBhcmVudC5ib3R0b207XG4gICAgICAgICAgICByZWN0LnNwYWNlX2xlZnQgPSByZWN0LmhlaWdodDtcbiAgICAgICAgICAgIHJlY3QuYm90dG9tID0gcmVjdC55O1xuICAgICAgICAgICAgcGFyZW50LnNwYWNlX2xlZnQgLT0gcmVjdC5oZWlnaHQgKyBwYWNraW5nT3B0aW9ucy5QQURESU5HO1xuICAgICAgICAgICAgcGFyZW50LmJvdHRvbSArPSByZWN0LmhlaWdodCArIHBhY2tpbmdPcHRpb25zLlBBRERJTkc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWN0LnkgPSBnbG9iYWxfYm90dG9tO1xuICAgICAgICAgICAgZ2xvYmFsX2JvdHRvbSArPSByZWN0LmhlaWdodCArIHBhY2tpbmdPcHRpb25zLlBBRERJTkc7XG4gICAgICAgICAgICByZWN0LnggPSBpbml0X3g7XG4gICAgICAgICAgICByZWN0LmJvdHRvbSA9IHJlY3QueTtcbiAgICAgICAgICAgIHJlY3Quc3BhY2VfbGVmdCA9IHJlY3QuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWN0LnkgKyByZWN0LmhlaWdodCAtIHJlYWxfaGVpZ2h0ID4gLXBhY2tpbmdPcHRpb25zLkZMT0FUX0VQU0lMT04pXG4gICAgICAgICAgICByZWFsX2hlaWdodCA9IHJlY3QueSArIHJlY3QuaGVpZ2h0IC0gaW5pdF95O1xuICAgICAgICBpZiAocmVjdC54ICsgcmVjdC53aWR0aCAtIHJlYWxfd2lkdGggPiAtcGFja2luZ09wdGlvbnMuRkxPQVRfRVBTSUxPTilcbiAgICAgICAgICAgIHJlYWxfd2lkdGggPSByZWN0LnggKyByZWN0LndpZHRoIC0gaW5pdF94O1xuICAgIH1cbiAgICA7XG4gICAgZnVuY3Rpb24gZ2V0X2VudGlyZV93aWR0aChkYXRhKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gd2lkdGggKz0gZC53aWR0aCArIHBhY2tpbmdPcHRpb25zLlBBRERJTkc7IH0pO1xuICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldF9yZWFsX3JhdGlvKCkge1xuICAgICAgICByZXR1cm4gKHJlYWxfd2lkdGggLyByZWFsX2hlaWdodCk7XG4gICAgfVxufVxuZXhwb3J0cy5hcHBseVBhY2tpbmcgPSBhcHBseVBhY2tpbmc7XG5mdW5jdGlvbiBzZXBhcmF0ZUdyYXBocyhub2RlcywgbGlua3MpIHtcbiAgICB2YXIgbWFya3MgPSB7fTtcbiAgICB2YXIgd2F5cyA9IHt9O1xuICAgIHZhciBncmFwaHMgPSBbXTtcbiAgICB2YXIgY2x1c3RlcnMgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxpbmsgPSBsaW5rc1tpXTtcbiAgICAgICAgdmFyIG4xID0gbGluay5zb3VyY2U7XG4gICAgICAgIHZhciBuMiA9IGxpbmsudGFyZ2V0O1xuICAgICAgICBpZiAod2F5c1tuMS5pbmRleF0pXG4gICAgICAgICAgICB3YXlzW24xLmluZGV4XS5wdXNoKG4yKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgd2F5c1tuMS5pbmRleF0gPSBbbjJdO1xuICAgICAgICBpZiAod2F5c1tuMi5pbmRleF0pXG4gICAgICAgICAgICB3YXlzW24yLmluZGV4XS5wdXNoKG4xKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgd2F5c1tuMi5pbmRleF0gPSBbbjFdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChtYXJrc1tub2RlLmluZGV4XSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBleHBsb3JlX25vZGUobm9kZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4cGxvcmVfbm9kZShuLCBpc19uZXcpIHtcbiAgICAgICAgaWYgKG1hcmtzW24uaW5kZXhdICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpc19uZXcpIHtcbiAgICAgICAgICAgIGNsdXN0ZXJzKys7XG4gICAgICAgICAgICBncmFwaHMucHVzaCh7IGFycmF5OiBbXSB9KTtcbiAgICAgICAgfVxuICAgICAgICBtYXJrc1tuLmluZGV4XSA9IGNsdXN0ZXJzO1xuICAgICAgICBncmFwaHNbY2x1c3RlcnMgLSAxXS5hcnJheS5wdXNoKG4pO1xuICAgICAgICB2YXIgYWRqYWNlbnQgPSB3YXlzW24uaW5kZXhdO1xuICAgICAgICBpZiAoIWFkamFjZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFkamFjZW50Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBleHBsb3JlX25vZGUoYWRqYWNlbnRbal0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ3JhcGhzO1xufVxuZXhwb3J0cy5zZXBhcmF0ZUdyYXBocyA9IHNlcGFyYXRlR3JhcGhzO1xuXG59LHt9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBwb3dlcmdyYXBoID0gcmVxdWlyZShcIi4vcG93ZXJncmFwaFwiKTtcbnZhciBsaW5rbGVuZ3Roc18xID0gcmVxdWlyZShcIi4vbGlua2xlbmd0aHNcIik7XG52YXIgZGVzY2VudF8xID0gcmVxdWlyZShcIi4vZGVzY2VudFwiKTtcbnZhciByZWN0YW5nbGVfMSA9IHJlcXVpcmUoXCIuL3JlY3RhbmdsZVwiKTtcbnZhciBzaG9ydGVzdHBhdGhzXzEgPSByZXF1aXJlKFwiLi9zaG9ydGVzdHBhdGhzXCIpO1xudmFyIGdlb21fMSA9IHJlcXVpcmUoXCIuL2dlb21cIik7XG52YXIgaGFuZGxlZGlzY29ubmVjdGVkXzEgPSByZXF1aXJlKFwiLi9oYW5kbGVkaXNjb25uZWN0ZWRcIik7XG52YXIgRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChFdmVudFR5cGUpIHtcbiAgICBFdmVudFR5cGVbRXZlbnRUeXBlW1wic3RhcnRcIl0gPSAwXSA9IFwic3RhcnRcIjtcbiAgICBFdmVudFR5cGVbRXZlbnRUeXBlW1widGlja1wiXSA9IDFdID0gXCJ0aWNrXCI7XG4gICAgRXZlbnRUeXBlW0V2ZW50VHlwZVtcImVuZFwiXSA9IDJdID0gXCJlbmRcIjtcbn0pKEV2ZW50VHlwZSA9IGV4cG9ydHMuRXZlbnRUeXBlIHx8IChleHBvcnRzLkV2ZW50VHlwZSA9IHt9KSk7XG47XG5mdW5jdGlvbiBpc0dyb3VwKGcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGcubGVhdmVzICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZy5ncm91cHMgIT09ICd1bmRlZmluZWQnO1xufVxudmFyIExheW91dCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGF5b3V0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jYW52YXNTaXplID0gWzEsIDFdO1xuICAgICAgICB0aGlzLl9saW5rRGlzdGFuY2UgPSAyMDtcbiAgICAgICAgdGhpcy5fZGVmYXVsdE5vZGVTaXplID0gMTA7XG4gICAgICAgIHRoaXMuX2xpbmtMZW5ndGhDYWxjdWxhdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGlua1R5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9hdm9pZE92ZXJsYXBzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fZ3JvdXBzID0gW107XG4gICAgICAgIHRoaXMuX3Jvb3RHcm91cCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xpbmtzID0gW107XG4gICAgICAgIHRoaXMuX2NvbnN0cmFpbnRzID0gW107XG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlTWF0cml4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGVzY2VudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RpcmVjdGVkTGlua0NvbnN0cmFpbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGhyZXNob2xkID0gMC4wMTtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eUdyYXBoID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ3JvdXBDb21wYWN0bmVzcyA9IDFlLTY7XG4gICAgICAgIHRoaXMuZXZlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmxpbmtBY2Nlc3NvciA9IHtcbiAgICAgICAgICAgIGdldFNvdXJjZUluZGV4OiBMYXlvdXQuZ2V0U291cmNlSW5kZXgsXG4gICAgICAgICAgICBnZXRUYXJnZXRJbmRleDogTGF5b3V0LmdldFRhcmdldEluZGV4LFxuICAgICAgICAgICAgc2V0TGVuZ3RoOiBMYXlvdXQuc2V0TGlua0xlbmd0aCxcbiAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uIChsKSB7IHJldHVybiB0eXBlb2YgX3RoaXMuX2xpbmtUeXBlID09PSBcImZ1bmN0aW9uXCIgPyBfdGhpcy5fbGlua1R5cGUobCkgOiAwOyB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIExheW91dC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50KVxuICAgICAgICAgICAgdGhpcy5ldmVudCA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50W0V2ZW50VHlwZVtlXV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRbZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50ICYmIHR5cGVvZiB0aGlzLmV2ZW50W2UudHlwZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50W2UudHlwZV0oZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUua2ljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKCF0aGlzLnRpY2soKSlcbiAgICAgICAgICAgIDtcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FscGhhIDwgdGhpcy5fdGhyZXNob2xkKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoeyB0eXBlOiBFdmVudFR5cGUuZW5kLCBhbHBoYTogdGhpcy5fYWxwaGEgPSAwLCBzdHJlc3M6IHRoaXMuX2xhc3RTdHJlc3MgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IHRoaXMuX25vZGVzLmxlbmd0aCwgbSA9IHRoaXMuX2xpbmtzLmxlbmd0aDtcbiAgICAgICAgdmFyIG8sIGk7XG4gICAgICAgIHRoaXMuX2Rlc2NlbnQubG9ja3MuY2xlYXIoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgbyA9IHRoaXMuX25vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG8uZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG8ucHggPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBvLnB5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBvLnB4ID0gby54O1xuICAgICAgICAgICAgICAgICAgICBvLnB5ID0gby55O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcCA9IFtvLnB4LCBvLnB5XTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXNjZW50LmxvY2tzLmFkZChpLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgczEgPSB0aGlzLl9kZXNjZW50LnJ1bmdlS3V0dGEoKTtcbiAgICAgICAgaWYgKHMxID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9hbHBoYSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuX2xhc3RTdHJlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9hbHBoYSA9IHMxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RTdHJlc3MgPSBzMTtcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlUG9zaXRpb25zKCk7XG4gICAgICAgIHRoaXMudHJpZ2dlcih7IHR5cGU6IEV2ZW50VHlwZS50aWNrLCBhbHBoYTogdGhpcy5fYWxwaGEsIHN0cmVzczogdGhpcy5fbGFzdFN0cmVzcyB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS51cGRhdGVOb2RlUG9zaXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeCA9IHRoaXMuX2Rlc2NlbnQueFswXSwgeSA9IHRoaXMuX2Rlc2NlbnQueFsxXTtcbiAgICAgICAgdmFyIG8sIGkgPSB0aGlzLl9ub2Rlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIG8gPSB0aGlzLl9ub2Rlc1tpXTtcbiAgICAgICAgICAgIG8ueCA9IHhbaV07XG4gICAgICAgICAgICBvLnkgPSB5W2ldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLm5vZGVzID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKCF2KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbm9kZXMubGVuZ3RoID09PSAwICYmIHRoaXMuX2xpbmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlua3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgICAgICBuID0gTWF0aC5tYXgobiwgbC5zb3VyY2UsIGwudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2RlcyA9IG5ldyBBcnJheSgrK24pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25vZGVzW2ldID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vZGVzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmdyb3VwcyA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICgheClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ncm91cHM7XG4gICAgICAgIHRoaXMuX2dyb3VwcyA9IHg7XG4gICAgICAgIHRoaXMuX3Jvb3RHcm91cCA9IHt9O1xuICAgICAgICB0aGlzLl9ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBnLnBhZGRpbmcgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgZy5wYWRkaW5nID0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZy5sZWF2ZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBnLmxlYXZlcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAoZy5sZWF2ZXNbaV0gPSBfdGhpcy5fbm9kZXNbdl0pLnBhcmVudCA9IGc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGcuZ3JvdXBzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgZy5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ2ksIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAoZy5ncm91cHNbaV0gPSBfdGhpcy5fZ3JvdXBzW2dpXSkucGFyZW50ID0gZztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3Jvb3RHcm91cC5sZWF2ZXMgPSB0aGlzLl9ub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHR5cGVvZiB2LnBhcmVudCA9PT0gJ3VuZGVmaW5lZCc7IH0pO1xuICAgICAgICB0aGlzLl9yb290R3JvdXAuZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLmZpbHRlcihmdW5jdGlvbiAoZykgeyByZXR1cm4gdHlwZW9mIGcucGFyZW50ID09PSAndW5kZWZpbmVkJzsgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5wb3dlckdyYXBoR3JvdXBzID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdmFyIGcgPSBwb3dlcmdyYXBoLmdldEdyb3Vwcyh0aGlzLl9ub2RlcywgdGhpcy5fbGlua3MsIHRoaXMubGlua0FjY2Vzc29yLCB0aGlzLl9yb290R3JvdXApO1xuICAgICAgICB0aGlzLmdyb3VwcyhnLmdyb3Vwcyk7XG4gICAgICAgIGYoZyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5hdm9pZE92ZXJsYXBzID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F2b2lkT3ZlcmxhcHM7XG4gICAgICAgIHRoaXMuX2F2b2lkT3ZlcmxhcHMgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuaGFuZGxlRGlzY29ubmVjdGVkID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3RlZDtcbiAgICAgICAgdGhpcy5faGFuZGxlRGlzY29ubmVjdGVkID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmZsb3dMYXlvdXQgPSBmdW5jdGlvbiAoYXhpcywgbWluU2VwYXJhdGlvbikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICBheGlzID0gJ3knO1xuICAgICAgICB0aGlzLl9kaXJlY3RlZExpbmtDb25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgICAgICBnZXRNaW5TZXBhcmF0aW9uOiB0eXBlb2YgbWluU2VwYXJhdGlvbiA9PT0gJ251bWJlcicgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBtaW5TZXBhcmF0aW9uOyB9IDogbWluU2VwYXJhdGlvblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUubGlua3MgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlua3M7XG4gICAgICAgIHRoaXMuX2xpbmtzID0geDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cmFpbnRzO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW50cyA9IGM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5kaXN0YW5jZU1hdHJpeCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXN0YW5jZU1hdHJpeDtcbiAgICAgICAgdGhpcy5fZGlzdGFuY2VNYXRyaXggPSBkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICgheClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYW52YXNTaXplO1xuICAgICAgICB0aGlzLl9jYW52YXNTaXplID0geDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmRlZmF1bHROb2RlU2l6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmICgheClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0Tm9kZVNpemU7XG4gICAgICAgIHRoaXMuX2RlZmF1bHROb2RlU2l6ZSA9IHg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5ncm91cENvbXBhY3RuZXNzID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCF4KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwQ29tcGFjdG5lc3M7XG4gICAgICAgIHRoaXMuX2dyb3VwQ29tcGFjdG5lc3MgPSB4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUubGlua0Rpc3RhbmNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKCF4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlua0Rpc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpbmtEaXN0YW5jZSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogK3g7XG4gICAgICAgIHRoaXMuX2xpbmtMZW5ndGhDYWxjdWxhdG9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmxpbmtUeXBlID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdGhpcy5fbGlua1R5cGUgPSBmO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuY29udmVyZ2VuY2VUaHJlc2hvbGQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoIXgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGhyZXNob2xkO1xuICAgICAgICB0aGlzLl90aHJlc2hvbGQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6ICt4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuYWxwaGEgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWxwaGE7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeCA9ICt4O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2FscGhhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHggPiAwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbHBoYSA9IHg7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbHBoYSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh4ID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKHsgdHlwZTogRXZlbnRUeXBlLnN0YXJ0LCBhbHBoYTogdGhpcy5fYWxwaGEgPSB4IH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5nZXRMaW5rTGVuZ3RoID0gZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9saW5rRGlzdGFuY2UgPT09IFwiZnVuY3Rpb25cIiA/ICsodGhpcy5fbGlua0Rpc3RhbmNlKGxpbmspKSA6IHRoaXMuX2xpbmtEaXN0YW5jZTtcbiAgICB9O1xuICAgIExheW91dC5zZXRMaW5rTGVuZ3RoID0gZnVuY3Rpb24gKGxpbmssIGxlbmd0aCkge1xuICAgICAgICBsaW5rLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuZ2V0TGlua1R5cGUgPSBmdW5jdGlvbiAobGluaykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2xpbmtUeXBlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLl9saW5rVHlwZShsaW5rKSA6IDA7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLnN5bW1ldHJpY0RpZmZMaW5rTGVuZ3RocyA9IGZ1bmN0aW9uIChpZGVhbExlbmd0aCwgdykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodyA9PT0gdm9pZCAwKSB7IHcgPSAxOyB9XG4gICAgICAgIHRoaXMubGlua0Rpc3RhbmNlKGZ1bmN0aW9uIChsKSB7IHJldHVybiBpZGVhbExlbmd0aCAqIGwubGVuZ3RoOyB9KTtcbiAgICAgICAgdGhpcy5fbGlua0xlbmd0aENhbGN1bGF0b3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBsaW5rbGVuZ3Roc18xLnN5bW1ldHJpY0RpZmZMaW5rTGVuZ3RocyhfdGhpcy5fbGlua3MsIF90aGlzLmxpbmtBY2Nlc3Nvciwgdyk7IH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5qYWNjYXJkTGlua0xlbmd0aHMgPSBmdW5jdGlvbiAoaWRlYWxMZW5ndGgsIHcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHcgPT09IHZvaWQgMCkgeyB3ID0gMTsgfVxuICAgICAgICB0aGlzLmxpbmtEaXN0YW5jZShmdW5jdGlvbiAobCkgeyByZXR1cm4gaWRlYWxMZW5ndGggKiBsLmxlbmd0aDsgfSk7XG4gICAgICAgIHRoaXMuX2xpbmtMZW5ndGhDYWxjdWxhdG9yID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlua2xlbmd0aHNfMS5qYWNjYXJkTGlua0xlbmd0aHMoX3RoaXMuX2xpbmtzLCBfdGhpcy5saW5rQWNjZXNzb3IsIHcpOyB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoaW5pdGlhbFVuY29uc3RyYWluZWRJdGVyYXRpb25zLCBpbml0aWFsVXNlckNvbnN0cmFpbnRJdGVyYXRpb25zLCBpbml0aWFsQWxsQ29uc3RyYWludHNJdGVyYXRpb25zLCBncmlkU25hcEl0ZXJhdGlvbnMsIGtlZXBSdW5uaW5nLCBjZW50ZXJHcmFwaCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoaW5pdGlhbFVuY29uc3RyYWluZWRJdGVyYXRpb25zID09PSB2b2lkIDApIHsgaW5pdGlhbFVuY29uc3RyYWluZWRJdGVyYXRpb25zID0gMDsgfVxuICAgICAgICBpZiAoaW5pdGlhbFVzZXJDb25zdHJhaW50SXRlcmF0aW9ucyA9PT0gdm9pZCAwKSB7IGluaXRpYWxVc2VyQ29uc3RyYWludEl0ZXJhdGlvbnMgPSAwOyB9XG4gICAgICAgIGlmIChpbml0aWFsQWxsQ29uc3RyYWludHNJdGVyYXRpb25zID09PSB2b2lkIDApIHsgaW5pdGlhbEFsbENvbnN0cmFpbnRzSXRlcmF0aW9ucyA9IDA7IH1cbiAgICAgICAgaWYgKGdyaWRTbmFwSXRlcmF0aW9ucyA9PT0gdm9pZCAwKSB7IGdyaWRTbmFwSXRlcmF0aW9ucyA9IDA7IH1cbiAgICAgICAgaWYgKGtlZXBSdW5uaW5nID09PSB2b2lkIDApIHsga2VlcFJ1bm5pbmcgPSB0cnVlOyB9XG4gICAgICAgIGlmIChjZW50ZXJHcmFwaCA9PT0gdm9pZCAwKSB7IGNlbnRlckdyYXBoID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgaSwgaiwgbiA9IHRoaXMubm9kZXMoKS5sZW5ndGgsIE4gPSBuICsgMiAqIHRoaXMuX2dyb3Vwcy5sZW5ndGgsIG0gPSB0aGlzLl9saW5rcy5sZW5ndGgsIHcgPSB0aGlzLl9jYW52YXNTaXplWzBdLCBoID0gdGhpcy5fY2FudmFzU2l6ZVsxXTtcbiAgICAgICAgdmFyIHggPSBuZXcgQXJyYXkoTiksIHkgPSBuZXcgQXJyYXkoTik7XG4gICAgICAgIHZhciBHID0gbnVsbDtcbiAgICAgICAgdmFyIGFvID0gdGhpcy5fYXZvaWRPdmVybGFwcztcbiAgICAgICAgdGhpcy5fbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgdi5pbmRleCA9IGk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHYueCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB2LnggPSB3IC8gMiwgdi55ID0gaCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4W2ldID0gdi54LCB5W2ldID0gdi55O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmtMZW5ndGhDYWxjdWxhdG9yKVxuICAgICAgICAgICAgdGhpcy5fbGlua0xlbmd0aENhbGN1bGF0b3IoKTtcbiAgICAgICAgdmFyIGRpc3RhbmNlcztcbiAgICAgICAgaWYgKHRoaXMuX2Rpc3RhbmNlTWF0cml4KSB7XG4gICAgICAgICAgICBkaXN0YW5jZXMgPSB0aGlzLl9kaXN0YW5jZU1hdHJpeDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpc3RhbmNlcyA9IChuZXcgc2hvcnRlc3RwYXRoc18xLkNhbGN1bGF0b3IoTiwgdGhpcy5fbGlua3MsIExheW91dC5nZXRTb3VyY2VJbmRleCwgTGF5b3V0LmdldFRhcmdldEluZGV4LCBmdW5jdGlvbiAobCkgeyByZXR1cm4gX3RoaXMuZ2V0TGlua0xlbmd0aChsKTsgfSkpLkRpc3RhbmNlTWF0cml4KCk7XG4gICAgICAgICAgICBHID0gZGVzY2VudF8xLkRlc2NlbnQuY3JlYXRlU3F1YXJlTWF0cml4KE4sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIDI7IH0pO1xuICAgICAgICAgICAgdGhpcy5fbGlua3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC5zb3VyY2UgPT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbC5zb3VyY2UgPSBfdGhpcy5fbm9kZXNbbC5zb3VyY2VdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbC50YXJnZXQgPT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbC50YXJnZXQgPSBfdGhpcy5fbm9kZXNbbC50YXJnZXRdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHUgPSBMYXlvdXQuZ2V0U291cmNlSW5kZXgoZSksIHYgPSBMYXlvdXQuZ2V0VGFyZ2V0SW5kZXgoZSk7XG4gICAgICAgICAgICAgICAgR1t1XVt2XSA9IEdbdl1bdV0gPSBlLndlaWdodCB8fCAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEQgPSBkZXNjZW50XzEuRGVzY2VudC5jcmVhdGVTcXVhcmVNYXRyaXgoTiwgZnVuY3Rpb24gKGksIGopIHtcbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZXNbaV1bal07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5fcm9vdEdyb3VwICYmIHR5cGVvZiB0aGlzLl9yb290R3JvdXAuZ3JvdXBzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGkgPSBuO1xuICAgICAgICAgICAgdmFyIGFkZEF0dHJhY3Rpb24gPSBmdW5jdGlvbiAoaSwgaiwgc3RyZW5ndGgsIGlkZWFsRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBHW2ldW2pdID0gR1tqXVtpXSA9IHN0cmVuZ3RoO1xuICAgICAgICAgICAgICAgIERbaV1bal0gPSBEW2pdW2ldID0gaWRlYWxEaXN0YW5jZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZykge1xuICAgICAgICAgICAgICAgIGFkZEF0dHJhY3Rpb24oaSwgaSArIDEsIF90aGlzLl9ncm91cENvbXBhY3RuZXNzLCAwLjEpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZy5ib3VuZHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHhbaV0gPSB3IC8gMiwgeVtpKytdID0gaCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHhbaV0gPSB3IC8gMiwgeVtpKytdID0gaCAvIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4W2ldID0gZy5ib3VuZHMueCwgeVtpKytdID0gZy5ib3VuZHMueTtcbiAgICAgICAgICAgICAgICAgICAgeFtpXSA9IGcuYm91bmRzLlgsIHlbaSsrXSA9IGcuYm91bmRzLlk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fcm9vdEdyb3VwID0geyBsZWF2ZXM6IHRoaXMuX25vZGVzLCBncm91cHM6IFtdIH07XG4gICAgICAgIHZhciBjdXJDb25zdHJhaW50cyA9IHRoaXMuX2NvbnN0cmFpbnRzIHx8IFtdO1xuICAgICAgICBpZiAodGhpcy5fZGlyZWN0ZWRMaW5rQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHRoaXMubGlua0FjY2Vzc29yLmdldE1pblNlcGFyYXRpb24gPSB0aGlzLl9kaXJlY3RlZExpbmtDb25zdHJhaW50cy5nZXRNaW5TZXBhcmF0aW9uO1xuICAgICAgICAgICAgY3VyQ29uc3RyYWludHMgPSBjdXJDb25zdHJhaW50cy5jb25jYXQobGlua2xlbmd0aHNfMS5nZW5lcmF0ZURpcmVjdGVkRWRnZUNvbnN0cmFpbnRzKG4sIHRoaXMuX2xpbmtzLCB0aGlzLl9kaXJlY3RlZExpbmtDb25zdHJhaW50cy5heGlzLCAodGhpcy5saW5rQWNjZXNzb3IpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdm9pZE92ZXJsYXBzKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fZGVzY2VudCA9IG5ldyBkZXNjZW50XzEuRGVzY2VudChbeCwgeV0sIEQpO1xuICAgICAgICB0aGlzLl9kZXNjZW50LmxvY2tzLmNsZWFyKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMuX25vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG8uZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBvLnB4ID0gby54O1xuICAgICAgICAgICAgICAgIG8ucHkgPSBvLnk7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBbby54LCBvLnldO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2NlbnQubG9ja3MuYWRkKGksIHApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rlc2NlbnQudGhyZXNob2xkID0gdGhpcy5fdGhyZXNob2xkO1xuICAgICAgICB0aGlzLmluaXRpYWxMYXlvdXQoaW5pdGlhbFVuY29uc3RyYWluZWRJdGVyYXRpb25zLCB4LCB5KTtcbiAgICAgICAgaWYgKGN1ckNvbnN0cmFpbnRzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICB0aGlzLl9kZXNjZW50LnByb2plY3QgPSBuZXcgcmVjdGFuZ2xlXzEuUHJvamVjdGlvbih0aGlzLl9ub2RlcywgdGhpcy5fZ3JvdXBzLCB0aGlzLl9yb290R3JvdXAsIGN1ckNvbnN0cmFpbnRzKS5wcm9qZWN0RnVuY3Rpb25zKCk7XG4gICAgICAgIHRoaXMuX2Rlc2NlbnQucnVuKGluaXRpYWxVc2VyQ29uc3RyYWludEl0ZXJhdGlvbnMpO1xuICAgICAgICB0aGlzLnNlcGFyYXRlT3ZlcmxhcHBpbmdDb21wb25lbnRzKHcsIGgsIGNlbnRlckdyYXBoKTtcbiAgICAgICAgdGhpcy5hdm9pZE92ZXJsYXBzKGFvKTtcbiAgICAgICAgaWYgKGFvKSB7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7IHYueCA9IHhbaV0sIHYueSA9IHlbaV07IH0pO1xuICAgICAgICAgICAgdGhpcy5fZGVzY2VudC5wcm9qZWN0ID0gbmV3IHJlY3RhbmdsZV8xLlByb2plY3Rpb24odGhpcy5fbm9kZXMsIHRoaXMuX2dyb3VwcywgdGhpcy5fcm9vdEdyb3VwLCBjdXJDb25zdHJhaW50cywgdHJ1ZSkucHJvamVjdEZ1bmN0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5fbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkgeyB4W2ldID0gdi54LCB5W2ldID0gdi55OyB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZXNjZW50LkcgPSBHO1xuICAgICAgICB0aGlzLl9kZXNjZW50LnJ1bihpbml0aWFsQWxsQ29uc3RyYWludHNJdGVyYXRpb25zKTtcbiAgICAgICAgaWYgKGdyaWRTbmFwSXRlcmF0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5fZGVzY2VudC5zbmFwU3RyZW5ndGggPSAxMDAwO1xuICAgICAgICAgICAgdGhpcy5fZGVzY2VudC5zbmFwR3JpZFNpemUgPSB0aGlzLl9ub2Rlc1swXS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2Rlc2NlbnQubnVtR3JpZFNuYXBOb2RlcyA9IG47XG4gICAgICAgICAgICB0aGlzLl9kZXNjZW50LnNjYWxlU25hcEJ5TWF4SCA9IG4gIT0gTjtcbiAgICAgICAgICAgIHZhciBHMCA9IGRlc2NlbnRfMS5EZXNjZW50LmNyZWF0ZVNxdWFyZU1hdHJpeChOLCBmdW5jdGlvbiAoaSwgaikge1xuICAgICAgICAgICAgICAgIGlmIChpID49IG4gfHwgaiA+PSBuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gR1tpXVtqXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZGVzY2VudC5HID0gRzA7XG4gICAgICAgICAgICB0aGlzLl9kZXNjZW50LnJ1bihncmlkU25hcEl0ZXJhdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlTm9kZVBvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLnNlcGFyYXRlT3ZlcmxhcHBpbmdDb21wb25lbnRzKHcsIGgsIGNlbnRlckdyYXBoKTtcbiAgICAgICAgcmV0dXJuIGtlZXBSdW5uaW5nID8gdGhpcy5yZXN1bWUoKSA6IHRoaXM7XG4gICAgfTtcbiAgICBMYXlvdXQucHJvdG90eXBlLmluaXRpYWxMYXlvdXQgPSBmdW5jdGlvbiAoaXRlcmF0aW9ucywgeCwgeSkge1xuICAgICAgICBpZiAodGhpcy5fZ3JvdXBzLmxlbmd0aCA+IDAgJiYgaXRlcmF0aW9ucyA+IDApIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5fbm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGVkZ2VzID0gdGhpcy5fbGlua3MubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoeyBzb3VyY2U6IGUuc291cmNlLmluZGV4LCB0YXJnZXQ6IGUudGFyZ2V0LmluZGV4IH0pOyB9KTtcbiAgICAgICAgICAgIHZhciB2cyA9IHRoaXMuX25vZGVzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gKHsgaW5kZXg6IHYuaW5kZXggfSk7IH0pO1xuICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGcsIGkpIHtcbiAgICAgICAgICAgICAgICB2cy5wdXNoKHsgaW5kZXg6IGcuaW5kZXggPSBuICsgaSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGcsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGcubGVhdmVzICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgZy5sZWF2ZXMuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gZWRnZXMucHVzaCh7IHNvdXJjZTogZy5pbmRleCwgdGFyZ2V0OiB2LmluZGV4IH0pOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGcuZ3JvdXBzICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgZy5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ2cpIHsgcmV0dXJuIGVkZ2VzLnB1c2goeyBzb3VyY2U6IGcuaW5kZXgsIHRhcmdldDogZ2cuaW5kZXggfSk7IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXcgTGF5b3V0KClcbiAgICAgICAgICAgICAgICAuc2l6ZSh0aGlzLnNpemUoKSlcbiAgICAgICAgICAgICAgICAubm9kZXModnMpXG4gICAgICAgICAgICAgICAgLmxpbmtzKGVkZ2VzKVxuICAgICAgICAgICAgICAgIC5hdm9pZE92ZXJsYXBzKGZhbHNlKVxuICAgICAgICAgICAgICAgIC5saW5rRGlzdGFuY2UodGhpcy5saW5rRGlzdGFuY2UoKSlcbiAgICAgICAgICAgICAgICAuc3ltbWV0cmljRGlmZkxpbmtMZW5ndGhzKDUpXG4gICAgICAgICAgICAgICAgLmNvbnZlcmdlbmNlVGhyZXNob2xkKDFlLTQpXG4gICAgICAgICAgICAgICAgLnN0YXJ0KGl0ZXJhdGlvbnMsIDAsIDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX25vZGVzLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICB4W3YuaW5kZXhdID0gdnNbdi5pbmRleF0ueDtcbiAgICAgICAgICAgICAgICB5W3YuaW5kZXhdID0gdnNbdi5pbmRleF0ueTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZGVzY2VudC5ydW4oaXRlcmF0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUuc2VwYXJhdGVPdmVybGFwcGluZ0NvbXBvbmVudHMgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgY2VudGVyR3JhcGgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNlbnRlckdyYXBoID09PSB2b2lkIDApIHsgY2VudGVyR3JhcGggPSB0cnVlOyB9XG4gICAgICAgIGlmICghdGhpcy5fZGlzdGFuY2VNYXRyaXggJiYgdGhpcy5faGFuZGxlRGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB2YXIgeF8xID0gdGhpcy5fZGVzY2VudC54WzBdLCB5XzEgPSB0aGlzLl9kZXNjZW50LnhbMV07XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7IHYueCA9IHhfMVtpXSwgdi55ID0geV8xW2ldOyB9KTtcbiAgICAgICAgICAgIHZhciBncmFwaHMgPSBoYW5kbGVkaXNjb25uZWN0ZWRfMS5zZXBhcmF0ZUdyYXBocyh0aGlzLl9ub2RlcywgdGhpcy5fbGlua3MpO1xuICAgICAgICAgICAgaGFuZGxlZGlzY29ubmVjdGVkXzEuYXBwbHlQYWNraW5nKGdyYXBocywgd2lkdGgsIGhlaWdodCwgdGhpcy5fZGVmYXVsdE5vZGVTaXplLCAoaGVpZ2h0IC8gd2lkdGgpLCBjZW50ZXJHcmFwaCk7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2Rlc2NlbnQueFswXVtpXSA9IHYueCwgX3RoaXMuX2Rlc2NlbnQueFsxXVtpXSA9IHYueTtcbiAgICAgICAgICAgICAgICBpZiAodi5ib3VuZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdi5ib3VuZHMuc2V0WENlbnRyZSh2LngpO1xuICAgICAgICAgICAgICAgICAgICB2LmJvdW5kcy5zZXRZQ2VudHJlKHYueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbHBoYSgwLjEpO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbHBoYSgwKTtcbiAgICB9O1xuICAgIExheW91dC5wcm90b3R5cGUucHJlcGFyZUVkZ2VSb3V0aW5nID0gZnVuY3Rpb24gKG5vZGVNYXJnaW4pIHtcbiAgICAgICAgaWYgKG5vZGVNYXJnaW4gPT09IHZvaWQgMCkgeyBub2RlTWFyZ2luID0gMDsgfVxuICAgICAgICB0aGlzLl92aXNpYmlsaXR5R3JhcGggPSBuZXcgZ2VvbV8xLlRhbmdlbnRWaXNpYmlsaXR5R3JhcGgodGhpcy5fbm9kZXMubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICByZXR1cm4gdi5ib3VuZHMuaW5mbGF0ZSgtbm9kZU1hcmdpbikudmVydGljZXMoKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgTGF5b3V0LnByb3RvdHlwZS5yb3V0ZUVkZ2UgPSBmdW5jdGlvbiAoZWRnZSwgYWgsIGRyYXcpIHtcbiAgICAgICAgaWYgKGFoID09PSB2b2lkIDApIHsgYWggPSA1OyB9XG4gICAgICAgIHZhciBsaW5lRGF0YSA9IFtdO1xuICAgICAgICB2YXIgdmcyID0gbmV3IGdlb21fMS5UYW5nZW50VmlzaWJpbGl0eUdyYXBoKHRoaXMuX3Zpc2liaWxpdHlHcmFwaC5QLCB7IFY6IHRoaXMuX3Zpc2liaWxpdHlHcmFwaC5WLCBFOiB0aGlzLl92aXNpYmlsaXR5R3JhcGguRSB9KSwgcG9ydDEgPSB7IHg6IGVkZ2Uuc291cmNlLngsIHk6IGVkZ2Uuc291cmNlLnkgfSwgcG9ydDIgPSB7IHg6IGVkZ2UudGFyZ2V0LngsIHk6IGVkZ2UudGFyZ2V0LnkgfSwgc3RhcnQgPSB2ZzIuYWRkUG9pbnQocG9ydDEsIGVkZ2Uuc291cmNlLmluZGV4KSwgZW5kID0gdmcyLmFkZFBvaW50KHBvcnQyLCBlZGdlLnRhcmdldC5pbmRleCk7XG4gICAgICAgIHZnMi5hZGRFZGdlSWZWaXNpYmxlKHBvcnQxLCBwb3J0MiwgZWRnZS5zb3VyY2UuaW5kZXgsIGVkZ2UudGFyZ2V0LmluZGV4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBkcmF3ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZHJhdyh2ZzIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzb3VyY2VJbmQgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zb3VyY2UuaWQ7IH0sIHRhcmdldEluZCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnRhcmdldC5pZDsgfSwgbGVuZ3RoID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubGVuZ3RoKCk7IH0sIHNwQ2FsYyA9IG5ldyBzaG9ydGVzdHBhdGhzXzEuQ2FsY3VsYXRvcih2ZzIuVi5sZW5ndGgsIHZnMi5FLCBzb3VyY2VJbmQsIHRhcmdldEluZCwgbGVuZ3RoKSwgc2hvcnRlc3RQYXRoID0gc3BDYWxjLlBhdGhGcm9tTm9kZVRvTm9kZShzdGFydC5pZCwgZW5kLmlkKTtcbiAgICAgICAgaWYgKHNob3J0ZXN0UGF0aC5sZW5ndGggPT09IDEgfHwgc2hvcnRlc3RQYXRoLmxlbmd0aCA9PT0gdmcyLlYubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcm91dGUgPSByZWN0YW5nbGVfMS5tYWtlRWRnZUJldHdlZW4oZWRnZS5zb3VyY2UuaW5uZXJCb3VuZHMsIGVkZ2UudGFyZ2V0LmlubmVyQm91bmRzLCBhaCk7XG4gICAgICAgICAgICBsaW5lRGF0YSA9IFtyb3V0ZS5zb3VyY2VJbnRlcnNlY3Rpb24sIHJvdXRlLmFycm93U3RhcnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG4gPSBzaG9ydGVzdFBhdGgubGVuZ3RoIC0gMiwgcCA9IHZnMi5WW3Nob3J0ZXN0UGF0aFtuXV0ucCwgcSA9IHZnMi5WW3Nob3J0ZXN0UGF0aFswXV0ucCwgbGluZURhdGEgPSBbZWRnZS5zb3VyY2UuaW5uZXJCb3VuZHMucmF5SW50ZXJzZWN0aW9uKHAueCwgcC55KV07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbjsgaSA+PSAwOyAtLWkpXG4gICAgICAgICAgICAgICAgbGluZURhdGEucHVzaCh2ZzIuVltzaG9ydGVzdFBhdGhbaV1dLnApO1xuICAgICAgICAgICAgbGluZURhdGEucHVzaChyZWN0YW5nbGVfMS5tYWtlRWRnZVRvKHEsIGVkZ2UudGFyZ2V0LmlubmVyQm91bmRzLCBhaCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lRGF0YTtcbiAgICB9O1xuICAgIExheW91dC5nZXRTb3VyY2VJbmRleCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZS5zb3VyY2UgPT09ICdudW1iZXInID8gZS5zb3VyY2UgOiBlLnNvdXJjZS5pbmRleDtcbiAgICB9O1xuICAgIExheW91dC5nZXRUYXJnZXRJbmRleCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZS50YXJnZXQgPT09ICdudW1iZXInID8gZS50YXJnZXQgOiBlLnRhcmdldC5pbmRleDtcbiAgICB9O1xuICAgIExheW91dC5saW5rSWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gTGF5b3V0LmdldFNvdXJjZUluZGV4KGUpICsgXCItXCIgKyBMYXlvdXQuZ2V0VGFyZ2V0SW5kZXgoZSk7XG4gICAgfTtcbiAgICBMYXlvdXQuZHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgaWYgKGlzR3JvdXAoZCkpIHtcbiAgICAgICAgICAgIExheW91dC5zdG9yZU9mZnNldChkLCBMYXlvdXQuZHJhZ09yaWdpbihkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMYXlvdXQuc3RvcE5vZGUoZCk7XG4gICAgICAgICAgICBkLmZpeGVkIHw9IDI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5zdG9wTm9kZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHYucHggPSB2Lng7XG4gICAgICAgIHYucHkgPSB2Lnk7XG4gICAgfTtcbiAgICBMYXlvdXQuc3RvcmVPZmZzZXQgPSBmdW5jdGlvbiAoZCwgb3JpZ2luKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZC5sZWF2ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkLmxlYXZlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgdi5maXhlZCB8PSAyO1xuICAgICAgICAgICAgICAgIExheW91dC5zdG9wTm9kZSh2KTtcbiAgICAgICAgICAgICAgICB2Ll9kcmFnR3JvdXBPZmZzZXRYID0gdi54IC0gb3JpZ2luLng7XG4gICAgICAgICAgICAgICAgdi5fZHJhZ0dyb3VwT2Zmc2V0WSA9IHYueSAtIG9yaWdpbi55O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkLmdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGQuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGcpIHsgcmV0dXJuIExheW91dC5zdG9yZU9mZnNldChnLCBvcmlnaW4pOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5b3V0LmRyYWdPcmlnaW4gPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICBpZiAoaXNHcm91cChkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB4OiBkLmJvdW5kcy5jeCgpLFxuICAgICAgICAgICAgICAgIHk6IGQuYm91bmRzLmN5KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGF5b3V0LmRyYWcgPSBmdW5jdGlvbiAoZCwgcG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGlzR3JvdXAoZCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZC5sZWF2ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZC5sZWF2ZXMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICBkLmJvdW5kcy5zZXRYQ2VudHJlKHBvc2l0aW9uLngpO1xuICAgICAgICAgICAgICAgICAgICBkLmJvdW5kcy5zZXRZQ2VudHJlKHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgICAgICB2LnB4ID0gdi5fZHJhZ0dyb3VwT2Zmc2V0WCArIHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgICAgIHYucHkgPSB2Ll9kcmFnR3JvdXBPZmZzZXRZICsgcG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZC5ncm91cHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZC5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZykgeyByZXR1cm4gTGF5b3V0LmRyYWcoZywgcG9zaXRpb24pOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGQucHggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgZC5weSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5kcmFnRW5kID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgaWYgKGlzR3JvdXAoZCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZC5sZWF2ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZC5sZWF2ZXMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICBMYXlvdXQuZHJhZ0VuZCh2KTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHYuX2RyYWdHcm91cE9mZnNldFg7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2Ll9kcmFnR3JvdXBPZmZzZXRZO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkLmdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBkLmdyb3Vwcy5mb3JFYWNoKExheW91dC5kcmFnRW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGQuZml4ZWQgJj0gfjY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExheW91dC5tb3VzZU92ZXIgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICBkLmZpeGVkIHw9IDQ7XG4gICAgICAgIGQucHggPSBkLngsIGQucHkgPSBkLnk7XG4gICAgfTtcbiAgICBMYXlvdXQubW91c2VPdXQgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICBkLmZpeGVkICY9IH40O1xuICAgIH07XG4gICAgcmV0dXJuIExheW91dDtcbn0oKSk7XG5leHBvcnRzLkxheW91dCA9IExheW91dDtcblxufSx7XCIuL2Rlc2NlbnRcIjo3LFwiLi9nZW9tXCI6OCxcIi4vaGFuZGxlZGlzY29ubmVjdGVkXCI6MTAsXCIuL2xpbmtsZW5ndGhzXCI6MTMsXCIuL3Bvd2VyZ3JhcGhcIjoxNCxcIi4vcmVjdGFuZ2xlXCI6MTcsXCIuL3Nob3J0ZXN0cGF0aHNcIjoxOH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHNob3J0ZXN0cGF0aHNfMSA9IHJlcXVpcmUoXCIuL3Nob3J0ZXN0cGF0aHNcIik7XG52YXIgZGVzY2VudF8xID0gcmVxdWlyZShcIi4vZGVzY2VudFwiKTtcbnZhciByZWN0YW5nbGVfMSA9IHJlcXVpcmUoXCIuL3JlY3RhbmdsZVwiKTtcbnZhciBsaW5rbGVuZ3Roc18xID0gcmVxdWlyZShcIi4vbGlua2xlbmd0aHNcIik7XG52YXIgTGluazNEID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaW5rM0Qoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIH1cbiAgICBMaW5rM0QucHJvdG90eXBlLmFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeC5yZWR1Y2UoZnVuY3Rpb24gKGMsIHYpIHtcbiAgICAgICAgICAgIHZhciBkeCA9IHZbX3RoaXMudGFyZ2V0XSAtIHZbX3RoaXMuc291cmNlXTtcbiAgICAgICAgICAgIHJldHVybiBjICsgZHggKiBkeDtcbiAgICAgICAgfSwgMCkpO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmszRDtcbn0oKSk7XG5leHBvcnRzLkxpbmszRCA9IExpbmszRDtcbnZhciBOb2RlM0QgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vZGUzRCh4LCB5LCB6KSB7XG4gICAgICAgIGlmICh4ID09PSB2b2lkIDApIHsgeCA9IDA7IH1cbiAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMDsgfVxuICAgICAgICBpZiAoeiA9PT0gdm9pZCAwKSB7IHogPSAwOyB9XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgfVxuICAgIHJldHVybiBOb2RlM0Q7XG59KCkpO1xuZXhwb3J0cy5Ob2RlM0QgPSBOb2RlM0Q7XG52YXIgTGF5b3V0M0QgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExheW91dDNEKG5vZGVzLCBsaW5rcywgaWRlYWxMaW5rTGVuZ3RoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpZGVhbExpbmtMZW5ndGggPT09IHZvaWQgMCkgeyBpZGVhbExpbmtMZW5ndGggPSAxOyB9XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy5saW5rcyA9IGxpbmtzO1xuICAgICAgICB0aGlzLmlkZWFsTGlua0xlbmd0aCA9IGlkZWFsTGlua0xlbmd0aDtcbiAgICAgICAgdGhpcy5jb25zdHJhaW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMudXNlSmFjY2FyZExpbmtMZW5ndGhzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSBuZXcgQXJyYXkoTGF5b3V0M0Quayk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTGF5b3V0M0QuazsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFtpXSA9IG5ldyBBcnJheShub2Rlcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBMYXlvdXQzRC5kaW1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBkaW0gPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2W2RpbV0gPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIHZbZGltXSA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5yZXN1bHRbMF1baV0gPSB2Lng7XG4gICAgICAgICAgICBfdGhpcy5yZXN1bHRbMV1baV0gPSB2Lnk7XG4gICAgICAgICAgICBfdGhpcy5yZXN1bHRbMl1baV0gPSB2Lno7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICA7XG4gICAgTGF5b3V0M0QucHJvdG90eXBlLmxpbmtMZW5ndGggPSBmdW5jdGlvbiAobCkge1xuICAgICAgICByZXR1cm4gbC5hY3R1YWxMZW5ndGgodGhpcy5yZXN1bHQpO1xuICAgIH07XG4gICAgTGF5b3V0M0QucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKGl0ZXJhdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPT09IHZvaWQgMCkgeyBpdGVyYXRpb25zID0gMTAwOyB9XG4gICAgICAgIHZhciBuID0gdGhpcy5ub2Rlcy5sZW5ndGg7XG4gICAgICAgIHZhciBsaW5rQWNjZXNzb3IgPSBuZXcgTGlua0FjY2Vzc29yKCk7XG4gICAgICAgIGlmICh0aGlzLnVzZUphY2NhcmRMaW5rTGVuZ3RocylcbiAgICAgICAgICAgIGxpbmtsZW5ndGhzXzEuamFjY2FyZExpbmtMZW5ndGhzKHRoaXMubGlua3MsIGxpbmtBY2Nlc3NvciwgMS41KTtcbiAgICAgICAgdGhpcy5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmxlbmd0aCAqPSBfdGhpcy5pZGVhbExpbmtMZW5ndGg7IH0pO1xuICAgICAgICB2YXIgZGlzdGFuY2VNYXRyaXggPSAobmV3IHNob3J0ZXN0cGF0aHNfMS5DYWxjdWxhdG9yKG4sIHRoaXMubGlua3MsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnNvdXJjZTsgfSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudGFyZ2V0OyB9LCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5sZW5ndGg7IH0pKS5EaXN0YW5jZU1hdHJpeCgpO1xuICAgICAgICB2YXIgRCA9IGRlc2NlbnRfMS5EZXNjZW50LmNyZWF0ZVNxdWFyZU1hdHJpeChuLCBmdW5jdGlvbiAoaSwgaikgeyByZXR1cm4gZGlzdGFuY2VNYXRyaXhbaV1bal07IH0pO1xuICAgICAgICB2YXIgRyA9IGRlc2NlbnRfMS5EZXNjZW50LmNyZWF0ZVNxdWFyZU1hdHJpeChuLCBmdW5jdGlvbiAoKSB7IHJldHVybiAyOyB9KTtcbiAgICAgICAgdGhpcy5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IF9hLnNvdXJjZSwgdGFyZ2V0ID0gX2EudGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIEdbc291cmNlXVt0YXJnZXRdID0gR1t0YXJnZXRdW3NvdXJjZV0gPSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZXNjZW50ID0gbmV3IGRlc2NlbnRfMS5EZXNjZW50KHRoaXMucmVzdWx0LCBEKTtcbiAgICAgICAgdGhpcy5kZXNjZW50LnRocmVzaG9sZCA9IDFlLTM7XG4gICAgICAgIHRoaXMuZGVzY2VudC5HID0gRztcbiAgICAgICAgaWYgKHRoaXMuY29uc3RyYWludHMpXG4gICAgICAgICAgICB0aGlzLmRlc2NlbnQucHJvamVjdCA9IG5ldyByZWN0YW5nbGVfMS5Qcm9qZWN0aW9uKHRoaXMubm9kZXMsIG51bGwsIG51bGwsIHRoaXMuY29uc3RyYWludHMpLnByb2plY3RGdW5jdGlvbnMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMubm9kZXNbaV07XG4gICAgICAgICAgICBpZiAodi5maXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzY2VudC5sb2Nrcy5hZGQoaSwgW3YueCwgdi55LCB2LnpdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc2NlbnQucnVuKGl0ZXJhdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIExheW91dDNELnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc2NlbnQubG9ja3MuY2xlYXIoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMubm9kZXNbaV07XG4gICAgICAgICAgICBpZiAodi5maXhlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzY2VudC5sb2Nrcy5hZGQoaSwgW3YueCwgdi55LCB2LnpdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kZXNjZW50LnJ1bmdlS3V0dGEoKTtcbiAgICB9O1xuICAgIExheW91dDNELmRpbXMgPSBbJ3gnLCAneScsICd6J107XG4gICAgTGF5b3V0M0QuayA9IExheW91dDNELmRpbXMubGVuZ3RoO1xuICAgIHJldHVybiBMYXlvdXQzRDtcbn0oKSk7XG5leHBvcnRzLkxheW91dDNEID0gTGF5b3V0M0Q7XG52YXIgTGlua0FjY2Vzc29yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaW5rQWNjZXNzb3IoKSB7XG4gICAgfVxuICAgIExpbmtBY2Nlc3Nvci5wcm90b3R5cGUuZ2V0U291cmNlSW5kZXggPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5zb3VyY2U7IH07XG4gICAgTGlua0FjY2Vzc29yLnByb3RvdHlwZS5nZXRUYXJnZXRJbmRleCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnRhcmdldDsgfTtcbiAgICBMaW5rQWNjZXNzb3IucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmxlbmd0aDsgfTtcbiAgICBMaW5rQWNjZXNzb3IucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uIChlLCBsKSB7IGUubGVuZ3RoID0gbDsgfTtcbiAgICByZXR1cm4gTGlua0FjY2Vzc29yO1xufSgpKTtcblxufSx7XCIuL2Rlc2NlbnRcIjo3LFwiLi9saW5rbGVuZ3Roc1wiOjEzLFwiLi9yZWN0YW5nbGVcIjoxNyxcIi4vc2hvcnRlc3RwYXRoc1wiOjE4fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiB1bmlvbkNvdW50KGEsIGIpIHtcbiAgICB2YXIgdSA9IHt9O1xuICAgIGZvciAodmFyIGkgaW4gYSlcbiAgICAgICAgdVtpXSA9IHt9O1xuICAgIGZvciAodmFyIGkgaW4gYilcbiAgICAgICAgdVtpXSA9IHt9O1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh1KS5sZW5ndGg7XG59XG5mdW5jdGlvbiBpbnRlcnNlY3Rpb25Db3VudChhLCBiKSB7XG4gICAgdmFyIG4gPSAwO1xuICAgIGZvciAodmFyIGkgaW4gYSlcbiAgICAgICAgaWYgKHR5cGVvZiBiW2ldICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICsrbjtcbiAgICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIGdldE5laWdoYm91cnMobGlua3MsIGxhKSB7XG4gICAgdmFyIG5laWdoYm91cnMgPSB7fTtcbiAgICB2YXIgYWRkTmVpZ2hib3VycyA9IGZ1bmN0aW9uICh1LCB2KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmVpZ2hib3Vyc1t1XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICBuZWlnaGJvdXJzW3VdID0ge307XG4gICAgICAgIG5laWdoYm91cnNbdV1bdl0gPSB7fTtcbiAgICB9O1xuICAgIGxpbmtzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHUgPSBsYS5nZXRTb3VyY2VJbmRleChlKSwgdiA9IGxhLmdldFRhcmdldEluZGV4KGUpO1xuICAgICAgICBhZGROZWlnaGJvdXJzKHUsIHYpO1xuICAgICAgICBhZGROZWlnaGJvdXJzKHYsIHUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZWlnaGJvdXJzO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmtMZW5ndGhzKGxpbmtzLCB3LCBmLCBsYSkge1xuICAgIHZhciBuZWlnaGJvdXJzID0gZ2V0TmVpZ2hib3VycyhsaW5rcywgbGEpO1xuICAgIGxpbmtzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgdmFyIGEgPSBuZWlnaGJvdXJzW2xhLmdldFNvdXJjZUluZGV4KGwpXTtcbiAgICAgICAgdmFyIGIgPSBuZWlnaGJvdXJzW2xhLmdldFRhcmdldEluZGV4KGwpXTtcbiAgICAgICAgbGEuc2V0TGVuZ3RoKGwsIDEgKyB3ICogZihhLCBiKSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzeW1tZXRyaWNEaWZmTGlua0xlbmd0aHMobGlua3MsIGxhLCB3KSB7XG4gICAgaWYgKHcgPT09IHZvaWQgMCkgeyB3ID0gMTsgfVxuICAgIGNvbXB1dGVMaW5rTGVuZ3RocyhsaW5rcywgdywgZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIE1hdGguc3FydCh1bmlvbkNvdW50KGEsIGIpIC0gaW50ZXJzZWN0aW9uQ291bnQoYSwgYikpOyB9LCBsYSk7XG59XG5leHBvcnRzLnN5bW1ldHJpY0RpZmZMaW5rTGVuZ3RocyA9IHN5bW1ldHJpY0RpZmZMaW5rTGVuZ3RocztcbmZ1bmN0aW9uIGphY2NhcmRMaW5rTGVuZ3RocyhsaW5rcywgbGEsIHcpIHtcbiAgICBpZiAodyA9PT0gdm9pZCAwKSB7IHcgPSAxOyB9XG4gICAgY29tcHV0ZUxpbmtMZW5ndGhzKGxpbmtzLCB3LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oT2JqZWN0LmtleXMoYSkubGVuZ3RoLCBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIDwgMS4xID8gMCA6IGludGVyc2VjdGlvbkNvdW50KGEsIGIpIC8gdW5pb25Db3VudChhLCBiKTtcbiAgICB9LCBsYSk7XG59XG5leHBvcnRzLmphY2NhcmRMaW5rTGVuZ3RocyA9IGphY2NhcmRMaW5rTGVuZ3RocztcbmZ1bmN0aW9uIGdlbmVyYXRlRGlyZWN0ZWRFZGdlQ29uc3RyYWludHMobiwgbGlua3MsIGF4aXMsIGxhKSB7XG4gICAgdmFyIGNvbXBvbmVudHMgPSBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMobiwgbGlua3MsIGxhKTtcbiAgICB2YXIgbm9kZXMgPSB7fTtcbiAgICBjb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgcmV0dXJuIGMuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gbm9kZXNbdl0gPSBpOyB9KTtcbiAgICB9KTtcbiAgICB2YXIgY29uc3RyYWludHMgPSBbXTtcbiAgICBsaW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgIHZhciB1aSA9IGxhLmdldFNvdXJjZUluZGV4KGwpLCB2aSA9IGxhLmdldFRhcmdldEluZGV4KGwpLCB1ID0gbm9kZXNbdWldLCB2ID0gbm9kZXNbdmldO1xuICAgICAgICBpZiAodSAhPT0gdikge1xuICAgICAgICAgICAgY29uc3RyYWludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgYXhpczogYXhpcyxcbiAgICAgICAgICAgICAgICBsZWZ0OiB1aSxcbiAgICAgICAgICAgICAgICByaWdodDogdmksXG4gICAgICAgICAgICAgICAgZ2FwOiBsYS5nZXRNaW5TZXBhcmF0aW9uKGwpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb25zdHJhaW50cztcbn1cbmV4cG9ydHMuZ2VuZXJhdGVEaXJlY3RlZEVkZ2VDb25zdHJhaW50cyA9IGdlbmVyYXRlRGlyZWN0ZWRFZGdlQ29uc3RyYWludHM7XG5mdW5jdGlvbiBzdHJvbmdseUNvbm5lY3RlZENvbXBvbmVudHMobnVtVmVydGljZXMsIGVkZ2VzLCBsYSkge1xuICAgIHZhciBub2RlcyA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIGNvbXBvbmVudHMgPSBbXTtcbiAgICBmdW5jdGlvbiBzdHJvbmdDb25uZWN0KHYpIHtcbiAgICAgICAgdi5pbmRleCA9IHYubG93bGluayA9IGluZGV4Kys7XG4gICAgICAgIHN0YWNrLnB1c2godik7XG4gICAgICAgIHYub25TdGFjayA9IHRydWU7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB2Lm91dDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB3ID0gX2FbX2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3LmluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHN0cm9uZ0Nvbm5lY3Qodyk7XG4gICAgICAgICAgICAgICAgdi5sb3dsaW5rID0gTWF0aC5taW4odi5sb3dsaW5rLCB3Lmxvd2xpbmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAody5vblN0YWNrKSB7XG4gICAgICAgICAgICAgICAgdi5sb3dsaW5rID0gTWF0aC5taW4odi5sb3dsaW5rLCB3LmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodi5sb3dsaW5rID09PSB2LmluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gW107XG4gICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdyA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIHcub25TdGFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5wdXNoKHcpO1xuICAgICAgICAgICAgICAgIGlmICh3ID09PSB2KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LmlkOyB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1WZXJ0aWNlczsgaSsrKSB7XG4gICAgICAgIG5vZGVzLnB1c2goeyBpZDogaSwgb3V0OiBbXSB9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCBlZGdlc18xID0gZWRnZXM7IF9pIDwgZWRnZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGUgPSBlZGdlc18xW19pXTtcbiAgICAgICAgdmFyIHZfMSA9IG5vZGVzW2xhLmdldFNvdXJjZUluZGV4KGUpXSwgdyA9IG5vZGVzW2xhLmdldFRhcmdldEluZGV4KGUpXTtcbiAgICAgICAgdl8xLm91dC5wdXNoKHcpO1xuICAgIH1cbiAgICBmb3IgKHZhciBfYSA9IDAsIG5vZGVzXzEgPSBub2RlczsgX2EgPCBub2Rlc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIgdiA9IG5vZGVzXzFbX2FdO1xuICAgICAgICBpZiAodHlwZW9mIHYuaW5kZXggPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgc3Ryb25nQ29ubmVjdCh2KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudHM7XG59XG5leHBvcnRzLnN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cyA9IHN0cm9uZ2x5Q29ubmVjdGVkQ29tcG9uZW50cztcblxufSx7fV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUG93ZXJFZGdlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb3dlckVkZ2Uoc291cmNlLCB0YXJnZXQsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICByZXR1cm4gUG93ZXJFZGdlO1xufSgpKTtcbmV4cG9ydHMuUG93ZXJFZGdlID0gUG93ZXJFZGdlO1xudmFyIENvbmZpZ3VyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbmZpZ3VyYXRpb24obiwgZWRnZXMsIGxpbmtBY2Nlc3Nvciwgcm9vdEdyb3VwKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubGlua0FjY2Vzc29yID0gbGlua0FjY2Vzc29yO1xuICAgICAgICB0aGlzLm1vZHVsZXMgPSBuZXcgQXJyYXkobik7XG4gICAgICAgIHRoaXMucm9vdHMgPSBbXTtcbiAgICAgICAgaWYgKHJvb3RHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5pbml0TW9kdWxlc0Zyb21Hcm91cChyb290R3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yb290cy5wdXNoKG5ldyBNb2R1bGVTZXQoKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3RzWzBdLmFkZCh0aGlzLm1vZHVsZXNbaV0gPSBuZXcgTW9kdWxlKGkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLlIgPSBlZGdlcy5sZW5ndGg7XG4gICAgICAgIGVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciBzID0gX3RoaXMubW9kdWxlc1tsaW5rQWNjZXNzb3IuZ2V0U291cmNlSW5kZXgoZSldLCB0ID0gX3RoaXMubW9kdWxlc1tsaW5rQWNjZXNzb3IuZ2V0VGFyZ2V0SW5kZXgoZSldLCB0eXBlID0gbGlua0FjY2Vzc29yLmdldFR5cGUoZSk7XG4gICAgICAgICAgICBzLm91dGdvaW5nLmFkZCh0eXBlLCB0KTtcbiAgICAgICAgICAgIHQuaW5jb21pbmcuYWRkKHR5cGUsIHMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuaW5pdE1vZHVsZXNGcm9tR3JvdXAgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICAgICAgdmFyIG1vZHVsZVNldCA9IG5ldyBNb2R1bGVTZXQoKTtcbiAgICAgICAgdGhpcy5yb290cy5wdXNoKG1vZHVsZVNldCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVhdmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGdyb3VwLmxlYXZlc1tpXTtcbiAgICAgICAgICAgIHZhciBtb2R1bGUgPSBuZXcgTW9kdWxlKG5vZGUuaWQpO1xuICAgICAgICAgICAgdGhpcy5tb2R1bGVzW25vZGUuaWRdID0gbW9kdWxlO1xuICAgICAgICAgICAgbW9kdWxlU2V0LmFkZChtb2R1bGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncm91cC5ncm91cHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ3JvdXAuZ3JvdXBzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gZ3JvdXAuZ3JvdXBzW2pdO1xuICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9uID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjaGlsZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgIT09IFwibGVhdmVzXCIgJiYgcHJvcCAhPT0gXCJncm91cHNcIiAmJiBjaGlsZC5oYXNPd25Qcm9wZXJ0eShwcm9wKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25bcHJvcF0gPSBjaGlsZFtwcm9wXTtcbiAgICAgICAgICAgICAgICBtb2R1bGVTZXQuYWRkKG5ldyBNb2R1bGUoLTEgLSBqLCBuZXcgTGlua1NldHMoKSwgbmV3IExpbmtTZXRzKCksIHRoaXMuaW5pdE1vZHVsZXNGcm9tR3JvdXAoY2hpbGQpLCBkZWZpbml0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZHVsZVNldDtcbiAgICB9O1xuICAgIENvbmZpZ3VyYXRpb24ucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGEsIGIsIGspIHtcbiAgICAgICAgaWYgKGsgPT09IHZvaWQgMCkgeyBrID0gMDsgfVxuICAgICAgICB2YXIgaW5JbnQgPSBhLmluY29taW5nLmludGVyc2VjdGlvbihiLmluY29taW5nKSwgb3V0SW50ID0gYS5vdXRnb2luZy5pbnRlcnNlY3Rpb24oYi5vdXRnb2luZyk7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IG5ldyBNb2R1bGVTZXQoKTtcbiAgICAgICAgY2hpbGRyZW4uYWRkKGEpO1xuICAgICAgICBjaGlsZHJlbi5hZGQoYik7XG4gICAgICAgIHZhciBtID0gbmV3IE1vZHVsZSh0aGlzLm1vZHVsZXMubGVuZ3RoLCBvdXRJbnQsIGluSW50LCBjaGlsZHJlbik7XG4gICAgICAgIHRoaXMubW9kdWxlcy5wdXNoKG0pO1xuICAgICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKHMsIGksIG8pIHtcbiAgICAgICAgICAgIHMuZm9yQWxsKGZ1bmN0aW9uIChtcywgbGlua3R5cGUpIHtcbiAgICAgICAgICAgICAgICBtcy5mb3JBbGwoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5scyA9IG5baV07XG4gICAgICAgICAgICAgICAgICAgIG5scy5hZGQobGlua3R5cGUsIG0pO1xuICAgICAgICAgICAgICAgICAgICBubHMucmVtb3ZlKGxpbmt0eXBlLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgbmxzLnJlbW92ZShsaW5rdHlwZSwgYik7XG4gICAgICAgICAgICAgICAgICAgIGFbb10ucmVtb3ZlKGxpbmt0eXBlLCBuKTtcbiAgICAgICAgICAgICAgICAgICAgYltvXS5yZW1vdmUobGlua3R5cGUsIG4pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZShvdXRJbnQsIFwiaW5jb21pbmdcIiwgXCJvdXRnb2luZ1wiKTtcbiAgICAgICAgdXBkYXRlKGluSW50LCBcIm91dGdvaW5nXCIsIFwiaW5jb21pbmdcIik7XG4gICAgICAgIHRoaXMuUiAtPSBpbkludC5jb3VudCgpICsgb3V0SW50LmNvdW50KCk7XG4gICAgICAgIHRoaXMucm9vdHNba10ucmVtb3ZlKGEpO1xuICAgICAgICB0aGlzLnJvb3RzW2tdLnJlbW92ZShiKTtcbiAgICAgICAgdGhpcy5yb290c1trXS5hZGQobSk7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH07XG4gICAgQ29uZmlndXJhdGlvbi5wcm90b3R5cGUucm9vdE1lcmdlcyA9IGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChrID09PSB2b2lkIDApIHsgayA9IDA7IH1cbiAgICAgICAgdmFyIHJzID0gdGhpcy5yb290c1trXS5tb2R1bGVzKCk7XG4gICAgICAgIHZhciBuID0gcnMubGVuZ3RoO1xuICAgICAgICB2YXIgbWVyZ2VzID0gbmV3IEFycmF5KG4gKiAobiAtIDEpKTtcbiAgICAgICAgdmFyIGN0ciA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpXyA9IG4gLSAxOyBpIDwgaV87ICsraSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgbjsgKytqKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSByc1tpXSwgYiA9IHJzW2pdO1xuICAgICAgICAgICAgICAgIG1lcmdlc1tjdHJdID0geyBpZDogY3RyLCBuRWRnZXM6IHRoaXMubkVkZ2VzKGEsIGIpLCBhOiBhLCBiOiBiIH07XG4gICAgICAgICAgICAgICAgY3RyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlcztcbiAgICB9O1xuICAgIENvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmdyZWVkeU1lcmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm9vdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3RzW2ldLm1vZHVsZXMoKS5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIG1zID0gdGhpcy5yb290TWVyZ2VzKGkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEubkVkZ2VzID09IGIubkVkZ2VzID8gYS5pZCAtIGIuaWQgOiBhLm5FZGdlcyAtIGIubkVkZ2VzOyB9KTtcbiAgICAgICAgICAgIHZhciBtID0gbXNbMF07XG4gICAgICAgICAgICBpZiAobS5uRWRnZXMgPj0gdGhpcy5SKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGhpcy5tZXJnZShtLmEsIG0uYiwgaSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uZmlndXJhdGlvbi5wcm90b3R5cGUubkVkZ2VzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIGluSW50ID0gYS5pbmNvbWluZy5pbnRlcnNlY3Rpb24oYi5pbmNvbWluZyksIG91dEludCA9IGEub3V0Z29pbmcuaW50ZXJzZWN0aW9uKGIub3V0Z29pbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5SIC0gaW5JbnQuY291bnQoKSAtIG91dEludC5jb3VudCgpO1xuICAgIH07XG4gICAgQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuZ2V0R3JvdXBIaWVyYXJjaHkgPSBmdW5jdGlvbiAocmV0YXJnZXRlZEVkZ2VzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBncm91cHMgPSBbXTtcbiAgICAgICAgdmFyIHJvb3QgPSB7fTtcbiAgICAgICAgdG9Hcm91cHModGhpcy5yb290c1swXSwgcm9vdCwgZ3JvdXBzKTtcbiAgICAgICAgdmFyIGVzID0gdGhpcy5hbGxFZGdlcygpO1xuICAgICAgICBlcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgYSA9IF90aGlzLm1vZHVsZXNbZS5zb3VyY2VdO1xuICAgICAgICAgICAgdmFyIGIgPSBfdGhpcy5tb2R1bGVzW2UudGFyZ2V0XTtcbiAgICAgICAgICAgIHJldGFyZ2V0ZWRFZGdlcy5wdXNoKG5ldyBQb3dlckVkZ2UodHlwZW9mIGEuZ2lkID09PSBcInVuZGVmaW5lZFwiID8gZS5zb3VyY2UgOiBncm91cHNbYS5naWRdLCB0eXBlb2YgYi5naWQgPT09IFwidW5kZWZpbmVkXCIgPyBlLnRhcmdldCA6IGdyb3Vwc1tiLmdpZF0sIGUudHlwZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwcztcbiAgICB9O1xuICAgIENvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmFsbEVkZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZXMgPSBbXTtcbiAgICAgICAgQ29uZmlndXJhdGlvbi5nZXRFZGdlcyh0aGlzLnJvb3RzWzBdLCBlcyk7XG4gICAgICAgIHJldHVybiBlcztcbiAgICB9O1xuICAgIENvbmZpZ3VyYXRpb24uZ2V0RWRnZXMgPSBmdW5jdGlvbiAobW9kdWxlcywgZXMpIHtcbiAgICAgICAgbW9kdWxlcy5mb3JBbGwoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIG0uZ2V0RWRnZXMoZXMpO1xuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5nZXRFZGdlcyhtLmNoaWxkcmVuLCBlcyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIENvbmZpZ3VyYXRpb247XG59KCkpO1xuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbjtcbmZ1bmN0aW9uIHRvR3JvdXBzKG1vZHVsZXMsIGdyb3VwLCBncm91cHMpIHtcbiAgICBtb2R1bGVzLmZvckFsbChmdW5jdGlvbiAobSkge1xuICAgICAgICBpZiAobS5pc0xlYWYoKSkge1xuICAgICAgICAgICAgaWYgKCFncm91cC5sZWF2ZXMpXG4gICAgICAgICAgICAgICAgZ3JvdXAubGVhdmVzID0gW107XG4gICAgICAgICAgICBncm91cC5sZWF2ZXMucHVzaChtLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBnID0gZ3JvdXA7XG4gICAgICAgICAgICBtLmdpZCA9IGdyb3Vwcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoIW0uaXNJc2xhbmQoKSB8fCBtLmlzUHJlZGVmaW5lZCgpKSB7XG4gICAgICAgICAgICAgICAgZyA9IHsgaWQ6IG0uZ2lkIH07XG4gICAgICAgICAgICAgICAgaWYgKG0uaXNQcmVkZWZpbmVkKCkpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gbS5kZWZpbml0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ1twcm9wXSA9IG0uZGVmaW5pdGlvbltwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWdyb3VwLmdyb3VwcylcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZ3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgZ3JvdXAuZ3JvdXBzLnB1c2gobS5naWQpO1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5wdXNoKGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9Hcm91cHMobS5jaGlsZHJlbiwgZywgZ3JvdXBzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxudmFyIE1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlKGlkLCBvdXRnb2luZywgaW5jb21pbmcsIGNoaWxkcmVuLCBkZWZpbml0aW9uKSB7XG4gICAgICAgIGlmIChvdXRnb2luZyA9PT0gdm9pZCAwKSB7IG91dGdvaW5nID0gbmV3IExpbmtTZXRzKCk7IH1cbiAgICAgICAgaWYgKGluY29taW5nID09PSB2b2lkIDApIHsgaW5jb21pbmcgPSBuZXcgTGlua1NldHMoKTsgfVxuICAgICAgICBpZiAoY2hpbGRyZW4gPT09IHZvaWQgMCkgeyBjaGlsZHJlbiA9IG5ldyBNb2R1bGVTZXQoKTsgfVxuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMub3V0Z29pbmcgPSBvdXRnb2luZztcbiAgICAgICAgdGhpcy5pbmNvbWluZyA9IGluY29taW5nO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG4gICAgfVxuICAgIE1vZHVsZS5wcm90b3R5cGUuZ2V0RWRnZXMgPSBmdW5jdGlvbiAoZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5vdXRnb2luZy5mb3JBbGwoZnVuY3Rpb24gKG1zLCBlZGdldHlwZSkge1xuICAgICAgICAgICAgbXMuZm9yQWxsKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBlcy5wdXNoKG5ldyBQb3dlckVkZ2UoX3RoaXMuaWQsIHRhcmdldC5pZCwgZWRnZXR5cGUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1vZHVsZS5wcm90b3R5cGUuaXNMZWFmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5jb3VudCgpID09PSAwO1xuICAgIH07XG4gICAgTW9kdWxlLnByb3RvdHlwZS5pc0lzbGFuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0Z29pbmcuY291bnQoKSA9PT0gMCAmJiB0aGlzLmluY29taW5nLmNvdW50KCkgPT09IDA7XG4gICAgfTtcbiAgICBNb2R1bGUucHJvdG90eXBlLmlzUHJlZGVmaW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmRlZmluaXRpb24gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgfTtcbiAgICByZXR1cm4gTW9kdWxlO1xufSgpKTtcbmV4cG9ydHMuTW9kdWxlID0gTW9kdWxlO1xuZnVuY3Rpb24gaW50ZXJzZWN0aW9uKG0sIG4pIHtcbiAgICB2YXIgaSA9IHt9O1xuICAgIGZvciAodmFyIHYgaW4gbSlcbiAgICAgICAgaWYgKHYgaW4gbilcbiAgICAgICAgICAgIGlbdl0gPSBtW3ZdO1xuICAgIHJldHVybiBpO1xufVxudmFyIE1vZHVsZVNldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kdWxlU2V0KCkge1xuICAgICAgICB0aGlzLnRhYmxlID0ge307XG4gICAgfVxuICAgIE1vZHVsZVNldC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnRhYmxlKS5sZW5ndGg7XG4gICAgfTtcbiAgICBNb2R1bGVTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE1vZHVsZVNldCgpO1xuICAgICAgICByZXN1bHQudGFibGUgPSBpbnRlcnNlY3Rpb24odGhpcy50YWJsZSwgb3RoZXIudGFibGUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgTW9kdWxlU2V0LnByb3RvdHlwZS5pbnRlcnNlY3Rpb25Db3VudCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb24ob3RoZXIpLmNvdW50KCk7XG4gICAgfTtcbiAgICBNb2R1bGVTZXQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBpZCBpbiB0aGlzLnRhYmxlO1xuICAgIH07XG4gICAgTW9kdWxlU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICB0aGlzLnRhYmxlW20uaWRdID0gbTtcbiAgICB9O1xuICAgIE1vZHVsZVNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGFibGVbbS5pZF07XG4gICAgfTtcbiAgICBNb2R1bGVTZXQucHJvdG90eXBlLmZvckFsbCA9IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIGZvciAodmFyIG1pZCBpbiB0aGlzLnRhYmxlKSB7XG4gICAgICAgICAgICBmKHRoaXMudGFibGVbbWlkXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vZHVsZVNldC5wcm90b3R5cGUubW9kdWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZzID0gW107XG4gICAgICAgIHRoaXMuZm9yQWxsKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpZiAoIW0uaXNQcmVkZWZpbmVkKCkpXG4gICAgICAgICAgICAgICAgdnMucHVzaChtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB2cztcbiAgICB9O1xuICAgIHJldHVybiBNb2R1bGVTZXQ7XG59KCkpO1xuZXhwb3J0cy5Nb2R1bGVTZXQgPSBNb2R1bGVTZXQ7XG52YXIgTGlua1NldHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExpbmtTZXRzKCkge1xuICAgICAgICB0aGlzLnNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5uID0gMDtcbiAgICB9XG4gICAgTGlua1NldHMucHJvdG90eXBlLmNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uO1xuICAgIH07XG4gICAgTGlua1NldHMucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JBbGxNb2R1bGVzKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCAmJiBtLmlkID09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBMaW5rU2V0cy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGxpbmt0eXBlLCBtKSB7XG4gICAgICAgIHZhciBzID0gbGlua3R5cGUgaW4gdGhpcy5zZXRzID8gdGhpcy5zZXRzW2xpbmt0eXBlXSA6IHRoaXMuc2V0c1tsaW5rdHlwZV0gPSBuZXcgTW9kdWxlU2V0KCk7XG4gICAgICAgIHMuYWRkKG0pO1xuICAgICAgICArK3RoaXMubjtcbiAgICB9O1xuICAgIExpbmtTZXRzLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAobGlua3R5cGUsIG0pIHtcbiAgICAgICAgdmFyIG1zID0gdGhpcy5zZXRzW2xpbmt0eXBlXTtcbiAgICAgICAgbXMucmVtb3ZlKG0pO1xuICAgICAgICBpZiAobXMuY291bnQoKSA9PT0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2V0c1tsaW5rdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgLS10aGlzLm47XG4gICAgfTtcbiAgICBMaW5rU2V0cy5wcm90b3R5cGUuZm9yQWxsID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgZm9yICh2YXIgbGlua3R5cGUgaW4gdGhpcy5zZXRzKSB7XG4gICAgICAgICAgICBmKHRoaXMuc2V0c1tsaW5rdHlwZV0sIE51bWJlcihsaW5rdHlwZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaW5rU2V0cy5wcm90b3R5cGUuZm9yQWxsTW9kdWxlcyA9IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHRoaXMuZm9yQWxsKGZ1bmN0aW9uIChtcywgbHQpIHsgcmV0dXJuIG1zLmZvckFsbChmKTsgfSk7XG4gICAgfTtcbiAgICBMaW5rU2V0cy5wcm90b3R5cGUuaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGlua1NldHMoKTtcbiAgICAgICAgdGhpcy5mb3JBbGwoZnVuY3Rpb24gKG1zLCBsdCkge1xuICAgICAgICAgICAgaWYgKGx0IGluIG90aGVyLnNldHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IG1zLmludGVyc2VjdGlvbihvdGhlci5zZXRzW2x0XSksIG4gPSBpLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zZXRzW2x0XSA9IGk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5uICs9IG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHJldHVybiBMaW5rU2V0cztcbn0oKSk7XG5leHBvcnRzLkxpbmtTZXRzID0gTGlua1NldHM7XG5mdW5jdGlvbiBpbnRlcnNlY3Rpb25Db3VudChtLCBuKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGludGVyc2VjdGlvbihtLCBuKSkubGVuZ3RoO1xufVxuZnVuY3Rpb24gZ2V0R3JvdXBzKG5vZGVzLCBsaW5rcywgbGEsIHJvb3RHcm91cCkge1xuICAgIHZhciBuID0gbm9kZXMubGVuZ3RoLCBjID0gbmV3IENvbmZpZ3VyYXRpb24obiwgbGlua3MsIGxhLCByb290R3JvdXApO1xuICAgIHdoaWxlIChjLmdyZWVkeU1lcmdlKCkpXG4gICAgICAgIDtcbiAgICB2YXIgcG93ZXJFZGdlcyA9IFtdO1xuICAgIHZhciBnID0gYy5nZXRHcm91cEhpZXJhcmNoeShwb3dlckVkZ2VzKTtcbiAgICBwb3dlckVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGYgPSBmdW5jdGlvbiAoZW5kKSB7XG4gICAgICAgICAgICB2YXIgZyA9IGVbZW5kXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZyA9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIGVbZW5kXSA9IG5vZGVzW2ddO1xuICAgICAgICB9O1xuICAgICAgICBmKFwic291cmNlXCIpO1xuICAgICAgICBmKFwidGFyZ2V0XCIpO1xuICAgIH0pO1xuICAgIHJldHVybiB7IGdyb3VwczogZywgcG93ZXJFZGdlczogcG93ZXJFZGdlcyB9O1xufVxuZXhwb3J0cy5nZXRHcm91cHMgPSBnZXRHcm91cHM7XG5cbn0se31dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFBhaXJpbmdIZWFwID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYWlyaW5nSGVhcChlbGVtKSB7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuc3ViaGVhcHMgPSBbXTtcbiAgICB9XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBzdHIgPSBcIlwiLCBuZWVkQ29tbWEgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YmhlYXBzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc3ViaGVhcCA9IHRoaXMuc3ViaGVhcHNbaV07XG4gICAgICAgICAgICBpZiAoIXN1YmhlYXAuZWxlbSkge1xuICAgICAgICAgICAgICAgIG5lZWRDb21tYSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5lZWRDb21tYSkge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0ciArIFwiLFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyID0gc3RyICsgc3ViaGVhcC50b1N0cmluZyhzZWxlY3Rvcik7XG4gICAgICAgICAgICBuZWVkQ29tbWEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHIgIT09IFwiXCIpIHtcbiAgICAgICAgICAgIHN0ciA9IFwiKFwiICsgc3RyICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLmVsZW0gPyBzZWxlY3Rvcih0aGlzLmVsZW0pIDogXCJcIikgKyBzdHI7XG4gICAgfTtcbiAgICBQYWlyaW5nSGVhcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIGlmICghdGhpcy5lbXB0eSgpKSB7XG4gICAgICAgICAgICBmKHRoaXMuZWxlbSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnN1YmhlYXBzLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZm9yRWFjaChmKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhaXJpbmdIZWFwLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHkoKSA/IDAgOiAxICsgdGhpcy5zdWJoZWFwcy5yZWR1Y2UoZnVuY3Rpb24gKG4sIGgpIHtcbiAgICAgICAgICAgIHJldHVybiBuICsgaC5jb3VudCgpO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIFBhaXJpbmdIZWFwLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW07XG4gICAgfTtcbiAgICBQYWlyaW5nSGVhcC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW0gPT0gbnVsbDtcbiAgICB9O1xuICAgIFBhaXJpbmdIZWFwLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBoKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJoZWFwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3ViaGVhcHNbaV0uY29udGFpbnMoaCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLmlzSGVhcCA9IGZ1bmN0aW9uIChsZXNzVGhhbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJoZWFwcy5ldmVyeShmdW5jdGlvbiAoaCkgeyByZXR1cm4gbGVzc1RoYW4oX3RoaXMuZWxlbSwgaC5lbGVtKSAmJiBoLmlzSGVhcChsZXNzVGhhbik7IH0pO1xuICAgIH07XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChvYmosIGxlc3NUaGFuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lcmdlKG5ldyBQYWlyaW5nSGVhcChvYmopLCBsZXNzVGhhbik7XG4gICAgfTtcbiAgICBQYWlyaW5nSGVhcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoaGVhcDIsIGxlc3NUaGFuKSB7XG4gICAgICAgIGlmICh0aGlzLmVtcHR5KCkpXG4gICAgICAgICAgICByZXR1cm4gaGVhcDI7XG4gICAgICAgIGVsc2UgaWYgKGhlYXAyLmVtcHR5KCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgZWxzZSBpZiAobGVzc1RoYW4odGhpcy5lbGVtLCBoZWFwMi5lbGVtKSkge1xuICAgICAgICAgICAgdGhpcy5zdWJoZWFwcy5wdXNoKGhlYXAyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGVhcDIuc3ViaGVhcHMucHVzaCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBoZWFwMjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLnJlbW92ZU1pbiA9IGZ1bmN0aW9uIChsZXNzVGhhbikge1xuICAgICAgICBpZiAodGhpcy5lbXB0eSgpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lcmdlUGFpcnMobGVzc1RoYW4pO1xuICAgIH07XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLm1lcmdlUGFpcnMgPSBmdW5jdGlvbiAobGVzc1RoYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuc3ViaGVhcHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhaXJpbmdIZWFwKG51bGwpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLnN1YmhlYXBzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJoZWFwc1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmaXJzdFBhaXIgPSB0aGlzLnN1YmhlYXBzLnBvcCgpLm1lcmdlKHRoaXMuc3ViaGVhcHMucG9wKCksIGxlc3NUaGFuKTtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSB0aGlzLm1lcmdlUGFpcnMobGVzc1RoYW4pO1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0UGFpci5tZXJnZShyZW1haW5pbmcsIGxlc3NUaGFuKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFpcmluZ0hlYXAucHJvdG90eXBlLmRlY3JlYXNlS2V5ID0gZnVuY3Rpb24gKHN1YmhlYXAsIG5ld1ZhbHVlLCBzZXRIZWFwTm9kZSwgbGVzc1RoYW4pIHtcbiAgICAgICAgdmFyIG5ld0hlYXAgPSBzdWJoZWFwLnJlbW92ZU1pbihsZXNzVGhhbik7XG4gICAgICAgIHN1YmhlYXAuZWxlbSA9IG5ld0hlYXAuZWxlbTtcbiAgICAgICAgc3ViaGVhcC5zdWJoZWFwcyA9IG5ld0hlYXAuc3ViaGVhcHM7XG4gICAgICAgIGlmIChzZXRIZWFwTm9kZSAhPT0gbnVsbCAmJiBuZXdIZWFwLmVsZW0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNldEhlYXBOb2RlKHN1YmhlYXAuZWxlbSwgc3ViaGVhcCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhaXJpbmdOb2RlID0gbmV3IFBhaXJpbmdIZWFwKG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKHNldEhlYXBOb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRIZWFwTm9kZShuZXdWYWx1ZSwgcGFpcmluZ05vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1lcmdlKHBhaXJpbmdOb2RlLCBsZXNzVGhhbik7XG4gICAgfTtcbiAgICByZXR1cm4gUGFpcmluZ0hlYXA7XG59KCkpO1xuZXhwb3J0cy5QYWlyaW5nSGVhcCA9IFBhaXJpbmdIZWFwO1xudmFyIFByaW9yaXR5UXVldWUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByaW9yaXR5UXVldWUobGVzc1RoYW4pIHtcbiAgICAgICAgdGhpcy5sZXNzVGhhbiA9IGxlc3NUaGFuO1xuICAgIH1cbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS50b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmVtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuZWxlbTtcbiAgICB9O1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhaXJpbmdOb2RlO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgYXJnOyBhcmcgPSBhcmdzW2ldOyArK2kpIHtcbiAgICAgICAgICAgIHBhaXJpbmdOb2RlID0gbmV3IFBhaXJpbmdIZWFwKGFyZyk7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSB0aGlzLmVtcHR5KCkgP1xuICAgICAgICAgICAgICAgIHBhaXJpbmdOb2RlIDogdGhpcy5yb290Lm1lcmdlKHBhaXJpbmdOb2RlLCB0aGlzLmxlc3NUaGFuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFpcmluZ05vZGU7XG4gICAgfTtcbiAgICBQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnJvb3QgfHwgIXRoaXMucm9vdC5lbGVtO1xuICAgIH07XG4gICAgUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuaXNIZWFwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290LmlzSGVhcCh0aGlzLmxlc3NUaGFuKTtcbiAgICB9O1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZikge1xuICAgICAgICB0aGlzLnJvb3QuZm9yRWFjaChmKTtcbiAgICB9O1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9iaiA9IHRoaXMucm9vdC5taW4oKTtcbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5yb290LnJlbW92ZU1pbih0aGlzLmxlc3NUaGFuKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLnJlZHVjZUtleSA9IGZ1bmN0aW9uIChoZWFwTm9kZSwgbmV3S2V5LCBzZXRIZWFwTm9kZSkge1xuICAgICAgICBpZiAoc2V0SGVhcE5vZGUgPT09IHZvaWQgMCkgeyBzZXRIZWFwTm9kZSA9IG51bGw7IH1cbiAgICAgICAgdGhpcy5yb290ID0gdGhpcy5yb290LmRlY3JlYXNlS2V5KGhlYXBOb2RlLCBuZXdLZXksIHNldEhlYXBOb2RlLCB0aGlzLmxlc3NUaGFuKTtcbiAgICB9O1xuICAgIFByaW9yaXR5UXVldWUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QudG9TdHJpbmcoc2VsZWN0b3IpO1xuICAgIH07XG4gICAgUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QuY291bnQoKTtcbiAgICB9O1xuICAgIHJldHVybiBQcmlvcml0eVF1ZXVlO1xufSgpKTtcbmV4cG9ydHMuUHJpb3JpdHlRdWV1ZSA9IFByaW9yaXR5UXVldWU7XG5cbn0se31dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHJlZUJhc2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyZWVCYXNlKCkge1xuICAgICAgICB0aGlzLmZpbmRJdGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9yb290O1xuICAgICAgICAgICAgdmFyIGl0ZXIgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgICAgICB3aGlsZSAocmVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLl9jb21wYXJhdG9yKGRhdGEsIHJlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVyLl9jdXJzb3IgPSByZXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlci5fYW5jZXN0b3JzLnB1c2gocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzLmdldF9jaGlsZChjID4gMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgfVxuICAgIFRyZWVCYXNlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfTtcbiAgICA7XG4gICAgVHJlZUJhc2UucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5fcm9vdDtcbiAgICAgICAgd2hpbGUgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLl9jb21wYXJhdG9yKGRhdGEsIHJlcy5kYXRhKTtcbiAgICAgICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLmdldF9jaGlsZChjID4gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICA7XG4gICAgVHJlZUJhc2UucHJvdG90eXBlLmxvd2VyQm91bmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYm91bmQoZGF0YSwgdGhpcy5fY29tcGFyYXRvcik7XG4gICAgfTtcbiAgICA7XG4gICAgVHJlZUJhc2UucHJvdG90eXBlLnVwcGVyQm91bmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgY21wID0gdGhpcy5fY29tcGFyYXRvcjtcbiAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZV9jbXAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGNtcChiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYm91bmQoZGF0YSwgcmV2ZXJzZV9jbXApO1xuICAgIH07XG4gICAgO1xuICAgIFRyZWVCYXNlLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXMgPSB0aGlzLl9yb290O1xuICAgICAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAocmVzLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICB9O1xuICAgIDtcbiAgICBUcmVlQmFzZS5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzID0gdGhpcy5fcm9vdDtcbiAgICAgICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHJlcy5yaWdodCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzID0gcmVzLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICB9O1xuICAgIDtcbiAgICBUcmVlQmFzZS5wcm90b3R5cGUuaXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IodGhpcyk7XG4gICAgfTtcbiAgICA7XG4gICAgVHJlZUJhc2UucHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgdmFyIGl0ID0gdGhpcy5pdGVyYXRvcigpLCBkYXRhO1xuICAgICAgICB3aGlsZSAoKGRhdGEgPSBpdC5uZXh0KCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjYihkYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgO1xuICAgIFRyZWVCYXNlLnByb3RvdHlwZS5yZWFjaCA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICB2YXIgaXQgPSB0aGlzLml0ZXJhdG9yKCksIGRhdGE7XG4gICAgICAgIHdoaWxlICgoZGF0YSA9IGl0LnByZXYoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNiKGRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICA7XG4gICAgVHJlZUJhc2UucHJvdG90eXBlLl9ib3VuZCA9IGZ1bmN0aW9uIChkYXRhLCBjbXApIHtcbiAgICAgICAgdmFyIGN1ciA9IHRoaXMuX3Jvb3Q7XG4gICAgICAgIHZhciBpdGVyID0gdGhpcy5pdGVyYXRvcigpO1xuICAgICAgICB3aGlsZSAoY3VyICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHRoaXMuX2NvbXBhcmF0b3IoZGF0YSwgY3VyLmRhdGEpO1xuICAgICAgICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpdGVyLl9jdXJzb3IgPSBjdXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVyLl9hbmNlc3RvcnMucHVzaChjdXIpO1xuICAgICAgICAgICAgY3VyID0gY3VyLmdldF9jaGlsZChjID4gMCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IGl0ZXIuX2FuY2VzdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgY3VyID0gaXRlci5fYW5jZXN0b3JzW2ldO1xuICAgICAgICAgICAgaWYgKGNtcChkYXRhLCBjdXIuZGF0YSkgPiAwKSB7XG4gICAgICAgICAgICAgICAgaXRlci5fY3Vyc29yID0gY3VyO1xuICAgICAgICAgICAgICAgIGl0ZXIuX2FuY2VzdG9ycy5sZW5ndGggPSBpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGl0ZXIuX2FuY2VzdG9ycy5sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gaXRlcjtcbiAgICB9O1xuICAgIDtcbiAgICByZXR1cm4gVHJlZUJhc2U7XG59KCkpO1xuZXhwb3J0cy5UcmVlQmFzZSA9IFRyZWVCYXNlO1xudmFyIEl0ZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJdGVyYXRvcih0cmVlKSB7XG4gICAgICAgIHRoaXMuX3RyZWUgPSB0cmVlO1xuICAgICAgICB0aGlzLl9hbmNlc3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fY3Vyc29yID0gbnVsbDtcbiAgICB9XG4gICAgSXRlcmF0b3IucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJzb3IgIT09IG51bGwgPyB0aGlzLl9jdXJzb3IuZGF0YSA6IG51bGw7XG4gICAgfTtcbiAgICA7XG4gICAgSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciByb290ID0gdGhpcy5fdHJlZS5fcm9vdDtcbiAgICAgICAgICAgIGlmIChyb290ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluTm9kZShyb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3IucmlnaHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2F2ZTtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIHNhdmUgPSB0aGlzLl9jdXJzb3I7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hbmNlc3RvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSB0aGlzLl9hbmNlc3RvcnMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlICh0aGlzLl9jdXJzb3IucmlnaHQgPT09IHNhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5jZXN0b3JzLnB1c2godGhpcy5fY3Vyc29yKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5Ob2RlKHRoaXMuX2N1cnNvci5yaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnNvciAhPT0gbnVsbCA/IHRoaXMuX2N1cnNvci5kYXRhIDogbnVsbDtcbiAgICB9O1xuICAgIDtcbiAgICBJdGVyYXRvci5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSB0aGlzLl90cmVlLl9yb290O1xuICAgICAgICAgICAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhOb2RlKHJvb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvci5sZWZ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNhdmU7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBzYXZlID0gdGhpcy5fY3Vyc29yO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5jZXN0b3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gdGhpcy5fYW5jZXN0b3JzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodGhpcy5fY3Vyc29yLmxlZnQgPT09IHNhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5jZXN0b3JzLnB1c2godGhpcy5fY3Vyc29yKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhOb2RlKHRoaXMuX2N1cnNvci5sZWZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY3Vyc29yICE9PSBudWxsID8gdGhpcy5fY3Vyc29yLmRhdGEgOiBudWxsO1xuICAgIH07XG4gICAgO1xuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS5fbWluTm9kZSA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgICAgICB3aGlsZSAoc3RhcnQubGVmdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fYW5jZXN0b3JzLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IHN0YXJ0O1xuICAgIH07XG4gICAgO1xuICAgIEl0ZXJhdG9yLnByb3RvdHlwZS5fbWF4Tm9kZSA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgICAgICB3aGlsZSAoc3RhcnQucmlnaHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FuY2VzdG9ycy5wdXNoKHN0YXJ0KTtcbiAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3Vyc29yID0gc3RhcnQ7XG4gICAgfTtcbiAgICA7XG4gICAgcmV0dXJuIEl0ZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuSXRlcmF0b3IgPSBJdGVyYXRvcjtcbnZhciBOb2RlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5yaWdodCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgTm9kZS5wcm90b3R5cGUuZ2V0X2NoaWxkID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICByZXR1cm4gZGlyID8gdGhpcy5yaWdodCA6IHRoaXMubGVmdDtcbiAgICB9O1xuICAgIDtcbiAgICBOb2RlLnByb3RvdHlwZS5zZXRfY2hpbGQgPSBmdW5jdGlvbiAoZGlyLCB2YWwpIHtcbiAgICAgICAgaWYgKGRpcikge1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHZhbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgO1xuICAgIHJldHVybiBOb2RlO1xufSgpKTtcbnZhciBSQlRyZWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSQlRyZWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUkJUcmVlKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICBfdGhpcy5fY29tcGFyYXRvciA9IGNvbXBhcmF0b3I7XG4gICAgICAgIF90aGlzLnNpemUgPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJCVHJlZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIHJldCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fcm9vdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBOb2RlKGRhdGEpO1xuICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhlYWQgPSBuZXcgTm9kZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIGRpciA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGxhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBncCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgZ2dwID0gaGVhZDtcbiAgICAgICAgICAgIHZhciBwID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5fcm9vdDtcbiAgICAgICAgICAgIGdncC5yaWdodCA9IHRoaXMuX3Jvb3Q7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgTm9kZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRfY2hpbGQoZGlyLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFJCVHJlZS5pc19yZWQobm9kZS5sZWZ0KSAmJiBSQlRyZWUuaXNfcmVkKG5vZGUucmlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5sZWZ0LnJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnJpZ2h0LnJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoUkJUcmVlLmlzX3JlZChub2RlKSAmJiBSQlRyZWUuaXNfcmVkKHApKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXIyID0gZ2dwLnJpZ2h0ID09PSBncDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHAuZ2V0X2NoaWxkKGxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZ3Auc2V0X2NoaWxkKGRpcjIsIFJCVHJlZS5zaW5nbGVfcm90YXRlKGdwLCAhbGFzdCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2dwLnNldF9jaGlsZChkaXIyLCBSQlRyZWUuZG91YmxlX3JvdGF0ZShncCwgIWxhc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY21wID0gdGhpcy5fY29tcGFyYXRvcihub2RlLmRhdGEsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3QgPSBkaXI7XG4gICAgICAgICAgICAgICAgZGlyID0gY21wIDwgMDtcbiAgICAgICAgICAgICAgICBpZiAoZ3AgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2dwID0gZ3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdwID0gcDtcbiAgICAgICAgICAgICAgICBwID0gbm9kZTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5nZXRfY2hpbGQoZGlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBoZWFkLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvb3QucmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbiAgICA7XG4gICAgUkJUcmVlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoZWFkID0gbmV3IE5vZGUodW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIG5vZGUgPSBoZWFkO1xuICAgICAgICBub2RlLnJpZ2h0ID0gdGhpcy5fcm9vdDtcbiAgICAgICAgdmFyIHAgPSBudWxsO1xuICAgICAgICB2YXIgZ3AgPSBudWxsO1xuICAgICAgICB2YXIgZm91bmQgPSBudWxsO1xuICAgICAgICB2YXIgZGlyID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKG5vZGUuZ2V0X2NoaWxkKGRpcikgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsYXN0ID0gZGlyO1xuICAgICAgICAgICAgZ3AgPSBwO1xuICAgICAgICAgICAgcCA9IG5vZGU7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5nZXRfY2hpbGQoZGlyKTtcbiAgICAgICAgICAgIHZhciBjbXAgPSB0aGlzLl9jb21wYXJhdG9yKGRhdGEsIG5vZGUuZGF0YSk7XG4gICAgICAgICAgICBkaXIgPSBjbXAgPiAwO1xuICAgICAgICAgICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghUkJUcmVlLmlzX3JlZChub2RlKSAmJiAhUkJUcmVlLmlzX3JlZChub2RlLmdldF9jaGlsZChkaXIpKSkge1xuICAgICAgICAgICAgICAgIGlmIChSQlRyZWUuaXNfcmVkKG5vZGUuZ2V0X2NoaWxkKCFkaXIpKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3IgPSBSQlRyZWUuc2luZ2xlX3JvdGF0ZShub2RlLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICBwLnNldF9jaGlsZChsYXN0LCBzcik7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBzcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIVJCVHJlZS5pc19yZWQobm9kZS5nZXRfY2hpbGQoIWRpcikpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gcC5nZXRfY2hpbGQoIWxhc3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFSQlRyZWUuaXNfcmVkKHNpYmxpbmcuZ2V0X2NoaWxkKCFsYXN0KSkgJiYgIVJCVHJlZS5pc19yZWQoc2libGluZy5nZXRfY2hpbGQobGFzdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5yZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLnJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcjIgPSBncC5yaWdodCA9PT0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUkJUcmVlLmlzX3JlZChzaWJsaW5nLmdldF9jaGlsZChsYXN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Auc2V0X2NoaWxkKGRpcjIsIFJCVHJlZS5kb3VibGVfcm90YXRlKHAsIGxhc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoUkJUcmVlLmlzX3JlZChzaWJsaW5nLmdldF9jaGlsZCghbGFzdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwLnNldF9jaGlsZChkaXIyLCBSQlRyZWUuc2luZ2xlX3JvdGF0ZShwLCBsYXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncGMgPSBncC5nZXRfY2hpbGQoZGlyMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3BjLnJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwYy5sZWZ0LnJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwYy5yaWdodC5yZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvdW5kLmRhdGEgPSBub2RlLmRhdGE7XG4gICAgICAgICAgICBwLnNldF9jaGlsZChwLnJpZ2h0ID09PSBub2RlLCBub2RlLmdldF9jaGlsZChub2RlLmxlZnQgPT09IG51bGwpKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZS0tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBoZWFkLnJpZ2h0O1xuICAgICAgICBpZiAodGhpcy5fcm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcm9vdC5yZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm91bmQgIT09IG51bGw7XG4gICAgfTtcbiAgICA7XG4gICAgUkJUcmVlLmlzX3JlZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlICE9PSBudWxsICYmIG5vZGUucmVkO1xuICAgIH07XG4gICAgUkJUcmVlLnNpbmdsZV9yb3RhdGUgPSBmdW5jdGlvbiAocm9vdCwgZGlyKSB7XG4gICAgICAgIHZhciBzYXZlID0gcm9vdC5nZXRfY2hpbGQoIWRpcik7XG4gICAgICAgIHJvb3Quc2V0X2NoaWxkKCFkaXIsIHNhdmUuZ2V0X2NoaWxkKGRpcikpO1xuICAgICAgICBzYXZlLnNldF9jaGlsZChkaXIsIHJvb3QpO1xuICAgICAgICByb290LnJlZCA9IHRydWU7XG4gICAgICAgIHNhdmUucmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzYXZlO1xuICAgIH07XG4gICAgUkJUcmVlLmRvdWJsZV9yb3RhdGUgPSBmdW5jdGlvbiAocm9vdCwgZGlyKSB7XG4gICAgICAgIHJvb3Quc2V0X2NoaWxkKCFkaXIsIFJCVHJlZS5zaW5nbGVfcm90YXRlKHJvb3QuZ2V0X2NoaWxkKCFkaXIpLCAhZGlyKSk7XG4gICAgICAgIHJldHVybiBSQlRyZWUuc2luZ2xlX3JvdGF0ZShyb290LCBkaXIpO1xuICAgIH07XG4gICAgcmV0dXJuIFJCVHJlZTtcbn0oVHJlZUJhc2UpKTtcbmV4cG9ydHMuUkJUcmVlID0gUkJUcmVlO1xuXG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHZwc2NfMSA9IHJlcXVpcmUoXCIuL3Zwc2NcIik7XG52YXIgcmJ0cmVlXzEgPSByZXF1aXJlKFwiLi9yYnRyZWVcIik7XG5mdW5jdGlvbiBjb21wdXRlR3JvdXBCb3VuZHMoZykge1xuICAgIGcuYm91bmRzID0gdHlwZW9mIGcubGVhdmVzICE9PSBcInVuZGVmaW5lZFwiID9cbiAgICAgICAgZy5sZWF2ZXMucmVkdWNlKGZ1bmN0aW9uIChyLCBjKSB7IHJldHVybiBjLmJvdW5kcy51bmlvbihyKTsgfSwgUmVjdGFuZ2xlLmVtcHR5KCkpIDpcbiAgICAgICAgUmVjdGFuZ2xlLmVtcHR5KCk7XG4gICAgaWYgKHR5cGVvZiBnLmdyb3VwcyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgZy5ib3VuZHMgPSBnLmdyb3Vwcy5yZWR1Y2UoZnVuY3Rpb24gKHIsIGMpIHsgcmV0dXJuIGNvbXB1dGVHcm91cEJvdW5kcyhjKS51bmlvbihyKTsgfSwgZy5ib3VuZHMpO1xuICAgIGcuYm91bmRzID0gZy5ib3VuZHMuaW5mbGF0ZShnLnBhZGRpbmcpO1xuICAgIHJldHVybiBnLmJvdW5kcztcbn1cbmV4cG9ydHMuY29tcHV0ZUdyb3VwQm91bmRzID0gY29tcHV0ZUdyb3VwQm91bmRzO1xudmFyIFJlY3RhbmdsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVjdGFuZ2xlKHgsIFgsIHksIFkpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy5YID0gWDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy5ZID0gWTtcbiAgICB9XG4gICAgUmVjdGFuZ2xlLmVtcHR5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFJlY3RhbmdsZShOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpOyB9O1xuICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuY3ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy54ICsgdGhpcy5YKSAvIDI7IH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5jeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLnkgKyB0aGlzLlkpIC8gMjsgfTtcbiAgICBSZWN0YW5nbGUucHJvdG90eXBlLm92ZXJsYXBYID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgdmFyIHV4ID0gdGhpcy5jeCgpLCB2eCA9IHIuY3goKTtcbiAgICAgICAgaWYgKHV4IDw9IHZ4ICYmIHIueCA8IHRoaXMuWClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlggLSByLng7XG4gICAgICAgIGlmICh2eCA8PSB1eCAmJiB0aGlzLnggPCByLlgpXG4gICAgICAgICAgICByZXR1cm4gci5YIC0gdGhpcy54O1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIFJlY3RhbmdsZS5wcm90b3R5cGUub3ZlcmxhcFkgPSBmdW5jdGlvbiAocikge1xuICAgICAgICB2YXIgdXkgPSB0aGlzLmN5KCksIHZ5ID0gci5jeSgpO1xuICAgICAgICBpZiAodXkgPD0gdnkgJiYgci55IDwgdGhpcy5ZKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuWSAtIHIueTtcbiAgICAgICAgaWYgKHZ5IDw9IHV5ICYmIHRoaXMueSA8IHIuWSlcbiAgICAgICAgICAgIHJldHVybiByLlkgLSB0aGlzLnk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5zZXRYQ2VudHJlID0gZnVuY3Rpb24gKGN4KSB7XG4gICAgICAgIHZhciBkeCA9IGN4IC0gdGhpcy5jeCgpO1xuICAgICAgICB0aGlzLnggKz0gZHg7XG4gICAgICAgIHRoaXMuWCArPSBkeDtcbiAgICB9O1xuICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuc2V0WUNlbnRyZSA9IGZ1bmN0aW9uIChjeSkge1xuICAgICAgICB2YXIgZHkgPSBjeSAtIHRoaXMuY3koKTtcbiAgICAgICAgdGhpcy55ICs9IGR5O1xuICAgICAgICB0aGlzLlkgKz0gZHk7XG4gICAgfTtcbiAgICBSZWN0YW5nbGUucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YIC0gdGhpcy54O1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5oZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlkgLSB0aGlzLnk7XG4gICAgfTtcbiAgICBSZWN0YW5nbGUucHJvdG90eXBlLnVuaW9uID0gZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0YW5nbGUoTWF0aC5taW4odGhpcy54LCByLngpLCBNYXRoLm1heCh0aGlzLlgsIHIuWCksIE1hdGgubWluKHRoaXMueSwgci55KSwgTWF0aC5tYXgodGhpcy5ZLCByLlkpKTtcbiAgICB9O1xuICAgIFJlY3RhbmdsZS5wcm90b3R5cGUubGluZUludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgdmFyIHNpZGVzID0gW1t0aGlzLngsIHRoaXMueSwgdGhpcy5YLCB0aGlzLnldLFxuICAgICAgICAgICAgW3RoaXMuWCwgdGhpcy55LCB0aGlzLlgsIHRoaXMuWV0sXG4gICAgICAgICAgICBbdGhpcy5YLCB0aGlzLlksIHRoaXMueCwgdGhpcy5ZXSxcbiAgICAgICAgICAgIFt0aGlzLngsIHRoaXMuWSwgdGhpcy54LCB0aGlzLnldXTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgICAgIHZhciByID0gUmVjdGFuZ2xlLmxpbmVJbnRlcnNlY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHNpZGVzW2ldWzBdLCBzaWRlc1tpXVsxXSwgc2lkZXNbaV1bMl0sIHNpZGVzW2ldWzNdKTtcbiAgICAgICAgICAgIGlmIChyICE9PSBudWxsKVxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbnMucHVzaCh7IHg6IHIueCwgeTogci55IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25zO1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5yYXlJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbiAoeDIsIHkyKSB7XG4gICAgICAgIHZhciBpbnRzID0gdGhpcy5saW5lSW50ZXJzZWN0aW9ucyh0aGlzLmN4KCksIHRoaXMuY3koKSwgeDIsIHkyKTtcbiAgICAgICAgcmV0dXJuIGludHMubGVuZ3RoID4gMCA/IGludHNbMF0gOiBudWxsO1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS52ZXJ0aWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSxcbiAgICAgICAgICAgIHsgeDogdGhpcy5YLCB5OiB0aGlzLnkgfSxcbiAgICAgICAgICAgIHsgeDogdGhpcy5YLCB5OiB0aGlzLlkgfSxcbiAgICAgICAgICAgIHsgeDogdGhpcy54LCB5OiB0aGlzLlkgfVxuICAgICAgICBdO1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLmxpbmVJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0KSB7XG4gICAgICAgIHZhciBkeDEyID0geDIgLSB4MSwgZHgzNCA9IHg0IC0geDMsIGR5MTIgPSB5MiAtIHkxLCBkeTM0ID0geTQgLSB5MywgZGVub21pbmF0b3IgPSBkeTM0ICogZHgxMiAtIGR4MzQgKiBkeTEyO1xuICAgICAgICBpZiAoZGVub21pbmF0b3IgPT0gMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgZHgzMSA9IHgxIC0geDMsIGR5MzEgPSB5MSAtIHkzLCBudW1hID0gZHgzNCAqIGR5MzEgLSBkeTM0ICogZHgzMSwgYSA9IG51bWEgLyBkZW5vbWluYXRvciwgbnVtYiA9IGR4MTIgKiBkeTMxIC0gZHkxMiAqIGR4MzEsIGIgPSBudW1iIC8gZGVub21pbmF0b3I7XG4gICAgICAgIGlmIChhID49IDAgJiYgYSA8PSAxICYmIGIgPj0gMCAmJiBiIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogeDEgKyBhICogZHgxMixcbiAgICAgICAgICAgICAgICB5OiB5MSArIGEgKiBkeTEyXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgUmVjdGFuZ2xlLnByb3RvdHlwZS5pbmZsYXRlID0gZnVuY3Rpb24gKHBhZCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlY3RhbmdsZSh0aGlzLnggLSBwYWQsIHRoaXMuWCArIHBhZCwgdGhpcy55IC0gcGFkLCB0aGlzLlkgKyBwYWQpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlY3RhbmdsZTtcbn0oKSk7XG5leHBvcnRzLlJlY3RhbmdsZSA9IFJlY3RhbmdsZTtcbmZ1bmN0aW9uIG1ha2VFZGdlQmV0d2Vlbihzb3VyY2UsIHRhcmdldCwgYWgpIHtcbiAgICB2YXIgc2kgPSBzb3VyY2UucmF5SW50ZXJzZWN0aW9uKHRhcmdldC5jeCgpLCB0YXJnZXQuY3koKSkgfHwgeyB4OiBzb3VyY2UuY3goKSwgeTogc291cmNlLmN5KCkgfSwgdGkgPSB0YXJnZXQucmF5SW50ZXJzZWN0aW9uKHNvdXJjZS5jeCgpLCBzb3VyY2UuY3koKSkgfHwgeyB4OiB0YXJnZXQuY3goKSwgeTogdGFyZ2V0LmN5KCkgfSwgZHggPSB0aS54IC0gc2kueCwgZHkgPSB0aS55IC0gc2kueSwgbCA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSksIGFsID0gbCAtIGFoO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZUludGVyc2VjdGlvbjogc2ksXG4gICAgICAgIHRhcmdldEludGVyc2VjdGlvbjogdGksXG4gICAgICAgIGFycm93U3RhcnQ6IHsgeDogc2kueCArIGFsICogZHggLyBsLCB5OiBzaS55ICsgYWwgKiBkeSAvIGwgfVxuICAgIH07XG59XG5leHBvcnRzLm1ha2VFZGdlQmV0d2VlbiA9IG1ha2VFZGdlQmV0d2VlbjtcbmZ1bmN0aW9uIG1ha2VFZGdlVG8ocywgdGFyZ2V0LCBhaCkge1xuICAgIHZhciB0aSA9IHRhcmdldC5yYXlJbnRlcnNlY3Rpb24ocy54LCBzLnkpO1xuICAgIGlmICghdGkpXG4gICAgICAgIHRpID0geyB4OiB0YXJnZXQuY3goKSwgeTogdGFyZ2V0LmN5KCkgfTtcbiAgICB2YXIgZHggPSB0aS54IC0gcy54LCBkeSA9IHRpLnkgLSBzLnksIGwgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIHJldHVybiB7IHg6IHRpLnggLSBhaCAqIGR4IC8gbCwgeTogdGkueSAtIGFoICogZHkgLyBsIH07XG59XG5leHBvcnRzLm1ha2VFZGdlVG8gPSBtYWtlRWRnZVRvO1xudmFyIE5vZGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vZGUodiwgciwgcG9zKSB7XG4gICAgICAgIHRoaXMudiA9IHY7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLnByZXYgPSBtYWtlUkJUcmVlKCk7XG4gICAgICAgIHRoaXMubmV4dCA9IG1ha2VSQlRyZWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vZGU7XG59KCkpO1xudmFyIEV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudChpc09wZW4sIHYsIHBvcykge1xuICAgICAgICB0aGlzLmlzT3BlbiA9IGlzT3BlbjtcbiAgICAgICAgdGhpcy52ID0gdjtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgfVxuICAgIHJldHVybiBFdmVudDtcbn0oKSk7XG5mdW5jdGlvbiBjb21wYXJlRXZlbnRzKGEsIGIpIHtcbiAgICBpZiAoYS5wb3MgPiBiLnBvcykge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGEucG9zIDwgYi5wb3MpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoYS5pc09wZW4pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoYi5pc09wZW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWFrZVJCVHJlZSgpIHtcbiAgICByZXR1cm4gbmV3IHJidHJlZV8xLlJCVHJlZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5wb3MgLSBiLnBvczsgfSk7XG59XG52YXIgeFJlY3QgPSB7XG4gICAgZ2V0Q2VudHJlOiBmdW5jdGlvbiAocikgeyByZXR1cm4gci5jeCgpOyB9LFxuICAgIGdldE9wZW46IGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnk7IH0sXG4gICAgZ2V0Q2xvc2U6IGZ1bmN0aW9uIChyKSB7IHJldHVybiByLlk7IH0sXG4gICAgZ2V0U2l6ZTogZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIud2lkdGgoKTsgfSxcbiAgICBtYWtlUmVjdDogZnVuY3Rpb24gKG9wZW4sIGNsb3NlLCBjZW50ZXIsIHNpemUpIHsgcmV0dXJuIG5ldyBSZWN0YW5nbGUoY2VudGVyIC0gc2l6ZSAvIDIsIGNlbnRlciArIHNpemUgLyAyLCBvcGVuLCBjbG9zZSk7IH0sXG4gICAgZmluZE5laWdoYm91cnM6IGZpbmRYTmVpZ2hib3Vyc1xufTtcbnZhciB5UmVjdCA9IHtcbiAgICBnZXRDZW50cmU6IGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmN5KCk7IH0sXG4gICAgZ2V0T3BlbjogZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIueDsgfSxcbiAgICBnZXRDbG9zZTogZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuWDsgfSxcbiAgICBnZXRTaXplOiBmdW5jdGlvbiAocikgeyByZXR1cm4gci5oZWlnaHQoKTsgfSxcbiAgICBtYWtlUmVjdDogZnVuY3Rpb24gKG9wZW4sIGNsb3NlLCBjZW50ZXIsIHNpemUpIHsgcmV0dXJuIG5ldyBSZWN0YW5nbGUob3BlbiwgY2xvc2UsIGNlbnRlciAtIHNpemUgLyAyLCBjZW50ZXIgKyBzaXplIC8gMik7IH0sXG4gICAgZmluZE5laWdoYm91cnM6IGZpbmRZTmVpZ2hib3Vyc1xufTtcbmZ1bmN0aW9uIGdlbmVyYXRlR3JvdXBDb25zdHJhaW50cyhyb290LCBmLCBtaW5TZXAsIGlzQ29udGFpbmVkKSB7XG4gICAgaWYgKGlzQ29udGFpbmVkID09PSB2b2lkIDApIHsgaXNDb250YWluZWQgPSBmYWxzZTsgfVxuICAgIHZhciBwYWRkaW5nID0gcm9vdC5wYWRkaW5nLCBnbiA9IHR5cGVvZiByb290Lmdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcgPyByb290Lmdyb3Vwcy5sZW5ndGggOiAwLCBsbiA9IHR5cGVvZiByb290LmxlYXZlcyAhPT0gJ3VuZGVmaW5lZCcgPyByb290LmxlYXZlcy5sZW5ndGggOiAwLCBjaGlsZENvbnN0cmFpbnRzID0gIWduID8gW11cbiAgICAgICAgOiByb290Lmdyb3Vwcy5yZWR1Y2UoZnVuY3Rpb24gKGNjcywgZykgeyByZXR1cm4gY2NzLmNvbmNhdChnZW5lcmF0ZUdyb3VwQ29uc3RyYWludHMoZywgZiwgbWluU2VwLCB0cnVlKSk7IH0sIFtdKSwgbiA9IChpc0NvbnRhaW5lZCA/IDIgOiAwKSArIGxuICsgZ24sIHZzID0gbmV3IEFycmF5KG4pLCBycyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIGFkZCA9IGZ1bmN0aW9uIChyLCB2KSB7IHJzW2ldID0gcjsgdnNbaSsrXSA9IHY7IH07XG4gICAgaWYgKGlzQ29udGFpbmVkKSB7XG4gICAgICAgIHZhciBiID0gcm9vdC5ib3VuZHMsIGMgPSBmLmdldENlbnRyZShiKSwgcyA9IGYuZ2V0U2l6ZShiKSAvIDIsIG9wZW4gPSBmLmdldE9wZW4oYiksIGNsb3NlID0gZi5nZXRDbG9zZShiKSwgbWluID0gYyAtIHMgKyBwYWRkaW5nIC8gMiwgbWF4ID0gYyArIHMgLSBwYWRkaW5nIC8gMjtcbiAgICAgICAgcm9vdC5taW5WYXIuZGVzaXJlZFBvc2l0aW9uID0gbWluO1xuICAgICAgICBhZGQoZi5tYWtlUmVjdChvcGVuLCBjbG9zZSwgbWluLCBwYWRkaW5nKSwgcm9vdC5taW5WYXIpO1xuICAgICAgICByb290Lm1heFZhci5kZXNpcmVkUG9zaXRpb24gPSBtYXg7XG4gICAgICAgIGFkZChmLm1ha2VSZWN0KG9wZW4sIGNsb3NlLCBtYXgsIHBhZGRpbmcpLCByb290Lm1heFZhcik7XG4gICAgfVxuICAgIGlmIChsbilcbiAgICAgICAgcm9vdC5sZWF2ZXMuZm9yRWFjaChmdW5jdGlvbiAobCkgeyByZXR1cm4gYWRkKGwuYm91bmRzLCBsLnZhcmlhYmxlKTsgfSk7XG4gICAgaWYgKGduKVxuICAgICAgICByb290Lmdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICB2YXIgYiA9IGcuYm91bmRzO1xuICAgICAgICAgICAgYWRkKGYubWFrZVJlY3QoZi5nZXRPcGVuKGIpLCBmLmdldENsb3NlKGIpLCBmLmdldENlbnRyZShiKSwgZi5nZXRTaXplKGIpKSwgZy5taW5WYXIpO1xuICAgICAgICB9KTtcbiAgICB2YXIgY3MgPSBnZW5lcmF0ZUNvbnN0cmFpbnRzKHJzLCB2cywgZiwgbWluU2VwKTtcbiAgICBpZiAoZ24pIHtcbiAgICAgICAgdnMuZm9yRWFjaChmdW5jdGlvbiAodikgeyB2LmNPdXQgPSBbXSwgdi5jSW4gPSBbXTsgfSk7XG4gICAgICAgIGNzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgYy5sZWZ0LmNPdXQucHVzaChjKSwgYy5yaWdodC5jSW4ucHVzaChjKTsgfSk7XG4gICAgICAgIHJvb3QuZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGcpIHtcbiAgICAgICAgICAgIHZhciBnYXBBZGp1c3RtZW50ID0gKGcucGFkZGluZyAtIGYuZ2V0U2l6ZShnLmJvdW5kcykpIC8gMjtcbiAgICAgICAgICAgIGcubWluVmFyLmNJbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmdhcCArPSBnYXBBZGp1c3RtZW50OyB9KTtcbiAgICAgICAgICAgIGcubWluVmFyLmNPdXQuZm9yRWFjaChmdW5jdGlvbiAoYykgeyBjLmxlZnQgPSBnLm1heFZhcjsgYy5nYXAgKz0gZ2FwQWRqdXN0bWVudDsgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRDb25zdHJhaW50cy5jb25jYXQoY3MpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVDb25zdHJhaW50cyhycywgdmFycywgcmVjdCwgbWluU2VwKSB7XG4gICAgdmFyIGksIG4gPSBycy5sZW5ndGg7XG4gICAgdmFyIE4gPSAyICogbjtcbiAgICBjb25zb2xlLmFzc2VydCh2YXJzLmxlbmd0aCA+PSBuKTtcbiAgICB2YXIgZXZlbnRzID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIHIgPSByc1tpXTtcbiAgICAgICAgdmFyIHYgPSBuZXcgTm9kZSh2YXJzW2ldLCByLCByZWN0LmdldENlbnRyZShyKSk7XG4gICAgICAgIGV2ZW50c1tpXSA9IG5ldyBFdmVudCh0cnVlLCB2LCByZWN0LmdldE9wZW4ocikpO1xuICAgICAgICBldmVudHNbaSArIG5dID0gbmV3IEV2ZW50KGZhbHNlLCB2LCByZWN0LmdldENsb3NlKHIpKTtcbiAgICB9XG4gICAgZXZlbnRzLnNvcnQoY29tcGFyZUV2ZW50cyk7XG4gICAgdmFyIGNzID0gbmV3IEFycmF5KCk7XG4gICAgdmFyIHNjYW5saW5lID0gbWFrZVJCVHJlZSgpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBOOyArK2kpIHtcbiAgICAgICAgdmFyIGUgPSBldmVudHNbaV07XG4gICAgICAgIHZhciB2ID0gZS52O1xuICAgICAgICBpZiAoZS5pc09wZW4pIHtcbiAgICAgICAgICAgIHNjYW5saW5lLmluc2VydCh2KTtcbiAgICAgICAgICAgIHJlY3QuZmluZE5laWdoYm91cnModiwgc2NhbmxpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2NhbmxpbmUucmVtb3ZlKHYpO1xuICAgICAgICAgICAgdmFyIG1ha2VDb25zdHJhaW50ID0gZnVuY3Rpb24gKGwsIHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VwID0gKHJlY3QuZ2V0U2l6ZShsLnIpICsgcmVjdC5nZXRTaXplKHIucikpIC8gMiArIG1pblNlcDtcbiAgICAgICAgICAgICAgICBjcy5wdXNoKG5ldyB2cHNjXzEuQ29uc3RyYWludChsLnYsIHIudiwgc2VwKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHZpc2l0TmVpZ2hib3VycyA9IGZ1bmN0aW9uIChmb3J3YXJkLCByZXZlcnNlLCBta2Nvbikge1xuICAgICAgICAgICAgICAgIHZhciB1LCBpdCA9IHZbZm9yd2FyZF0uaXRlcmF0b3IoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHUgPSBpdFtmb3J3YXJkXSgpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBta2Nvbih1LCB2KTtcbiAgICAgICAgICAgICAgICAgICAgdVtyZXZlcnNlXS5yZW1vdmUodik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZpc2l0TmVpZ2hib3VycyhcInByZXZcIiwgXCJuZXh0XCIsIGZ1bmN0aW9uICh1LCB2KSB7IHJldHVybiBtYWtlQ29uc3RyYWludCh1LCB2KTsgfSk7XG4gICAgICAgICAgICB2aXNpdE5laWdoYm91cnMoXCJuZXh0XCIsIFwicHJldlwiLCBmdW5jdGlvbiAodSwgdikgeyByZXR1cm4gbWFrZUNvbnN0cmFpbnQodiwgdSk7IH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUuYXNzZXJ0KHNjYW5saW5lLnNpemUgPT09IDApO1xuICAgIHJldHVybiBjcztcbn1cbmZ1bmN0aW9uIGZpbmRYTmVpZ2hib3Vycyh2LCBzY2FubGluZSkge1xuICAgIHZhciBmID0gZnVuY3Rpb24gKGZvcndhcmQsIHJldmVyc2UpIHtcbiAgICAgICAgdmFyIGl0ID0gc2NhbmxpbmUuZmluZEl0ZXIodik7XG4gICAgICAgIHZhciB1O1xuICAgICAgICB3aGlsZSAoKHUgPSBpdFtmb3J3YXJkXSgpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHVvdmVydlggPSB1LnIub3ZlcmxhcFgodi5yKTtcbiAgICAgICAgICAgIGlmICh1b3ZlcnZYIDw9IDAgfHwgdW92ZXJ2WCA8PSB1LnIub3ZlcmxhcFkodi5yKSkge1xuICAgICAgICAgICAgICAgIHZbZm9yd2FyZF0uaW5zZXJ0KHUpO1xuICAgICAgICAgICAgICAgIHVbcmV2ZXJzZV0uaW5zZXJ0KHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVvdmVydlggPD0gMCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBmKFwibmV4dFwiLCBcInByZXZcIik7XG4gICAgZihcInByZXZcIiwgXCJuZXh0XCIpO1xufVxuZnVuY3Rpb24gZmluZFlOZWlnaGJvdXJzKHYsIHNjYW5saW5lKSB7XG4gICAgdmFyIGYgPSBmdW5jdGlvbiAoZm9yd2FyZCwgcmV2ZXJzZSkge1xuICAgICAgICB2YXIgdSA9IHNjYW5saW5lLmZpbmRJdGVyKHYpW2ZvcndhcmRdKCk7XG4gICAgICAgIGlmICh1ICE9PSBudWxsICYmIHUuci5vdmVybGFwWCh2LnIpID4gMCkge1xuICAgICAgICAgICAgdltmb3J3YXJkXS5pbnNlcnQodSk7XG4gICAgICAgICAgICB1W3JldmVyc2VdLmluc2VydCh2KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZihcIm5leHRcIiwgXCJwcmV2XCIpO1xuICAgIGYoXCJwcmV2XCIsIFwibmV4dFwiKTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlWENvbnN0cmFpbnRzKHJzLCB2YXJzKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlQ29uc3RyYWludHMocnMsIHZhcnMsIHhSZWN0LCAxZS02KTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVYQ29uc3RyYWludHMgPSBnZW5lcmF0ZVhDb25zdHJhaW50cztcbmZ1bmN0aW9uIGdlbmVyYXRlWUNvbnN0cmFpbnRzKHJzLCB2YXJzKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlQ29uc3RyYWludHMocnMsIHZhcnMsIHlSZWN0LCAxZS02KTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVZQ29uc3RyYWludHMgPSBnZW5lcmF0ZVlDb25zdHJhaW50cztcbmZ1bmN0aW9uIGdlbmVyYXRlWEdyb3VwQ29uc3RyYWludHMocm9vdCkge1xuICAgIHJldHVybiBnZW5lcmF0ZUdyb3VwQ29uc3RyYWludHMocm9vdCwgeFJlY3QsIDFlLTYpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZVhHcm91cENvbnN0cmFpbnRzID0gZ2VuZXJhdGVYR3JvdXBDb25zdHJhaW50cztcbmZ1bmN0aW9uIGdlbmVyYXRlWUdyb3VwQ29uc3RyYWludHMocm9vdCkge1xuICAgIHJldHVybiBnZW5lcmF0ZUdyb3VwQ29uc3RyYWludHMocm9vdCwgeVJlY3QsIDFlLTYpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZVlHcm91cENvbnN0cmFpbnRzID0gZ2VuZXJhdGVZR3JvdXBDb25zdHJhaW50cztcbmZ1bmN0aW9uIHJlbW92ZU92ZXJsYXBzKHJzKSB7XG4gICAgdmFyIHZzID0gcnMubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiBuZXcgdnBzY18xLlZhcmlhYmxlKHIuY3goKSk7IH0pO1xuICAgIHZhciBjcyA9IGdlbmVyYXRlWENvbnN0cmFpbnRzKHJzLCB2cyk7XG4gICAgdmFyIHNvbHZlciA9IG5ldyB2cHNjXzEuU29sdmVyKHZzLCBjcyk7XG4gICAgc29sdmVyLnNvbHZlKCk7XG4gICAgdnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gcnNbaV0uc2V0WENlbnRyZSh2LnBvc2l0aW9uKCkpOyB9KTtcbiAgICB2cyA9IHJzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gbmV3IHZwc2NfMS5WYXJpYWJsZShyLmN5KCkpOyB9KTtcbiAgICBjcyA9IGdlbmVyYXRlWUNvbnN0cmFpbnRzKHJzLCB2cyk7XG4gICAgc29sdmVyID0gbmV3IHZwc2NfMS5Tb2x2ZXIodnMsIGNzKTtcbiAgICBzb2x2ZXIuc29sdmUoKTtcbiAgICB2cy5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiByc1tpXS5zZXRZQ2VudHJlKHYucG9zaXRpb24oKSk7IH0pO1xufVxuZXhwb3J0cy5yZW1vdmVPdmVybGFwcyA9IHJlbW92ZU92ZXJsYXBzO1xudmFyIEluZGV4ZWRWYXJpYWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEluZGV4ZWRWYXJpYWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmRleGVkVmFyaWFibGUoaW5kZXgsIHcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgMCwgdykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW5kZXhlZFZhcmlhYmxlO1xufSh2cHNjXzEuVmFyaWFibGUpKTtcbmV4cG9ydHMuSW5kZXhlZFZhcmlhYmxlID0gSW5kZXhlZFZhcmlhYmxlO1xudmFyIFByb2plY3Rpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb2plY3Rpb24obm9kZXMsIGdyb3Vwcywgcm9vdEdyb3VwLCBjb25zdHJhaW50cywgYXZvaWRPdmVybGFwcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAocm9vdEdyb3VwID09PSB2b2lkIDApIHsgcm9vdEdyb3VwID0gbnVsbDsgfVxuICAgICAgICBpZiAoY29uc3RyYWludHMgPT09IHZvaWQgMCkgeyBjb25zdHJhaW50cyA9IG51bGw7IH1cbiAgICAgICAgaWYgKGF2b2lkT3ZlcmxhcHMgPT09IHZvaWQgMCkgeyBhdm9pZE92ZXJsYXBzID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgICAgICB0aGlzLmdyb3VwcyA9IGdyb3VwcztcbiAgICAgICAgdGhpcy5yb290R3JvdXAgPSByb290R3JvdXA7XG4gICAgICAgIHRoaXMuYXZvaWRPdmVybGFwcyA9IGF2b2lkT3ZlcmxhcHM7XG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gbm9kZXMubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gdi52YXJpYWJsZSA9IG5ldyBJbmRleGVkVmFyaWFibGUoaSwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY29uc3RyYWludHMpXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbnN0cmFpbnRzKGNvbnN0cmFpbnRzKTtcbiAgICAgICAgaWYgKGF2b2lkT3ZlcmxhcHMgJiYgcm9vdEdyb3VwICYmIHR5cGVvZiByb290R3JvdXAuZ3JvdXBzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIGlmICghdi53aWR0aCB8fCAhdi5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdi5ib3VuZHMgPSBuZXcgUmVjdGFuZ2xlKHYueCwgdi54LCB2LnksIHYueSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHcyID0gdi53aWR0aCAvIDIsIGgyID0gdi5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIHYuYm91bmRzID0gbmV3IFJlY3RhbmdsZSh2LnggLSB3Miwgdi54ICsgdzIsIHYueSAtIGgyLCB2LnkgKyBoMik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbXB1dGVHcm91cEJvdW5kcyhyb290R3JvdXApO1xuICAgICAgICAgICAgdmFyIGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZykge1xuICAgICAgICAgICAgICAgIF90aGlzLnZhcmlhYmxlc1tpXSA9IGcubWluVmFyID0gbmV3IEluZGV4ZWRWYXJpYWJsZShpKyssIHR5cGVvZiBnLnN0aWZmbmVzcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGcuc3RpZmZuZXNzIDogMC4wMSk7XG4gICAgICAgICAgICAgICAgX3RoaXMudmFyaWFibGVzW2ldID0gZy5tYXhWYXIgPSBuZXcgSW5kZXhlZFZhcmlhYmxlKGkrKywgdHlwZW9mIGcuc3RpZmZuZXNzICE9PSBcInVuZGVmaW5lZFwiID8gZy5zdGlmZm5lc3MgOiAwLjAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVNlcGFyYXRpb24gPSBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gbmV3IHZwc2NfMS5Db25zdHJhaW50KHRoaXMubm9kZXNbYy5sZWZ0XS52YXJpYWJsZSwgdGhpcy5ub2Rlc1tjLnJpZ2h0XS52YXJpYWJsZSwgYy5nYXAsIHR5cGVvZiBjLmVxdWFsaXR5ICE9PSBcInVuZGVmaW5lZFwiID8gYy5lcXVhbGl0eSA6IGZhbHNlKTtcbiAgICB9O1xuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLm1ha2VGZWFzaWJsZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5hdm9pZE92ZXJsYXBzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgYXhpcyA9ICd4JywgZGltID0gJ3dpZHRoJztcbiAgICAgICAgaWYgKGMuYXhpcyA9PT0gJ3gnKVxuICAgICAgICAgICAgYXhpcyA9ICd5JywgZGltID0gJ2hlaWdodCc7XG4gICAgICAgIHZhciB2cyA9IGMub2Zmc2V0cy5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIF90aGlzLm5vZGVzW28ubm9kZV07IH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbYXhpc10gLSBiW2F4aXNdOyB9KTtcbiAgICAgICAgdmFyIHAgPSBudWxsO1xuICAgICAgICB2cy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0UG9zID0gcFtheGlzXSArIHBbZGltXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFBvcyA+IHZbYXhpc10pIHtcbiAgICAgICAgICAgICAgICAgICAgdltheGlzXSA9IG5leHRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IHY7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUHJvamVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQWxpZ25tZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHUgPSB0aGlzLm5vZGVzW2Mub2Zmc2V0c1swXS5ub2RlXS52YXJpYWJsZTtcbiAgICAgICAgdGhpcy5tYWtlRmVhc2libGUoYyk7XG4gICAgICAgIHZhciBjcyA9IGMuYXhpcyA9PT0gJ3gnID8gdGhpcy54Q29uc3RyYWludHMgOiB0aGlzLnlDb25zdHJhaW50cztcbiAgICAgICAgYy5vZmZzZXRzLnNsaWNlKDEpLmZvckVhY2goZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHZhciB2ID0gX3RoaXMubm9kZXNbby5ub2RlXS52YXJpYWJsZTtcbiAgICAgICAgICAgIGNzLnB1c2gobmV3IHZwc2NfMS5Db25zdHJhaW50KHUsIHYsIG8ub2Zmc2V0LCB0cnVlKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUHJvamVjdGlvbi5wcm90b3R5cGUuY3JlYXRlQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoY29uc3RyYWludHMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGlzU2VwID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHR5cGVvZiBjLnR5cGUgPT09ICd1bmRlZmluZWQnIHx8IGMudHlwZSA9PT0gJ3NlcGFyYXRpb24nOyB9O1xuICAgICAgICB0aGlzLnhDb25zdHJhaW50cyA9IGNvbnN0cmFpbnRzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLmF4aXMgPT09IFwieFwiICYmIGlzU2VwKGMpOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gX3RoaXMuY3JlYXRlU2VwYXJhdGlvbihjKTsgfSk7XG4gICAgICAgIHRoaXMueUNvbnN0cmFpbnRzID0gY29uc3RyYWludHNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuYXhpcyA9PT0gXCJ5XCIgJiYgaXNTZXAoYyk7IH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5jcmVhdGVTZXBhcmF0aW9uKGMpOyB9KTtcbiAgICAgICAgY29uc3RyYWludHNcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudHlwZSA9PT0gJ2FsaWdubWVudCc7IH0pXG4gICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gX3RoaXMuY3JlYXRlQWxpZ25tZW50KGMpOyB9KTtcbiAgICB9O1xuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLnNldHVwVmFyaWFibGVzQW5kQm91bmRzID0gZnVuY3Rpb24gKHgwLCB5MCwgZGVzaXJlZCwgZ2V0RGVzaXJlZCkge1xuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIGlmICh2LmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgdi52YXJpYWJsZS53ZWlnaHQgPSB2LmZpeGVkV2VpZ2h0ID8gdi5maXhlZFdlaWdodCA6IDEwMDA7XG4gICAgICAgICAgICAgICAgZGVzaXJlZFtpXSA9IGdldERlc2lyZWQodik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2LnZhcmlhYmxlLndlaWdodCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdyA9ICh2LndpZHRoIHx8IDApIC8gMiwgaCA9ICh2LmhlaWdodCB8fCAwKSAvIDI7XG4gICAgICAgICAgICB2YXIgaXggPSB4MFtpXSwgaXkgPSB5MFtpXTtcbiAgICAgICAgICAgIHYuYm91bmRzID0gbmV3IFJlY3RhbmdsZShpeCAtIHcsIGl4ICsgdywgaXkgLSBoLCBpeSArIGgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLnhQcm9qZWN0ID0gZnVuY3Rpb24gKHgwLCB5MCwgeCkge1xuICAgICAgICBpZiAoIXRoaXMucm9vdEdyb3VwICYmICEodGhpcy5hdm9pZE92ZXJsYXBzIHx8IHRoaXMueENvbnN0cmFpbnRzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5wcm9qZWN0KHgwLCB5MCwgeDAsIHgsIGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnB4OyB9LCB0aGlzLnhDb25zdHJhaW50cywgZ2VuZXJhdGVYR3JvdXBDb25zdHJhaW50cywgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYuYm91bmRzLnNldFhDZW50cmUoeFt2LnZhcmlhYmxlLmluZGV4XSA9IHYudmFyaWFibGUucG9zaXRpb24oKSk7IH0sIGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICB2YXIgeG1pbiA9IHhbZy5taW5WYXIuaW5kZXhdID0gZy5taW5WYXIucG9zaXRpb24oKTtcbiAgICAgICAgICAgIHZhciB4bWF4ID0geFtnLm1heFZhci5pbmRleF0gPSBnLm1heFZhci5wb3NpdGlvbigpO1xuICAgICAgICAgICAgdmFyIHAyID0gZy5wYWRkaW5nIC8gMjtcbiAgICAgICAgICAgIGcuYm91bmRzLnggPSB4bWluIC0gcDI7XG4gICAgICAgICAgICBnLmJvdW5kcy5YID0geG1heCArIHAyO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLnlQcm9qZWN0ID0gZnVuY3Rpb24gKHgwLCB5MCwgeSkge1xuICAgICAgICBpZiAoIXRoaXMucm9vdEdyb3VwICYmICF0aGlzLnlDb25zdHJhaW50cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5wcm9qZWN0KHgwLCB5MCwgeTAsIHksIGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnB5OyB9LCB0aGlzLnlDb25zdHJhaW50cywgZ2VuZXJhdGVZR3JvdXBDb25zdHJhaW50cywgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYuYm91bmRzLnNldFlDZW50cmUoeVt2LnZhcmlhYmxlLmluZGV4XSA9IHYudmFyaWFibGUucG9zaXRpb24oKSk7IH0sIGZ1bmN0aW9uIChnKSB7XG4gICAgICAgICAgICB2YXIgeW1pbiA9IHlbZy5taW5WYXIuaW5kZXhdID0gZy5taW5WYXIucG9zaXRpb24oKTtcbiAgICAgICAgICAgIHZhciB5bWF4ID0geVtnLm1heFZhci5pbmRleF0gPSBnLm1heFZhci5wb3NpdGlvbigpO1xuICAgICAgICAgICAgdmFyIHAyID0gZy5wYWRkaW5nIC8gMjtcbiAgICAgICAgICAgIGcuYm91bmRzLnkgPSB5bWluIC0gcDI7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICBnLmJvdW5kcy5ZID0geW1heCArIHAyO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFByb2plY3Rpb24ucHJvdG90eXBlLnByb2plY3RGdW5jdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBmdW5jdGlvbiAoeDAsIHkwLCB4KSB7IHJldHVybiBfdGhpcy54UHJvamVjdCh4MCwgeTAsIHgpOyB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKHgwLCB5MCwgeSkgeyByZXR1cm4gX3RoaXMueVByb2plY3QoeDAsIHkwLCB5KTsgfVxuICAgICAgICBdO1xuICAgIH07XG4gICAgUHJvamVjdGlvbi5wcm90b3R5cGUucHJvamVjdCA9IGZ1bmN0aW9uICh4MCwgeTAsIHN0YXJ0LCBkZXNpcmVkLCBnZXREZXNpcmVkLCBjcywgZ2VuZXJhdGVDb25zdHJhaW50cywgdXBkYXRlTm9kZUJvdW5kcywgdXBkYXRlR3JvdXBCb3VuZHMpIHtcbiAgICAgICAgdGhpcy5zZXR1cFZhcmlhYmxlc0FuZEJvdW5kcyh4MCwgeTAsIGRlc2lyZWQsIGdldERlc2lyZWQpO1xuICAgICAgICBpZiAodGhpcy5yb290R3JvdXAgJiYgdGhpcy5hdm9pZE92ZXJsYXBzKSB7XG4gICAgICAgICAgICBjb21wdXRlR3JvdXBCb3VuZHModGhpcy5yb290R3JvdXApO1xuICAgICAgICAgICAgY3MgPSBjcy5jb25jYXQoZ2VuZXJhdGVDb25zdHJhaW50cyh0aGlzLnJvb3RHcm91cCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29sdmUodGhpcy52YXJpYWJsZXMsIGNzLCBzdGFydCwgZGVzaXJlZCk7XG4gICAgICAgIHRoaXMubm9kZXMuZm9yRWFjaCh1cGRhdGVOb2RlQm91bmRzKTtcbiAgICAgICAgaWYgKHRoaXMucm9vdEdyb3VwICYmIHRoaXMuYXZvaWRPdmVybGFwcykge1xuICAgICAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCh1cGRhdGVHcm91cEJvdW5kcyk7XG4gICAgICAgICAgICBjb21wdXRlR3JvdXBCb3VuZHModGhpcy5yb290R3JvdXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQcm9qZWN0aW9uLnByb3RvdHlwZS5zb2x2ZSA9IGZ1bmN0aW9uICh2cywgY3MsIHN0YXJ0aW5nLCBkZXNpcmVkKSB7XG4gICAgICAgIHZhciBzb2x2ZXIgPSBuZXcgdnBzY18xLlNvbHZlcih2cywgY3MpO1xuICAgICAgICBzb2x2ZXIuc2V0U3RhcnRpbmdQb3NpdGlvbnMoc3RhcnRpbmcpO1xuICAgICAgICBzb2x2ZXIuc2V0RGVzaXJlZFBvc2l0aW9ucyhkZXNpcmVkKTtcbiAgICAgICAgc29sdmVyLnNvbHZlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJvamVjdGlvbjtcbn0oKSk7XG5leHBvcnRzLlByb2plY3Rpb24gPSBQcm9qZWN0aW9uO1xuXG59LHtcIi4vcmJ0cmVlXCI6MTYsXCIuL3Zwc2NcIjoxOX1dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHBxdWV1ZV8xID0gcmVxdWlyZShcIi4vcHF1ZXVlXCIpO1xudmFyIE5laWdoYm91ciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmVpZ2hib3VyKGlkLCBkaXN0YW5jZSkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIE5laWdoYm91cjtcbn0oKSk7XG52YXIgTm9kZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9kZShpZCkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMubmVpZ2hib3VycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gTm9kZTtcbn0oKSk7XG52YXIgUXVldWVFbnRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVldWVFbnRyeShub2RlLCBwcmV2LCBkKSB7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgICAgIHRoaXMuZCA9IGQ7XG4gICAgfVxuICAgIHJldHVybiBRdWV1ZUVudHJ5O1xufSgpKTtcbnZhciBDYWxjdWxhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYWxjdWxhdG9yKG4sIGVzLCBnZXRTb3VyY2VJbmRleCwgZ2V0VGFyZ2V0SW5kZXgsIGdldExlbmd0aCkge1xuICAgICAgICB0aGlzLm4gPSBuO1xuICAgICAgICB0aGlzLmVzID0gZXM7XG4gICAgICAgIHRoaXMubmVpZ2hib3VycyA9IG5ldyBBcnJheSh0aGlzLm4pO1xuICAgICAgICB2YXIgaSA9IHRoaXMubjtcbiAgICAgICAgd2hpbGUgKGktLSlcbiAgICAgICAgICAgIHRoaXMubmVpZ2hib3Vyc1tpXSA9IG5ldyBOb2RlKGkpO1xuICAgICAgICBpID0gdGhpcy5lcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5lc1tpXTtcbiAgICAgICAgICAgIHZhciB1ID0gZ2V0U291cmNlSW5kZXgoZSksIHYgPSBnZXRUYXJnZXRJbmRleChlKTtcbiAgICAgICAgICAgIHZhciBkID0gZ2V0TGVuZ3RoKGUpO1xuICAgICAgICAgICAgdGhpcy5uZWlnaGJvdXJzW3VdLm5laWdoYm91cnMucHVzaChuZXcgTmVpZ2hib3VyKHYsIGQpKTtcbiAgICAgICAgICAgIHRoaXMubmVpZ2hib3Vyc1t2XS5uZWlnaGJvdXJzLnB1c2gobmV3IE5laWdoYm91cih1LCBkKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQ2FsY3VsYXRvci5wcm90b3R5cGUuRGlzdGFuY2VNYXRyaXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBEID0gbmV3IEFycmF5KHRoaXMubik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uOyArK2kpIHtcbiAgICAgICAgICAgIERbaV0gPSB0aGlzLmRpamtzdHJhTmVpZ2hib3VycyhpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRDtcbiAgICB9O1xuICAgIENhbGN1bGF0b3IucHJvdG90eXBlLkRpc3RhbmNlc0Zyb21Ob2RlID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpamtzdHJhTmVpZ2hib3VycyhzdGFydCk7XG4gICAgfTtcbiAgICBDYWxjdWxhdG9yLnByb3RvdHlwZS5QYXRoRnJvbU5vZGVUb05vZGUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaWprc3RyYU5laWdoYm91cnMoc3RhcnQsIGVuZCk7XG4gICAgfTtcbiAgICBDYWxjdWxhdG9yLnByb3RvdHlwZS5QYXRoRnJvbU5vZGVUb05vZGVXaXRoUHJldkNvc3QgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcHJldkNvc3QpIHtcbiAgICAgICAgdmFyIHEgPSBuZXcgcHF1ZXVlXzEuUHJpb3JpdHlRdWV1ZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5kIDw9IGIuZDsgfSksIHUgPSB0aGlzLm5laWdoYm91cnNbc3RhcnRdLCBxdSA9IG5ldyBRdWV1ZUVudHJ5KHUsIG51bGwsIDApLCB2aXNpdGVkRnJvbSA9IHt9O1xuICAgICAgICBxLnB1c2gocXUpO1xuICAgICAgICB3aGlsZSAoIXEuZW1wdHkoKSkge1xuICAgICAgICAgICAgcXUgPSBxLnBvcCgpO1xuICAgICAgICAgICAgdSA9IHF1Lm5vZGU7XG4gICAgICAgICAgICBpZiAodS5pZCA9PT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHUubmVpZ2hib3Vycy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5laWdoYm91ciA9IHUubmVpZ2hib3Vyc1tpXSwgdiA9IHRoaXMubmVpZ2hib3Vyc1tuZWlnaGJvdXIuaWRdO1xuICAgICAgICAgICAgICAgIGlmIChxdS5wcmV2ICYmIHYuaWQgPT09IHF1LnByZXYubm9kZS5pZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIHZpZHVpZCA9IHYuaWQgKyAnLCcgKyB1LmlkO1xuICAgICAgICAgICAgICAgIGlmICh2aWR1aWQgaW4gdmlzaXRlZEZyb20gJiYgdmlzaXRlZEZyb21bdmlkdWlkXSA8PSBxdS5kKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB2YXIgY2MgPSBxdS5wcmV2ID8gcHJldkNvc3QocXUucHJldi5ub2RlLmlkLCB1LmlkLCB2LmlkKSA6IDAsIHQgPSBxdS5kICsgbmVpZ2hib3VyLmRpc3RhbmNlICsgY2M7XG4gICAgICAgICAgICAgICAgdmlzaXRlZEZyb21bdmlkdWlkXSA9IHQ7XG4gICAgICAgICAgICAgICAgcS5wdXNoKG5ldyBRdWV1ZUVudHJ5KHYsIHF1LCB0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhdGggPSBbXTtcbiAgICAgICAgd2hpbGUgKHF1LnByZXYpIHtcbiAgICAgICAgICAgIHF1ID0gcXUucHJldjtcbiAgICAgICAgICAgIHBhdGgucHVzaChxdS5ub2RlLmlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9O1xuICAgIENhbGN1bGF0b3IucHJvdG90eXBlLmRpamtzdHJhTmVpZ2hib3VycyA9IGZ1bmN0aW9uIChzdGFydCwgZGVzdCkge1xuICAgICAgICBpZiAoZGVzdCA9PT0gdm9pZCAwKSB7IGRlc3QgPSAtMTsgfVxuICAgICAgICB2YXIgcSA9IG5ldyBwcXVldWVfMS5Qcmlvcml0eVF1ZXVlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmQgPD0gYi5kOyB9KSwgaSA9IHRoaXMubmVpZ2hib3Vycy5sZW5ndGgsIGQgPSBuZXcgQXJyYXkoaSk7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5uZWlnaGJvdXJzW2ldO1xuICAgICAgICAgICAgbm9kZS5kID0gaSA9PT0gc3RhcnQgPyAwIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgbm9kZS5xID0gcS5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICghcS5lbXB0eSgpKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHEucG9wKCk7XG4gICAgICAgICAgICBkW3UuaWRdID0gdS5kO1xuICAgICAgICAgICAgaWYgKHUuaWQgPT09IGRlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB2ID0gdTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHlwZW9mIHYucHJldiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wdXNoKHYucHJldi5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHYgPSB2LnByZXY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSA9IHUubmVpZ2hib3Vycy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5laWdoYm91ciA9IHUubmVpZ2hib3Vyc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IHRoaXMubmVpZ2hib3Vyc1tuZWlnaGJvdXIuaWRdO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdS5kICsgbmVpZ2hib3VyLmRpc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmICh1LmQgIT09IE51bWJlci5NQVhfVkFMVUUgJiYgdi5kID4gdCkge1xuICAgICAgICAgICAgICAgICAgICB2LmQgPSB0O1xuICAgICAgICAgICAgICAgICAgICB2LnByZXYgPSB1O1xuICAgICAgICAgICAgICAgICAgICBxLnJlZHVjZUtleSh2LnEsIHYsIGZ1bmN0aW9uIChlLCBxKSB7IHJldHVybiBlLnEgPSBxOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfTtcbiAgICByZXR1cm4gQ2FsY3VsYXRvcjtcbn0oKSk7XG5leHBvcnRzLkNhbGN1bGF0b3IgPSBDYWxjdWxhdG9yO1xuXG59LHtcIi4vcHF1ZXVlXCI6MTV9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBQb3NpdGlvblN0YXRzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb3NpdGlvblN0YXRzKHNjYWxlKSB7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICAgICAgdGhpcy5BQiA9IDA7XG4gICAgICAgIHRoaXMuQUQgPSAwO1xuICAgICAgICB0aGlzLkEyID0gMDtcbiAgICB9XG4gICAgUG9zaXRpb25TdGF0cy5wcm90b3R5cGUuYWRkVmFyaWFibGUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB2YXIgYWkgPSB0aGlzLnNjYWxlIC8gdi5zY2FsZTtcbiAgICAgICAgdmFyIGJpID0gdi5vZmZzZXQgLyB2LnNjYWxlO1xuICAgICAgICB2YXIgd2kgPSB2LndlaWdodDtcbiAgICAgICAgdGhpcy5BQiArPSB3aSAqIGFpICogYmk7XG4gICAgICAgIHRoaXMuQUQgKz0gd2kgKiBhaSAqIHYuZGVzaXJlZFBvc2l0aW9uO1xuICAgICAgICB0aGlzLkEyICs9IHdpICogYWkgKiBhaTtcbiAgICB9O1xuICAgIFBvc2l0aW9uU3RhdHMucHJvdG90eXBlLmdldFBvc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5BRCAtIHRoaXMuQUIpIC8gdGhpcy5BMjtcbiAgICB9O1xuICAgIHJldHVybiBQb3NpdGlvblN0YXRzO1xufSgpKTtcbmV4cG9ydHMuUG9zaXRpb25TdGF0cyA9IFBvc2l0aW9uU3RhdHM7XG52YXIgQ29uc3RyYWludCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3RyYWludChsZWZ0LCByaWdodCwgZ2FwLCBlcXVhbGl0eSkge1xuICAgICAgICBpZiAoZXF1YWxpdHkgPT09IHZvaWQgMCkgeyBlcXVhbGl0eSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgdGhpcy5nYXAgPSBnYXA7XG4gICAgICAgIHRoaXMuZXF1YWxpdHkgPSBlcXVhbGl0eTtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51bnNhdGlzZmlhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgdGhpcy5nYXAgPSBnYXA7XG4gICAgICAgIHRoaXMuZXF1YWxpdHkgPSBlcXVhbGl0eTtcbiAgICB9XG4gICAgQ29uc3RyYWludC5wcm90b3R5cGUuc2xhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuc2F0aXNmaWFibGUgPyBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgICAgICAgICA6IHRoaXMucmlnaHQuc2NhbGUgKiB0aGlzLnJpZ2h0LnBvc2l0aW9uKCkgLSB0aGlzLmdhcFxuICAgICAgICAgICAgICAgIC0gdGhpcy5sZWZ0LnNjYWxlICogdGhpcy5sZWZ0LnBvc2l0aW9uKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3RyYWludDtcbn0oKSk7XG5leHBvcnRzLkNvbnN0cmFpbnQgPSBDb25zdHJhaW50O1xudmFyIFZhcmlhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWYXJpYWJsZShkZXNpcmVkUG9zaXRpb24sIHdlaWdodCwgc2NhbGUpIHtcbiAgICAgICAgaWYgKHdlaWdodCA9PT0gdm9pZCAwKSB7IHdlaWdodCA9IDE7IH1cbiAgICAgICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XG4gICAgICAgIHRoaXMuZGVzaXJlZFBvc2l0aW9uID0gZGVzaXJlZFBvc2l0aW9uO1xuICAgICAgICB0aGlzLndlaWdodCA9IHdlaWdodDtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfVxuICAgIFZhcmlhYmxlLnByb3RvdHlwZS5kZmR2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gMi4wICogdGhpcy53ZWlnaHQgKiAodGhpcy5wb3NpdGlvbigpIC0gdGhpcy5kZXNpcmVkUG9zaXRpb24pO1xuICAgIH07XG4gICAgVmFyaWFibGUucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYmxvY2sucHMuc2NhbGUgKiB0aGlzLmJsb2NrLnBvc24gKyB0aGlzLm9mZnNldCkgLyB0aGlzLnNjYWxlO1xuICAgIH07XG4gICAgVmFyaWFibGUucHJvdG90eXBlLnZpc2l0TmVpZ2hib3VycyA9IGZ1bmN0aW9uIChwcmV2LCBmKSB7XG4gICAgICAgIHZhciBmZiA9IGZ1bmN0aW9uIChjLCBuZXh0KSB7IHJldHVybiBjLmFjdGl2ZSAmJiBwcmV2ICE9PSBuZXh0ICYmIGYoYywgbmV4dCk7IH07XG4gICAgICAgIHRoaXMuY091dC5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBmZihjLCBjLnJpZ2h0KTsgfSk7XG4gICAgICAgIHRoaXMuY0luLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGZmKGMsIGMubGVmdCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZhcmlhYmxlO1xufSgpKTtcbmV4cG9ydHMuVmFyaWFibGUgPSBWYXJpYWJsZTtcbnZhciBCbG9jayA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmxvY2sodikge1xuICAgICAgICB0aGlzLnZhcnMgPSBbXTtcbiAgICAgICAgdi5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnBzID0gbmV3IFBvc2l0aW9uU3RhdHModi5zY2FsZSk7XG4gICAgICAgIHRoaXMuYWRkVmFyaWFibGUodik7XG4gICAgfVxuICAgIEJsb2NrLnByb3RvdHlwZS5hZGRWYXJpYWJsZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHYuYmxvY2sgPSB0aGlzO1xuICAgICAgICB0aGlzLnZhcnMucHVzaCh2KTtcbiAgICAgICAgdGhpcy5wcy5hZGRWYXJpYWJsZSh2KTtcbiAgICAgICAgdGhpcy5wb3NuID0gdGhpcy5wcy5nZXRQb3NuKCk7XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUudXBkYXRlV2VpZ2h0ZWRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcy5BQiA9IHRoaXMucHMuQUQgPSB0aGlzLnBzLkEyID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0aGlzLnZhcnMubGVuZ3RoOyBpIDwgbjsgKytpKVxuICAgICAgICAgICAgdGhpcy5wcy5hZGRWYXJpYWJsZSh0aGlzLnZhcnNbaV0pO1xuICAgICAgICB0aGlzLnBvc24gPSB0aGlzLnBzLmdldFBvc24oKTtcbiAgICB9O1xuICAgIEJsb2NrLnByb3RvdHlwZS5jb21wdXRlX2xtID0gZnVuY3Rpb24gKHYsIHUsIHBvc3RBY3Rpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRmZHYgPSB2LmRmZHYoKTtcbiAgICAgICAgdi52aXNpdE5laWdoYm91cnModSwgZnVuY3Rpb24gKGMsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciBfZGZkdiA9IF90aGlzLmNvbXB1dGVfbG0obmV4dCwgdiwgcG9zdEFjdGlvbik7XG4gICAgICAgICAgICBpZiAobmV4dCA9PT0gYy5yaWdodCkge1xuICAgICAgICAgICAgICAgIGRmZHYgKz0gX2RmZHYgKiBjLmxlZnQuc2NhbGU7XG4gICAgICAgICAgICAgICAgYy5sbSA9IF9kZmR2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGZkdiArPSBfZGZkdiAqIGMucmlnaHQuc2NhbGU7XG4gICAgICAgICAgICAgICAgYy5sbSA9IC1fZGZkdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvc3RBY3Rpb24oYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGZkdiAvIHYuc2NhbGU7XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUucG9wdWxhdGVTcGxpdEJsb2NrID0gZnVuY3Rpb24gKHYsIHByZXYpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdi52aXNpdE5laWdoYm91cnMocHJldiwgZnVuY3Rpb24gKGMsIG5leHQpIHtcbiAgICAgICAgICAgIG5leHQub2Zmc2V0ID0gdi5vZmZzZXQgKyAobmV4dCA9PT0gYy5yaWdodCA/IGMuZ2FwIDogLWMuZ2FwKTtcbiAgICAgICAgICAgIF90aGlzLmFkZFZhcmlhYmxlKG5leHQpO1xuICAgICAgICAgICAgX3RoaXMucG9wdWxhdGVTcGxpdEJsb2NrKG5leHQsIHYpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEJsb2NrLnByb3RvdHlwZS50cmF2ZXJzZSA9IGZ1bmN0aW9uICh2aXNpdCwgYWNjLCB2LCBwcmV2KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh2ID09PSB2b2lkIDApIHsgdiA9IHRoaXMudmFyc1swXTsgfVxuICAgICAgICBpZiAocHJldiA9PT0gdm9pZCAwKSB7IHByZXYgPSBudWxsOyB9XG4gICAgICAgIHYudmlzaXROZWlnaGJvdXJzKHByZXYsIGZ1bmN0aW9uIChjLCBuZXh0KSB7XG4gICAgICAgICAgICBhY2MucHVzaCh2aXNpdChjKSk7XG4gICAgICAgICAgICBfdGhpcy50cmF2ZXJzZSh2aXNpdCwgYWNjLCBuZXh0LCB2KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUuZmluZE1pbkxNID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbSA9IG51bGw7XG4gICAgICAgIHRoaXMuY29tcHV0ZV9sbSh0aGlzLnZhcnNbMF0sIG51bGwsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBpZiAoIWMuZXF1YWxpdHkgJiYgKG0gPT09IG51bGwgfHwgYy5sbSA8IG0ubG0pKVxuICAgICAgICAgICAgICAgIG0gPSBjO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUuZmluZE1pbkxNQmV0d2VlbiA9IGZ1bmN0aW9uIChsdiwgcnYpIHtcbiAgICAgICAgdGhpcy5jb21wdXRlX2xtKGx2LCBudWxsLCBmdW5jdGlvbiAoKSB7IH0pO1xuICAgICAgICB2YXIgbSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmluZFBhdGgobHYsIG51bGwsIHJ2LCBmdW5jdGlvbiAoYywgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFjLmVxdWFsaXR5ICYmIGMucmlnaHQgPT09IG5leHQgJiYgKG0gPT09IG51bGwgfHwgYy5sbSA8IG0ubG0pKVxuICAgICAgICAgICAgICAgIG0gPSBjO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUuZmluZFBhdGggPSBmdW5jdGlvbiAodiwgcHJldiwgdG8sIHZpc2l0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBlbmRGb3VuZCA9IGZhbHNlO1xuICAgICAgICB2LnZpc2l0TmVpZ2hib3VycyhwcmV2LCBmdW5jdGlvbiAoYywgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFlbmRGb3VuZCAmJiAobmV4dCA9PT0gdG8gfHwgX3RoaXMuZmluZFBhdGgobmV4dCwgdiwgdG8sIHZpc2l0KSkpIHtcbiAgICAgICAgICAgICAgICBlbmRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmlzaXQoYywgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZW5kRm91bmQ7XG4gICAgfTtcbiAgICBCbG9jay5wcm90b3R5cGUuaXNBY3RpdmVEaXJlY3RlZFBhdGhCZXR3ZWVuID0gZnVuY3Rpb24gKHUsIHYpIHtcbiAgICAgICAgaWYgKHUgPT09IHYpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIGkgPSB1LmNPdXQubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHUuY091dFtpXTtcbiAgICAgICAgICAgIGlmIChjLmFjdGl2ZSAmJiB0aGlzLmlzQWN0aXZlRGlyZWN0ZWRQYXRoQmV0d2VlbihjLnJpZ2h0LCB2KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBCbG9jay5zcGxpdCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBbQmxvY2suY3JlYXRlU3BsaXRCbG9jayhjLmxlZnQpLCBCbG9jay5jcmVhdGVTcGxpdEJsb2NrKGMucmlnaHQpXTtcbiAgICB9O1xuICAgIEJsb2NrLmNyZWF0ZVNwbGl0QmxvY2sgPSBmdW5jdGlvbiAoc3RhcnRWYXIpIHtcbiAgICAgICAgdmFyIGIgPSBuZXcgQmxvY2soc3RhcnRWYXIpO1xuICAgICAgICBiLnBvcHVsYXRlU3BsaXRCbG9jayhzdGFydFZhciwgbnVsbCk7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH07XG4gICAgQmxvY2sucHJvdG90eXBlLnNwbGl0QmV0d2VlbiA9IGZ1bmN0aW9uICh2bCwgdnIpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLmZpbmRNaW5MTUJldHdlZW4odmwsIHZyKTtcbiAgICAgICAgaWYgKGMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBicyA9IEJsb2NrLnNwbGl0KGMpO1xuICAgICAgICAgICAgcmV0dXJuIHsgY29uc3RyYWludDogYywgbGI6IGJzWzBdLCByYjogYnNbMV0gfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIEJsb2NrLnByb3RvdHlwZS5tZXJnZUFjcm9zcyA9IGZ1bmN0aW9uIChiLCBjLCBkaXN0KSB7XG4gICAgICAgIGMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBiLnZhcnMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgdiA9IGIudmFyc1tpXTtcbiAgICAgICAgICAgIHYub2Zmc2V0ICs9IGRpc3Q7XG4gICAgICAgICAgICB0aGlzLmFkZFZhcmlhYmxlKHYpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zbiA9IHRoaXMucHMuZ2V0UG9zbigpO1xuICAgIH07XG4gICAgQmxvY2sucHJvdG90eXBlLmNvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdW0gPSAwLCBpID0gdGhpcy52YXJzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgdmFyIHYgPSB0aGlzLnZhcnNbaV0sIGQgPSB2LnBvc2l0aW9uKCkgLSB2LmRlc2lyZWRQb3NpdGlvbjtcbiAgICAgICAgICAgIHN1bSArPSBkICogZCAqIHYud2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgfTtcbiAgICByZXR1cm4gQmxvY2s7XG59KCkpO1xuZXhwb3J0cy5CbG9jayA9IEJsb2NrO1xudmFyIEJsb2NrcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmxvY2tzKHZzKSB7XG4gICAgICAgIHRoaXMudnMgPSB2cztcbiAgICAgICAgdmFyIG4gPSB2cy5sZW5ndGg7XG4gICAgICAgIHRoaXMubGlzdCA9IG5ldyBBcnJheShuKTtcbiAgICAgICAgd2hpbGUgKG4tLSkge1xuICAgICAgICAgICAgdmFyIGIgPSBuZXcgQmxvY2sodnNbbl0pO1xuICAgICAgICAgICAgdGhpcy5saXN0W25dID0gYjtcbiAgICAgICAgICAgIGIuYmxvY2tJbmQgPSBuO1xuICAgICAgICB9XG4gICAgfVxuICAgIEJsb2Nrcy5wcm90b3R5cGUuY29zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1bSA9IDAsIGkgPSB0aGlzLmxpc3QubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgc3VtICs9IHRoaXMubGlzdFtpXS5jb3N0KCk7XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgfTtcbiAgICBCbG9ja3MucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGIuYmxvY2tJbmQgPSB0aGlzLmxpc3QubGVuZ3RoO1xuICAgICAgICB0aGlzLmxpc3QucHVzaChiKTtcbiAgICB9O1xuICAgIEJsb2Nrcy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgdmFyIGxhc3QgPSB0aGlzLmxpc3QubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIHN3YXBCbG9jayA9IHRoaXMubGlzdFtsYXN0XTtcbiAgICAgICAgdGhpcy5saXN0Lmxlbmd0aCA9IGxhc3Q7XG4gICAgICAgIGlmIChiICE9PSBzd2FwQmxvY2spIHtcbiAgICAgICAgICAgIHRoaXMubGlzdFtiLmJsb2NrSW5kXSA9IHN3YXBCbG9jaztcbiAgICAgICAgICAgIHN3YXBCbG9jay5ibG9ja0luZCA9IGIuYmxvY2tJbmQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJsb2Nrcy5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgbCA9IGMubGVmdC5ibG9jaywgciA9IGMucmlnaHQuYmxvY2s7XG4gICAgICAgIHZhciBkaXN0ID0gYy5yaWdodC5vZmZzZXQgLSBjLmxlZnQub2Zmc2V0IC0gYy5nYXA7XG4gICAgICAgIGlmIChsLnZhcnMubGVuZ3RoIDwgci52YXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgci5tZXJnZUFjcm9zcyhsLCBjLCBkaXN0KTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbC5tZXJnZUFjcm9zcyhyLCBjLCAtZGlzdCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmxvY2tzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgdGhpcy5saXN0LmZvckVhY2goZik7XG4gICAgfTtcbiAgICBCbG9ja3MucHJvdG90eXBlLnVwZGF0ZUJsb2NrUG9zaXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAoYikgeyByZXR1cm4gYi51cGRhdGVXZWlnaHRlZFBvc2l0aW9uKCk7IH0pO1xuICAgIH07XG4gICAgQmxvY2tzLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChpbmFjdGl2ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnVwZGF0ZUJsb2NrUG9zaXRpb25zKCk7XG4gICAgICAgIHRoaXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICB2YXIgdiA9IGIuZmluZE1pbkxNKCk7XG4gICAgICAgICAgICBpZiAodiAhPT0gbnVsbCAmJiB2LmxtIDwgU29sdmVyLkxBR1JBTkdJQU5fVE9MRVJBTkNFKSB7XG4gICAgICAgICAgICAgICAgYiA9IHYubGVmdC5ibG9jaztcbiAgICAgICAgICAgICAgICBCbG9jay5zcGxpdCh2KS5mb3JFYWNoKGZ1bmN0aW9uIChuYikgeyByZXR1cm4gX3RoaXMuaW5zZXJ0KG5iKTsgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlKGIpO1xuICAgICAgICAgICAgICAgIGluYWN0aXZlLnB1c2godik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEJsb2Nrcztcbn0oKSk7XG5leHBvcnRzLkJsb2NrcyA9IEJsb2NrcztcbnZhciBTb2x2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNvbHZlcih2cywgY3MpIHtcbiAgICAgICAgdGhpcy52cyA9IHZzO1xuICAgICAgICB0aGlzLmNzID0gY3M7XG4gICAgICAgIHRoaXMudnMgPSB2cztcbiAgICAgICAgdnMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdi5jSW4gPSBbXSwgdi5jT3V0ID0gW107XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNzID0gY3M7XG4gICAgICAgIGNzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGMubGVmdC5jT3V0LnB1c2goYyk7XG4gICAgICAgICAgICBjLnJpZ2h0LmNJbi5wdXNoKGMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmFjdGl2ZSA9IGNzLm1hcChmdW5jdGlvbiAoYykgeyBjLmFjdGl2ZSA9IGZhbHNlOyByZXR1cm4gYzsgfSk7XG4gICAgICAgIHRoaXMuYnMgPSBudWxsO1xuICAgIH1cbiAgICBTb2x2ZXIucHJvdG90eXBlLmNvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJzLmNvc3QoKTtcbiAgICB9O1xuICAgIFNvbHZlci5wcm90b3R5cGUuc2V0U3RhcnRpbmdQb3NpdGlvbnMgPSBmdW5jdGlvbiAocHMpIHtcbiAgICAgICAgdGhpcy5pbmFjdGl2ZSA9IHRoaXMuY3MubWFwKGZ1bmN0aW9uIChjKSB7IGMuYWN0aXZlID0gZmFsc2U7IHJldHVybiBjOyB9KTtcbiAgICAgICAgdGhpcy5icyA9IG5ldyBCbG9ja3ModGhpcy52cyk7XG4gICAgICAgIHRoaXMuYnMuZm9yRWFjaChmdW5jdGlvbiAoYiwgaSkgeyByZXR1cm4gYi5wb3NuID0gcHNbaV07IH0pO1xuICAgIH07XG4gICAgU29sdmVyLnByb3RvdHlwZS5zZXREZXNpcmVkUG9zaXRpb25zID0gZnVuY3Rpb24gKHBzKSB7XG4gICAgICAgIHRoaXMudnMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gdi5kZXNpcmVkUG9zaXRpb24gPSBwc1tpXTsgfSk7XG4gICAgfTtcbiAgICBTb2x2ZXIucHJvdG90eXBlLm1vc3RWaW9sYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1pblNsYWNrID0gTnVtYmVyLk1BWF9WQUxVRSwgdiA9IG51bGwsIGwgPSB0aGlzLmluYWN0aXZlLCBuID0gbC5sZW5ndGgsIGRlbGV0ZVBvaW50ID0gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gbFtpXTtcbiAgICAgICAgICAgIGlmIChjLnVuc2F0aXNmaWFibGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB2YXIgc2xhY2sgPSBjLnNsYWNrKCk7XG4gICAgICAgICAgICBpZiAoYy5lcXVhbGl0eSB8fCBzbGFjayA8IG1pblNsYWNrKSB7XG4gICAgICAgICAgICAgICAgbWluU2xhY2sgPSBzbGFjaztcbiAgICAgICAgICAgICAgICB2ID0gYztcbiAgICAgICAgICAgICAgICBkZWxldGVQb2ludCA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKGMuZXF1YWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxldGVQb2ludCAhPT0gbiAmJlxuICAgICAgICAgICAgKG1pblNsYWNrIDwgU29sdmVyLlpFUk9fVVBQRVJCT1VORCAmJiAhdi5hY3RpdmUgfHwgdi5lcXVhbGl0eSkpIHtcbiAgICAgICAgICAgIGxbZGVsZXRlUG9pbnRdID0gbFtuIC0gMV07XG4gICAgICAgICAgICBsLmxlbmd0aCA9IG4gLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2O1xuICAgIH07XG4gICAgU29sdmVyLnByb3RvdHlwZS5zYXRpc2Z5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5icyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmJzID0gbmV3IEJsb2Nrcyh0aGlzLnZzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJzLnNwbGl0KHRoaXMuaW5hY3RpdmUpO1xuICAgICAgICB2YXIgdiA9IG51bGw7XG4gICAgICAgIHdoaWxlICgodiA9IHRoaXMubW9zdFZpb2xhdGVkKCkpICYmICh2LmVxdWFsaXR5IHx8IHYuc2xhY2soKSA8IFNvbHZlci5aRVJPX1VQUEVSQk9VTkQgJiYgIXYuYWN0aXZlKSkge1xuICAgICAgICAgICAgdmFyIGxiID0gdi5sZWZ0LmJsb2NrLCByYiA9IHYucmlnaHQuYmxvY2s7XG4gICAgICAgICAgICBpZiAobGIgIT09IHJiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icy5tZXJnZSh2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsYi5pc0FjdGl2ZURpcmVjdGVkUGF0aEJldHdlZW4odi5yaWdodCwgdi5sZWZ0KSkge1xuICAgICAgICAgICAgICAgICAgICB2LnVuc2F0aXNmaWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0ID0gbGIuc3BsaXRCZXR3ZWVuKHYubGVmdCwgdi5yaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnMuaW5zZXJ0KHNwbGl0LmxiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5icy5pbnNlcnQoc3BsaXQucmIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJzLnJlbW92ZShsYik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5hY3RpdmUucHVzaChzcGxpdC5jb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHYudW5zYXRpc2ZpYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodi5zbGFjaygpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmFjdGl2ZS5wdXNoKHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5icy5tZXJnZSh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNvbHZlci5wcm90b3R5cGUuc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F0aXNmeSgpO1xuICAgICAgICB2YXIgbGFzdGNvc3QgPSBOdW1iZXIuTUFYX1ZBTFVFLCBjb3N0ID0gdGhpcy5icy5jb3N0KCk7XG4gICAgICAgIHdoaWxlIChNYXRoLmFicyhsYXN0Y29zdCAtIGNvc3QpID4gMC4wMDAxKSB7XG4gICAgICAgICAgICB0aGlzLnNhdGlzZnkoKTtcbiAgICAgICAgICAgIGxhc3Rjb3N0ID0gY29zdDtcbiAgICAgICAgICAgIGNvc3QgPSB0aGlzLmJzLmNvc3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29zdDtcbiAgICB9O1xuICAgIFNvbHZlci5MQUdSQU5HSUFOX1RPTEVSQU5DRSA9IC0xZS00O1xuICAgIFNvbHZlci5aRVJPX1VQUEVSQk9VTkQgPSAtMWUtMTA7XG4gICAgcmV0dXJuIFNvbHZlcjtcbn0oKSk7XG5leHBvcnRzLlNvbHZlciA9IFNvbHZlcjtcbmZ1bmN0aW9uIHJlbW92ZU92ZXJsYXBJbk9uZURpbWVuc2lvbihzcGFucywgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICAgIHZhciB2cyA9IHNwYW5zLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gbmV3IFZhcmlhYmxlKHMuZGVzaXJlZENlbnRlcik7IH0pO1xuICAgIHZhciBjcyA9IFtdO1xuICAgIHZhciBuID0gc3BhbnMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbiAtIDE7IGkrKykge1xuICAgICAgICB2YXIgbGVmdCA9IHNwYW5zW2ldLCByaWdodCA9IHNwYW5zW2kgKyAxXTtcbiAgICAgICAgY3MucHVzaChuZXcgQ29uc3RyYWludCh2c1tpXSwgdnNbaSArIDFdLCAobGVmdC5zaXplICsgcmlnaHQuc2l6ZSkgLyAyKSk7XG4gICAgfVxuICAgIHZhciBsZWZ0TW9zdCA9IHZzWzBdLCByaWdodE1vc3QgPSB2c1tuIC0gMV0sIGxlZnRNb3N0U2l6ZSA9IHNwYW5zWzBdLnNpemUgLyAyLCByaWdodE1vc3RTaXplID0gc3BhbnNbbiAtIDFdLnNpemUgLyAyO1xuICAgIHZhciB2TG93ZXIgPSBudWxsLCB2VXBwZXIgPSBudWxsO1xuICAgIGlmIChsb3dlckJvdW5kKSB7XG4gICAgICAgIHZMb3dlciA9IG5ldyBWYXJpYWJsZShsb3dlckJvdW5kLCBsZWZ0TW9zdC53ZWlnaHQgKiAxMDAwKTtcbiAgICAgICAgdnMucHVzaCh2TG93ZXIpO1xuICAgICAgICBjcy5wdXNoKG5ldyBDb25zdHJhaW50KHZMb3dlciwgbGVmdE1vc3QsIGxlZnRNb3N0U2l6ZSkpO1xuICAgIH1cbiAgICBpZiAodXBwZXJCb3VuZCkge1xuICAgICAgICB2VXBwZXIgPSBuZXcgVmFyaWFibGUodXBwZXJCb3VuZCwgcmlnaHRNb3N0LndlaWdodCAqIDEwMDApO1xuICAgICAgICB2cy5wdXNoKHZVcHBlcik7XG4gICAgICAgIGNzLnB1c2gobmV3IENvbnN0cmFpbnQocmlnaHRNb3N0LCB2VXBwZXIsIHJpZ2h0TW9zdFNpemUpKTtcbiAgICB9XG4gICAgdmFyIHNvbHZlciA9IG5ldyBTb2x2ZXIodnMsIGNzKTtcbiAgICBzb2x2ZXIuc29sdmUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXdDZW50ZXJzOiB2cy5zbGljZSgwLCBzcGFucy5sZW5ndGgpLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi5wb3NpdGlvbigpOyB9KSxcbiAgICAgICAgbG93ZXJCb3VuZDogdkxvd2VyID8gdkxvd2VyLnBvc2l0aW9uKCkgOiBsZWZ0TW9zdC5wb3NpdGlvbigpIC0gbGVmdE1vc3RTaXplLFxuICAgICAgICB1cHBlckJvdW5kOiB2VXBwZXIgPyB2VXBwZXIucG9zaXRpb24oKSA6IHJpZ2h0TW9zdC5wb3NpdGlvbigpICsgcmlnaHRNb3N0U2l6ZVxuICAgIH07XG59XG5leHBvcnRzLnJlbW92ZU92ZXJsYXBJbk9uZURpbWVuc2lvbiA9IHJlbW92ZU92ZXJsYXBJbk9uZURpbWVuc2lvbjtcblxufSx7fV19LHt9LFsxXSkoMSlcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKa2FYTjBMMmx1WkdWNExtcHpJaXdpWkdsemRDOXpjbU12WVdSaGNIUnZjaTVxY3lJc0ltUnBjM1F2YzNKakwySmhkR05vTG1weklpd2laR2x6ZEM5emNtTXZaRE5oWkdGd2RHOXlMbXB6SWl3aVpHbHpkQzl6Y21NdlpETjJNMkZrWVhCMGIzSXVhbk1pTENKa2FYTjBMM055WXk5a00zWTBZV1JoY0hSdmNpNXFjeUlzSW1ScGMzUXZjM0pqTDJSbGMyTmxiblF1YW5NaUxDSmthWE4wTDNOeVl5OW5aVzl0TG1weklpd2laR2x6ZEM5emNtTXZaM0pwWkhKdmRYUmxjaTVxY3lJc0ltUnBjM1F2YzNKakwyaGhibVJzWldScGMyTnZibTVsWTNSbFpDNXFjeUlzSW1ScGMzUXZjM0pqTDJ4aGVXOTFkQzVxY3lJc0ltUnBjM1F2YzNKakwyeGhlVzkxZEROa0xtcHpJaXdpWkdsemRDOXpjbU12YkdsdWEyeGxibWQwYUhNdWFuTWlMQ0prYVhOMEwzTnlZeTl3YjNkbGNtZHlZWEJvTG1weklpd2laR2x6ZEM5emNtTXZjSEYxWlhWbExtcHpJaXdpWkdsemRDOXpjbU12Y21KMGNtVmxMbXB6SWl3aVpHbHpkQzl6Y21NdmNtVmpkR0Z1WjJ4bExtcHpJaXdpWkdsemRDOXpjbU12YzJodmNuUmxjM1J3WVhSb2N5NXFjeUlzSW1ScGMzUXZjM0pqTDNad2MyTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU55UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM2hHUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFrVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETjBSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JXUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJZVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNtbENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6Rk5RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeHFRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRiRWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU0xVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9TMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzSlpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRibVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRla2hCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNW1kVzVqZEdsdmJpQmZYMlY0Y0c5eWRDaHRLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdjQ0JwYmlCdEtTQnBaaUFvSVdWNGNHOXlkSE11YUdGelQzZHVVSEp2Y0dWeWRIa29jQ2twSUdWNGNHOXlkSE5iY0YwZ1BTQnRXM0JkTzF4dWZWeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1WDE5bGVIQnZjblFvY21WeGRXbHlaU2hjSWk0dmMzSmpMMkZrWVhCMGIzSmNJaWtwTzF4dVgxOWxlSEJ2Y25Rb2NtVnhkV2x5WlNoY0lpNHZjM0pqTDJRellXUmhjSFJ2Y2x3aUtTazdYRzVmWDJWNGNHOXlkQ2h5WlhGMWFYSmxLRndpTGk5emNtTXZaR1Z6WTJWdWRGd2lLU2s3WEc1ZlgyVjRjRzl5ZENoeVpYRjFhWEpsS0Z3aUxpOXpjbU12WjJWdmJWd2lLU2s3WEc1ZlgyVjRjRzl5ZENoeVpYRjFhWEpsS0Z3aUxpOXpjbU12WjNKcFpISnZkWFJsY2x3aUtTazdYRzVmWDJWNGNHOXlkQ2h5WlhGMWFYSmxLRndpTGk5emNtTXZhR0Z1Wkd4bFpHbHpZMjl1Ym1WamRHVmtYQ0lwS1R0Y2JsOWZaWGh3YjNKMEtISmxjWFZwY21Vb1hDSXVMM055WXk5c1lYbHZkWFJjSWlrcE8xeHVYMTlsZUhCdmNuUW9jbVZ4ZFdseVpTaGNJaTR2YzNKakwyeGhlVzkxZEROa1hDSXBLVHRjYmw5ZlpYaHdiM0owS0hKbGNYVnBjbVVvWENJdUwzTnlZeTlzYVc1cmJHVnVaM1JvYzF3aUtTazdYRzVmWDJWNGNHOXlkQ2h5WlhGMWFYSmxLRndpTGk5emNtTXZjRzkzWlhKbmNtRndhRndpS1NrN1hHNWZYMlY0Y0c5eWRDaHlaWEYxYVhKbEtGd2lMaTl6Y21NdmNIRjFaWFZsWENJcEtUdGNibDlmWlhod2IzSjBLSEpsY1hWcGNtVW9YQ0l1TDNOeVl5OXlZblJ5WldWY0lpa3BPMXh1WDE5bGVIQnZjblFvY21WeGRXbHlaU2hjSWk0dmMzSmpMM0psWTNSaGJtZHNaVndpS1NrN1hHNWZYMlY0Y0c5eWRDaHlaWEYxYVhKbEtGd2lMaTl6Y21NdmMyaHZjblJsYzNSd1lYUm9jMXdpS1NrN1hHNWZYMlY0Y0c5eWRDaHlaWEYxYVhKbEtGd2lMaTl6Y21NdmRuQnpZMXdpS1NrN1hHNWZYMlY0Y0c5eWRDaHlaWEYxYVhKbEtGd2lMaTl6Y21NdlltRjBZMmhjSWlrcE8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8ySmhjMlUyTkN4bGVVb3lXbGhLZW1GWE9YVkphbTk2VEVOS2JXRlhlR3hKYW05cFlWYzFhMXBZWjNWaGJrMXBURU5LZW1JelZubFpNbFpUWWpJNU1FbHFiMmxKYVhkcFl6STVNV050VG14amVVazJWM2xKZFV4cE9WaGFWMHBFWWpKNGFFd3liSFZhUjFZMFRHNVNla2xzTUhOSmJUVm9ZbGRXZWtscWNHSllVM2RwWWxkR2QyTkhiSFZhTTAxcFQybEpOMDk2Y3pkUE1FWkNVVlZGYzJKVlRrSlJWRnBEVHpCR1FsRjZaRU5NU0VaRVVWVkZjbEZxZEVKUlZVMTJVV2w0ZEZFd1JrSk9hMGszVVZWR1JFNHdTWE5hTUU1Q1VWUkNRMDh3UmtKUmVrWkRURWhPUkZGVlJtNVJlblJDVVZWT2IxRjVkelJSTUVaQ1pEQk5OMUZWUmtSbFJVMXpZVEJPUWxGVVVrTlBNRVpDVVhwV1EweEhPVVJSVlVVMFVXcDBRbEZWVFRWUmFYZ3hVVEJHUW1GVlRUZFJWVVpFWVd0TmMyTXdUa0pSVjJSRVR6QkdRbEV5YUVSTVIzUkVVVlZGTUZGcWRFSlJWVTB4VVdsNGNsRXdSa0pPUlVrM1VWVkdSRTVWU1hOalZVNUNVVk4wUTA4d1JrSlJlVGxEVEVoc1JGRlZSblJSZW5SQ1VWVk9kVkY1ZUc1Uk1FWkNUVVZKTjFGVlJrUk5WVWx6WVZWT1FsRlVTa05KYmpBOUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNTJZWElnWDE5bGVIUmxibVJ6SUQwZ0tIUm9hWE1nSmlZZ2RHaHBjeTVmWDJWNGRHVnVaSE1wSUh4OElDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUdWNGRHVnVaRk4wWVhScFkzTWdQU0JtZFc1amRHbHZiaUFvWkN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0JsZUhSbGJtUlRkR0YwYVdOeklEMGdUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FvZXlCZlgzQnliM1J2WDE4NklGdGRJSDBnYVc1emRHRnVZMlZ2WmlCQmNuSmhlU0FtSmlCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZXlCa0xsOWZjSEp2ZEc5Zlh5QTlJR0k3SUgwcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZXlCbWIzSWdLSFpoY2lCd0lHbHVJR0lwSUdsbUlDaGlMbWhoYzA5M2JsQnliM0JsY25SNUtIQXBLU0JrVzNCZElEMGdZbHR3WFRzZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHVjRkR1Z1WkZOMFlYUnBZM01vWkN3Z1lpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnWlhoMFpXNWtVM1JoZEdsamN5aGtMQ0JpS1R0Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1gxOG9LU0I3SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lnUFNCa095QjlYRzRnSUNBZ0lDQWdJR1F1Y0hKdmRHOTBlWEJsSUQwZ1lpQTlQVDBnYm5Wc2JDQS9JRTlpYW1WamRDNWpjbVZoZEdVb1lpa2dPaUFvWDE4dWNISnZkRzkwZVhCbElEMGdZaTV3Y205MGIzUjVjR1VzSUc1bGR5QmZYeWdwS1R0Y2JpQWdJQ0I5TzF4dWZTa29LVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JuWmhjaUJzWVhsdmRYUmZNU0E5SUhKbGNYVnBjbVVvWENJdUwyeGhlVzkxZEZ3aUtUdGNiblpoY2lCTVlYbHZkWFJCWkdGd2RHOXlJRDBnS0daMWJtTjBhVzl1SUNoZmMzVndaWElwSUh0Y2JpQWdJQ0JmWDJWNGRHVnVaSE1vVEdGNWIzVjBRV1JoY0hSdmNpd2dYM04xY0dWeUtUdGNiaUFnSUNCbWRXNWpkR2x2YmlCTVlYbHZkWFJCWkdGd2RHOXlLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ1gzTjFjR1Z5TG1OaGJHd29kR2hwY3lrZ2ZId2dkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQmZkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzhnUFNCdmNIUnBiMjV6TzF4dUlDQWdJQ0FnSUNCcFppQW9ieTUwY21sbloyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MGNtbG5aMlZ5SUQwZ2J5NTBjbWxuWjJWeU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodkxtdHBZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtdHBZMnNnUFNCdkxtdHBZMnM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzh1WkhKaFp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WkhKaFp5QTlJRzh1WkhKaFp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2J5NXZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWIyNGdQU0J2TG05dU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRjkwYUdsekxtUnlZV2R6ZEdGeWRDQTlJRjkwYUdsekxtUnlZV2RUZEdGeWRDQTlJR3hoZVc5MWRGOHhMa3hoZVc5MWRDNWtjbUZuVTNSaGNuUTdYRzRnSUNBZ0lDQWdJRjkwYUdsekxtUnlZV2RsYm1RZ1BTQmZkR2hwY3k1a2NtRm5SVzVrSUQwZ2JHRjViM1YwWHpFdVRHRjViM1YwTG1SeVlXZEZibVE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN6dGNiaUFnSUNCOVhHNGdJQ0FnVEdGNWIzVjBRV1JoY0hSdmNpNXdjbTkwYjNSNWNHVXVkSEpwWjJkbGNpQTlJR1oxYm1OMGFXOXVJQ2hsS1NCN0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUV4aGVXOTFkRUZrWVhCMGIzSXVjSEp2ZEc5MGVYQmxMbXRwWTJzZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUgwN1hHNGdJQ0FnTzF4dUlDQWdJRXhoZVc5MWRFRmtZWEIwYjNJdWNISnZkRzkwZVhCbExtUnlZV2NnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSDA3WEc0Z0lDQWdPMXh1SUNBZ0lFeGhlVzkxZEVGa1lYQjBiM0l1Y0hKdmRHOTBlWEJsTG05dUlEMGdablZ1WTNScGIyNGdLR1YyWlc1MFZIbHdaU3dnYkdsemRHVnVaWElwSUhzZ2NtVjBkWEp1SUhSb2FYTTdJSDA3WEc0Z0lDQWdPMXh1SUNBZ0lISmxkSFZ5YmlCTVlYbHZkWFJCWkdGd2RHOXlPMXh1ZlNoc1lYbHZkWFJmTVM1TVlYbHZkWFFwS1R0Y2JtVjRjRzl5ZEhNdVRHRjViM1YwUVdSaGNIUnZjaUE5SUV4aGVXOTFkRUZrWVhCMGIzSTdYRzVtZFc1amRHbHZiaUJoWkdGd2RHOXlLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRXhoZVc5MWRFRmtZWEIwYjNJb2IzQjBhVzl1Y3lrN1hHNTlYRzVsZUhCdmNuUnpMbUZrWVhCMGIzSWdQU0JoWkdGd2RHOXlPMXh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBXVmRTYUdOSVVuWmphVFZ4WTNsSmMwbHVUblprV0VwcVdsWktkbUl6VVdsUGFVbHBURU5LZW1JelZubFpNbFo2U1dwd1lrbHBOSFZNZVRSMVRERmtiRmxyVG5aaVIwVjJZek5LYWt3eVJtdFpXRUl3WWpOSmRXUklUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHFjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUekJHUWxGVlJYTmlWVTVDVVZkc1JVOHdSa0pTVkdSRVR6QnNRbEZYTVVSTVIyeEVVVlZHVGs4d2JFSlpXRXBFVEVoV1ExRlZSbWhNUlRsQ1VWVTROMVZWUmtKalJVbHpWMVZHUkZOVGVIQlJhMFpDVkhsNFZGRlliRU5XYW5SU1VWaEtRMUo1ZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFRGRlZSa3BNUlU1Q1VWVk5OMVZWUmtSaFJVbHpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05VTUVaQ1ZIbDRSRkZWUmtSUE1VWkNVbGRvUTB4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVTVRbEZWT0hOU1ZVWkNVbnAwV2xGVlRtbE1SWFJDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYcDBWRkZWVFRGUmFuUlNVVlZXUlV4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbFIwV2xGVlRsVk1SWFJDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYcDBWRkZWVGpCUmFuUlNVVlZXUlV4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbFIwV2xGVlRsVk1SWFJDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYcDBWRkZWVGpCUmFuUlNVVlZXUlV4RmJFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbFIwV2xGVlRsRk1SWFJDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYcDBWRkZWVG5OUmFuUlNVVlZXUlV4RmRFSlJWV3R6VVRCR1FsRjVlRlJSVlVaVVRFVmtRbEZWWTNOVE1FWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxSXdSa0pTZVhoc1VWVkdUa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVHpGR1FsRXlOVVZNUlhSQ1VWVnJjMUV3UmtKUmVYaFFVVlZHVUV4RlpFSlJWV056VXpCR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOU01FWkNVbmw0YkZGVlJrNU1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRTk2ZEVwUlZVNXhVa040UkZGVlJrUlBNR3hDWTBWT1JVeERkRU5SVlVaUVRFVmtRbEZXUVhOV1ZVWkNWVk40UkZGVlJsSk1SV3hDVVZWamMxRXdSa0pSZW5SS1VWVkdRa3hGVGtKUlZVMDNVMVZHUkdOclNYTk9SVXBDVVZWcmMxSXdSa0pUYVhocVVWVkdVa3hGVGtKUlZVMDNVMVZHUWxGVGVFUlJWVVpFVHpCc1FsRXhXWE5PUlVwQ1VWVnJjMUl3UmtKVGFYaHFVVlZHVWt4RlRrSlJWVTAzVTFWR1FsRlRlRVJSVlVaRVR6QnNRbEV4V1hOTlJVcENVVlZWYzFJd1JrSlNhWGhXVVZWR1NFeEdUa0pSVkZwRFRFVldRbEZWVlhOVlZVWkNZakJKYzFOVlJrSldlWGhRVVZWR1VFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpDVVZONFJGRlZSa1JQTUd4Q1lUQk9kMUpwZUhaUmEwWkNVWHAwUWxGVlJrVk1SVTVDVVZWTmMxRlZSalJSTUZGelVUQkdRbUpWVFhOYVZVWkNWRk40U0ZGWVpFUmxSVTAzVVZWR05GRXhhM05qTUU1Q1VWZEZOMUZWUlRKUmVrWkRURVpPUWxGWFpFTk1SVGxDVVZVNGMxRXdSa0pTVTNoUVVWVkdVRTh3YkVKUmVsWkRURVU1UWxGVk9ITlRWVVpDVTFONGFGRlZSbWhNUlU1Q1VWVlZjMVF3UmtKVWVYaEVVVlZHUmt4RlRrSlJWVTAzVVZWR1JHVkZUWE5STUVaQ1VYcDBRbEZWV2tWTVJFSkRVVlZXUkVsdU1EMGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm5aaGNpQnNZWGx2ZFhSZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDJ4aGVXOTFkRndpS1R0Y2JuWmhjaUJuY21sa2NtOTFkR1Z5WHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTluY21sa2NtOTFkR1Z5WENJcE8xeHVablZ1WTNScGIyNGdaM0pwWkdsbWVTaHdaMHhoZVc5MWRDd2diblZrWjJWSFlYQXNJRzFoY21kcGJpd2daM0p2ZFhCTllYSm5hVzRwSUh0Y2JpQWdJQ0J3WjB4aGVXOTFkQzVqYjJ4aExuTjBZWEowS0RBc0lEQXNJREFzSURFd0xDQm1ZV3h6WlNrN1hHNGdJQ0FnZG1GeUlHZHlhV1J5YjNWMFpYSWdQU0J5YjNWMFpTaHdaMHhoZVc5MWRDNWpiMnhoTG01dlpHVnpLQ2tzSUhCblRHRjViM1YwTG1OdmJHRXVaM0p2ZFhCektDa3NJRzFoY21kcGJpd2daM0p2ZFhCTllYSm5hVzRwTzF4dUlDQWdJSEpsZEhWeWJpQm5jbWxrY205MWRHVnlMbkp2ZFhSbFJXUm5aWE1vY0dkTVlYbHZkWFF1Y0c5M1pYSkhjbUZ3YUM1d2IzZGxja1ZrWjJWekxDQnVkV1JuWlVkaGNDd2dablZ1WTNScGIyNGdLR1VwSUhzZ2NtVjBkWEp1SUdVdWMyOTFjbU5sTG5KdmRYUmxjazV2WkdVdWFXUTdJSDBzSUdaMWJtTjBhVzl1SUNobEtTQjdJSEpsZEhWeWJpQmxMblJoY21kbGRDNXliM1YwWlhKT2IyUmxMbWxrT3lCOUtUdGNibjFjYm1WNGNHOXlkSE11WjNKcFpHbG1lU0E5SUdkeWFXUnBabms3WEc1bWRXNWpkR2x2YmlCeWIzVjBaU2h1YjJSbGN5d2daM0p2ZFhCekxDQnRZWEpuYVc0c0lHZHliM1Z3VFdGeVoybHVLU0I3WEc0Z0lDQWdibTlrWlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1pDa2dlMXh1SUNBZ0lDQWdJQ0JrTG5KdmRYUmxjazV2WkdVZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUJrTG01aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIzVnVaSE02SUdRdVltOTFibVJ6TG1sdVpteGhkR1VvTFcxaGNtZHBiaWxjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JuY205MWNITXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9aQ2tnZTF4dUlDQWdJQ0FnSUNCa0xuSnZkWFJsY2s1dlpHVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmliM1Z1WkhNNklHUXVZbTkxYm1SekxtbHVabXhoZEdVb0xXZHliM1Z3VFdGeVoybHVLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9hV3hrY21WdU9pQW9kSGx3Wlc5bUlHUXVaM0p2ZFhCeklDRTlQU0FuZFc1a1pXWnBibVZrSnlBL0lHUXVaM0p2ZFhCekxtMWhjQ2htZFc1amRHbHZiaUFvWXlrZ2V5QnlaWFIxY200Z2JtOWtaWE11YkdWdVozUm9JQ3NnWXk1cFpEc2dmU2tnT2lCYlhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZMjl1WTJGMEtIUjVjR1Z2WmlCa0xteGxZWFpsY3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCa0xteGxZWFpsY3k1dFlYQW9ablZ1WTNScGIyNGdLR01wSUhzZ2NtVjBkWEp1SUdNdWFXNWtaWGc3SUgwcElEb2dXMTBwWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnZG1GeUlHZHlhV1JTYjNWMFpYSk9iMlJsY3lBOUlHNXZaR1Z6TG1OdmJtTmhkQ2huY205MWNITXBMbTFoY0NobWRXNWpkR2x2YmlBb1pDd2dhU2tnZTF4dUlDQWdJQ0FnSUNCa0xuSnZkWFJsY2s1dlpHVXVhV1FnUFNCcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pDNXliM1YwWlhKT2IyUmxPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2daM0pwWkhKdmRYUmxjbDh4TGtkeWFXUlNiM1YwWlhJb1ozSnBaRkp2ZFhSbGNrNXZaR1Z6TENCN1hHNGdJQ0FnSUNBZ0lHZGxkRU5vYVd4a2NtVnVPaUJtZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z2RpNWphR2xzWkhKbGJqc2dmU3hjYmlBZ0lDQWdJQ0FnWjJWMFFtOTFibVJ6T2lCbWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdkaTVpYjNWdVpITTdJSDFjYmlBZ0lDQjlMQ0J0WVhKbmFXNGdMU0JuY205MWNFMWhjbWRwYmlrN1hHNTlYRzVtZFc1amRHbHZiaUJ3YjNkbGNrZHlZWEJvUjNKcFpFeGhlVzkxZENobmNtRndhQ3dnYzJsNlpTd2daM0p2ZFhCd1lXUmthVzVuS1NCN1hHNGdJQ0FnZG1GeUlIQnZkMlZ5UjNKaGNHZzdYRzRnSUNBZ1ozSmhjR2d1Ym05a1pYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kaXdnYVNrZ2V5QnlaWFIxY200Z2RpNXBibVJsZUNBOUlHazdJSDBwTzF4dUlDQWdJRzVsZHlCc1lYbHZkWFJmTVM1TVlYbHZkWFFvS1Z4dUlDQWdJQ0FnSUNBdVlYWnZhV1JQZG1WeWJHRndjeWhtWVd4elpTbGNiaUFnSUNBZ0lDQWdMbTV2WkdWektHZHlZWEJvTG01dlpHVnpLVnh1SUNBZ0lDQWdJQ0F1YkdsdWEzTW9aM0poY0dndWJHbHVhM01wWEc0Z0lDQWdJQ0FnSUM1d2IzZGxja2R5WVhCb1IzSnZkWEJ6S0daMWJtTjBhVzl1SUNoa0tTQjdYRzRnSUNBZ0lDQWdJSEJ2ZDJWeVIzSmhjR2dnUFNCa08xeHVJQ0FnSUNBZ0lDQndiM2RsY2tkeVlYQm9MbWR5YjNWd2N5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaDJLU0I3SUhKbGRIVnliaUIyTG5CaFpHUnBibWNnUFNCbmNtOTFjSEJoWkdScGJtYzdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFpoY2lCdUlEMGdaM0poY0dndWJtOWtaWE11YkdWdVozUm9PMXh1SUNBZ0lIWmhjaUJsWkdkbGN5QTlJRnRkTzF4dUlDQWdJSFpoY2lCMmN5QTlJR2R5WVhCb0xtNXZaR1Z6TG5Oc2FXTmxLREFwTzF4dUlDQWdJSFp6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hZc0lHa3BJSHNnY21WMGRYSnVJSFl1YVc1a1pYZ2dQU0JwT3lCOUtUdGNiaUFnSUNCd2IzZGxja2R5WVhCb0xtZHliM1Z3Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlZKYm1RZ1BTQm5MbWx1WkdWNElEMGdaeTVwWkNBcklHNDdYRzRnSUNBZ0lDQWdJSFp6TG5CMWMyZ29aeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1p5NXNaV0YyWlhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdaeTVzWldGMlpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnWldSblpYTXVjSFZ6YUNoN0lITnZkWEpqWlRvZ2MyOTFjbU5sU1c1a0xDQjBZWEpuWlhRNklIWXVhVzVrWlhnZ2ZTazdJSDBwTzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHY3VaM0p2ZFhCeklDRTlQU0FuZFc1a1pXWnBibVZrSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJR2N1WjNKdmRYQnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR2RuS1NCN0lISmxkSFZ5YmlCbFpHZGxjeTV3ZFhOb0tIc2djMjkxY21ObE9pQnpiM1Z5WTJWSmJtUXNJSFJoY21kbGREb2daMmN1YVdRZ0t5QnVJSDBwT3lCOUtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCd2IzZGxja2R5WVhCb0xuQnZkMlZ5UldSblpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9aU2tnZTF4dUlDQWdJQ0FnSUNCbFpHZGxjeTV3ZFhOb0tIc2djMjkxY21ObE9pQmxMbk52ZFhKalpTNXBibVJsZUN3Z2RHRnlaMlYwT2lCbExuUmhjbWRsZEM1cGJtUmxlQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J1WlhjZ2JHRjViM1YwWHpFdVRHRjViM1YwS0NsY2JpQWdJQ0FnSUNBZ0xuTnBlbVVvYzJsNlpTbGNiaUFnSUNBZ0lDQWdMbTV2WkdWektIWnpLVnh1SUNBZ0lDQWdJQ0F1YkdsdWEzTW9aV1JuWlhNcFhHNGdJQ0FnSUNBZ0lDNWhkbTlwWkU5MlpYSnNZWEJ6S0daaGJITmxLVnh1SUNBZ0lDQWdJQ0F1YkdsdWEwUnBjM1JoYm1ObEtETXdLVnh1SUNBZ0lDQWdJQ0F1YzNsdGJXVjBjbWxqUkdsbVpreHBibXRNWlc1bmRHaHpLRFVwWEc0Z0lDQWdJQ0FnSUM1amIyNTJaWEpuWlc1alpWUm9jbVZ6YUc5c1pDZ3haUzAwS1Z4dUlDQWdJQ0FnSUNBdWMzUmhjblFvTVRBd0xDQXdMQ0F3TENBd0xDQm1ZV3h6WlNrN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnWTI5c1lUb2dibVYzSUd4aGVXOTFkRjh4TGt4aGVXOTFkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVZMjl1ZG1WeVoyVnVZMlZVYUhKbGMyaHZiR1FvTVdVdE15bGNiaUFnSUNBZ0lDQWdJQ0FnSUM1emFYcGxLSE5wZW1VcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WVhadmFXUlBkbVZ5YkdGd2N5aDBjblZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbTV2WkdWektHZHlZWEJvTG01dlpHVnpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xteHBibXR6S0dkeVlYQm9MbXhwYm10ektWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG1keWIzVndRMjl0Y0dGamRHNWxjM01vTVdVdE5DbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1c2FXNXJSR2x6ZEdGdVkyVW9NekFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjM2x0YldWMGNtbGpSR2xtWmt4cGJtdE1aVzVuZEdoektEVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBdWNHOTNaWEpIY21Gd2FFZHliM1Z3Y3lobWRXNWpkR2x2YmlBb1pDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOTNaWEpIY21Gd2FDQTlJR1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM2RsY2tkeVlYQm9MbWR5YjNWd2N5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaDJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGk1d1lXUmthVzVuSUQwZ1ozSnZkWEJ3WVdSa2FXNW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBwTG5OMFlYSjBLRFV3TENBd0xDQXhNREFzSURBc0lHWmhiSE5sS1N4Y2JpQWdJQ0FnSUNBZ2NHOTNaWEpIY21Gd2FEb2djRzkzWlhKSGNtRndhRnh1SUNBZ0lIMDdYRzU5WEc1bGVIQnZjblJ6TG5CdmQyVnlSM0poY0doSGNtbGtUR0Y1YjNWMElEMGdjRzkzWlhKSGNtRndhRWR5YVdSTVlYbHZkWFE3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxaYlVZd1dUSm5kV0Z1VFdsTVEwcDZZak5XZVZreVZsTmlNamt3U1dwdmFVbHBkMmxqTWpreFkyMU9iR041U1RaWGVVbDFUR2s0ZFV4cE9WaGFWMHBFWWpKNGFFd3pUbmxaZVRscFdWaFNhbUZETlRCamVVcGtURU5LZFZsWE1XeGplVWsyVnpFd2MwbHRNV2hqU0VKd1ltMWtla2xxYjJsUGVuUkNVVlZHUWt4SE1VUlJWVVY1VVhwMFFsRlZUWHBSZVhkNVVUQkdRbVJWVFRkUlZVWlNaR3ROYzFVd1JrSmFNRWx6VkRCR1FsUjVlRVJSVlVaRVRFWkdRbEZXUlhOU1ZVWkNVbE40VWxGVlJtNVJhWGhHVVZWR1JreEZNVUpSVjAxelVsVkdRbEpUZUZoUlZVWjBVV3AwU2xGVlRuVlNhWGhTVVZWR1VreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaR1RFVldRbEZWVlhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1JsUlUxelUxVkdRbE5UZUZaUlZVWldURVZrUWxGVlkzTlRNRVpDVTNsNFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVldRbEZWVlhOVlZVWkNWVk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVbFZHUWxKVGVFNVJWVVpPVEVWV1FsRlZWWE5XTUVaQ1ZubDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUk5NRmx6VkRCR1FsUjVlRlpSVlVaV1RFVk9RbEZWVFhOV1ZVWkNWbE40UkZGVlJrNU1Sa1pDVVZaRmMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMXpWbFZHUWxaVGVFWlJWVVpHVEVaR1FsRldSWE5TVlVaQ1VsTjRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKa1JVbHpVVEJHUW1Nd1NYTlNWVVpDVWxONFZsRlZSa0pNUlU1Q1VWVk5jMU5WUmtKU2VYaFFVVlZHUWt4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOV1ZVWkNWbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0prUlVselVUQkdRbU13U1hOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVVROb1NreEZUa0pSVlUwM1VWVkdTMUpEZDNkUmEwWktVWHAwUWxGVlZrVk1SazVDVVZaTmMxTXdSa0pUZVhoRVVWVkdSRXhGZEVKUlZYTnpVbFZHUWxKVGVFNVJWVVpPVEVWV1FsRlZWWE5VVlVaQ1dYbDRSbEZWUmtaTVJtUkNVVmN4UTA4d2JFSlJlbVJGVEVWMFFsRlZjM05STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFaVlJrSlJVM2hFVVZWR1JFOHhSa0pSTVdkelVUQkdRbEY1ZUVSUlZVWkVURVpXUWxGV1ZYTlNNRVpDVlZSMFdsRlZUbTlSYVhoS1VWVkdTa3hGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhemRYVlVaRVYybDRUbEZWUms1TVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMVV3UmtSalJVMXpVVEJHUWxGNmRFcFJWVTVQVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1HeENVVEJuYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZaUlZVWkNURVZPUWxGVlRUZFZWVVpFVjJsNFJGRlZSa1JNUlU1Q1VWVk5jMVpWUmtKV1UzaElVVlZHVWs4eGJFSlJNbWhEVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhwMFdsRlZUakJSZVhoU1VWVkdVa3hGVmtKUlZWVnpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFZd1JrSldlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaFdVVlZHUWt4RlRrSlJWVTF6VTFWR1FsSjVlRkJSVlVaQ1RFVjBRbEZWYzNOUk1FWkNVWGw0VGxGVlJrNU1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUW1KclNYTlJNRVpDWWxWSmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUVGRoVlVwQ1VUSTFSMHhGTVVKUlZUQnpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFZd1JrSldlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaFdVVlZHUWt4RlRrSlJWVTF6VTFWR1FsSjVlRkJSVlVaQ1RFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SVlpDVVZaQmMxRXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYcDBWRkZWVG05U2FYaEVVVlZHUkU4d2JFSlJNRFJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVVME40U2xGVlJrcE1SMVpDVVZkVmMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhXVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVUekZHUWxFeWFFVk1SVTVDVVZWTmMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMXpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5kUmFYaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRlpSVlVaV1RFVk9RbEZWVFRkVFZVWkVaVVZKYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1UxVkdSRk5EZUZCUlZVWlFURVZzUWxGVmEzTmtWVXBDVVZaVmMxRXdSa0pSZVhoc1VWVkdiRXhGVmtKUlZWVTNWVlZHUkdKclRYTldNRVpDVm5sNFJsRlZSa1pNUmxaQ1VWVk5jMUV3UmtKVVUzaEtVVlZHVEV4Rk9VSlJWVVZ6VVRCR1FsRjVlRVJSVlVaRVRFWkdRbEZXUlhOU1ZVWkNWbWw0UkZGVlJsWlBNVVpDVVRJMVJFeEdUa0pSVmsxelVsVkdRbEpUZUZaUlZVWkNURVZPUWxGVlRYTlRWVVpDVTFONFVGRlZSa0pNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlZrSlJWa2x6VVRCR1FsVlVkRXhSVlUxNlVXbDRSbEZWUmtaTVJURkNVVlV3YzFJd1JrSlNlWGhZVVZWR1dFeEZUa0pSVlUxelVUQkdRbEY2ZEVKUlZVMHpVV2w0UkZGVlJrUlBNRVpDVWxWUmMxVXdSa0phTUVsellqQktRbEZYT1VOTVJVNUNVVEpvUkV4RmRFSlJWRnBFVEVWV1FsRjZaRVJNUld4Q1VWZE5jMUpWUmtSYVEzaGFVVlZHZGxGcWRFcFJWV1IzVVdsNFNsRlZSa3BNUmxaQ1VWWlZjMUV3UmtKUmVuUktVVlZPYlV4RmRFSlJWWE56VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWTmMxRXdSa0pSZVhoR1VWVkdSRXhGVGtKUlZVMXpVMVZHUWxONWVGQlJWVVpPVEVWT1FsRlZWWE5STUVaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR2MxRnBlRVJSVlVaeVVXbDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUmhhMUZ6VTFWR1FsTlRlR3hSVlVaT1RFVldRbEZWVlRkVk1FWkVWVU40YUZGVlJtaE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRTh4VGtKUk0wSkRURVYwUWxGVmMzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkU4eFRrSlJNbmhEVEVWMFFsRlZjM05STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFOHhUa0pSTW5oRFRFZGtRMUZWUm01UmFYaEVVVlZHUkV4R1ZrSlJWbFZ6VVRCR1FsRjZkRkpSVlU0MlVXbDRWbEZWUmxaTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTWxselZsVkdRbFpUZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMVpWUmtKUlUzaEVVVlZHUkV4RmJFSlJWV056VkRCR1FsRlRlRVJSVlVaRVRFVk9RbEZWVFhOVU1FWkNWSGw0U0ZGVlJraE1SbXhDVVZacmMxSlZSa0psUlVselVUQkdRbVF3U1hOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVhwV1JVeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxOV1FYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVFZVWkVUVEJKYzFOVlJrSlRVM2hNVVZWR1RFeEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUekJzUWxFeVdYTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1JQVlVselVsVkdRbEpUZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWWE56VkRCR1FsUlRlRVJSVlVaR1RFVk9RbEZWVFhOVE1FWkNVM2w0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0ppUlVselVUQkdRbUV3U1hOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVROd1JFeEdWa0pSVmxWelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVuUlNVVlZPTWxGcGVFcFJWVVpLVEVaT1FsRldUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUSTFSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUlhRM2hLVVZWR1NreEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlRNRVpDVTNsNFdGRlZSbGhQTVd4Q1VYazVRMHhGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJsWkNVVlZGYzFFd1JrSlJlWGhLVVZWR1NreEZPVUpSVlVWelV6QkdRbE41ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJsRlZSa1pNUlRGQ1VWVXdjMUpWUmtKU1UzaFVVVlZHVkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdjMUpEZUVSUlZVWnlVa040UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JQVlZWelUxVkdRbE5UZUZCUlZVWlFURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlhSQ1VWVnpjMVl3UmtKV2VuUmFVVlZOZGxGcGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhXVVZWR1FreEZWa0pSVlZWelUxVkdRbE5UZUZCUlZVWkNURVYwUWxGVmMzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1UzaE9VVlZHVGt4RlZrSlJWVlZ6VlRCR1FsVjVlRVpSVlVaR1RFVXhRbEZWTUhOU1ZVWkNVbE40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWV1FsRllRa1ZNUlU1Q1VWYzVSVXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTU1VW1sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPU1V4R1ZrSlJWbFZ6VVRCR1FsRjVlRlpSVlVaV1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWRmMxRXdSa0pSZW5SU1VWVk5lbEZwZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMVJWUmtKVVUzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVE1FWkNVM2w0UmxGVlJrWk1SVEZDVVZVd2MxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUmlhMVZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWklVME40U2xGVlJrcE1SMVpDVVZVd2MxSlZSa0pTVkhSVVVWVk9VVXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRWTUVaRVZtbDRURkZWUmt4TVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFOHhUa0pSTVZGelV6QkdRbE41ZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhwMFZGRlZUbUZNUjBaQ1VWZEZjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTAzVlRCR1JHTkZTWE5YVlVaQ1YxTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlblJVVVZWT2IxRnBlRE5SYTBaQ1pEQkpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlRCR1JFMHdTWE5pTUVwQ1VWYzVRMHhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVHpGT1FsRjZSa05NUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHVEdGRlRYTlVNRVpDVkhwMFVsRlZUa2xNUld4Q1VWVnJjMUpWUmtSUlUzaEtVVlZHU2t4SFZrSlJWVEJ6VWxWR1FsSlVkR2hSVlU1WlRFYzVRMUZWUm5aUmFYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjZkR2hSVlUxNFVXbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFOHlSa0pSTVZseldWVkdRbGxUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhwMGFGRlZUblZSYVhoTVVWVkdURXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYcDBhRkZWVG5OUmFYaE1VVlZHVEV4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWHAwYUZGVlZuTlJhWGh1VVd0R1Fsb3dTWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOTjFsVlJrUmtSVWx6VjFWR1FsZFRlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWHAwYUZGVlRtOVJhWGd6VVd0R1FtUXdTWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFsVlJrUk5NRWx6V2pCS1FsRlhaRU5NUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUkU4eGJFSlJNM0JEVEVaV1FsRldWWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmFhWGhXVVZWR1ZreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSbFpNUlU1Q1VWVk5OMW93U2tKUk1uQkVURVZPUWxGVlRYTlJNRVpDVVhsNFVGRlZSbEJNUldSQ1VWVmpjMWRWUmtKWFUzaEVVVlZHUWs4eGJFSlJlbFpEVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVEZCYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRXhSVlVaTVRFVk9RbEZWVFRkVlZVWkVZa1ZOYzFaVlJrSldVM2hHVVZWR1JreEdWa0pSVmxVM1V6QkdSR1ZyU1hOUk1FWkNVWHAwUWxGVlRrOU1SVTVDVVZWTk4xRlZSbmxTVlZGellqQlNRbU5WVmtSSmJqQTlJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1MllYSWdaRE4yTXlBOUlISmxjWFZwY21Vb1hDSXVMMlF6ZGpOaFpHRndkRzl5WENJcE8xeHVkbUZ5SUdRemRqUWdQU0J5WlhGMWFYSmxLRndpTGk5a00zWTBZV1JoY0hSdmNsd2lLVHRjYmp0Y2JtWjFibU4wYVc5dUlHUXpZV1JoY0hSdmNpaGtNME52Ym5SbGVIUXBJSHRjYmlBZ0lDQnBaaUFvSVdRelEyOXVkR1Y0ZENCOGZDQnBjMFF6VmpNb1pETkRiMjUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUdRemRqTXVSRE5UZEhsc1pVeGhlVzkxZEVGa1lYQjBiM0lvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJrTTNZMExrUXpVM1I1YkdWTVlYbHZkWFJCWkdGd2RHOXlLR1F6UTI5dWRHVjRkQ2s3WEc1OVhHNWxlSEJ2Y25SekxtUXpZV1JoY0hSdmNpQTlJR1F6WVdSaGNIUnZjanRjYm1aMWJtTjBhVzl1SUdselJETldNeWhrTTBOdmJuUmxlSFFwSUh0Y2JpQWdJQ0IyWVhJZ2RqTmxlSEFnUFNBdlhqTmNYQzR2TzF4dUlDQWdJSEpsZEhWeWJpQmtNME52Ym5SbGVIUXVkbVZ5YzJsdmJpQW1KaUJrTTBOdmJuUmxlSFF1ZG1WeWMybHZiaTV0WVhSamFDaDJNMlY0Y0NrZ0lUMDlJRzUxYkd3N1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGFSRTVvV2tkR2QyUkhPWGxNYlhCNlNXbDNhV015T1RGamJVNXNWVzA1ZG1SRFNUWkphVWx6U1c1T2RtUllTbXBhV0UxcFQyeHphVXhwTkhaTWFUUjJWakpXYVZFeU9YTlpVemw2WTIxTmRscEVUbWhhUjBaM1pFYzVlVXh1VW5wSmJEQnpTVzAxYUdKWFZucEphbkJpV0ZOM2FXSlhSbmRqUjJ4MVdqTk5hVTlwU1RkUE1FWkNVVlZGYzJJd1RrSlJXRVpFVHpCR1FsRXpTa1JNUnpsRVVWVkdlRkY2ZEVKUlZXUldURVZPUWxGVlRUZFJWVVV3VVcxb1JVeEdUa0pSVjJSRFRFWk9RbEZXVFhOUk1FWkNVWGw0VkZGVlJqTlJlblJLVVZWTk5WSkRlRXBSVlVaS1RFVk9RbEZWVFhOVk1FWkNWWGw0U2xGVlJrcE1SVEZDVVZVd2MxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZVMXpVbFZHUWxKVWRGSlJWVTV4VVhsNFVGRlZSbEJNUld4Q1VWVnJjMU5WUmtKVFUzaEVVVlZHUkV4SE9VTlJWVVoyVVdsNFJsRlZSa1pNUlU1Q1VWVk5OMU13UmtSTlZVMDNVMVZHUkZKRGVGQlJWVVpRVEVWc1FsRlZhM05UVlVaQ1UxTjRSRkZWUmtSTVJ6bERVVlZHZGxGcGVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVE5DUlV4RlRrSlJWVTAzVVZWR1RWSkRkelJSYTBaTVVYcDBRbEZWVmtWTVJrNUNVVlpOYzFSVlJrSlVVM2hFVVZWR1JFeEdUa0pSV0ZaRVR6QnNRbEV5TlVWTVJXeENVVlV3YzFNd1JrSlRlWGhJVVZWR1NFeEZNVUpSVlRCelVUQkdRbEY2ZEVwUlZVNTVVV2w0VUZGVlJtaE1SazVDVVZaVmMxRXdSa0pSZVhoUVVWVkdVRXhGYkVKUlZsVnpWVEJHUWxaVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZkRUpSVlhOelUxVkdRbE5UZUVSUlZVWkVUekJHUWxFelVrZE1SVTVDVVZWTmFXWlJQVDBpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm5aaGNpQmZYMlY0ZEdWdVpITWdQU0FvZEdocGN5QW1KaUIwYUdsekxsOWZaWGgwWlc1a2N5a2dmSHdnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMllYSWdaWGgwWlc1a1UzUmhkR2xqY3lBOUlHWjFibU4wYVc5dUlDaGtMQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkZOMFlYUnBZM01nUFNCUFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDdJRjlmY0hKdmRHOWZYem9nVzEwZ2ZTQnBibk4wWVc1alpXOW1JRUZ5Y21GNUlDWW1JR1oxYm1OMGFXOXVJQ2hrTENCaUtTQjdJR1F1WDE5d2NtOTBiMTlmSUQwZ1lqc2dmU2tnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJQ2hrTENCaUtTQjdJR1p2Y2lBb2RtRnlJSEFnYVc0Z1lpa2dhV1lnS0dJdWFHRnpUM2R1VUhKdmNHVnlkSGtvY0NrcElHUmJjRjBnUFNCaVczQmRPeUI5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhoMFpXNWtVM1JoZEdsamN5aGtMQ0JpS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9aQ3dnWWlrZ2UxeHVJQ0FnSUNBZ0lDQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJmWHlncElIc2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpQTlJR1E3SUgxY2JpQWdJQ0FnSUNBZ1pDNXdjbTkwYjNSNWNHVWdQU0JpSUQwOVBTQnVkV3hzSUQ4Z1QySnFaV04wTG1OeVpXRjBaU2hpS1NBNklDaGZYeTV3Y205MGIzUjVjR1VnUFNCaUxuQnliM1J2ZEhsd1pTd2dibVYzSUY5ZktDa3BPMXh1SUNBZ0lIMDdYRzU5S1NncE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZG1GeUlHeGhlVzkxZEY4eElEMGdjbVZ4ZFdseVpTaGNJaTR2YkdGNWIzVjBYQ0lwTzF4dWRtRnlJRVF6VTNSNWJHVk1ZWGx2ZFhSQlpHRndkRzl5SUQwZ0tHWjFibU4wYVc5dUlDaGZjM1Z3WlhJcElIdGNiaUFnSUNCZlgyVjRkR1Z1WkhNb1JETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSXNJRjl6ZFhCbGNpazdYRzRnSUNBZ1puVnVZM1JwYjI0Z1JETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlGOXpkWEJsY2k1allXeHNLSFJvYVhNcElIeDhJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1WMlpXNTBJRDBnWkRNdVpHbHpjR0YwWTJnb2JHRjViM1YwWHpFdVJYWmxiblJVZVhCbFcyeGhlVzkxZEY4eExrVjJaVzUwVkhsd1pTNXpkR0Z5ZEYwc0lHeGhlVzkxZEY4eExrVjJaVzUwVkhsd1pWdHNZWGx2ZFhSZk1TNUZkbVZ1ZEZSNWNHVXVkR2xqYTEwc0lHeGhlVzkxZEY4eExrVjJaVzUwVkhsd1pWdHNZWGx2ZFhSZk1TNUZkbVZ1ZEZSNWNHVXVaVzVrWFNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrTTJ4aGVXOTFkQ0E5SUY5MGFHbHpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pISmhaenRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVaSEpoWnlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWkhKaFp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2NtRm5JRDBnWkRNdVltVm9ZWFpwYjNJdVpISmhaeWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXZjbWxuYVc0b2JHRjViM1YwWHpFdVRHRjViM1YwTG1SeVlXZFBjbWxuYVc0cFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV2YmloY0ltUnlZV2R6ZEdGeWRDNWtNMkZrWVhCMGIzSmNJaXdnYkdGNWIzVjBYekV1VEdGNWIzVjBMbVJ5WVdkVGRHRnlkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtOXVLRndpWkhKaFp5NWtNMkZrWVhCMGIzSmNJaXdnWm5WdVkzUnBiMjRnS0dRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGNWIzVjBYekV1VEdGNWIzVjBMbVJ5WVdjb1pDd2daRE11WlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa00yeGhlVzkxZEM1eVpYTjFiV1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YjI0b1hDSmtjbUZuWlc1a0xtUXpZV1JoY0hSdmNsd2lMQ0JzWVhsdmRYUmZNUzVNWVhsdmRYUXVaSEpoWjBWdVpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSeVlXYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU5oYkd3b1pISmhaeWs3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ1JETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSXVjSEp2ZEc5MGVYQmxMblJ5YVdkblpYSWdQU0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkRObGRtVnVkQ0E5SUhzZ2RIbHdaVG9nYkdGNWIzVjBYekV1UlhabGJuUlVlWEJsVzJVdWRIbHdaVjBzSUdGc2NHaGhPaUJsTG1Gc2NHaGhMQ0J6ZEhKbGMzTTZJR1V1YzNSeVpYTnpJSDA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWFpsYm5SYlpETmxkbVZ1ZEM1MGVYQmxYU2hrTTJWMlpXNTBLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFUXpVM1I1YkdWTVlYbHZkWFJCWkdGd2RHOXlMbkJ5YjNSdmRIbHdaUzVyYVdOcklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCa015NTBhVzFsY2lobWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQmZjM1Z3WlhJdWNISnZkRzkwZVhCbExuUnBZMnN1WTJGc2JDaGZkR2hwY3lrN0lIMHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1JETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSXVjSEp2ZEc5MGVYQmxMbTl1SUQwZ1puVnVZM1JwYjI0Z0tHVjJaVzUwVkhsd1pTd2diR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGRtVnVkRlI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WMlpXNTBMbTl1S0dWMlpXNTBWSGx3WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxkbVZ1ZEM1dmJpaHNZWGx2ZFhSZk1TNUZkbVZ1ZEZSNWNHVmJaWFpsYm5SVWVYQmxYU3dnYkdsemRHVnVaWElwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUVRelUzUjViR1ZNWVhsdmRYUkJaR0Z3ZEc5eU8xeHVmU2hzWVhsdmRYUmZNUzVNWVhsdmRYUXBLVHRjYm1WNGNHOXlkSE11UkROVGRIbHNaVXhoZVc5MWRFRmtZWEIwYjNJZ1BTQkVNMU4wZVd4bFRHRjViM1YwUVdSaGNIUnZjanRjYm1aMWJtTjBhVzl1SUdRellXUmhjSFJ2Y2lncElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFUXpVM1I1YkdWTVlYbHZkWFJCWkdGd2RHOXlLQ2s3WEc1OVhHNWxlSEJ2Y25SekxtUXpZV1JoY0hSdmNpQTlJR1F6WVdSaGNIUnZjanRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhVnBFVGpKTk1rWnJXVmhDTUdJelNYVmhiazFwVEVOS2VtSXpWbmxaTWxaVFlqSTVNRWxxYjJsSmFYZHBZekk1TVdOdFRteGplVWsyVjNsSmRVeHBPSFZNYVRsWVdsZEtSR0l5ZUdoTU0wNTVXWGs1YTAweldYcFpWMUpvWTBoU2RtTnBOVEJqZVVwa1RFTktkVmxYTVd4amVVazJWekV3YzBsdE1XaGpTRUp3WW0xa2VrbHFiMmxQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjFGVlJrNVJVM2gwVVRCR1FtRXdVVGRSVlVaSVQxVk5OMU5WUmtKTlJVMXpaREJPUWxGVk1EZFRWVVp1VVdwV1JFOHhSa0pSVlVWelYxVkdSRk5UZUhCUmEwWkNWSGw0VkZGWVZrTldhblJTVVZoYVJGSkRlRmhSVlVaTVRFVmtRbEZWWTNOU1ZVWkNVbE40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoeVVXdEdRbFY1ZUVSUlZVWkVURWQwUTFGVlJsUk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVmtKUlZWVnpZVEJLUWxGV1RYTlJNRVpDVVhsNGNsRnJSa0pWZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFWlJWVVpHVEVkMFExRlZSbFJNUlU1Q1VWVk5jMkV3U2tKUlZrMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNZVEJLY1ZKNWVFcFJWVVpLVEVaR1FsRldSWE5TTUVaQ1VubDRURkZWUmtwTVJVNUNVVlZOTjFWVlJrUmpSVWx6VTFWR1FsTlRlRXBSVlVaS1RFVk9RbEZWVFRkVlZVWkVWa040VEZGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoSVVWVkdTRTh4YkVKUk1VbHpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05TVlVaQ1VsUjBibEZyUmtSVlEzaEtVVlZHU2t4RmJFSlJWV3R6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SV3hDVVZWcmMxSlZSa0pTVkhSNFVXdEdSR1ZGU1hOVVZVWkNWRk40UkZGVlJrUk1SMVpDVVZVd2MxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMDNZMVZLUWxFemNFTk1SVlpDVVZWVmMxRXdSa0pSZVhoNFVXdEdRbU5WU1hOU1ZVWkNVbE40YkZGVlJrNU1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRTh6UmtOUlZVMTZVWGw0UmxGVlJrWk1SVTVDVVZWTmMxb3dTa0pSVjJSRFRFVldRbEZWVlhOV1ZVWkNVVk40UkZGVlJrUlBNamxEVVZWT2RWRnBlR3hSVlVaT1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pVZVhoR1VWVkdSa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUVGRpTUVwQ1VYcHNRMHhHUmtKUlZrVnpVVEJHUWxGNWVFNVJWVVpPVEVWV1FsRlZWWE5STUVaQ1VYcDBibEZyUmtSa1JVbHpVVEJHUWxGNWVFUlJWVVpFVHpOR1ExRlZUa1ZNUlZaQ1VWVlZjMUV3UmtKUmVYaDBVV3RHUW1KVlNYTlNWVVpDVWxONGJGRlZSazVNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JHRkZVVGRYVlVaR1VrTjRTbEZWUmtwTVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZNVUpSVlRBM1dqQktRbEZWVlhOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTk4xZFZSa2hpYTAxelUxVkdRbE5VZEhCUmEwWkdVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkdORlNYTlJNRVpDVVhsNFJGRlZSa0pQZW5SS1VWVk9UVXhGVGtKUlZVMDNVMVZHZVZFd1VYTmpNRTVDVVZVNGMxSXdSa0pWUTNoV1VWVkdVa3hGVGtKUlZrVTNWVlZHUkZkcGVFcFJWVVpLVEVVNVFsRlZPSE5TTUVaQ1VubDRSbEZWUmtaTVJXeENVVlZyYzFKVlJrSlNVM2h5VVd0R1FsVjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoTVVWVkdURXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRUbEZWUms1TVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVsVkdRbEpUZUVSUlZVWkVUekZHUWxGNlZrWk1SV3hDVVZWcmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTTFKRVRFVk9RbEZWVFRkVFZVWklVa040ZEZFd1JrSlRVM2hJVVZWR1MwOHhSa0pSVlVWellWVktRbEpWVFRkVlZVWkZVbmw0UmxGVlJrWk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhIVGtKUlZUQnpWREJHUWxGVGVIQlJhMFpDVkZONFNsRlZSa3BNUm14Q1VWVlZjMUpWUmtKWGFYaEVVVlZHV2t4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1eFVYbDRSRkZWUmtSUE1HeENXakJPUlV4SGJFUlJWVVpHVEVWa1FsRlZXWE5XVlVaQ1VubDRWRkZWUlRKUmFYaEdVVlZHUmt4R1JrSlJWemxEVHpGR1FsRXllRVZNUld4Q1VWVnJjMVF3UmtKVWVYaFVVVlZHVkV4RmRFSlJWWE56VlZWR1FsVlRlRVpSVlVaR1R6RnNRbEY1T1VOTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVpPUWxGV1RYTlNWVVpDVWxONFVsRlZSbEpNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZPTUZGNmRHaFJWVVpPVHpGc1FsRXdaM05UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxellUQktRbEZXVFhOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxSlZSa0pTVTNoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNmRGUlJWVTV4VWtSMFVsRlZUa1ZNUlRsQ1VWVTRjMU5WUmtKVFUzaEVVVlZHUkU4d2JFSlJNbWhEVEVWT1FsRlZUVGRUVlVaRVZFTjNlVkZyUmtKUmVuUkNVVlZHUlV4RlRrSlJWVTF6VVZWR2RWSkZVWE5STUVaQ1RVVk5jMXBWUmtKVVUzaElVVmN4UlV3d1RUZFJWVVoxVWtacmMySXdVa0pSVnpsRFR6QkdRbUZWVm5GUmVYaFVVVlZHYmxGcGVGUlJWVVpVVHpCc1FsRXpTa05NUlRsQ1VWVTRjMU5WUmtKVFUzaDJVV3RHUW1Jd1NYTlNWVVpDVWxONFJGRlZSa1JQTUVaQ1VUTlNSRXhGVGtKUlZVMDNVVlZHUjFKRGR6UlJhMFpHVVhsS09TSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZlpYaDBaVzVrY3lBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5bGVIUmxibVJ6S1NCOGZDQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCbGVIUmxibVJUZEdGMGFXTnpJRDBnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnWlhoMFpXNWtVM1JoZEdsamN5QTlJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hzZ1gxOXdjbTkwYjE5Zk9pQmJYU0I5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtnSmlZZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1pDNWZYM0J5YjNSdlgxOGdQU0JpT3lCOUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJpS1NCcFppQW9ZaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdLU2tnWkZ0d1hTQTlJR0piY0YwN0lIMDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3WEc0Z0lDQWdJQ0FnSUdWNGRHVnVaRk4wWVhScFkzTW9aQ3dnWWlrN1hHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOWZLQ2tnZXlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwZ1pEc2dmVnh1SUNBZ0lDQWdJQ0JrTG5CeWIzUnZkSGx3WlNBOUlHSWdQVDA5SUc1MWJHd2dQeUJQWW1wbFkzUXVZM0psWVhSbEtHSXBJRG9nS0Y5ZkxuQnliM1J2ZEhsd1pTQTlJR0l1Y0hKdmRHOTBlWEJsTENCdVpYY2dYMThvS1NrN1hHNGdJQ0FnZlR0Y2JuMHBLQ2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNTJZWElnYkdGNWIzVjBYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOXNZWGx2ZFhSY0lpazdYRzUyWVhJZ1JETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSWdQU0FvWm5WdVkzUnBiMjRnS0Y5emRYQmxjaWtnZTF4dUlDQWdJRjlmWlhoMFpXNWtjeWhFTTFOMGVXeGxUR0Y1YjNWMFFXUmhjSFJ2Y2l3Z1gzTjFjR1Z5S1R0Y2JpQWdJQ0JtZFc1amRHbHZiaUJFTTFOMGVXeGxUR0Y1YjNWMFFXUmhjSFJ2Y2loa00wTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnWDNOMWNHVnlMbU5oYkd3b2RHaHBjeWtnZkh3Z2RHaHBjenRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVaRE5EYjI1MFpYaDBJRDBnWkRORGIyNTBaWGgwTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVsZG1WdWRDQTlJR1F6UTI5dWRHVjRkQzVrYVhOd1lYUmphQ2hzWVhsdmRYUmZNUzVGZG1WdWRGUjVjR1ZiYkdGNWIzVjBYekV1UlhabGJuUlVlWEJsTG5OMFlYSjBYU3dnYkdGNWIzVjBYekV1UlhabGJuUlVlWEJsVzJ4aGVXOTFkRjh4TGtWMlpXNTBWSGx3WlM1MGFXTnJYU3dnYkdGNWIzVjBYekV1UlhabGJuUlVlWEJsVzJ4aGVXOTFkRjh4TGtWMlpXNTBWSGx3WlM1bGJtUmRLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUXpiR0Y1YjNWMElEMGdYM1JvYVhNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrY21Gbk8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1a2NtRm5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmtjbUZuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1J5WVdjZ1BTQmtNME52Ym5SbGVIUXVaSEpoWnlncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV6ZFdKcVpXTjBLR3hoZVc5MWRGOHhMa3hoZVc5MWRDNWtjbUZuVDNKcFoybHVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIyNG9YQ0p6ZEdGeWRDNWtNMkZrWVhCMGIzSmNJaXdnYkdGNWIzVjBYekV1VEdGNWIzVjBMbVJ5WVdkVGRHRnlkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtOXVLRndpWkhKaFp5NWtNMkZrWVhCMGIzSmNJaXdnWm5WdVkzUnBiMjRnS0dRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGNWIzVjBYekV1VEdGNWIzVjBMbVJ5WVdjb1pDd2daRE5EYjI1MFpYaDBMbVYyWlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkROc1lYbHZkWFF1Y21WemRXMWxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbTl1S0Z3aVpXNWtMbVF6WVdSaGNIUnZjbHdpTENCc1lYbHZkWFJmTVM1TVlYbHZkWFF1WkhKaFowVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHUnlZV2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWQxYldWdWRITmJNRjB1WTJGc2JDaGtjbUZuS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQkVNMU4wZVd4bFRHRjViM1YwUVdSaGNIUnZjaTV3Y205MGIzUjVjR1V1ZEhKcFoyZGxjaUE5SUdaMWJtTjBhVzl1SUNobEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa00yVjJaVzUwSUQwZ2V5QjBlWEJsT2lCc1lYbHZkWFJmTVM1RmRtVnVkRlI1Y0dWYlpTNTBlWEJsWFN3Z1lXeHdhR0U2SUdVdVlXeHdhR0VzSUhOMGNtVnpjem9nWlM1emRISmxjM01nZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRDNWpZV3hzS0dRelpYWmxiblF1ZEhsd1pTd2daRE5sZG1WdWRDazdYRzRnSUNBZ2ZUdGNiaUFnSUNCRU0xTjBlV3hsVEdGNWIzVjBRV1JoY0hSdmNpNXdjbTkwYjNSNWNHVXVhMmxqYXlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnZG1GeUlIUWdQU0IwYUdsekxtUXpRMjl1ZEdWNGRDNTBhVzFsY2lobWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQmZjM1Z3WlhJdWNISnZkRzkwZVhCbExuUnBZMnN1WTJGc2JDaGZkR2hwY3lrZ0ppWWdkQzV6ZEc5d0tDazdJSDBwTzF4dUlDQWdJSDA3WEc0Z0lDQWdSRE5UZEhsc1pVeGhlVzkxZEVGa1lYQjBiM0l1Y0hKdmRHOTBlWEJsTG05dUlEMGdablZ1WTNScGIyNGdLR1YyWlc1MFZIbHdaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmxkbVZ1ZEZSNWNHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVjJaVzUwTG05dUtHVjJaVzUwVkhsd1pTd2diR2x6ZEdWdVpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsZG1WdWRDNXZiaWhzWVhsdmRYUmZNUzVGZG1WdWRGUjVjR1ZiWlhabGJuUlVlWEJsWFN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFUXpVM1I1YkdWTVlYbHZkWFJCWkdGd2RHOXlPMXh1ZlNoc1lYbHZkWFJmTVM1TVlYbHZkWFFwS1R0Y2JtVjRjRzl5ZEhNdVJETlRkSGxzWlV4aGVXOTFkRUZrWVhCMGIzSWdQU0JFTTFOMGVXeGxUR0Y1YjNWMFFXUmhjSFJ2Y2p0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVZwRVRqSk9SMFpyV1ZoQ01HSXpTWFZoYmsxcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybEphWGRwWXpJNU1XTnRUbXhqZVVrMlYzbEpkVXhwT0hWTWFUbFlXbGRLUkdJeWVHaE1NMDU1V1hrNWEwMHpXVEJaVjFKb1kwaFNkbU5wTlRCamVVcGtURU5LZFZsWE1XeGplVWsyVnpFd2MwbHRNV2hqU0VKd1ltMWtla2xxYjJsUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4xRlZSa2hSVTNoMFVUQkdRbUZWVVRkUlZVWldZV3RSTjFOVlJrSk5SVTF6WkRCT1FsRlZNRGRUVlVad1VXcFdSRXhFYUVOUlZVWjJVV2w0VkZGVlJuWlJhblJTVVZWR05GRjVlRnBSVlU1S1RFZHNRMUZWUmxCTVJrNUNaVlZLVjA4eFJrSk5WVXAwVVdsNGJGRlZSbFJNUldSQ1VWWlJjMVV3UmtKVmVYaEVVVlZHV0U4eFJrSlNXRUpFVEVWMFFsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFVd1JrSlZlWGhFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUhKUmEwWkNWWGw0UkZGVlJrUk1SM1JEVVZWR1ZFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZXUWxGVlZYTmhNRXBDVVZaTmMxRXdSa0pSZVhoeVVXdEdRbFY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJsRlZSa1pNUjNSRFVWVkdWRXhGVGtKUlZVMXpZVEJLUWxGV1RYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlNNbkJKVEVWc1FsRlZhM05WVlVaQ1ZWTjRTRkZWUmtoTVJYUkNVVlZyYzFFd1JrSlJlblJTVVZWT2QxRnBlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWHAwVWxGVlRsVk1SWFJDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTTNWMVZHUkZWcGVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSbEZWUmtaUE1tUkRVVlZPVVV4RmJFSlJWV3R6VTFWR1FsTlRlRWhSVlVaSVRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZWVk4yTlZTa0pSTTFKRFRFVTVRbEZWT0hOUk1FWkNVWGw0YkZGVlJrNU1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRTh6UmtOUlZVMTRVV2w0UmxGVlJrWk1SVTVDVVZWTmMyRlZTa0pSVjJ4RFRFVldRbEZWVlhOYVZVWkNWRk40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZW5SNFVXdEdSR1JyVFhOU1ZVWkNVbE40UkZGVlJrUk1SMlJEVVZWR2JsRnBlRVpSVlVaR1RFWldRbEZWUlhOUk1FWkNVWHAwZGxGclJrUmlhMGx6V2xWR1FsUlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNWRk40UkZGVlJrUk1SVlpDVVZWVmMxVXdSa0pWZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVHpJNVExRlZUbmxSZVhoU1VWVkdVa3hGVGtKUlZVMXpWRlZHUWxSVGVFWlJWVVpHVEVWT1FsRlZUVGRhTUVwQ1VUTlNRMHhGVGtKUlZVMXpVVEJHUWxGNmRIaFJhMFpFVWtONFJsRlZSa1pNUlU1Q1VWVk5jMXBWUmtKYVUzaEdVVlZHUmt4SFZrSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVWHAwYUZGVlRURlJlblJhVVZWV1JVeEZiRUpSVld0elVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlRYTlVWVVpDVkZSMGJsRnJSa0pTVTNoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNmRGcFJWWFIxVVhsNFZGRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVhwV1EweEZUa0pSVlUxelVUQkdRbEZVY3pkVFZVWkVWRU40UkZGVlJrUlBNR3hDWld0T1JVeElUa1JSVlVaUVRFVmtRbEZXUVhOV1ZVWkNWVk40UkZGVlJsSlBNVVpDVVRGdmMxTlZSa0pUVTNoUVVWVkdVRXhGWkVKUlZXTnpVbFZHUWxKVGVFcFJWVVpLVEVWV1FsRlZWWE5oTUVwQ1VWWk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVldRbEZWVlhOVE1FWkNVM2w0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVmtKUlZWVnpWRlZHUWxSVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJWWkNVVlZWYzFFd1JrSlJlblJTVVZWak1WSlRlRXBSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVMVZHUWxOVGVFWlJWVVpRVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSUE1HeENVVEpvUlV4RlRrSlJWVTAzVTFWR1NGSkRlSFJSTUVaQ1UxTjRTRkZWUmt0UE1VWkNVVlZGYzJGVlNrSlNWVTAzVlZWR1JWSjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVHcFJWVVpPVEVVNVFsRlZSWE5oVlVwQ1VWVXdjMU5WUmtKVFUzaGFVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40UmxGVlJqUlJhWGhFVVZWR00xRnBlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZV3RWYzFFd1JrSlJlblJLVVZkMFJGSkRlSEJSTUVaQ1VsTjRTRkZWUmtkTVJsWkNVVlZqYzFVd1JrSk9hMGx6VWxWR1FsSlRlRkpSVlVaMlVXcDBVbEZWVG5OU1EzaEtVVlZHU2t4Rk9VSlJWVGh6VlRCR1FsVjVlRXhSVlVaTVRFWkdRbEZXUlhOU1ZVWkNVbFIwV2xGVlRYWlJhWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFZGRlZSbFJNUlZaQ1VWVlZjMVZWUmtKVlUzaEVVVlZHUkV4RlRrSlJWVTAzVlRCR1JHUkZUVGRaVlVaQ1ZGUjBXbEZWVGtsTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURWQwUTFGVlJsUk1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGVmtKUlZWVnpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUVGRWTUVaRVlXdFJOMVZWUmtSU1EzaFFVVlZHVUV4RmJFSlJWV3R6VVRCR1FsRjZkRXBSVlU1dlVXbDRSRkZWUmtSUE1HeENVVEIzYzAxclNrSlJWVTAzVVZWR1FsSkRlRVJSVlVaRVRFVkdRbVJGVWtWTVJVNUNVVlJDUkV4SFZrSlJWVEJ6VWpCR2VsSkRPVVJQTUVaQ1pFVlNXa3hIT1VWUlZVWjJVV2xLT1NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVkbUZ5SUV4dlkydHpJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCTWIyTnJjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYjJOcmN5QTlJSHQ5TzF4dUlDQWdJSDFjYmlBZ0lDQk1iMk5yY3k1d2NtOTBiM1I1Y0dVdVlXUmtJRDBnWm5WdVkzUnBiMjRnS0dsa0xDQjRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzlqYTNOYmFXUmRJRDBnZUR0Y2JpQWdJQ0I5TzF4dUlDQWdJRXh2WTJ0ekxuQnliM1J2ZEhsd1pTNWpiR1ZoY2lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNiMk5yY3lBOUlIdDlPMXh1SUNBZ0lIMDdYRzRnSUNBZ1RHOWphM011Y0hKdmRHOTBlWEJsTG1selJXMXdkSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3dnYVc0Z2RHaHBjeTVzYjJOcmN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVHRjYmlBZ0lDQk1iMk5yY3k1d2NtOTBiM1I1Y0dVdVlYQndiSGtnUFNCbWRXNWpkR2x2YmlBb1ppa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJzSUdsdUlIUm9hWE11Ykc5amEzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWW9UblZ0WW1WeUtHd3BMQ0IwYUdsekxteHZZMnR6VzJ4ZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUV4dlkydHpPMXh1ZlNncEtUdGNibVY0Y0c5eWRITXVURzlqYTNNZ1BTQk1iMk5yY3p0Y2JuWmhjaUJFWlhOalpXNTBJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCRVpYTmpaVzUwS0hnc0lFUXNJRWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRWNnUFQwOUlIWnZhV1FnTUNrZ2V5QkhJRDBnYm5Wc2JEc2dmVnh1SUNBZ0lDQWdJQ0IwYUdsekxrUWdQU0JFTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa2NnUFNCSE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Sb2NtVnphRzlzWkNBOUlEQXVNREF3TVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxSGNtbGtVMjVoY0U1dlpHVnpJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Ym1Gd1IzSnBaRk5wZW1VZ1BTQXhNREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMjVoY0ZOMGNtVnVaM1JvSUQwZ01UQXdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMkZzWlZOdVlYQkNlVTFoZUVnZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WVc1a2IyMGdQU0J1WlhjZ1VITmxkV1J2VW1GdVpHOXRLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjSEp2YW1WamRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWF5QTlJSGd1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JpQTlJSFJvYVhNdWJpQTlJSGhiTUYwdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa2dnUFNCdVpYY2dRWEp5WVhrb2RHaHBjeTVyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVuSUQwZ2JtVjNJRUZ5Y21GNUtIUm9hWE11YXlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11U0dRZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1cktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aElEMGdibVYzSUVGeWNtRjVLSFJvYVhNdWF5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlpQTlJRzVsZHlCQmNuSmhlU2gwYUdsekxtc3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTWdQU0J1WlhjZ1FYSnlZWGtvZEdocGN5NXJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXVheWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaU0E5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWxoSUQwZ2JtVjNJRUZ5Y21GNUtIUm9hWE11YXlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVdJZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1cktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1NGRHMXdJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXVheWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzlqYTNNZ1BTQnVaWGNnVEc5amEzTW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRhVzVFSUQwZ1RuVnRZbVZ5TGsxQldGOVdRVXhWUlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2tnUFNCdUxDQnFPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JxSUQwZ2JqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2d0TFdvZ1BpQnBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUWdQU0JFVzJsZFcycGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa0lENGdNQ0FtSmlCa0lEd2dkR2hwY3k1dGFXNUVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldsdVJDQTlJR1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG0xcGJrUWdQVDA5SUU1MWJXSmxjaTVOUVZoZlZrRk1WVVVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xcGJrUWdQU0F4TzF4dUlDQWdJQ0FnSUNCcElEMGdkR2hwY3k1ck8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kYmFWMGdQU0J1WlhjZ1FYSnlZWGtvYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxraGJhVjBnUFNCdVpYY2dRWEp5WVhrb2JpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcUlEMGdianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNocUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxraGJhVjFiYWwwZ1BTQnVaWGNnUVhKeVlYa29iaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa2hrVzJsZElEMGdibVYzSUVGeWNtRjVLRzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFcybGRJRDBnYm1WM0lFRnljbUY1S0c0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWlXMmxkSUQwZ2JtVjNJRUZ5Y21GNUtHNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqVzJsZElEMGdibVYzSUVGeWNtRjVLRzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1cybGRJRDBnYm1WM0lFRnljbUY1S0c0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxXMmxkSUQwZ2JtVjNJRUZ5Y21GNUtHNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwWVZ0cFhTQTlJRzVsZHlCQmNuSmhlU2h1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXSmJhVjBnUFNCdVpYY2dRWEp5WVhrb2JpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmgwYlhCYmFWMGdQU0J1WlhjZ1FYSnlZWGtvYmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnUkdWelkyVnVkQzVqY21WaGRHVlRjWFZoY21WTllYUnlhWGdnUFNCbWRXNWpkR2x2YmlBb2Jpd2daaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdUU0E5SUc1bGR5QkJjbkpoZVNodUtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J1T3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWJhVjBnUFNCdVpYY2dRWEp5WVhrb2JpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElHNDdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMWJhVjFiYWwwZ1BTQm1LR2tzSUdvcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCTk8xeHVJQ0FnSUgwN1hHNGdJQ0FnUkdWelkyVnVkQzV3Y205MGIzUjVjR1V1YjJabWMyVjBSR2x5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RTQTlJRzVsZHlCQmNuSmhlU2gwYUdsekxtc3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JDQTlJREE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTVyT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0SUQwZ2RWdHBYU0E5SUhSb2FYTXVjbUZ1Wkc5dExtZGxkRTVsZUhSQ1pYUjNaV1Z1S0RBdU1ERXNJREVwSUMwZ01DNDFPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JDQXJQU0I0SUNvZ2VEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JzSUQwZ1RXRjBhQzV6Y1hKMEtHd3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkUzV0WVhBb1puVnVZM1JwYjI0Z0tIZ3BJSHNnY21WMGRYSnVJSGdnS2owZ1gzUm9hWE11YldsdVJDQXZJR3c3SUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUkdWelkyVnVkQzV3Y205MGIzUjVjR1V1WTI5dGNIVjBaVVJsY21sMllYUnBkbVZ6SUQwZ1puVnVZM1JwYjI0Z0tIZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnZG1GeUlHNGdQU0IwYUdsekxtNDdYRzRnSUNBZ0lDQWdJR2xtSUNodUlEd2dNU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXVheWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtNaUE5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXNwTzF4dUlDQWdJQ0FnSUNCMllYSWdTSFYxSUQwZ2JtVjNJRUZ5Y21GNUtIUm9hWE11YXlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhoSUlEMGdNRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnZFY4eElEMGdNRHNnZFY4eElEd2dianNnS3l0MVh6RXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCMGFHbHpMbXM3SUNzcmFTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQklkWFZiYVYwZ1BTQjBhR2x6TG1kYmFWMWJkVjh4WFNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCMklEMGdNRHNnZGlBOElHNDdJQ3NyZGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxWHpFZ1BUMDlJSFlwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WVhoRWFYTndiR0ZqWlhNZ1BTQnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2FYTjBZVzVqWlZOeGRXRnlaV1FnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNodFlYaEVhWE53YkdGalpYTXRMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpWTnhkV0Z5WldRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZEdocGN5NXJPeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrZUY4eElEMGdaRnRwWFNBOUlIaGJhVjFiZFY4eFhTQXRJSGhiYVYxYmRsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE4wWVc1alpWTnhkV0Z5WldRZ0t6MGdaREpiYVYwZ1BTQmtlRjh4SUNvZ1pIaGZNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHbHpkR0Z1WTJWVGNYVmhjbVZrSUQ0Z01XVXRPU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtUWdQU0IwYUdsekxtOW1abk5sZEVScGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZEdocGN5NXJPeUFySzJrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNFcybGRXM1pkSUNzOUlISmtXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR2x6ZEdGdVkyVWdQU0JOWVhSb0xuTnhjblFvWkdsemRHRnVZMlZUY1hWaGNtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXUmxZV3hFYVhOMFlXNWpaU0E5SUhSb2FYTXVSRnQxWHpGZFczWmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCM1pXbG5hSFFnUFNCMGFHbHpMa2NnSVQwZ2JuVnNiQ0EvSUhSb2FYTXVSMXQxWHpGZFczWmRJRG9nTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMlZwWjJoMElENGdNU0FtSmlCa2FYTjBZVzVqWlNBK0lHbGtaV0ZzUkdsemRHRnVZMlVnZkh3Z0lXbHpSbWx1YVhSbEtHbGtaV0ZzUkdsemRHRnVZMlVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQjBhR2x6TG1zN0lDc3JhU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVNGdHBYVnQxWHpGZFczWmRJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXbG5hSFFnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkbGFXZG9kQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwWkdWaGJFUnBjM1JUY1hWaGNtVmtJRDBnYVdSbFlXeEVhWE4wWVc1alpTQXFJR2xrWldGc1JHbHpkR0Z1WTJVc0lHZHpJRDBnTWlBcUlIZGxhV2RvZENBcUlDaGthWE4wWVc1alpTQXRJR2xrWldGc1JHbHpkR0Z1WTJVcElDOGdLR2xrWldGc1JHbHpkRk54ZFdGeVpXUWdLaUJrYVhOMFlXNWpaU2tzSUdScGMzUmhibU5sUTNWaVpXUWdQU0JrYVhOMFlXNWpaVk54ZFdGeVpXUWdLaUJrYVhOMFlXNWpaU3dnYUhNZ1BTQXlJQ29nTFhkbGFXZG9kQ0F2SUNocFpHVmhiRVJwYzNSVGNYVmhjbVZrSUNvZ1pHbHpkR0Z1WTJWRGRXSmxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBjMFpwYm1sMFpTaG5jeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LR2R6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZEdocGN5NXJPeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5XMmxkVzNWZk1WMGdLejBnWkZ0cFhTQXFJR2R6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQklkWFZiYVYwZ0xUMGdkR2hwY3k1SVcybGRXM1ZmTVYxYmRsMGdQU0JvY3lBcUlDZ3lJQ29nWkdsemRHRnVZMlZEZFdKbFpDQXJJR2xrWldGc1JHbHpkR0Z1WTJVZ0tpQW9aREpiYVYwZ0xTQmthWE4wWVc1alpWTnhkV0Z5WldRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2dkR2hwY3k1ck95QXJLMmtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNFNDQTlJRTFoZEdndWJXRjRLRzFoZUVnc0lIUm9hWE11U0Z0cFhWdDFYekZkVzNWZk1WMGdQU0JJZFhWYmFWMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlJRDBnZEdocGN5NXpibUZ3UjNKcFpGTnBlbVVnTHlBeU8xeHVJQ0FnSUNBZ0lDQjJZWElnWnlBOUlIUm9hWE11YzI1aGNFZHlhV1JUYVhwbE8xeHVJQ0FnSUNBZ0lDQjJZWElnZHlBOUlIUm9hWE11YzI1aGNGTjBjbVZ1WjNSb08xeHVJQ0FnSUNBZ0lDQjJZWElnYXlBOUlIY2dMeUFvY2lBcUlISXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JuVnRUbTlrWlhNZ1BTQjBhR2x6TG01MWJVZHlhV1JUYm1Gd1RtOWtaWE03WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhVZ1BTQXdPeUIxSUR3Z2JuVnRUbTlrWlhNN0lDc3JkU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElIUm9hWE11YXpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIaHBkU0E5SUhSb2FYTXVlRnRwWFZ0MVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYlNBOUlIaHBkU0F2SUdjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1lnUFNCdElDVWdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NTQTlJRzBnTFNCbU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoSUQwZ1RXRjBhQzVoWW5Nb1ppazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSNElEMGdLR0VnUEQwZ01DNDFLU0EvSUhocGRTQXRJSEVnS2lCbklEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hocGRTQStJREFwSUQ4Z2VHbDFJQzBnS0hFZ0t5QXhLU0FxSUdjZ09pQjRhWFVnTFNBb2NTQXRJREVwSUNvZ1p6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvTFhJZ1BDQmtlQ0FtSmlCa2VDQThQU0J5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5qWVd4bFUyNWhjRUo1VFdGNFNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1blcybGRXM1ZkSUNzOUlHMWhlRWdnS2lCcklDb2daSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxraGJhVjFiZFYxYmRWMGdLejBnYldGNFNDQXFJR3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kYmFWMWJkVjBnS3owZ2F5QXFJR1I0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUlXMmxkVzNWZFczVmRJQ3M5SUdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG14dlkydHpMbWx6Ulcxd2RIa29LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c2IyTnJjeTVoY0hCc2VTaG1kVzVqZEdsdmJpQW9kU3dnY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCZmRHaHBjeTVyT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11U0Z0cFhWdDFYVnQxWFNBclBTQnRZWGhJTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1blcybGRXM1ZkSUMwOUlHMWhlRWdnS2lBb2NGdHBYU0F0SUhoYmFWMWJkVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JFWlhOalpXNTBMbVJ2ZEZCeWIyUWdQU0JtZFc1amRHbHZiaUFvWVN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2VDQTlJREFzSUdrZ1BTQmhMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHa3RMU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIZ2dLejBnWVZ0cFhTQXFJR0piYVYwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCNE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUkdWelkyVnVkQzV5YVdkb2RFMTFiSFJwY0d4NUlEMGdablZ1WTNScGIyNGdLRzBzSUhZc0lISXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHa2dQU0J0TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLR2t0TFNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpiYVYwZ1BTQkVaWE5qWlc1MExtUnZkRkJ5YjJRb2JWdHBYU3dnZGlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JFWlhOalpXNTBMbkJ5YjNSdmRIbHdaUzVqYjIxd2RYUmxVM1JsY0ZOcGVtVWdQU0JtZFc1amRHbHZiaUFvWkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm5WdFpYSmhkRzl5SUQwZ01Dd2daR1Z1YjIxcGJtRjBiM0lnUFNBd08xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWF6c2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1ZFcxbGNtRjBiM0lnS3owZ1JHVnpZMlZ1ZEM1a2IzUlFjbTlrS0hSb2FYTXVaMXRwWFN3Z1pGdHBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkVaWE5qWlc1MExuSnBaMmgwVFhWc2RHbHdiSGtvZEdocGN5NUlXMmxkTENCa1cybGRMQ0IwYUdsekxraGtXMmxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYm05dGFXNWhkRzl5SUNzOUlFUmxjMk5sYm5RdVpHOTBVSEp2WkNoa1cybGRMQ0IwYUdsekxraGtXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWkdWdWIyMXBibUYwYjNJZ1BUMDlJREFnZkh3Z0lXbHpSbWx1YVhSbEtHUmxibTl0YVc1aGRHOXlLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01TQXFJRzUxYldWeVlYUnZjaUF2SUdSbGJtOXRhVzVoZEc5eU8xeHVJQ0FnSUgwN1hHNGdJQ0FnUkdWelkyVnVkQzV3Y205MGIzUjVjR1V1Y21Wa2RXTmxVM1J5WlhOeklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YlhCMWRHVkVaWEpwZG1GMGFYWmxjeWgwYUdsekxuZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXeHdhR0VnUFNCMGFHbHpMbU52YlhCMWRHVlRkR1Z3VTJsNlpTaDBhR2x6TG1jcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWF6c2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmhhMlZFWlhOalpXNTBVM1JsY0NoMGFHbHpMbmhiYVYwc0lIUm9hWE11WjF0cFhTd2dZV3h3YUdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJYQjFkR1ZUZEhKbGMzTW9LVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFUmxjMk5sYm5RdVkyOXdlU0E5SUdaMWJtTjBhVzl1SUNoaExDQmlLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRJRDBnWVM1c1pXNW5kR2dzSUc0Z1BTQmlXekJkTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdE95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnYmpzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWWx0cFhWdHFYU0E5SUdGYmFWMWJhbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFUmxjMk5sYm5RdWNISnZkRzkwZVhCbExuTjBaWEJCYm1SUWNtOXFaV04wSUQwZ1puVnVZM1JwYjI0Z0tIZ3dMQ0J5TENCa0xDQnpkR1Z3VTJsNlpTa2dlMXh1SUNBZ0lDQWdJQ0JFWlhOalpXNTBMbU52Y0hrb2VEQXNJSElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJoYTJWRVpYTmpaVzUwVTNSbGNDaHlXekJkTENCa1d6QmRMQ0J6ZEdWd1UybDZaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeWIycGxZM1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIycGxZM1JiTUYwb2VEQmJNRjBzSUhnd1d6RmRMQ0J5V3pCZEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MFlXdGxSR1Z6WTJWdWRGTjBaWEFvY2xzeFhTd2daRnN4WFN3Z2MzUmxjRk5wZW1VcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdjbTlxWldOMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTlxWldOMFd6RmRLSEpiTUYwc0lIZ3dXekZkTENCeVd6RmRLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlESTdJR2tnUENCMGFHbHpMbXM3SUdrckt5bGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR0ZyWlVSbGMyTmxiblJUZEdWd0tISmJhVjBzSUdSYmFWMHNJSE4wWlhCVGFYcGxLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFUmxjMk5sYm5RdWJVRndjR3g1SUQwZ1puVnVZM1JwYjI0Z0tHMHNJRzRzSUdZcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdrZ1BTQnRPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR29nUFNCdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLR290TFNBK0lEQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaWhwTENCcUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1JHVnpZMlZ1ZEM1d2NtOTBiM1I1Y0dVdWJXRjBjbWw0UVhCd2JIa2dQU0JtZFc1amRHbHZiaUFvWmlrZ2UxeHVJQ0FnSUNBZ0lDQkVaWE5qWlc1MExtMUJjSEJzZVNoMGFHbHpMbXNzSUhSb2FYTXViaXdnWmlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JFWlhOalpXNTBMbkJ5YjNSdmRIbHdaUzVqYjIxd2RYUmxUbVY0ZEZCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0Z0tIZ3dMQ0J5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dGNIVjBaVVJsY21sMllYUnBkbVZ6S0hnd0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGc2NHaGhJRDBnZEdocGN5NWpiMjF3ZFhSbFUzUmxjRk5wZW1Vb2RHaHBjeTVuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdWd1FXNWtVSEp2YW1WamRDaDRNQ3dnY2l3Z2RHaHBjeTVuTENCaGJIQm9ZU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeWIycGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRjBjbWw0UVhCd2JIa29ablZ1WTNScGIyNGdLR2tzSUdvcElIc2djbVYwZFhKdUlGOTBhR2x6TG1WYmFWMWJhbDBnUFNCNE1GdHBYVnRxWFNBdElISmJhVjFiYWwwN0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0psZEdFZ1BTQjBhR2x6TG1OdmJYQjFkR1ZUZEdWd1UybDZaU2gwYUdsekxtVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ltVjBZU0E5SUUxaGRHZ3ViV0Y0S0RBdU1pd2dUV0YwYUM1dGFXNG9ZbVYwWVN3Z01Ta3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdWd1FXNWtVSEp2YW1WamRDaDRNQ3dnY2l3Z2RHaHBjeTVsTENCaVpYUmhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdSR1Z6WTJWdWRDNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tHbDBaWEpoZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITjBjbVZ6Y3lBOUlFNTFiV0psY2k1TlFWaGZWa0ZNVlVVc0lHTnZiblpsY21kbFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0lXTnZiblpsY21kbFpDQW1KaUJwZEdWeVlYUnBiMjV6TFMwZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY3lBOUlIUm9hWE11Y25WdVoyVkxkWFIwWVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRtVnlaMlZrSUQwZ1RXRjBhQzVoWW5Nb2MzUnlaWE56SUM4Z2N5QXRJREVwSUR3Z2RHaHBjeTUwYUhKbGMyaHZiR1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEpsYzNNZ1BTQnpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZEhKbGMzTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCRVpYTmpaVzUwTG5CeWIzUnZkSGx3WlM1eWRXNW5aVXQxZEhSaElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YlhCMWRHVk9aWGgwVUc5emFYUnBiMjRvZEdocGN5NTRMQ0IwYUdsekxtRXBPMXh1SUNBZ0lDQWdJQ0JFWlhOalpXNTBMbTFwWkNoMGFHbHpMbmdzSUhSb2FYTXVZU3dnZEdocGN5NXBZU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl0Y0hWMFpVNWxlSFJRYjNOcGRHbHZiaWgwYUdsekxtbGhMQ0IwYUdsekxtSXBPMXh1SUNBZ0lDQWdJQ0JFWlhOalpXNTBMbTFwWkNoMGFHbHpMbmdzSUhSb2FYTXVZaXdnZEdocGN5NXBZaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl0Y0hWMFpVNWxlSFJRYjNOcGRHbHZiaWgwYUdsekxtbGlMQ0IwYUdsekxtTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEIxZEdWT1pYaDBVRzl6YVhScGIyNG9kR2hwY3k1akxDQjBhR2x6TG1RcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWkdsemNDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV0YwY21sNFFYQndiSGtvWm5WdVkzUnBiMjRnS0drc0lHb3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0SUQwZ0tGOTBhR2x6TG1GYmFWMWJhbDBnS3lBeUxqQWdLaUJmZEdocGN5NWlXMmxkVzJwZElDc2dNaTR3SUNvZ1gzUm9hWE11WTF0cFhWdHFYU0FySUY5MGFHbHpMbVJiYVYxYmFsMHBJQzhnTmk0d0xDQmtJRDBnWDNSb2FYTXVlRnRwWFZ0cVhTQXRJSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53SUNzOUlHUWdLaUJrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWVGdHBYVnRxWFNBOUlIZzdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdsemNEdGNiaUFnSUNCOU8xeHVJQ0FnSUVSbGMyTmxiblF1Yldsa0lEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHMHBJSHRjYmlBZ0lDQWdJQ0FnUkdWelkyVnVkQzV0UVhCd2JIa29ZUzVzWlc1bmRHZ3NJR0ZiTUYwdWJHVnVaM1JvTENCbWRXNWpkR2x2YmlBb2FTd2dhaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHMWJhVjFiYWwwZ1BTQmhXMmxkVzJwZElDc2dLR0piYVYxYmFsMGdMU0JoVzJsZFcycGRLU0F2SURJdU1EdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQkVaWE5qWlc1MExuQnliM1J2ZEhsd1pTNTBZV3RsUkdWelkyVnVkRk4wWlhBZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnWkN3Z2MzUmxjRk5wZW1VcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxtNDdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZUZ0cFhTQTlJSGhiYVYwZ0xTQnpkR1Z3VTJsNlpTQXFJR1JiYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUVSbGMyTmxiblF1Y0hKdmRHOTBlWEJsTG1OdmJYQjFkR1ZUZEhKbGMzTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6ZEhKbGMzTWdQU0F3TzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCMUlEMGdNQ3dnYmsxcGJuVnpNU0E5SUhSb2FYTXViaUF0SURFN0lIVWdQQ0J1VFdsdWRYTXhPeUFySzNVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhZZ1BTQjFJQ3NnTVN3Z2JpQTlJSFJvYVhNdWJqc2dkaUE4SUc0N0lDc3JkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YXpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrZUNBOUlIUm9hWE11ZUZ0cFhWdDFYU0F0SUhSb2FYTXVlRnRwWFZ0MlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkNBclBTQmtlQ0FxSUdSNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNJRDBnVFdGMGFDNXpjWEowS0d3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrSUQwZ2RHaHBjeTVFVzNWZFczWmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTkdhVzVwZEdVb1pDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnliQ0E5SUdRZ0xTQnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa01pQTlJR1FnS2lCa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBjbVZ6Y3lBclBTQnliQ0FxSUhKc0lDOGdaREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wY21WemN6dGNiaUFnSUNCOU8xeHVJQ0FnSUVSbGMyTmxiblF1ZW1WeWIwUnBjM1JoYm1ObElEMGdNV1V0TVRBN1hHNGdJQ0FnY21WMGRYSnVJRVJsYzJObGJuUTdYRzU5S0NrcE8xeHVaWGh3YjNKMGN5NUVaWE5qWlc1MElEMGdSR1Z6WTJWdWREdGNiblpoY2lCUWMyVjFaRzlTWVc1a2IyMGdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZCelpYVmtiMUpoYm1SdmJTaHpaV1ZrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WldWa0lEMDlQU0IyYjJsa0lEQXBJSHNnYzJWbFpDQTlJREU3SUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WldWa0lEMGdjMlZsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoSUQwZ01qRTBNREV6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU1nUFNBeU5UTXhNREV4TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTBnUFNBeU1UUTNORGd6TmpRNE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KaGJtZGxJRDBnTXpJM05qYzdYRzRnSUNBZ2ZWeHVJQ0FnSUZCelpYVmtiMUpoYm1SdmJTNXdjbTkwYjNSNWNHVXVaMlYwVG1WNGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WldWa0lEMGdLSFJvYVhNdWMyVmxaQ0FxSUhSb2FYTXVZU0FySUhSb2FYTXVZeWtnSlNCMGFHbHpMbTA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXpaV1ZrSUQ0K0lERTJLU0F2SUhSb2FYTXVjbUZ1WjJVN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JRYzJWMVpHOVNZVzVrYjIwdWNISnZkRzkwZVhCbExtZGxkRTVsZUhSQ1pYUjNaV1Z1SUQwZ1puVnVZM1JwYjI0Z0tHMXBiaXdnYldGNEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRhVzRnS3lCMGFHbHpMbWRsZEU1bGVIUW9LU0FxSUNodFlYZ2dMU0J0YVc0cE8xeHVJQ0FnSUgwN1hHNGdJQ0FnY21WMGRYSnVJRkJ6WlhWa2IxSmhibVJ2YlR0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGxCelpYVmtiMUpoYm1SdmJTQTlJRkJ6WlhWa2IxSmhibVJ2YlR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVZwSFZucFpNbFoxWkVNMWNXTjVTWE5KYms1MlpGaEthbHBXU25aaU0xRnBUMmxKYVV4RFNucGlNMVo1V1RKV2VrbHFjR0pKYVRSMVRIazBkVXd4Wkd4WmEwNTJZa2RGZG1NelNtcE1NbEpzWXpKT2JHSnVVWFZrU0UxcFdGTjNhV0p0Um5SYVdFMXBUMngwWkV4RFNuUlpXRUozWVZjMWJtTjVTVFpKYW5NM1VWVkdTbE5VZEVwUlZVWkNUekZHUWxFd2EzTldWVVpDVTNsNFNGRlZSVEpSYVhoR1VWVkdSa3hGVGtKUlZVMDNVMVZHZGxFemNFUk1SVTVDVVZWTk4xTlZSVE5SYTJOellsVktRbEZWWTNOU01FWkNVME40VmxGVlJrcE1SVlpDVVZaVmMxSlZSa0pTVTNoRVVWVkdXRTh4UmtKVFdGcERURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEV6V2tOTVJVNUNVVlZOTjFOVlJrcFNRM2g0VVd0R1FsTjVlRWhSVlVaTlR6RkdRbEV3YTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkdORlNYTlJNRVpDVVhwMFNsRlZkRVZNU0ZaRFVWVkdVRXhGWkVKUlZrRTNWVlZHUkZOVGVFeFJWVVpNVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFOHhiRUpSVlZWelZEQkdRbFI1ZUV4UlZVWk1URVZPUWxGVlRUZFZWVVpFWkd0TmMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUkdGRlNYTlJNRVpDVVhwMFNsRlZkRVZNU0VaRFVWVkdURXhGWkVKUlZYZHpWbFZHUWxSVGVFUlJWVVoyVVhwMFVsRlZUakJSZVhoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJWWkNVVlZWTjFkVlJrUmtSVWx6VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFVd1JrUk1NRWszVTFWR1JGUkRlRVJSVlVaRVR6QnNRbEV3ZDNOWFZVWkNVWHAwUWxGVlJrVk1SVTVDVVZWTmMxRlZSbmxSTUZGelUxVkdlRkV3VFRkUlZVWjVVVEZyYzJNd1NrSlJWWE0zVVZWR2NGSkhlRU5QTUd4Q1RtdFNTa3hIYkVOUlZVWmFURVZPUWxGWFJYTlNWVVpDVlhsNFJGRlZSbWhNUlZaQ1VWWk5jMUV3UmtKaVZVazNWVlZHUW1KclNYTmhNRXBDVVZWRmMxSlZSa0pSVTNoU1VWVkdkRkZxZEZKUlZVWTJVWGw0VGxGVlJrUk1SV1JDVVZWUmMxRXdSa0pSZVhoRVVWVkdXazh4UmtKUlZrMXpWRlZHUWxGNWVFaFJWVVpGVEVWT1FsRlZUWE5STUVaQ1lUQkpOMVZWUlRGU1NFSkdURWRPUWxGV1RYTlNNRVpDVm5sNFRsRlZSazVNUlU1Q1VWVk5OMVZWUlhsUmVrNURURWhHUTFGVlJtNVJhWGhJVVZWR1dFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMHpVV2w0Y0ZGclJrSlhVM2hJVVZWR1dFeEZaRUpSVldOelVUQkdRbEY2ZEZKUlZVMTZVV2w0Y0ZGclJrSlhVM2hJVVZWR1dFeEZiRUpSVld0elVUQkdRbEY2ZEZKUlZVMHhVV2w0ZGxGclJrSmFVM2hJVVZWR1dreEZkRUpSVlhOelVUQkdRbEY2ZEZKUlZWWnZVWGw0V0ZGVlJrNU1SV1JDVVZWamMxTlZSa0pUVTNoYVVWVkdXa3hGVmtKUlZWVnpVVEJHUWxGNmRGSlJWVlV6VVdsNFdsRlZSbEJNUldSQ1VWUkNSVXhGYkVKUlZXdHpVVEJHUWxGNmRGSlJWbVEyVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1WlRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNmRGSlJWVTV6VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMDNWVlZHUkU0d1NYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RmRFSlJWWE56VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JOTUVselUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNsRlZSa3BNUlhSQ1VWVnpjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUVEJKYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVwUlZVWktURVYwUWxGVmMzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JFNVZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhLVVZWR1NreEZkRUpSVlhOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSTk1FbHpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFVFRCSmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFcFJWVVpLVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSRTB3U1hOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUk5NRWx6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SWFJDVVZWemMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVRUQkpjMU5WUmtKVFUzaEVVVlZHUkV4RlZrSlJWVlZ6VWpCR1FsSjVlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkU1VlNYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaEtVVlZHU2t4RmRFSlJWWE56VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JPVlVselUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUlhSQ1VWVnpjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUMVZKYzFOVlJrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVqQkdRbEo1ZUVwUlZVWktURVYwUWxGVmMzTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VUTndRMHhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlblJTVVZWTk0xRnBlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1rbHpWREJHUWxSNWVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsUjBXbEZWVGxOTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSRlJwZUZCUlZVWlFURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1ZIUnVVV3RHUkZkcGVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVRKb1EweEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VWxWR1FsSlVkSFpSYTBaRVpVVkpjMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkaFZVcENVVEp3UTA4eVJrSlJNRzgzVlRCR1JGTnFkRkpSVlU1RlRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxTXdSa0pUZVhoT1VWVkdUa3hGVGtKUlZVMXpWVEJHUWxWNmRGcFJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTW5oRlRFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1XZHpWREJHUWxSNWVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsUjBXbEZWVGxOTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHVnJTWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPTmxGcGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1XeENVVEEwYzFRd1JrSlVlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpVZEc1UmEwWkVWV2w0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJXeENVVlZyYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekpHUWxGNU9VTlBNV3hDVVRCUmMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVMTRVV2w0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTNCRFRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmxhMGx6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVGpaUmFYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXpjRU5NUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdWclNYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk5lRkZwZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVhwR1EweEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaE1VVlZHVEV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVk1FWkVUREJKTjFOVlJrUlVRM2hFVVZWR1JFOHdiRUpTVjBWelRVVktRbEZYZEVOTVJXUkNVVmRvUkV4R1ZrSlJWMnhFVEVWT1FsRldUWE5TVlVaQ1VsTjRSRkZWUm5SUmVuUlNVVlZOZWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNTVVV2w0VEZGVlJreE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JrOHhiRUpSTTJoRFRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5kUmFYaE1VVlZHVEV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVHpKa1ExRlZUalJSYVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGFGRlZUbmxSYW5SVVVWVk9TMDh4UmtKUk1GRnpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVdXbDRSRkZWUmtSUE1HeENVbFU0YzAxclNrSlJWazF6VWpCR1FtRnJTVGRWVlVaQ1VWTjRjRkZyUmxSUmVuUlNVVlpLU0V4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYTNOVE1FWkNVM2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTE0VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JGWnBlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNWSFJhVVZWTk0xRnBlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRhbEZWUm1wTVJVNUNVVlZOYzFOVlJrSlRVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZrUWxGVlkzTlJNRVpDVVhwMFdsRlZUalpTUTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVG10UE1VWkNVVEJSYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSaGEwbHpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJsWkNVVlZGYzFFd1JrSlJlWGhLVVZWR1NFeEZPVUpSVlVWelVUQkdRbEY1ZUVwUlZVWktURVYwUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHYzFGcGVFUlJWVVp5VVdsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSbGEwMXpVVEJHUWxGNmRFcFJWV1JPVEVjNVJGRlZSbkpSYVhoSVVWVkdObEZwZUZaUlZVVjNVV2w0UkZGVlJtaFBNVVpDVVZoYVJFeEhiRU5SVTNSSVVYcDBVbEZVYkVoU2VYaEtVVlZHVGt4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRKd1EweEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRUZFhWVVpDVWxONFVGRlZSbEJQTVVaQ1VUSjRRMHhGYkVKUlZXdHpVVEJHUWxWNWVFUlJWVVpFVHpGR1FsUXlVWE5UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSVmsxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUSjRSRXhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05UTUVaQ1UzbDRSRkZWUmxSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNTFVWGw0U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxWNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmpSVTF6VTFWR1FsTlRlRXBSVlVaS1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVWpKSmMxTXdSa0pUZVhoS1VWVkdTa3hGWkVKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5TTUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZaRUpSVlUxelVsVkdRbEpVZEZwUlZWWTBVV2w0VEZGVlJreE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFOHlaRU5SVlVaR1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZXUXlVa040VEZGVlJreE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JrOHlaRU5SVlU0MFVXbDRTbEZWUmtwTVJXUkNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFOHlPVU5SVlVaR1RFWk9RbEZXVFRkYU1FcENVMWhTUTB4RmJFSlJWV3R6VjFWR1FsZFRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwYmxGclJrUmphMGx6VTFWR1FsTlRlR3hSVlVac1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT05GRnBlRkJSVlVaUVRFWnNRbEZXYTNOU1ZVWkNVbE40UmxGVlJrWlBNamxEVVZWT2RWRnBlR3hSVlVac1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWT2QxRnBlRXhSVlVaTVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWTjJRd1NrSlJNM0JEVEVWc1FsRlZNSE5UVlVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh6WkVOUlZVNTNVWGw0YkZGVlJteE1SV3hDVVZWcmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZWWE5TTUVaQ1VubDRTbEZWUmtaTVJVNUNVVlZOTjJOVlNrSlJNMUpFVHpJNVExRlZUa1ZNUld4Q1VWVnJjMXBWUmtKYVUzaElVVlZHU0V4RmJFSlJWV3MzWkRCS1FsRlZWWE5VVlVaQ1ZGUjBkbEZyUmtSaVJVMXpVMVZHUWxSVGVFWlJWVVpHVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJrNUNVVlpOYzFKVlJrSlNVM2hFVVZWR1JFOHlPVU5SVlUweFVXbDRURkZWUmt4TVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkU4elpFTlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMkZWU2tKUk1uQkZUekprUTFGVlRrVk1SV3hDVVZVd2MxVlZSa0pWVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5hVlVaQ1dsTjRSRkZWUmtSTVJVNUNVVlZOTjFvd1NrSlJlbFpFVEVWc1FsRlZNSE5aVlVaQ1dWTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKVFZ6VkVURVZzUWxGVmEzTlVWVVpDVkZONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEo1T1VSTVJXeENVVlZyYzFSVlJrSlVVM2hJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUZKUlZVWlNURVZrUWxGVlkzTlpWVVpDV1ZONFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEVVVlZHUkV4SFJrSlJWMFZ6VVRCR1FsRjVlRVpSVlVaR1R6STVRMUZWVG5kU1UzaE1VVlZHVEV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVHpOa1ExRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpJNVExRlZUbkZTUTNoVVVWVkdWRTh5YkVOUlZVNWhUekprUTFGVlpFVk1SV3hDVVZWcmMxUlZSa0pVVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVWRIWlJhMFpFVjJsNFRsRlZSazVNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eWJFTlJWVTVyVHpKa1ExRlZUa1ZNUld4Q1VWVXdjMW93U2tKUlYyUkRURVZrUWxGVlkzTlpWVVpDV1ZONFNGRlZSa2hNUjBaQ1VWZEZjMUpWUmtSaVJWRnpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5TTUVaQ1VubDRUbEZWUms1TVJXUkNVVlZqYzFFd1JrSlJlWGhTVVZWR1VreEZaRUpSVldOeldWVkdRbGxUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNGJsRnJSa0phTUVselVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRYTlNWVVpFVGxWVmMxbFZSa0paVTNoSVVWVkdTRXhIVmtKUlYxVnpVakJHUWxKNWVGSlJWVVpTVEVWV1FsRjZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOUk1FWkNVWGw0YmxGclJrSmFNRWx6VWpCR1FsSjVlR2hSVlVab1RFVk9RbEZWVFhOUk1FWkNVWHAwYmxGclJrUk5WVkZ6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTk4ySXdTa0pSTWtselZEQkdRbFI1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUkdORlNYTlRNRVpDVTNsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSazh5T1VOUlZVNDJVV2w0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZUWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRUZGlNRXBDVVhwR1EweEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRhRkZWUm1oTVJXUkNVVlZqYzFsVlJrSlpVM2hJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUjFaQ1VWZFZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWVZWS1FsRXpRa2hQTWtaQ1VUQnZOMWRWUmtSU1EzaE1VVlZHVEV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVHpKa1ExRlZSa1pNUld4Q1VWVnJjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVU1Q1VUSm9SMDh4UmtKU1ZWRnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJteENVVlpyYzFJd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSRTVWU1hOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhHYkVKUlZtdHpVVEJHUWxGNmRGSlJWVTE0VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VjFWR1FsZFRlRVJSVlVaRVR6RkdRbEY2UmtOTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZPZDFGcGVFcFJWVVpLVEVaR1FsRldSWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFvd1NrSlJWMlJEVEVWT1FsRlZUVGRWVlVaR1kydE5jMU13UmtKVGVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsWjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1Sa1pDVVZaRmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVWRGcFJWVTR5VVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVTNXakJLUWxFemNFTk1SV3hDVVZWcmMxSXdSa0pTZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEV6V2tOTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVRKb1EweEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk1sRnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JGcERlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUbmRSYVhoS1VWVkdTa3hGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVoUlZVWklURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkV3d1NYTlJNRVpDVVhsNFNGRlZSa2hNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk0xSkZURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFVldRbEZWVlRkaU1FcENVVE5DUTB4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFZFdRbEZYVlhOU1ZVWkNVbFIwTTFGclJrUmtSVWx6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFcFJWVVpLVEVWa1FsRlZZM05STUVaQ1VYbDRTRkZWUmtoTVJWWkNVVlZWYzFFd1JrSlJlblF6VVd0R1JFOVZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6TkdRMUZWVFhaUmFuUTFVV3RHUWxSVWRETlJhMFpFVTBONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNaREJLUWxFeldrTk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVUek5HUTFGVlRqUlJhblJ3VVd0R1JGTnFkR2hSVlU1TFR6Rk9RbEV3YnpkVlZVWkVVa040U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVGQlJWVVpRVEVWV1FsRlZWWE5TVlVaQ1VsUjBXbEZWVGpKUmFYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0VmxGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRTh5WkVOUlZVNXpVV2w0VEZGVlJreE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWMFFsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZVM1lqQktRbEV6Y0VOTVJYUkNVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVR6STVRMUZWVGpSUmFYaE1VVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGYkVKUlZXdHpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUndVV3RHUkUwd1RUZFhWVVpFVkVONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZPVDA4d2JFSlZNSGR6VVRCR1FsRjZkRXBSVlZacVRFZFdRbEZWT0hOU01FWkNaRVZKYzFaVlJrSmtWVWx6VVRCR1FsWjVlRVpSVlVaR1RFVk9RbEZXWXpkVlZVWkVUVEJOYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkU4eFJrSlJNMmhEVEVVNVFsRlZPSE5STUVaQ1VYbDRSbEZWUmtaUE1XeENVVlZWYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JFNHdTWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUlphWGhFVVZWR1JFOHdiRUpTTWsxelkxVktRbEZYUlhOU01FWkNUbFZKYzFaVlJrSk9hMGx6VVRCR1FsbFRlRVpSVlVaR1RFVk9RbEZXWTNOU1ZVWkNVbE40UkZGVlJsaFBNVVpDVVRKb1JreEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMVZWUmtSaGEwbHpWREJHUWxSNWVFUlJWVVpFVEVWV1FsRlZWVGRYVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelZEQkdRbFI1ZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZVVZSYzFFd1JrSlJlblJLVVZWMFRreEhiRVJSVlVac1RFVmtRbEZZVWtOTVJsWkNVVmhXUTB4RlRrSlJWMFUzVlZWR1JHRkZUWE5UVlVaQ1UxTjRWRkZWUmxSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEdaRUpSVm1OelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWW10TmMxTXdSa0pUZVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZXUWxGVlZUZFhWVVpFVGpCSmMxVXdSa0pWZVhoS1VWVkdTa3hGT1VKUlZUaHpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZOTlZGNWVGQlJWVVpRVEVWT1FsRlZUWE5aVlVaQ1dWTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9kVkpEZUZoUlZVWllURVZzUWxGVmEzTlVNRVpDVkhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGT1FsRXpRa1ZQTVVaQ1VUQlJjMU5WUmtKVFUzaFlVVlZHV0V4RmRFSlJWWE56VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SbVJDVVZaamMxRXdSa0pSZW5SYVVWVkdSa3hGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRjZSa1ZNUlRsQ1VWVTRjMUV3UmtKUmVYaElVVlZHU0V4R1RrSlJWazF6VWpCR1FsSjVlRmhSVlVaWVRFVk9RbEZWVFRkVFZVWkVaR3ROYzFFd1JrSlJlblJLVVZWV1RreEVhRU5SVlVaYVRFVmtRbEZYTlVOUE1VWkNVVEJyYzFOVlJrSlRVM2hFVVZWR1JFeEhkRU5SVlVaeVVXbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNXZVWGw0U2xGVlJrcE1SWFJDVVZWemMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpXbFZHUWxwVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT05sRjVlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNWSFJhVVZWTk0xRnBlRXBSVlVaS1RFVk9RbEZWVFhOYVZVWkNXbE40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwMFZGRlZUbmxTUkhSU1VWVk9SVXhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVEVkR1FsRlhSWE5TVlVaQ1VsTjRSRkZWUmtSUE1HeENVVEpvUkV4RlRrSlJWVTAzVTFWR1JsbDVlRnBSVlVaS1RFVmtRbEZYTlVOTVJsWkNVVmM1UTB4RlRrSlJWMFZ6VWxWR1FsSlRlRVJSVlVab1R6RkdRbEY2VmtSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVlZVWkVZa1ZOYzFNd1JrSlRlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlVkRnBSVlU0MFVXbDRURkZWUmt4TVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUms4eVpFTlJWVTQwVVdsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKR1FsRXpTa05QTVU1Q1VUQnZOMU5WUmtSVVEzaEVVVlZHUkU4d2JFSlZWVGh6V2pCT1FsRlhUWE5TTUVaQ1pFVkpjMVpWUmtKa1ZVbHpVbFZHUWxsNWVFWlJWVVpHVEVWT1FsRlhSWE5TVlVaQ1VsTjRSRkZWUm1oTVJWWkNVVlZWYzFWVlJrSmFNRWszVlZWR1JHRnJXWE5VTUVaQ1ZIbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWTBWSmMxTlZSa0pUVTNoRVVWVkdSRXhIVmtKUlYxVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVpHUWxGV1JYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VYcE9SRXhGYkVKUlZXdHpVMVZHUWxOVGVFUlJWVVpFVEVVNVFsRlZPRGRYVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkdSRlVYTlRWVVpDVTFONFJGRlZSa1JNUjFaQ1VWZFZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hHUmtKUlZrVnpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRjZUa1JNUld4Q1VWVnJjMU5WUmtKVFUzaEVVVlZHUkV4Rk9VSlJWVGczVjFWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtoamExRnpVekJHUWxONWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pQTVd4Q1VYcE9RMHhGYkVKUlZXdHpVVEJHUWxGNWVHeFJWVVpzVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFVsRlZSbEpNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlpXZFZKRGVFUlJWVVpFVHpCc1FsSlhUWE5aTUVaQ1ZGTjRTRkZWUm5sUmFYaFdVVlZHZWxGcGVFUlJWVVpVVEVWV1FsRlZWWE5STUVaQ1ZYbDRSbEZWUmtaTVJVNUNVVmRrUkU4eFJrSlJNMmhHVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pQTVd4Q1VUTmFRMHhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhHVVZWR1JreEZaRUpSVldOelVUQkdRbEY2ZEc1UmEwWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGT1FsRXpVa1JQTUd4Q1VUQjNjMUV3UmtKUmVuUktVVlZPVUV4RVdrTlJWVVpZVEVWa1FsRlhOVU5NUmxaQ1VWYzVRMHhGVGtKUlYyUkVUekZHUWxFeWFFVk1SVGxDVVZVNGMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxFelVrUk1SVTVDVVZWTk4xTlZSa1pVZVhoNFVUQkdRbUpWU1hOU01FWkNUVEJKYzFaVlJrSk9SVWx6VWxWR1FsbDVlRVpSVlVaR1RFVk9RbEZYUlRkVlZVWkNaV3RSYzJGVlNrSmFWVTAzVlZWR2ExSjVlRXBSVlVaS1RFVk9RbEZWVFhOaE1FcENVVmQwUTB4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUbFZKYzFOVlJrSlRVM2hNVVZWR1RFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURWRXUWxGWFZYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHVnJUWE5UVlVaQ1UxTjRSRkZWUmtSTVIwNUNVVmROYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1RrMVZUWE5UVlVaQ1UxTjRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JrOHhiRUpSTWxGelUxVkdRbE5UZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhsNFZsRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWWE56VkRCR1FsRlRlRXhSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWM0JFVEVWT1FsRlhiRVJNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZOTlZKRGVFcFJWVVpLVEVWc1FsRlZhM05TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFwVlJrSmFVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUalJSZVhoS1VWVkdTa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRTRkZWUmtoTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPTkZGNWVFcFJWVVpLVEVWT1FsRlZUWE5aTUVaQ1dYbDRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZOTVZGNmRFcFJWVTVOVEVWT1FsRlZUVGRUVlVaR1ZGTjRlRkZyUmtKU2VYaElVVlZHVjB4R1ZrSlJWbU56VmxWR1FtRXdTVGRWVlVaRVpXdEpjMU5WUmtKVFUzaE9VVlZHVGt4RlpFSlJWV056VkZWR1FsUlRlRVJSVlVaRVRFWk9RbEZXVFhOU1ZVWkNVbE40VkZGVlJsUk1SV1JDVVZWamMxTXdSa0pUZVhoRVVWVkdSRTh4UmtKUk1uQkZURVU1UWxGVk9ITlJNRVpDVVhsNFZGRlZSbFJNUld4Q1VWVnJjMVpWUmtKV1UzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1R6RnNRbEV5TlVSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZXUWxGVlZYTlJNRVpDVVhwMFdsRlZUWGhSYVhoVVVWVkdWRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRUbEZWUms1TVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFZGRlZSbFJNUlU1Q1VWVk5OMWRWUmtSa1JWRnpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVG10UE1VWkNVVEJSYzFRd1JrSlVlWGhPVVZWR1RreEZUa0pSVlUwM1UxVkdSR0pGU1hOUk1FWkNVWHAwU2xGVlZrNU1SRkpEVVZWR1ZreEZaRUpSVjNCRFR6RkdRbEZWUlhOaFZVcENXbFZOTjFWVlJtdFNlWGhLVVZWR1NreEZUa0pSVlUxellsVktRbEZYTVVOTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSbGEwMXpWREJHUWxSNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMHBFVEVWc1FsRlZhM05STUVaQ1VYbDRkRkZyUmtKaVZVbHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMTRVWGw0VUZGVlJsQk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWTJ0TmMxTlZSa0pUVTNoRVVWVkdSRXhITVVOUlZVWjBVV2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVWHBHUkV4RmJFSlJWV3R6VVRCR1FsRjVlSFJSYTBaQ1lsVkpjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9ObEY1ZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSWmFYaEtVVlZHU2t4RlRrSlJWVTF6VmpCR1FsWjVlRVJSVlVaRVRFWldRbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTk4xZFZSa1JpUlVselUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFRGRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoTVVWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelVqQkdRbEo1ZUV4UlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVjBRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTRkZWUmtoTVJWWkNVVEp3UjB4RlRrSlJWVTF6VWpCR1FsSjVlRXhSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVGpaUmFYaEtVVlZHU2t4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRtdE1SWFJDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTTBwRFRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRCbmMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUkdGRlNYTlJNRVpDVVhwMFNsRlZWbXBNUm1SQ1VWVmpjMUl3UmtKaVJVbHpWbFZHUW1KVlNYTlJNRVpDV1ZONFJsRlZSa1pNUlU1Q1VWZEZjMUpWUmtKU1UzaEVVVlZHYUU4eFJrSlJla1pGVEVVNVFsRlZPSE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUmt4R1ZrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkWFZVWkVaR3ROYzFRd1JrSlJVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUldSQ1VWVmpOMVZWUmtKT01FMXpVVEJHUWs1clRYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VUTmFSVXhGVGtKUlZVMDNVMVZHUmxSVGVIQlJNRVpDV2xONFNGRlZSakJSYVhoV1VWVkdNVkZwZUVSUlZVWllURVZXUWxGVlZYTlJNRVpDVm5sNFJsRlZSa1pNUmtaQ1VWZGtRMDh4UmtKUmVtUkZURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSazh4YkVKUmVtUkRURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOVlZVWkNWVk40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGUlJWVTV4VVhwMFNsRlZUazFNUlU1Q1VWVk5OMU5WUmtaVVUzZHlVV3RHUWxsVGVFaFJWVVozVVdwMFVsRlZUa3BNUld4Q1VWVnJjMVJWUmtKVVUzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1dFRFVjBRbEZWYzNOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSa3hGT1VKUlZUaHpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelZEQkdRbFI1ZUVaUlZVWkdURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pQTVd4Q1VUTkNSVXhGZEVKUlZYTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1R6SmtRMUZWVGpSUmVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVEZaYzFNd1JrSlRlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlRkaU1FcENVWHBrUTB4RmJFSlJWV3R6VWxWR1FsSlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGRsRnJSa1JqYTAxelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMkZWU2tKUk1taERUekprUTFGVlRrVk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPY1ZGcGVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTW1SRFVWVk9lVkZwZUVwUlZVWktURVZPUWxGVlRYTlZWVVpDVlZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUWxKVGVGUlJWVVpVVHpKa1ExRlZUWHBSYVhoS1VWVkdTa3hGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPYlV4RmJFSlJWV3R6VWxWR1FsSlRlRWhSVlVaSVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xb3dTa0pSTWxselZGVkdRbFJUZUVwUlZVWktURVZXUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkU4eVJrSlJla1pEVHpGT1FsRXdiemRWVlVaRVVrTjRVRkZWUmxCTVJURkNVVlV3YzFFd1JrSlJlblJLVVZWT2MxRnBlRVJSVlVaRVR6QnNRbU5HYUdwTVJ6bERVVlZHV2t4RlpFSlJWbU56VXpCR1FsTjVlRVJSVlVaRVR6QnNRbU5XYUc5U1EzaHFVVlZHUkU4d1RrSlJWVVZ6VVZWRmRsZFZVWE5UVlVWeVYxVk5OMUZWUlhaWFZtdHpUVVZLUWxGVk9EZFJWVVp5VjI1Q1EwOHdiRUpVVld0ell6QktRbEZYTVVOTVJXeENVVmRrUTA4eFJrSlJWMmhEVEVoR1ExRlZSa0pNUlZaQ1VWVkZjMVZWUmtKYU1FazNWVlZHUW1GRlNYTlZNRVpDVTFONFNGRlZSa3RNUld4Q1VWVnJjMUV3UmtKWFZIUlNVVlYzZWxGcGVFNVJWVVpFVEVWa1FsRldZM05VVlVaQ1ZGTjRSRkZWUmtSUE1VWkNVVEkxUTB4Rk1VSlJWVTF6VWpCR1FsWjVlRkJSVlVaUVRFVk9RbEZWVFRkVlZVWkVZMFZKYzFSVlJrSlJlWGhJVVZWR1dFeEdWa0pSVmxWelVUQkdRbEY2ZEZKUlZVNHlVV2w0VmxGVlJreE1SV1JDVVZaamMxTXdSa0pUZVhoRVVWVkdSRTh3YkVKU1ZrMXpVVEJHUWxGNmRFcFJWV1EwVVhsM05GRnJSa0pVZVhoSVVWVkdVVTh4UmtKUk1HdHpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRuVlNRM2hRVVZWR1VFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlRWVVpDVTFONFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVR6QnNRbEY2UmtSTVJVNUNVVlZOTjFOVlJraFNRM2g0VVRCR1FsbDVlRWhSVlVaclRFWldRbEZYVlhOU01FWkNWbmw0UmxGVlJrWk1SV1JDVVZaak4xVlZSa1JpYTAxelZEQkdRbFI1ZUVoUlZVWklURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlRsQ1VWVTRjMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTF6VWpCR1FsSjVlRWhSVlVaSVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVhwc1JFeEZUa0pSVlUwM1UxVkdSRlJEZUhSUmEwWkNVWHAwUWxGVlJrVk1SVTVDVVZWTmMxRlZSbk5SYTFGelUxVkdjbEZyVFRkUlZVWnpVV3hyYzJJd1RrSlJWbXRwWmxFOVBTSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVkbUZ5SUY5ZlpYaDBaVzVrY3lBOUlDaDBhR2x6SUNZbUlIUm9hWE11WDE5bGVIUmxibVJ6S1NCOGZDQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCbGVIUmxibVJUZEdGMGFXTnpJRDBnWm5WdVkzUnBiMjRnS0dRc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnWlhoMFpXNWtVM1JoZEdsamN5QTlJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hzZ1gxOXdjbTkwYjE5Zk9pQmJYU0I5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtnSmlZZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1pDNWZYM0J5YjNSdlgxOGdQU0JpT3lCOUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1ptOXlJQ2gyWVhJZ2NDQnBiaUJpS1NCcFppQW9ZaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHdLU2tnWkZ0d1hTQTlJR0piY0YwN0lIMDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxlSFJsYm1SVGRHRjBhV056S0dRc0lHSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3WEc0Z0lDQWdJQ0FnSUdWNGRHVnVaRk4wWVhScFkzTW9aQ3dnWWlrN1hHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlGOWZLQ2tnZXlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwZ1pEc2dmVnh1SUNBZ0lDQWdJQ0JrTG5CeWIzUnZkSGx3WlNBOUlHSWdQVDA5SUc1MWJHd2dQeUJQWW1wbFkzUXVZM0psWVhSbEtHSXBJRG9nS0Y5ZkxuQnliM1J2ZEhsd1pTQTlJR0l1Y0hKdmRHOTBlWEJsTENCdVpYY2dYMThvS1NrN1hHNGdJQ0FnZlR0Y2JuMHBLQ2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNTJZWElnY21WamRHRnVaMnhsWHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTl5WldOMFlXNW5iR1ZjSWlrN1hHNTJZWElnVUc5cGJuUWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZCdmFXNTBLQ2tnZTF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1VHOXBiblE3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVRYjJsdWRDQTlJRkJ2YVc1ME8xeHVkbUZ5SUV4cGJtVlRaV2R0Wlc1MElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJNYVc1bFUyVm5iV1Z1ZENoNE1Td2dlVEVzSUhneUxDQjVNaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmd4SUQwZ2VERTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVURWdQU0I1TVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0TWlBOUlIZ3lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxua3lJRDBnZVRJN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQk1hVzVsVTJWbmJXVnVkRHRjYm4wb0tTazdYRzVsZUhCdmNuUnpMa3hwYm1WVFpXZHRaVzUwSUQwZ1RHbHVaVk5sWjIxbGJuUTdYRzUyWVhJZ1VHOXNlVkJ2YVc1MElEMGdLR1oxYm1OMGFXOXVJQ2hmYzNWd1pYSXBJSHRjYmlBZ0lDQmZYMlY0ZEdWdVpITW9VRzlzZVZCdmFXNTBMQ0JmYzNWd1pYSXBPMXh1SUNBZ0lHWjFibU4wYVc5dUlGQnZiSGxRYjJsdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjl6ZFhCbGNpQWhQVDBnYm5Wc2JDQW1KaUJmYzNWd1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1NCOGZDQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1VHOXNlVkJ2YVc1ME8xeHVmU2hRYjJsdWRDa3BPMXh1Wlhod2IzSjBjeTVRYjJ4NVVHOXBiblFnUFNCUWIyeDVVRzlwYm5RN1hHNW1kVzVqZEdsdmJpQnBjMHhsWm5Rb1VEQXNJRkF4TENCUU1pa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1VERXVlQ0F0SUZBd0xuZ3BJQ29nS0ZBeUxua2dMU0JRTUM1NUtTQXRJQ2hRTWk1NElDMGdVREF1ZUNrZ0tpQW9VREV1ZVNBdElGQXdMbmtwTzF4dWZWeHVaWGh3YjNKMGN5NXBjMHhsWm5RZ1BTQnBjMHhsWm5RN1hHNW1kVzVqZEdsdmJpQmhZbTkyWlNod0xDQjJhU3dnZG1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYVhOTVpXWjBLSEFzSUhacExDQjJhaWtnUGlBd08xeHVmVnh1Wm5WdVkzUnBiMjRnWW1Wc2IzY29jQ3dnZG1rc0lIWnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbHpUR1ZtZENod0xDQjJhU3dnZG1vcElEd2dNRHRjYm4xY2JtWjFibU4wYVc5dUlFTnZiblpsZUVoMWJHd29VeWtnZTF4dUlDQWdJSFpoY2lCUUlEMGdVeTV6YkdsalpTZ3dLUzV6YjNKMEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCaExuZ2dJVDA5SUdJdWVDQS9JR0l1ZUNBdElHRXVlQ0E2SUdJdWVTQXRJR0V1ZVRzZ2ZTazdYRzRnSUNBZ2RtRnlJRzRnUFNCVExteGxibWQwYUN3Z2FUdGNiaUFnSUNCMllYSWdiV2x1YldsdUlEMGdNRHRjYmlBZ0lDQjJZWElnZUcxcGJpQTlJRkJiTUYwdWVEdGNiaUFnSUNCbWIzSWdLR2tnUFNBeE95QnBJRHdnYmpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaFFXMmxkTG5nZ0lUMDlJSGh0YVc0cFhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHMXBibTFoZUNBOUlHa2dMU0F4TzF4dUlDQWdJSFpoY2lCSUlEMGdXMTA3WEc0Z0lDQWdTQzV3ZFhOb0tGQmJiV2x1YldsdVhTazdYRzRnSUNBZ2FXWWdLRzFwYm0xaGVDQTlQVDBnYmlBdElERXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGQmJiV2x1YldGNFhTNTVJQ0U5UFNCUVcyMXBibTFwYmwwdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUVndWNIVnphQ2hRVzIxcGJtMWhlRjBwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFoZUcxcGJpd2diV0Y0YldGNElEMGdiaUF0SURFN1hHNGdJQ0FnSUNBZ0lIWmhjaUI0YldGNElEMGdVRnR1SUMwZ01WMHVlRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnYmlBdElESTdJR2tnUGowZ01Ec2dhUzB0S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZCYmFWMHVlQ0FoUFQwZ2VHMWhlQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdiV0Y0YldsdUlEMGdhU0FySURFN1hHNGdJQ0FnSUNBZ0lHa2dQU0J0YVc1dFlYZzdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDZ3JLMmtnUEQwZ2JXRjRiV2x1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTk1aV1owS0ZCYmJXbHViV2x1WFN3Z1VGdHRZWGh0YVc1ZExDQlFXMmxkS1NBK1BTQXdJQ1ltSUdrZ1BDQnRZWGh0YVc0cFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9TQzVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x6VEdWbWRDaElXMGd1YkdWdVozUm9JQzBnTWwwc0lFaGJTQzVzWlc1bmRHZ2dMU0F4WFN3Z1VGdHBYU2tnUGlBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFZ3ViR1Z1WjNSb0lDMDlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0FoUFNCdGFXNXRhVzRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU0M1d2RYTm9LRkJiYVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNodFlYaHRZWGdnSVQwZ2JXRjRiV2x1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdTQzV3ZFhOb0tGQmJiV0Y0YldGNFhTazdYRzRnSUNBZ0lDQWdJSFpoY2lCaWIzUWdQU0JJTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnYVNBOUlHMWhlRzFwYmp0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0MwdGFTQStQU0J0YVc1dFlYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzB4bFpuUW9VRnR0WVhodFlYaGRMQ0JRVzIxcGJtMWhlRjBzSUZCYmFWMHBJRDQ5SURBZ0ppWWdhU0ErSUcxcGJtMWhlQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNoSUxteGxibWQwYUNBK0lHSnZkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMHhsWm5Rb1NGdElMbXhsYm1kMGFDQXRJREpkTENCSVcwZ3ViR1Z1WjNSb0lDMGdNVjBzSUZCYmFWMHBJRDRnTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCSUxteGxibWQwYUNBdFBTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dJVDBnYldsdWJXbHVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWd1Y0hWemFDaFFXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdTRHRjYm4xY2JtVjRjRzl5ZEhNdVEyOXVkbVY0U0hWc2JDQTlJRU52Ym5abGVFaDFiR3c3WEc1bWRXNWpkR2x2YmlCamJHOWphM2RwYzJWU1lXUnBZV3hUZDJWbGNDaHdMQ0JRTENCbUtTQjdYRzRnSUNBZ1VDNXpiR2xqWlNnd0tTNXpiM0owS0daMWJtTjBhVzl1SUNoaExDQmlLU0I3SUhKbGRIVnliaUJOWVhSb0xtRjBZVzR5S0dFdWVTQXRJSEF1ZVN3Z1lTNTRJQzBnY0M1NEtTQXRJRTFoZEdndVlYUmhiaklvWWk1NUlDMGdjQzU1TENCaUxuZ2dMU0J3TG5ncE95QjlLUzVtYjNKRllXTm9LR1lwTzF4dWZWeHVaWGh3YjNKMGN5NWpiRzlqYTNkcGMyVlNZV1JwWVd4VGQyVmxjQ0E5SUdOc2IyTnJkMmx6WlZKaFpHbGhiRk4zWldWd08xeHVablZ1WTNScGIyNGdibVY0ZEZCdmJIbFFiMmx1ZENod0xDQndjeWtnZTF4dUlDQWdJR2xtSUNod0xuQnZiSGxKYm1SbGVDQTlQVDBnY0hNdWJHVnVaM1JvSUMwZ01TbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnpXekJkTzF4dUlDQWdJSEpsZEhWeWJpQndjMXR3TG5CdmJIbEpibVJsZUNBcklERmRPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2NISmxkbEJ2YkhsUWIybHVkQ2h3TENCd2N5a2dlMXh1SUNBZ0lHbG1JQ2h3TG5CdmJIbEpibVJsZUNBOVBUMGdNQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ6VzNCekxteGxibWQwYUNBdElERmRPMXh1SUNBZ0lISmxkSFZ5YmlCd2MxdHdMbkJ2YkhsSmJtUmxlQ0F0SURGZE8xeHVmVnh1Wm5WdVkzUnBiMjRnZEdGdVoyVnVkRjlRYjJsdWRGQnZiSGxES0ZBc0lGWXBJSHRjYmlBZ0lDQjJZWElnVm1Oc2IzTmxaQ0E5SUZZdWMyeHBZMlVvTUNrN1hHNGdJQ0FnVm1Oc2IzTmxaQzV3ZFhOb0tGWmJNRjBwTzF4dUlDQWdJSEpsZEhWeWJpQjdJSEowWVc0NklGSjBZVzVuWlc1MFgxQnZhVzUwVUc5c2VVTW9VQ3dnVm1Oc2IzTmxaQ2tzSUd4MFlXNDZJRXgwWVc1blpXNTBYMUJ2YVc1MFVHOXNlVU1vVUN3Z1ZtTnNiM05sWkNrZ2ZUdGNibjFjYm1aMWJtTjBhVzl1SUZKMFlXNW5aVzUwWDFCdmFXNTBVRzlzZVVNb1VDd2dWaWtnZTF4dUlDQWdJSFpoY2lCdUlEMGdWaTVzWlc1bmRHZ2dMU0F4TzF4dUlDQWdJSFpoY2lCaExDQmlMQ0JqTzF4dUlDQWdJSFpoY2lCMWNFRXNJR1J1UXp0Y2JpQWdJQ0JwWmlBb1ltVnNiM2NvVUN3Z1Zsc3hYU3dnVmxzd1hTa2dKaVlnSVdGaWIzWmxLRkFzSUZaYmJpQXRJREZkTENCV1d6QmRLU2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJREE3WEc0Z0lDQWdabTl5SUNoaElEMGdNQ3dnWWlBOUlHNDdPeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZaUF0SUdFZ1BUMDlJREVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdKdmRtVW9VQ3dnVmx0aFhTd2dWbHRpWFNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdJN1hHNGdJQ0FnSUNBZ0lHTWdQU0JOWVhSb0xtWnNiMjl5S0NoaElDc2dZaWtnTHlBeUtUdGNiaUFnSUNBZ0lDQWdaRzVESUQwZ1ltVnNiM2NvVUN3Z1ZsdGpJQ3NnTVYwc0lGWmJZMTBwTzF4dUlDQWdJQ0FnSUNCcFppQW9aRzVESUNZbUlDRmhZbTkyWlNoUUxDQldXMk1nTFNBeFhTd2dWbHRqWFNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZenRjYmlBZ0lDQWdJQ0FnZFhCQklEMGdZV0p2ZG1Vb1VDd2dWbHRoSUNzZ01WMHNJRlpiWVYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZFhCQktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aRzVES1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdJZ1BTQmpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRmliM1psS0ZBc0lGWmJZVjBzSUZaYlkxMHBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUlEMGdZenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGa2JrTXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZU0E5SUdNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWW1Wc2IzY29VQ3dnVmx0aFhTd2dWbHRqWFNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0lnUFNCak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lTQTlJR003WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc1bWRXNWpkR2x2YmlCTWRHRnVaMlZ1ZEY5UWIybHVkRkJ2YkhsREtGQXNJRllwSUh0Y2JpQWdJQ0IyWVhJZ2JpQTlJRll1YkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0IyWVhJZ1lTd2dZaXdnWXp0Y2JpQWdJQ0IyWVhJZ1pHNUJMQ0JrYmtNN1hHNGdJQ0FnYVdZZ0tHRmliM1psS0ZBc0lGWmJiaUF0SURGZExDQldXekJkS1NBbUppQWhZbVZzYjNjb1VDd2dWbHN4WFN3Z1Zsc3dYU2twWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQWdJR1p2Y2lBb1lTQTlJREFzSUdJZ1BTQnVPenNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0lnTFNCaElEMDlQU0F4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dKbGJHOTNLRkFzSUZaYllWMHNJRlpiWWwwcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaU8xeHVJQ0FnSUNBZ0lDQmpJRDBnVFdGMGFDNW1iRzl2Y2lnb1lTQXJJR0lwSUM4Z01pazdYRzRnSUNBZ0lDQWdJR1J1UXlBOUlHSmxiRzkzS0ZBc0lGWmJZeUFySURGZExDQldXMk5kS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZpYjNabEtGQXNJRlpiWXlBdElERmRMQ0JXVzJOZEtTQW1KaUFoWkc1REtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR003WEc0Z0lDQWdJQ0FnSUdSdVFTQTlJR0psYkc5M0tGQXNJRlpiWVNBcklERmRMQ0JXVzJGZEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dSdVFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZrYmtNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lpQTlJR003WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZbVZzYjNjb1VDd2dWbHRoWFN3Z1ZsdGpYU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSWdQU0JqTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNBOUlHTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHNURLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0VnUFNCak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGaWIzWmxLRkFzSUZaYllWMHNJRlpiWTEwcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpSUQwZ1l6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRWdQU0JqTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2RHRnVaMlZ1ZEY5UWIyeDVVRzlzZVVNb1Zpd2dWeXdnZERFc0lIUXlMQ0JqYlhBeExDQmpiWEF5S1NCN1hHNGdJQ0FnZG1GeUlHbDRNU3dnYVhneU8xeHVJQ0FnSUdsNE1TQTlJSFF4S0ZkYk1GMHNJRllwTzF4dUlDQWdJR2w0TWlBOUlIUXlLRlpiYVhneFhTd2dWeWs3WEc0Z0lDQWdkbUZ5SUdSdmJtVWdQU0JtWVd4elpUdGNiaUFnSUNCM2FHbHNaU0FvSVdSdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnWkc5dVpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhneElEMDlQU0JXTG14bGJtZDBhQ0F0SURFcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYZ3hJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamJYQXhLRmRiYVhneVhTd2dWbHRwZURGZExDQldXMmw0TVNBcklERmRLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNzcmFYZ3hPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2gwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWGd5SUQwOVBTQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2w0TWlBOUlGY3ViR1Z1WjNSb0lDMGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYlhBeUtGWmJhWGd4WFN3Z1YxdHBlREpkTENCWFcybDRNaUF0SURGZEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzB0YVhneU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5dVpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUI3SUhReE9pQnBlREVzSUhReU9pQnBlRElnZlR0Y2JuMWNibVY0Y0c5eWRITXVkR0Z1WjJWdWRGOVFiMng1VUc5c2VVTWdQU0IwWVc1blpXNTBYMUJ2YkhsUWIyeDVRenRjYm1aMWJtTjBhVzl1SUV4U2RHRnVaMlZ1ZEY5UWIyeDVVRzlzZVVNb1Zpd2dWeWtnZTF4dUlDQWdJSFpoY2lCeWJDQTlJRkpNZEdGdVoyVnVkRjlRYjJ4NVVHOXNlVU1vVnl3Z1ZpazdYRzRnSUNBZ2NtVjBkWEp1SUhzZ2RERTZJSEpzTG5ReUxDQjBNam9nY213dWRERWdmVHRjYm4xY2JtVjRjRzl5ZEhNdVRGSjBZVzVuWlc1MFgxQnZiSGxRYjJ4NVF5QTlJRXhTZEdGdVoyVnVkRjlRYjJ4NVVHOXNlVU03WEc1bWRXNWpkR2x2YmlCU1RIUmhibWRsYm5SZlVHOXNlVkJ2YkhsREtGWXNJRmNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR0Z1WjJWdWRGOVFiMng1VUc5c2VVTW9WaXdnVnl3Z1VuUmhibWRsYm5SZlVHOXBiblJRYjJ4NVF5d2dUSFJoYm1kbGJuUmZVRzlwYm5SUWIyeDVReXdnWVdKdmRtVXNJR0psYkc5M0tUdGNibjFjYm1WNGNHOXlkSE11VWt4MFlXNW5aVzUwWDFCdmJIbFFiMng1UXlBOUlGSk1kR0Z1WjJWdWRGOVFiMng1VUc5c2VVTTdYRzVtZFc1amRHbHZiaUJNVEhSaGJtZGxiblJmVUc5c2VWQnZiSGxES0ZZc0lGY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHRnVaMlZ1ZEY5UWIyeDVVRzlzZVVNb1Zpd2dWeXdnVEhSaGJtZGxiblJmVUc5cGJuUlFiMng1UXl3Z1RIUmhibWRsYm5SZlVHOXBiblJRYjJ4NVF5d2dZbVZzYjNjc0lHSmxiRzkzS1R0Y2JuMWNibVY0Y0c5eWRITXVURXgwWVc1blpXNTBYMUJ2YkhsUWIyeDVReUE5SUV4TWRHRnVaMlZ1ZEY5UWIyeDVVRzlzZVVNN1hHNW1kVzVqZEdsdmJpQlNVblJoYm1kbGJuUmZVRzlzZVZCdmJIbERLRllzSUZjcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdGdVoyVnVkRjlRYjJ4NVVHOXNlVU1vVml3Z1Z5d2dVblJoYm1kbGJuUmZVRzlwYm5SUWIyeDVReXdnVW5SaGJtZGxiblJmVUc5cGJuUlFiMng1UXl3Z1lXSnZkbVVzSUdGaWIzWmxLVHRjYm4xY2JtVjRjRzl5ZEhNdVVsSjBZVzVuWlc1MFgxQnZiSGxRYjJ4NVF5QTlJRkpTZEdGdVoyVnVkRjlRYjJ4NVVHOXNlVU03WEc1MllYSWdRbWxVWVc1blpXNTBJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCQ2FWUmhibWRsYm5Rb2RERXNJSFF5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZERFZ1BTQjBNVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBNaUE5SUhReU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdRbWxVWVc1blpXNTBPMXh1ZlNncEtUdGNibVY0Y0c5eWRITXVRbWxVWVc1blpXNTBJRDBnUW1sVVlXNW5aVzUwTzF4dWRtRnlJRUpwVkdGdVoyVnVkSE1nUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFSnBWR0Z1WjJWdWRITW9LU0I3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCQ2FWUmhibWRsYm5Sek8xeHVmU2dwS1R0Y2JtVjRjRzl5ZEhNdVFtbFVZVzVuWlc1MGN5QTlJRUpwVkdGdVoyVnVkSE03WEc1MllYSWdWRlpIVUc5cGJuUWdQU0FvWm5WdVkzUnBiMjRnS0Y5emRYQmxjaWtnZTF4dUlDQWdJRjlmWlhoMFpXNWtjeWhVVmtkUWIybHVkQ3dnWDNOMWNHVnlLVHRjYmlBZ0lDQm1kVzVqZEdsdmJpQlVWa2RRYjJsdWRDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjl6ZFhCbGNpQWhQVDBnYm5Wc2JDQW1KaUJmYzNWd1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1NCOGZDQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ZGWkhVRzlwYm5RN1hHNTlLRkJ2YVc1MEtTazdYRzVsZUhCdmNuUnpMbFJXUjFCdmFXNTBJRDBnVkZaSFVHOXBiblE3WEc1MllYSWdWbWx6YVdKcGJHbDBlVlpsY25SbGVDQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVm1semFXSnBiR2wwZVZabGNuUmxlQ2hwWkN3Z2NHOXNlV2xrTENCd2IyeDVkbVZ5ZEdsa0xDQndLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCcFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2IyeDVhV1FnUFNCd2IyeDVhV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjRzlzZVhabGNuUnBaQ0E5SUhCdmJIbDJaWEowYVdRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0NBOUlIQTdYRzRnSUNBZ0lDQWdJSEF1ZG5ZZ1BTQjBhR2x6TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ZtbHphV0pwYkdsMGVWWmxjblJsZUR0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGxacGMybGlhV3hwZEhsV1pYSjBaWGdnUFNCV2FYTnBZbWxzYVhSNVZtVnlkR1Y0TzF4dWRtRnlJRlpwYzJsaWFXeHBkSGxGWkdkbElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJXYVhOcFltbHNhWFI1UldSblpTaHpiM1Z5WTJVc0lIUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OdmRYSmpaU0E5SUhOdmRYSmpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNGdJQ0FnZlZ4dUlDQWdJRlpwYzJsaWFXeHBkSGxGWkdkbExuQnliM1J2ZEhsd1pTNXNaVzVuZEdnZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtlQ0E5SUhSb2FYTXVjMjkxY21ObExuQXVlQ0F0SUhSb2FYTXVkR0Z5WjJWMExuQXVlRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUjVJRDBnZEdocGN5NXpiM1Z5WTJVdWNDNTVJQzBnZEdocGN5NTBZWEpuWlhRdWNDNTVPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1emNYSjBLR1I0SUNvZ1pIZ2dLeUJrZVNBcUlHUjVLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCV2FYTnBZbWxzYVhSNVJXUm5aVHRjYm4wb0tTazdYRzVsZUhCdmNuUnpMbFpwYzJsaWFXeHBkSGxGWkdkbElEMGdWbWx6YVdKcGJHbDBlVVZrWjJVN1hHNTJZWElnVkdGdVoyVnVkRlpwYzJsaWFXeHBkSGxIY21Gd2FDQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVkdGdVoyVnVkRlpwYzJsaWFXeHBkSGxIY21Gd2FDaFFMQ0JuTUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxBZ1BTQlFPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsWWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVGSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR2xtSUNnaFp6QXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1SUQwZ1VDNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndJRDBnVUZ0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJSEF1YkdWdVozUm9PeUFySzJvcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnFJRDBnY0Z0cVhTd2dkbllnUFNCdVpYY2dWbWx6YVdKcGJHbDBlVlpsY25SbGVDaDBhR2x6TGxZdWJHVnVaM1JvTENCcExDQnFMQ0J3YWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVZpNXdkWE5vS0haMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHb2dQaUF3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUZMbkIxYzJnb2JtVjNJRlpwYzJsaWFXeHBkSGxGWkdkbEtIQmJhaUF0SURGZExuWjJMQ0IyZGlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0M1c1pXNW5kR2dnUGlBeEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrVXVjSFZ6YUNodVpYY2dWbWx6YVdKcGJHbDBlVVZrWjJVb2NGc3dYUzUyZGl3Z2NGdHdMbXhsYm1kMGFDQXRJREZkTG5aMktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc0Z0xTQXhPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnVUdrZ1BTQlFXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQnBJQ3NnTVRzZ2FpQThJRzQ3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdVR29nUFNCUVcycGRMQ0IwSUQwZ2RHRnVaMlZ1ZEhNb1VHa3NJRkJxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdjU0JwYmlCMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWXlBOUlIUmJjVjBzSUhOdmRYSmpaU0E5SUZCcFcyTXVkREZkTENCMFlYSm5aWFFnUFNCUWFsdGpMblF5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrUldSblpVbG1WbWx6YVdKc1pTaHpiM1Z5WTJVc0lIUmhjbWRsZEN3Z2FTd2dhaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsWWdQU0JuTUM1V0xuTnNhV05sS0RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUZJRDBnWnpBdVJTNXpiR2xqWlNnd0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCVVlXNW5aVzUwVm1semFXSnBiR2wwZVVkeVlYQm9MbkJ5YjNSdmRIbHdaUzVoWkdSRlpHZGxTV1pXYVhOcFlteGxJRDBnWm5WdVkzUnBiMjRnS0hVc0lIWXNJR2t4TENCcE1pa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YVc1MFpYSnpaV04wYzFCdmJIbHpLRzVsZHlCTWFXNWxVMlZuYldWdWRDaDFMbmdzSUhVdWVTd2dkaTU0TENCMkxua3BMQ0JwTVN3Z2FUSXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtVdWNIVnphQ2h1WlhjZ1ZtbHphV0pwYkdsMGVVVmtaMlVvZFM1MmRpd2dkaTUyZGlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCVVlXNW5aVzUwVm1semFXSnBiR2wwZVVkeVlYQm9MbkJ5YjNSdmRIbHdaUzVoWkdSUWIybHVkQ0E5SUdaMWJtTjBhVzl1SUNod0xDQnBNU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdiaUE5SUhSb2FYTXVVQzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZpNXdkWE5vS0c1bGR5QldhWE5wWW1sc2FYUjVWbVZ5ZEdWNEtIUm9hWE11Vmk1c1pXNW5kR2dzSUc0c0lEQXNJSEFwS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnVPeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNCcE1TbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQndiMng1SUQwZ2RHaHBjeTVRVzJsZExDQjBJRDBnZEdGdVoyVnVkRjlRYjJsdWRGQnZiSGxES0hBc0lIQnZiSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUkZaR2RsU1daV2FYTnBZbXhsS0hBc0lIQnZiSGxiZEM1c2RHRnVYU3dnYVRFc0lHa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSRlpHZGxTV1pXYVhOcFlteGxLSEFzSUhCdmJIbGJkQzV5ZEdGdVhTd2dhVEVzSUdrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndMbloyTzF4dUlDQWdJSDA3WEc0Z0lDQWdWR0Z1WjJWdWRGWnBjMmxpYVd4cGRIbEhjbUZ3YUM1d2NtOTBiM1I1Y0dVdWFXNTBaWEp6WldOMGMxQnZiSGx6SUQwZ1puVnVZM1JwYjI0Z0tHd3NJR2t4TENCcE1pa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diaUE5SUhSb2FYTXVVQzVzWlc1bmRHZzdJR2tnUENCdU95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElDRTlJR2t4SUNZbUlHa2dJVDBnYVRJZ0ppWWdhVzUwWlhKelpXTjBjeWhzTENCMGFHbHpMbEJiYVYwcExteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVkdGdVoyVnVkRlpwYzJsaWFXeHBkSGxIY21Gd2FEdGNibjBvS1NrN1hHNWxlSEJ2Y25SekxsUmhibWRsYm5SV2FYTnBZbWxzYVhSNVIzSmhjR2dnUFNCVVlXNW5aVzUwVm1semFXSnBiR2wwZVVkeVlYQm9PMXh1Wm5WdVkzUnBiMjRnYVc1MFpYSnpaV04wY3loc0xDQlFLU0I3WEc0Z0lDQWdkbUZ5SUdsdWRITWdQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Td2diaUE5SUZBdWJHVnVaM1JvT3lCcElEd2dianNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJuUWdQU0J5WldOMFlXNW5iR1ZmTVM1U1pXTjBZVzVuYkdVdWJHbHVaVWx1ZEdWeWMyVmpkR2x2Ymloc0xuZ3hMQ0JzTG5reExDQnNMbmd5TENCc0xua3lMQ0JRVzJrZ0xTQXhYUzU0TENCUVcya2dMU0F4WFM1NUxDQlFXMmxkTG5nc0lGQmJhVjB1ZVNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5SekxuQjFjMmdvYVc1MEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR2x1ZEhNN1hHNTlYRzVtZFc1amRHbHZiaUIwWVc1blpXNTBjeWhXTENCWEtTQjdYRzRnSUNBZ2RtRnlJRzBnUFNCV0xteGxibWQwYUNBdElERXNJRzRnUFNCWExteGxibWQwYUNBdElERTdYRzRnSUNBZ2RtRnlJR0owSUQwZ2JtVjNJRUpwVkdGdVoyVnVkSE1vS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4UFNCdE95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BEMGdianNnS3l0cUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkakVnUFNCV1cya2dQVDBnTUNBL0lHMGdPaUJwSUMwZ01WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkaklnUFNCV1cybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFl6SUQwZ1ZsdHBJRDA5SUcwZ1B5QXdJRG9nYVNBcklERmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGN4SUQwZ1YxdHFJRDA5SURBZ1B5QnVJRG9nYWlBdElERmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGN5SUQwZ1YxdHFYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIzTXlBOUlGZGJhaUE5UFNCdUlEOGdNQ0E2SUdvZ0t5QXhYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyTVhZeWR6SWdQU0JwYzB4bFpuUW9kakVzSUhZeUxDQjNNaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZGpKM01YY3lJRDBnYVhOTVpXWjBLSFl5TENCM01Td2dkeklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhZeWR6SjNNeUE5SUdselRHVm1kQ2gyTWl3Z2R6SXNJSGN6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCM01YY3lkaklnUFNCcGMweGxablFvZHpFc0lIY3lMQ0IyTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2R6SjJNWFl5SUQwZ2FYTk1aV1owS0hjeUxDQjJNU3dnZGpJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIY3lkakoyTXlBOUlHbHpUR1ZtZENoM01pd2dkaklzSUhZektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJNWFl5ZHpJZ1BqMGdNQ0FtSmlCMk1uY3hkeklnUGowZ01DQW1KaUIyTW5jeWR6TWdQQ0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSmlZZ2R6RjNNbll5SUQ0OUlEQWdKaVlnZHpKMk1YWXlJRDQ5SURBZ0ppWWdkekoyTW5ZeklEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMExteHNJRDBnYm1WM0lFSnBWR0Z1WjJWdWRDaHBMQ0JxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIWXhkakozTWlBOFBTQXdJQ1ltSUhZeWR6RjNNaUE4UFNBd0lDWW1JSFl5ZHpKM015QStJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FtSmlCM01YY3lkaklnUEQwZ01DQW1KaUIzTW5ZeGRqSWdQRDBnTUNBbUppQjNNbll5ZGpNZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5RdWNuSWdQU0J1WlhjZ1FtbFVZVzVuWlc1MEtHa3NJR29wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RqRjJNbmN5SUR3OUlEQWdKaVlnZGpKM01YY3lJRDRnTUNBbUppQjJNbmN5ZHpNZ1BEMGdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1ltSUhjeGR6SjJNaUErUFNBd0lDWW1JSGN5ZGpGMk1pQThJREFnSmlZZ2R6SjJNbll6SUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZEM1eWJDQTlJRzVsZHlCQ2FWUmhibWRsYm5Rb2FTd2dhaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoMk1YWXlkeklnUGowZ01DQW1KaUIyTW5jeGR6SWdQQ0F3SUNZbUlIWXlkekozTXlBK1BTQXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnZHpGM01uWXlJRHc5SURBZ0ppWWdkekoyTVhZeUlENGdNQ0FtSmlCM01uWXlkak1nUEQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0owTG14eUlEMGdibVYzSUVKcFZHRnVaMlZ1ZENocExDQnFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWW5RN1hHNTlYRzVsZUhCdmNuUnpMblJoYm1kbGJuUnpJRDBnZEdGdVoyVnVkSE03WEc1bWRXNWpkR2x2YmlCcGMxQnZhVzUwU1c1emFXUmxVRzlzZVNod0xDQndiMng1S1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlERXNJRzRnUFNCd2IyeDVMbXhsYm1kMGFEc2dhU0E4SUc0N0lDc3JhU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHSmxiRzkzS0hCdmJIbGJhU0F0SURGZExDQndiMng1VzJsZExDQndLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYm4xY2JtWjFibU4wYVc5dUlHbHpRVzU1VUVsdVVTaHdMQ0J4S1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0Z3TG1WMlpYSjVLR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlBaGFYTlFiMmx1ZEVsdWMybGtaVkJ2Ykhrb2Rpd2djU2s3SUgwcE8xeHVmVnh1Wm5WdVkzUnBiMjRnY0c5c2VYTlBkbVZ5YkdGd0tIQXNJSEVwSUh0Y2JpQWdJQ0JwWmlBb2FYTkJibmxRU1c1UktIQXNJSEVwS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCcFppQW9hWE5CYm5sUVNXNVJLSEVzSUhBcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTVN3Z2JpQTlJSEF1YkdWdVozUm9PeUJwSUR3Z2Jqc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIySUQwZ2NGdHBYU3dnZFNBOUlIQmJhU0F0SURGZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVc1MFpYSnpaV04wY3lodVpYY2dUR2x1WlZObFoyMWxiblFvZFM1NExDQjFMbmtzSUhZdWVDd2dkaTU1S1N3Z2NTa3ViR1Z1WjNSb0lENGdNQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1bGVIQnZjblJ6TG5CdmJIbHpUM1psY214aGNDQTlJSEJ2YkhselQzWmxjbXhoY0R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVZveVZuWmlVelZ4WTNsSmMwbHVUblprV0VwcVdsWktkbUl6VVdsUGFVbHBURU5LZW1JelZubFpNbFo2U1dwd1lrbHBOSFZNZVRSMVRERmtiRmxyVG5aaVIwVjJZek5LYWt3eVpHeGlNakIxWkVoTmFWaFRkMmxpYlVaMFdsaE5hVTlzZEdSTVEwcDBXVmhDZDJGWE5XNWplVWsyU1dwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUE1FWkNVVlZGYzJWVlRrSlJXRVpFVHpCR1FsRXljRVJQTUd4Q1VWVkZOMU5WUmtoUlUzaEVVVlZHUkU4d2JFSlJWVkZ6VjFWR1FsRjZkRUpSVlVaRlRFVk9RbEZWVFhOUlZVWkpVa040U2xGVlpFUlBNRVpDVTBacmMyTXdTa0pSVlhNM1VWVkdUR0pGU1RkVFZVWkVVMU40ZUZGclJrSmlWVWx6VWxWR1FsWlRlRVpSVlVaVVRFVldRbEZXVlhOU1ZVWkNWWGw0UmxGVlJsWk1SVlpDVVZaTmMxSlZSa0pXVkhSU1VWVkdkVkpUZUZCUlZVWkdURVZrUWxGVldYTlNWVVpDVWxONFJGRlZSbEpQTVVaQ1VWWk5jMVF3UmtKU1UzaElVVlZHUjB4RlZrSlJWVlZ6VVRCR1FsVlVkRkpSVlVaVVRFVTVRbEZWVlhOU01FWkNVbWw0UmxGVlJrWk1SVTVDVVZaRk4xVlZSa0pWZVhoUVVWVkdSa3hGWkVKUlZWbHpVbFZHUWxKVGVFUlJWVVpTVHpCc1FsRlZhM05STUVaQ1VYcDBTbEZWVFhaU2FYaHlVV3RHUWxGNmRFSlJWVVpGVEVWT1FsRlZUWE5SVlVaSFVrTjRTbEZWVmtSUE1FWkNVbXhyYzJFd1RrSlJWbU0zVVZWR1NtVkZTVGRUVlVaQ1N6QkpjMDVyU2tKUlZYTTNVMVZHUW1ORlRUZFBNR3hDVWxWRmMxRXdSa0pSZW5SS1VWVkdSVXhIWkVOUlZVWkVUekJHUWxGVlVYTlJNRVpDVVhsNFFsRlZXa1ZNUlU1Q1VWTjBRMHhGZEVKUlZYTnpVakJHUm1KclRUZFJWVVpIVjFOM05GRnJSa0pWZW5SQ1VWWldNRkZwZUZSUlZVWnVVV2w0VGxGVlJrNU1SVTVDVVZWTmMxSlZSa0pWZVhoR1VWVkdSa3hGVmtKUlZrMXpVbFZHUWxKVGVFWlJWVVpVVHpCc1FsRXllRVZNUlRsQ1VWVTRjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVTQyVWxONFJGRlZSa1JQTUVaQ1VtdFJjMlF3U2tKU1ZVMDNVVlZHUmxKRGVGUlJWVVpVVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmxKTVJWWkNVVlZWYzFKVlJrSlZlWGhHVVZWR1JreEZWa0pSVmswM1UxVkdSR1ZyVFhOVU1FWkNWSGw0VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUmhhMDF6VVRCR1FsRjZkRUpSVlZaRlRFWk9RbEZXVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZaRmMxSlZSa0pTVTNoR1VWVkdWRXhGVmtKUlZWVnpVbFZHUWxWNmRFcFJWVTQyVVhsNFVGRlZSbEJNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SQ1VWVk9jVkY1ZUVSUlZVWkVUekJHUWxVd1VYTlZNRVpDV2pCSmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZsVTNVMVZHUkdGclRYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpNVEVVNVFsRlZSWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1ltdE5jMUV3UmtKaVZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXpXa1pNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVROQ1EweEZiRUpSVld0elZGVkdRbFJUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUbTFNUld4Q1VWVnJjMU5WUmtKVFUzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1JpUlVselV6QkdRbE41ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlRkVlZVWkVZMFZKYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFRGRlZSa3hNUld4Q1VWVnJOMWRWUmtKU1UzaE9VVlZHVGs4d2RFSlJlbXhEVHpCc1FsRXdVWE5UVlVaQ1UxTjRUbEZWUms1TVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNTFVV2w0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pYVTNoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkdORlNYTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVlRuTlJhWGhLVVZWR1NreEZNVUpSVlRCelV6QkdRbE41ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pQTVVaQ1VUSjRRMHhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUWHBSYVhoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdkRUpSTTNCRFR6Rk9RbEZWTURkVlZVWkdVME40U2xGVlJrcE1SVEZDVVZVd2MxSlZSa0pTVTNoT1VWVkdUa3hGWkVKUlZXTnpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVFhwUmFYaEtVVlZHU2t4RmJFSlJWV3R6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR3VVdsNFRGRlZSa3hNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSazh4YkVKUk0xcERURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VXpCR1FsTjVlRXBSVlVaS1R6SmtRMUZWUmtaTVJURkNVVlV3TjFWVlJrUk1NRWx6VkZWR1FsUlRlRWhSVlVaSVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa2hhYVhoRVVWVkdSRXhGWkVKUlZXTnpWRlZHUWxSVGVFUlJWVVpFVHpGR1FsRXhaM05VTUVaQ1ZIbDRSbEZWUmtaTVJVNUNVVlZOYzFOVlJrSlRVM2hPVVZWR1RreEZWa0pSVlZVM1YxVkdSbUpGU1hOVFZVWkNVMU40VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4Rk1VSlJWVEEzV2pCS1FsRXpTa1ZNUms1Q1VWWk5OMWRWUmtaWmFYaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlRuVlJhblJ1VVd0R1JsTlRlRXBSVlVaS1RFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVR6STVRMUZWVG5OU1EzaE9VVlZHVGs5NmRIWlJhMFpHVkdsNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjZkR2hSVlU1NVVXcDBXbEZWVGtWTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZNVUpSVlRBM1dqQktRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVG5GUmVuUlNVVlZrUlV4RmJFSlJWV3R6VkZWR1FsUlRlRXBSVlVaS1RFVXhRbEZWTURkWFZVWkVZVVZKYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZPTUZGcGVFcFJWVVpLVEVWa1FsRlZZM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFOHhSa0pSTWpWRFRFVk9RbEZWVFhOU01FWkNVbmw0VGxGVlJrNU1SVTVDVVZWTk4xVlZSa1JYUTNoUVVWVkdVRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpLVEVVeFFsRlZNSE5TVlVaQ1VsUjBXbEZWVm5OUmFYaEtVVlZHU2t4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlVWVVpDVkZSMGJsRnJSa1JqYTFGelZUQkdRbFY2ZEZwUlZWWnBURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaElVVlZHU0V4RlZrSlJNMHBEVHpKa1ExRlZWa3BNUld4Q1VWVnJjMVJWUmtKVVUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5OMkl3U2tKUk1uaEZURVV4UWxGVk1EZFBNamxEVVZWV1QweEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JQTWtaQ1VUTktRMDh4YkVKUk1GRnpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05VVlVaQ1ZGUjBibEZyUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4VGtKUk1uQkVUekIwUWxFd2J6ZFRWVVpFVWtONFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZPYVV4RlRrSlJWVTAzVVZWRk5WSkZVWE5hTUU1Q1QwVlNSRTh3UmtKU01GRnpWVEJHUWxvd1NYTmlNRXBDVVZjNVEweEZUa0pSVlUxelVUQkdRbFZUZUVaUlZVWkdURVZPUWxGV1ZYTlNWVVpDVWxONFJGRlZSbmhSYW5SS1VWVk5NVkpUZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1JGZERlRlpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV3hDVVZWemMxUXdSa0pSVTNoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDWW10VmMxRXdSa0ppVlZWelVUQkdSRTVWVlhOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNVVlZHUkdOclNYTlJNRVpDVVhwMFFsRlZjRVZNUnpsRlVWVnNSRTh3UmtKU1ZWRnpWVEJHUWxWNWVHaFJWVVpvVEVWT1FsRlZUWE5STUVaQ1YxTjRSbEZWUmtaTVJWWkNVVmRWTjFOVlJrUmhSVkZ6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOVk1FWkNWWGw0VEZGVlJreE1SVlpDVVZWVmMxRXdSa0pSZVhoT1VWVkdUa3hGWkVKUlZXTnpVVEJHUWxGNmRGSlJWVVpHVEVVNVFsRlZPSE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTW1oRlRFVTVRbEZWT0hOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoVVVWVkdWRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRSVlVaRVREQkpjMUV3UmtKUmVuUkNVVlZXUlV4R1RrSlJWazF6V1ZWR1FsbFRlRVJSVlVaRVRFVk9RbEZXYTNOU1ZVWkNVbE40UmxGVlJteFBNR3hDVVRKb1JVeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVpPUWxGV1RYTlRNRVpDVTNsNFJGRlZSa1JQTVVaQ1VWVlZjMVF3UmtKVWVYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9iMUpEZUZCUlZVWlFURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMVV3UmtKVmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6QkdRbEY1T1VOTVJVNUNVVlZOTjFGVlJsSlNRM2hVVVZWR1ZFeEhkRU5SVlVaeVVXbDRSRkZWUmtSTVJVNUNVVlpGYzFKVlJrSlNVM2hFVVZWR1ZrOHdiRUpTZWxaRVRFVnNRbEZWYTNOVU1FWkNWSGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVpXdEpjMVF3UmtKVWVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVldkVkZwZUZCUlZVWlFURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUnpGRFVWVkdkRkZwZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFVGRlZSbEJNUlU1Q1VWVk5jMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6WWxWS1FsRlhNVU5NUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4Rk9VSlJWVGh6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkUlZVWkVUbFZaYzFFd1JrSlJlblJDVVZaT1JVeEdUa0pSVmsxellsVktRbEZYTVVOTVJVNUNVVlZOYzFFd1JrSlZVM2hHVVZWR1JreEZUa0pSVmxVM1UxVkdSRTR3VFhOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaSVkydEpjMU5WUmtKVFUzaEVVVlZHVkV4RlZrSlJWVlZ6VVRCR1FsVjVlRVpSVlVaR1RFVk9RbEZXVFhOUk1FWkNVWHAwU2xGVlRuZFJlWGhLVVZWR1NreEZaRUpSVm10elVsVkdRbEpUZUVoUlZVWmFURVZPUWxGVlRUZFRWVVpLVERCSmMxTlZSa0pUVTNoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVlXdFJjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JsbHBlRXhSVlVaTVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVMVZHUWxONmRGSlJWVTV6VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjZkRnBSVlU1WlRFVnNRbEZWYTNOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlU1M1VXbDRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlbk0zV2pCS1FsSldVWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrWmhhMGx6VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUk9WVWx6VWpCR1FsSjVlRWhSVlVaSVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMTJVV2w0U2xGVlJrcE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSaFJVMXpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaS1dXbDRTRkZWUmtoTVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVhrNVEweEZiRUpSVld0elVqQkdRbEo1ZUVaUlZVWkdUekZzUWxFd2QzTlRWVVpDVTFONFNGRlZSa2hQTW1SRFVWVk9TVXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRoVlVwQ1VUQjNOMW93U2tKUk1GRnpVMVZHUWxOVGVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMkl3U2tKUk0wSkRURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMDh5T1VOUlZWWlBURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMWxWUmtSWmFuUlVVVlZPUzA4eVJrSlJNR3MzVjFWR1JGSkRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbnAwYmxGclJrUlRhWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVUekpzUTFGVlRrMVBNbVJEVVZWT1JVeEZiRUpSVld0elV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWT2QxRnBlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBlblIyVVd0R1JsUnBlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNa1pDVVRKSk4xVXdSa1JUYW5STVVWVk9TMDh3UmtKUk1IZHpVVEJHUWxGNmRFSlJWa1pGVEVaT1FsRldUWE5pVlVwQ1VWY3hRMHhGVGtKUlZVMXpVVEJHUWxWVGVFWlJWVVpHVEVWT1FsRldWVGRUVlVaRVRqQk5jMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1pqYTBselUxVkdRbE5UZUVSUlZVWlVURVZXUWxGVlZYTlJNRVpDVlhsNFJsRlZSa1pNUlU1Q1VWWk5jMUV3UmtKUmVuUktVVlZPZDFGNWVFcFJWVVpLVEVWa1FsRldhM05TVlVaQ1VsTjRTRkZWUmxwTVJVNUNVVlZOTjFOVlJrcE1NRWx6VTFWR1FsTlRlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JoYTFGelZEQkdRbFI1ZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpHV1dsNFRGRlZSa3hNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOVFZVWkNVM3AwVWxGVlRuTlJhWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhwMFdsRlZUbGxNUld4Q1VWVnJjMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUbmRSYVhoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGNmN6ZGFNRXBDVWxaUmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUm1GclNYTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkU1VlNYTlNNRVpDVW5sNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVFhaUmFYaEtVVlZHU2t4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldNM1YxVkdSR0ZGVFhOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa3BaYVhoSVVWVkdTRXhGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJlVGxEVEVWc1FsRlZhM05TTUVaQ1VubDRSbEZWUmtaUE1XeENVVEIzYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldNM1dqQktRbEV3YjNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5Sd1VXdEdSRlJFZEc1UmEwWkVVa040U2xGVlJrcE1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEhaUmEwWkVZMFZKYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2Y3pkaU1FcENVbFUwYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEdoUlZVNXBUekZPUWxFd2J6ZFpWVVpFVTFSMFdsRlZUa1ZNUld4Q1VWVnJjMUl3UmtKU2VuUnVVV3RHUkZORGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1teERVVlZPVFU4eVpFTlJWVTVGVEVWc1FsRlZhM05UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eU9VTlJWVTUzVVdsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU5NmRIWlJhMFpHVkdsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eVJrSlJNa2szVlRCR1JGTnFkRXhSVlU1TFR6QkdRbEV3ZDNOUk1FWkNVWHAwUWxGV1RrVk1SazVDVVZka1EweEhiRU5SVlVad1VXbDRSRkZWUmtSTVJVNUNVVlpWYzFKVlJrSlNVM2hFVVZWR1ZreEZWa0pSVlZWelVsVkdRbUl3VFhOU1ZVWkNVbE40UmxGVlJuWlJlWGhHVVZWR1JreEZiRUpSVTNSRVRFVldRbEZWVlhOVFZVWkNTekJOTjFOVlJrUmlSVGh6VTFWR1FsTlRlRWhSVlVaWVRFVldRbEZWVlhOU01FWkNWbmw0UkZGVlJrUlBNR3hDVW5wa1EweEZaRUpSVldOelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEV5ZUVOTVJXUkNVVlZqYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlNNMEpEVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJYUkNVVlZ6YzFFd1JrSlJlblJLVVZWT2NWRnBlRkJSVlVaUVRFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWlBNVVpDVVRGWmMxTlZSa0pUVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGSlJWVTVoVEVVNVFsRlZPSE5UVlVaQ1UxTjRSbEZWUmtaUE1XeENVVEZSYzFOVlJrSlRVM2hJVVZWR1NFeEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlNNRVpDVW5sNFJGRlZSa1JQTW1SRFVWVkdSa3hGWkVKUlZXTnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVlrVk5jMU5WUmtKVFUzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlVaR1RFVXhRbEZWTURkWFZVWkVUbFZOYzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSVlUwM1ZUQkdSRlpFZEZKUlZVNUZURVU1UWxGVk9ITlRWVVpDVTFONFJsRlZSa1pQTVd4Q1VURlJjMU5WUmtKVFUzaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjZkRzVSYTBaQ1VsTjRTRkZWUmtoTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFWWtWTmMxTlZSa0pUVTNoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVVpHVEVVeFFsRlZNRGRYVlVaRVRsVk5jMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTAzVjFWR1JGUnBlRXBSVlVaS1RFVmtRbEZWWTNOVE1FWkNVM2w0UkZGVlJrUlBNVTVDVVRKb1EwOHdkRUpSTUc4M1UxVkdSRkpEZUZCUlZVWlFURVZXUWxGVlZYTlNWVVpDVWxONFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkUlZVWkVZVVZOYzFFd1JrSlJlblJDVVZob1ExSkRkelJSTUVZelVXdE5OMUZWUmtaU1EzaFVVVlZHYmxGcGVIUlJhMFpDWWxWSmMxRXdSa0pSZVhoRVVWVkdWa3hGVmtKUlZWVnpVVEJHUWxaVWRFcFJWVTR3VWtONFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaDBVV3RHUW1KVlNYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JHSnJUWE5VTUVaQ1ZIbDRSbEZWUmtaTVJWWkNVVlZWYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTAzVVZWR1JHTkZUWE5STUVaQ1VYcDBRbEZWYUVWTVIzUkZVVlZrUkU4d1JrSlNWVkZ6VlRCR1Fsb3dTWE5pVlVwQ1VWY3hRMHhGVGtKUlZVMXpVVEJHUWxaVGVFWlJWVVpHVEVWT1FsRldWVGRUVlVaRVpFVlJjMVF3UmtKVWVYaHdVV3RHUW1GVlNYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4SE1VTlJWVVowVVdsNFJsRlZSa1pNUnpGRFVWVkdkRkZwZUVaUlZVWkdURVYwUWxGVmMzTlNWVVpDVWxONFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZOZWxKcGVFUlJWVVpFVHpCR1FsSnJVWE5oTUZKQ1VsVk5OMUZWUmtaU1EzaFVVVlZHYmxGcGVIUlJhMFpDWWxWSmMxRXdSa0pSZVhoRVVWVkdWa3hGVmtKUlZWVnpVVEJHUWxaVWRFcFJWVTR3VWtONFVGRlZSbEJNUjJ4RFVWVkdjRkZwZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMkpWU2tKUlZ6RkRURVZXUWxGVlZYTmlWVXBDVVZjeFEweEZWa0pSVlZWelV6QkdRbE41ZUVaUlZVWkdURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JQTUVaQ1VYcE9SMHhGVGtKUlZVMDNVVlZHUjFKRGVISlNSVVpHVVhwMFFsRlZWa1ZNUms1Q1VWZGtRMHhITVVOUlZVWjBVV2w0UkZGVlJrUk1SVTVDVVZaVmMxSlZSa0pTVTNoRVVWVkdWazh3YkVKUk0xSkZURVU1UWxGVk9ITmhWVXBDVVZkc1EweEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNWVVpDVWxONGRGRnJSa0ppVlVselVsVkdRbEpUZUhSUmEwWkNZbFZKYzFKVlJrSlNVM2hNVVZWR1RFeEZWa0pSVlZWelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRUZFJWVVpFVFRCWmMxRXdSa0pSZW5SQ1VWVmFSVXhIZEVWUlZWWkVUekJHUWxKVlVUZFRWVVpFVTFONGRGRnJSa0ppVlVselVsVkdRbFpUZUVaUlZVWlVURVZXUWxGV1ZUZFZWVVpDVGpCSmMxUXdSa0pTVTNoSVVWVkdSMHhGVmtKUlZWVnpVVEJHUWxWVWRGSlJWVVpVVEVVNVFsRlZWWE5TTUVaQ1VtbDRSbEZWUmtaTVJVNUNVVlpGTjFOVlJrSlRVM2hFVVZWR1JFOHdiRUpSTTNCRlRFZGtRMUZWUmtSUE1FWkNVVlZSYzFFd1JrSlJlWGhDVVZWYVJVeEZiRUpTVlUwM1VWVkdSMWRUZHpSUmEwWkNWWHAwUWxGVmJEQlJhblJLVVZWR1FrOHdiRUpUTUVWelVUQkdRbEY2ZEVwUlZVWkZURWRzUTFGVlJrUlBNRVpDVVZWUmMxRXdSa0pSZVhoQ1VWVjRSVXhGYkVKVE1FMDNVVlZHVFZkVGVHNVJNRVpDVmxSMFFsRlZPVEpSYW5SS1VWVkZORkZwZHpCUmEwWkNVM3AwU2xGVlJuVlJlbk0zVTFWR1JsRlRlRVJSVlVaRVR6QnNRbEZWVVhOYVZVWkNVWHAwUWxGVlJrVk1SVTVDVVZWTmMxRlZSa2RTUTNoRVVWVkZORkZwZUV4UlZVWk1URVZrUWxKWGVFUlBNRVpDVW14cmMwNUZTa0pSVmtVM1VWVkdTbU5yU1RkVFZVWkVVMU4zZDFGclJrUldlWGhHVVZWR1ZreEZWa0pSTVZselZGVkdRbGw1ZUVaUlZVNXJURVpXUWxGWGRFTk1SVlpDVVRKNFEweEZUa0pSVm1NM1ZWVkdTVmREZUZCUlZVWkdURVZrUWxGVldYTlNWVVpDVWxONFJGRlZSbEpQTVVaQ1VURlpjMVl3UmtKVVUzaElVVlZHVDB4Rk1VSlJWVEJ6VVRCR1FsVlVkRkpSVlU1clRFZFdRbEZXVlhOU01FWkNWbWw0VmxGVlJsWk1SVTVDVVZaRk4xVlZSa1JpUlVselZGVkdRbEY1ZUVoUlZVWkZURVZPUWxGVlRYTlJNRVpDVmxSMFVsRlZWbk5SYVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBTbEZWVG05UmFYaEVVVlZHUkU4d2JFSlJNSGR6WkZWS1FsRlZUVGRSVlVaQ1VrTjRSRkZWUmtSTVJVWkNWa1ZSYzFOVlJsUlJlblJDVVZaU1dreEVVa1JSVlVadVVXcDBRbEZXWXpOUmFuUktVVlZPU2t4SVpFTlJWVTVZVEVVeFFsRllaRU5NUlZaQ1VUTm9RMHhGTVVKUldHUkRUekZHUWxKSWFFTk1SbVJDVVZVd2MxSXdSa0pVYVhoT1VWVkdUa3hGVGtKUlYzUkRUekZHUWxFemFFTk1SbVJDVVZVd2MxSXdSa0pVYVhoT1VWVkdUa3hGVGtKUlYzUkRUekJzUWxGVmEzTlJNRVpDVVhwMFNsRlZUalJSZVhkeVVXdEdRbFJUZUVoUlZVWlBUekZHUWxFd2EzTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVFhwUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSZWs1RVRFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFaFJWVVpJVEVWV1FsRlZWWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlblJLVVZWT05GRjVlRVJSVlVaRVR6QnNRbEV3ZDNOalZVcENVVlZOTjFGVlJrSlNRM2hFVVZWR1JFeEZSa0pXUlZGelUxVkdWRkY2ZEVKUlZsSmFURWhrUkZGVlJtcFBNRVpDVm5wT1EwOHdiRUpTTUd0eldqQk9RbEZYTVVOTVJVNUNVVmRWYzFKVlJrSlNVM2hHVVZWR2RGSkVkRkpSVlVaM1VsTjRUbEZWUmtSTVJXUkNVVlZSYzFFd1JrSlJlWGhFVVZWR2FrOHhSa0pTYlhoRVRFVXhRbEZWVFhOU01FWkNaRlZKYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pSZWs1RFRFVXhRbEZWVFhOU01FWkNZMVZKYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pTV0VwRFRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVk4xZFZSa1JVUTNoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSUE1XeENVbGR3UTB4RmRFSlJWWE56VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWVGRhTUVwQ1VUTm9RMHhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JsbHBlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNWSFIyVVd0R1JFd3dTWE5UVlVaQ1UxTjRSbEZWUmtaTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVNVZURVZXUWxGVlZYTlNNRVpDVW5sNFNsRlZSa3BNUjJSRFVWVkdibEZwZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4ySXdTa0pSTTFwRlRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVHpJNVExRlZiRzlSYVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVHpOa1ExRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOWk1FWkNXWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lWVktRbEY1T1VWUE1tUkRVVlZXUlV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrUlBNamxEVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMWt3UmtKWmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEdoUlZVNXpVbXAwV2xGVlRrVk1SWFJDVVZWemMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdUekprUTFGVlRURlJhWGhLVVZWR1NreEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk1sRnpVekJHUWxONWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZOMkl3U2tKUmVsWkRURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1JGWkRlRVJSVlVaRVRFVmtRbEZWWTNOVlZVWkNWVk40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNmRIWlJhMFpFWld0SmMxTXdSa0pUZVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWVGRrTUVwQ1VUSkpjMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlRsTk1SVEZDVVZVd2MxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJURkNVVlV3YzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JQTTJSRFVWVk9ObEY1ZUVwUlZVWktURVZPUWxGVlRYTmFNRXBDVVZka1EweEZUa0pSVlUxelZGVkdRbFJUZUVaUlZVWkdURVV4UWxGVk1ITlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWTFWS1FsRjVPVVJQTW14RFVWVk9TMDh5UmtKUk1HODNWVEJHUkZOcWRHaFJWVVpPVHpGc1FsRXdaM05UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPTWxGcGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVU1Q1VYcEdRMDh3YkVKUk1IZHpVVEJHUWxGNmRFcFJWVTVGVEVkc1JWRlZSbTVSYVhoSVVWVkdiMUZwZUZaUlZVWndVV2w0UkZGVlJsaE1SVlpDVVZWVmMxRXdSa0pXZVhoR1VWVkdSa3hGVmtKUlZsVnpVbFZHUWxKVGVFWlJWVVpXVHpGR1FsRjZaRVZNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6V2xWR1FscFRlRVJSVlVaRVRFVnNRbEZWYTNOV01FWkNWbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlUzVjFWR1JHTkZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUdwUlZVWnFURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVkZGVlRYWlJlblJLVVZWT1RVeEZUa0pSVlUwM1UxVkdSRkpEZURWUk1FWkNWVk40U0ZGVlJsTk1SbFpDVVZaTmMxRXdSa0pXZVhoR1VWVkdSa3hGVmtKUlZsVTNWVlZHUkU1VlNYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVlZVWkVaRVZKYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONGJsRnJSa0phTUVselVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JOVlZGelV6QkdRbE41ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbFIwV2xGVlRqUlJhWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVaUlZVWkdUekprUTFGVlJrWk1SazVDVVZaTk4xZFZSa1JrYTBselUxVkdRbE5UZUVwUlZVWktURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1JHRkZTWE5STUVaQ1VYbDRTRkZWUmtoTVIzUkRVVlZHY2xGcGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWT2QxRjVlRXBSVlVaS1RFVk9RbEZWVFhOYU1FcENVVmRrUTB4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVWHBzUkV4RmJFSlJWV3R6VVRCR1FsRjVlRzVSYTBaQ1dqQkpjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWTUVaRVlXdFJOMVZWUmtSU1EzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkVFZVWkVZVVZKYzFFd1JrSlJlblJLVVZWT1VFeEhaRVZSVlVac1RFVmtRbEZZV2tOTVJsWkNVVmhrUTB4RlRrSlJWMDF6VWxWR1FsSlRlRVpSVlVaV1RFVldRbEZWVlhOU1ZVWkNWbFIwVWxGVlRYaFNRM2hNVVZWR1RFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVWRGcFJWVTE2VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVldRbEZWVlhOVFZVWkNVMU40VmxGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdUekprUTFGVlRYcFNRM2hRVVZWR1VFeEZiRUpSVld0elVUQkdRbEY2ZEdoUlZVNXRUekZPUWxFd2J6ZFZWVVpFVWtONFVGRlZSbEJNUlhSQ1VWVnpjMUV3UmtKUmVuUktVVlZPY1ZGcGVFUlJWVVpFVHpCc1FsRXdkM05PYTBwQ1VWVk5OMUZWUmtKU1EzaEVVVlZHUkV4RlJrSmhSVlpGVEVWc1Fsb3dWa1JQTUVaQ1lVVldXa3hJWkVWUlZVWjZVV3AwUWxGWGRFWmlhMDF6VlRCR1FsVjVlRlpSVlVaV1RFVk9RbEZWVFhOUk1FWkNXWGw0UmxGVlJrWk1SVTVDVVZaVk4xTlZSa1JOVlUxelUxVkdRbE5UZUVwUlZVWktURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JQTUd4Q1VUSlJjMU13UmtKVGVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNWSFJTVVZWT01GRjVlRXBSVlVaS1RFVmtRbEZWWTNOU01FWkNVbmw0ZUZGclJrSlZlWGhFVVZWR1JFeEhaRU5SVlVadVVXbDRSRkZWVG05UmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVRGWmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWVGxkTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlRqQlJhWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEV5U1hOUk1FWkNVWHAwVWxGVlRrOU1SV3hDVVZWcmMxSXdSa0pTZW5SYVVWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFNd1JrUk5NRWszVTFWR1JGSkRlRkJSVlVaUVRFVnNRbEZWYTNOUk1FWkNVWHAwUWxGVlRtOVJhWGhFVVZWR1JFOHdSa0pTVlZGelZUQkdRbG93U1hOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZaVmMxSlZSa0pTVTNoRVVWVkdWazh3YkVKU1ZFNUVURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTR5VVhsNFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaEtVVlZHU2t4R1ZrSlJWbFZ6VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEY2UmtOTVJYUkNVVlZ6YzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlUzVlZWR1JHVnJTWE5UTUVaQ1UzbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDVWxONFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1ZIUmFVVlZPTmxGcGVFcFJWVVpLVEVWV1FsRlZWWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVUREJKYzFOVlJrSlRVM2hHVVZWR1JreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUSlJjMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSZVRsRFRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUWFpSYVhoS1VWVkdTa3hGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmFRM2hLVVZWR1NreEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkV3d1NYTlRWVVpDVTFONFRsRlZSazVNUldSQ1VWVmpjMVJWUmtKVVUzaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaR1RFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JoUlUxelUxVkdRbE5UZUU1UlZVWk9URVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVZVVZOYzFOVlJrSlRVM2hPVVZWR1RreEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHRkZUWE5UVlVaQ1UxTjRUbEZWUms1TVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSaFJVMXpVMVZHUWxOVGVFNVJWVVpPVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hHVVZWR1JreEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFWVVWTmMxTlZSa0pUVTNoT1VWVkdUa3hGWkVKUlZXTnpWRlZHUWxSVGVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR0ZGVFhOVFZVWkNVMU40VGxGVlJrNU1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGTVVKUlZUQnpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05VVlVaQ1ZGTjRTRkZWUmtoTVJVNUNVVlZOTjJKVlNrSlJNMHBFVEVVeFFsRlZNSE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFSVlJrSlVVM2hLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUU1UlZVWk9URVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pQTW1SRFVWVk9ObEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNWVVpDVWxONFNGRlZSa2hNUld4Q1VWVnJjMVV3UmtKVmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwYUZGVlRuVlJlblJ3VVd0R1FsUlRlRXBSVlVaS1RFVXhRbEZWTUhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxUlZSa0pVVTNoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFNVJWVVpPVEVWa1FsRlZZM05STUVaQ1VYcDBkRkZyUmtST1ZVMXpWRlZHUWxSVGVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRUbEZWUms1TVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZNVUpSVlRCelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZUZGFNRXBDVVROd1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlRWVVpDVTFONFZGRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV5TlVSUE1teERVVlZHVGt4RmJFSlJWV3R6VkZWR1FsUlRlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40VGxGVlJrNU1SV1JDVVZWamMxRXdSa0pSZVhoS1VWVkdTa3hGTVVKUlZUQnpVMVZHUWxOVGVFUlJWVVpFVHpJeFExRlZUVEZSZVhoT1VWVkdUa3hGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVVeFFsRlZNSE5TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFSVlJrSlVVM2hLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpVZEc1UmEwWkVaV3ROYzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVwUlZVWktURVpPUWxGV1RYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JHSnJUVGRoVlVwQ1VWVXdjMU5WUmtKVFUzaE9VVlZHVGt4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxUlZSa0pVVTNoS1VWVkdTa3hGVGtKUlZVMDNZbFZLUWxGNlZrUk1SVEZDVVZVd2MxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5UVlVaQ1UxTjRUbEZWUms1TVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JrOHlaRU5SVlU0MlVYbDRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNVM2hJVVZWR1NFeEZiRUpSVld0elZUQkdRbFY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUm9VVlZPZFZGNmRGUlJWVTVMVHpCMFFsRXdiemRUVlVaRVVrTjRVRkZWUmxCTVJWWkNVVlZWYzFFd1JrSlJlblJDVVZWT2EweEZUa0pSVlUwM1VWVkdjMUV3VVhOT1JVcENZVEJPUkU4d1JrSlNWVkZ6VlRCR1FsVjVlSEJSYTBaQ1lWVkpjMUV3UmtKUmVYaEVVVlZHVWt4RlZrSlJWVlZ6VTFWR1FsbFVkRXBSVlUwMVVYbDRURkZWUmt4TVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlRqSlJlWGhLVVZWR1NreEZkRUpSVlhOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xZFZSa0pTVTNoUVVWVkdVRXhGZEVKUlZYTnpVVEJHUWxGNmRFcFJWVTU1VWtONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVuUkNVVlZPYjFGcGVFUlJWVVpFVHpCR1FsSlZVWE5WTUVaQ1ZYbDRWRkZWUmxSTVJVNUNVVlZOYzFFd1JrSldVM2hHVVZWR1JreEZUa0pSVmxVM1UxVkdSR05yVFhOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpWbFZHUWxGVGVFUlJWVVpFVEVWc1FsRlZhM05VTUVaQ1VWTjRSRkZWUmtSTVIyeERVVlZHY0ZGcGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSmxSVWx6VVRCR1FtUXdTWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVEkxUlV4RlRrSlJWVTAzVVZWR1JsSkRlRlJSVlVadVVXbDRXbEZWUmxwTVJVNUNVVlZOYzFFd1JrSldVM2hHVVZWR1JreEZUa0pSVmxVM1UxVkdSRXd3VFhOVFZVWkNVMU40VkZGVlJsUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVVpHVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSUE1HeENVVEp3UkV4RmJFSlJWV3R6VlRCR1FsVjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xVlZSa0pTVTNoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNmRFcFJWVTV4VVhsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaUE1VWkNVVE5TUkV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWTmVsRnBlRXBSVlVaS1RFWldRbEZXVlhOUk1FWkNVWGw0U2xGVlJrcE1SbVJDVVZaamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVk9RbEZWVFRkWFZVWkNVbE40VUZGVlJsQk1SV3hDVVZWcmMxRXdSa0pSZW5STVVWVk9jMUpxZEVwUlZVNUZURVU1UWxGVk9ITlRNRVpDVTNsNFJGRlZSa1JQTUVaQ1VUSndRMHhGVGtKUlZVMDNVVlZHVTFKRGVIWlJNRVpTVVhsS09TSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZG1GeUlISmxZM1JoYm1kc1pWOHhJRDBnY21WeGRXbHlaU2hjSWk0dmNtVmpkR0Z1WjJ4bFhDSXBPMXh1ZG1GeUlIWndjMk5mTVNBOUlISmxjWFZwY21Vb1hDSXVMM1p3YzJOY0lpazdYRzUyWVhJZ2MyaHZjblJsYzNSd1lYUm9jMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZjMmh2Y25SbGMzUndZWFJvYzF3aUtUdGNiblpoY2lCT2IyUmxWM0poY0hCbGNpQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVG05a1pWZHlZWEJ3WlhJb2FXUXNJSEpsWTNRc0lHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXUWdQU0JwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WldOMElEMGdjbVZqZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdsc1pISmxiaUE5SUdOb2FXeGtjbVZ1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXhsWVdZZ1BTQjBlWEJsYjJZZ1kyaHBiR1J5Wlc0Z1BUMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElHTm9hV3hrY21WdUxteGxibWQwYUNBOVBUMGdNRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUU1dlpHVlhjbUZ3Y0dWeU8xeHVmU2dwS1R0Y2JtVjRjRzl5ZEhNdVRtOWtaVmR5WVhCd1pYSWdQU0JPYjJSbFYzSmhjSEJsY2p0Y2JuWmhjaUJXWlhKMElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJXWlhKMEtHbGtMQ0I0TENCNUxDQnViMlJsTENCc2FXNWxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHViMlJsSUQwOVBTQjJiMmxrSURBcElIc2dibTlrWlNBOUlHNTFiR3c3SUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3hwYm1VZ1BUMDlJSFp2YVdRZ01Da2dleUJzYVc1bElEMGdiblZzYkRzZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sa0lEMGdhV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlQ0E5SUhnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZVNBOUlIazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaU0E5SUc1dlpHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHVaU0E5SUd4cGJtVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJXWlhKME8xeHVmU2dwS1R0Y2JtVjRjRzl5ZEhNdVZtVnlkQ0E5SUZabGNuUTdYRzUyWVhJZ1RHOXVaMlZ6ZEVOdmJXMXZibE4xWW5ObGNYVmxibU5sSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQk1iMjVuWlhOMFEyOXRiVzl1VTNWaWMyVnhkV1Z1WTJVb2N5d2dkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk1nUFNCek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5RZ1BTQjBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXWWdQU0JNYjI1blpYTjBRMjl0Ylc5dVUzVmljMlZ4ZFdWdVkyVXVabWx1WkUxaGRHTm9LSE1zSUhRcE8xeHVJQ0FnSUNBZ0lDQjJZWElnZEhJZ1BTQjBMbk5zYVdObEtEQXBMbkpsZG1WeWMyVW9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXlJRDBnVEc5dVoyVnpkRU52YlcxdmJsTjFZbk5sY1hWbGJtTmxMbVpwYm1STllYUmphQ2h6TENCMGNpazdYRzRnSUNBZ0lDQWdJR2xtSUNodFppNXNaVzVuZEdnZ1BqMGdiWEl1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SUcxbUxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMya2dQU0J0Wmk1emFUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR2tnUFNCdFppNTBhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WMlpYSnpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnYlhJdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emFTQTlJRzF5TG5OcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBhU0E5SUhRdWJHVnVaM1JvSUMwZ2JYSXVkR2tnTFNCdGNpNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxkbVZ5YzJWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JNYjI1blpYTjBRMjl0Ylc5dVUzVmljMlZ4ZFdWdVkyVXVabWx1WkUxaGRHTm9JRDBnWm5WdVkzUnBiMjRnS0hNc0lIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMGdQU0J6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNGdQU0IwTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMWhkR05vSUQwZ2V5QnNaVzVuZEdnNklEQXNJSE5wT2lBdE1Td2dkR2s2SUMweElIMDdYRzRnSUNBZ0lDQWdJSFpoY2lCc0lEMGdibVYzSUVGeWNtRjVLRzBwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHMDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkZ0cFhTQTlJRzVsZHlCQmNuSmhlU2h1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnYmpzZ2Fpc3JLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelcybGRJRDA5UFNCMFcycGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIySUQwZ2JGdHBYVnRxWFNBOUlDaHBJRDA5UFNBd0lIeDhJR29nUFQwOUlEQXBJRDhnTVNBNklHeGJhU0F0SURGZFcyb2dMU0F4WFNBcklERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJJRDRnYldGMFkyZ3ViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJqYUM1c1pXNW5kR2dnUFNCMk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmd1YzJrZ1BTQnBJQzBnZGlBcklERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJqYUM1MGFTQTlJR29nTFNCMklDc2dNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkZ0cFhWdHFYU0E5SURBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWhkR05vTzF4dUlDQWdJSDA3WEc0Z0lDQWdURzl1WjJWemRFTnZiVzF2YmxOMVluTmxjWFZsYm1ObExuQnliM1J2ZEhsd1pTNW5aWFJUWlhGMVpXNWpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YkdWdVozUm9JRDQ5SURBZ1B5QjBhR2x6TG5NdWMyeHBZMlVvZEdocGN5NXphU3dnZEdocGN5NXphU0FySUhSb2FYTXViR1Z1WjNSb0tTQTZJRnRkTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFeHZibWRsYzNSRGIyMXRiMjVUZFdKelpYRjFaVzVqWlR0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGt4dmJtZGxjM1JEYjIxdGIyNVRkV0p6WlhGMVpXNWpaU0E5SUV4dmJtZGxjM1JEYjIxdGIyNVRkV0p6WlhGMVpXNWpaVHRjYm5aaGNpQkhjbWxrVW05MWRHVnlJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCSGNtbGtVbTkxZEdWeUtHOXlhV2RwYm1Gc2JtOWtaWE1zSUdGalkyVnpjMjl5TENCbmNtOTFjRkJoWkdScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnYVdZZ0tHZHliM1Z3VUdGa1pHbHVaeUE5UFQwZ2RtOXBaQ0F3S1NCN0lHZHliM1Z3VUdGa1pHbHVaeUE5SURFeU95QjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzSnBaMmx1WVd4dWIyUmxjeUE5SUc5eWFXZHBibUZzYm05a1pYTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVozSnZkWEJRWVdSa2FXNW5JRDBnWjNKdmRYQlFZV1JrYVc1bk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14bFlYWmxjeUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaWE1nUFNCdmNtbG5hVzVoYkc1dlpHVnpMbTFoY0NobWRXNWpkR2x2YmlBb2Rpd2dhU2tnZXlCeVpYUjFjbTRnYm1WM0lFNXZaR1ZYY21Gd2NHVnlLR2tzSUdGalkyVnpjMjl5TG1kbGRFSnZkVzVrY3loMktTd2dZV05qWlhOemIzSXVaMlYwUTJocGJHUnlaVzRvZGlrcE95QjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNaV0YyWlhNZ1BTQjBhR2x6TG01dlpHVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnZGk1c1pXRm1PeUI5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVuY205MWNITWdQU0IwYUdsekxtNXZaR1Z6TG1acGJIUmxjaWhtZFc1amRHbHZiaUFvWnlrZ2V5QnlaWFIxY200Z0lXY3ViR1ZoWmpzZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXNjeUE5SUhSb2FYTXVaMlYwUjNKcFpFeHBibVZ6S0NkNEp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOTNjeUE5SUhSb2FYTXVaMlYwUjNKcFpFeHBibVZ6S0NkNUp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVozSnZkWEJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyTG1Ob2FXeGtjbVZ1TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dNcElIc2djbVYwZFhKdUlGOTBhR2x6TG01dlpHVnpXMk5kTG5CaGNtVnVkQ0E5SUhZN0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MElEMGdleUJqYUdsc1pISmxiam9nVzEwZ2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIyUmxjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhZdWNHRnlaVzUwSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdWNHRnlaVzUwSUQwZ1gzUm9hWE11Y205dmREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1eWIyOTBMbU5vYVd4a2NtVnVMbkIxYzJnb2RpNXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMkxuQnZjblJ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUpoWTJ0VWIwWnliMjUwSUQwZ2RHaHBjeTV1YjJSbGN5NXpiR2xqWlNnd0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aVlXTnJWRzlHY205dWRDNXpiM0owS0daMWJtTjBhVzl1SUNoNExDQjVLU0I3SUhKbGRIVnliaUJmZEdocGN5NW5aWFJFWlhCMGFDaDRLU0F0SUY5MGFHbHpMbWRsZEVSbGNIUm9LSGtwT3lCOUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaeWIyNTBWRzlDWVdOclIzSnZkWEJ6SUQwZ2RHaHBjeTVpWVdOclZHOUdjbTl1ZEM1emJHbGpaU2d3S1M1eVpYWmxjbk5sS0NrdVptbHNkR1Z5S0daMWJtTjBhVzl1SUNobktTQjdJSEpsZEhWeWJpQWhaeTVzWldGbU95QjlLVHRjYmlBZ0lDQWdJQ0FnWm5KdmJuUlViMEpoWTJ0SGNtOTFjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISWdQU0J5WldOMFlXNW5iR1ZmTVM1U1pXTjBZVzVuYkdVdVpXMXdkSGtvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFl1WTJocGJHUnlaVzR1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWXlrZ2V5QnlaWFIxY200Z2NpQTlJSEl1ZFc1cGIyNG9YM1JvYVhNdWJtOWtaWE5iWTEwdWNtVmpkQ2s3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZGk1eVpXTjBJRDBnY2k1cGJtWnNZWFJsS0Y5MGFHbHpMbWR5YjNWd1VHRmtaR2x1WnlrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyOXNUV2xrY3lBOUlIUm9hWE11Yldsa1VHOXBiblJ6S0hSb2FYTXVZMjlzY3k1dFlYQW9ablZ1WTNScGIyNGdLSElwSUhzZ2NtVjBkWEp1SUhJdWNHOXpPeUI5S1NrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjNkTmFXUnpJRDBnZEdocGN5NXRhV1JRYjJsdWRITW9kR2hwY3k1eWIzZHpMbTFoY0NobWRXNWpkR2x2YmlBb2Npa2dleUJ5WlhSMWNtNGdjaTV3YjNNN0lIMHBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkM2dnUFNCamIyeE5hV1J6V3pCZExDQnliM2RZSUQwZ1kyOXNUV2xrYzF0amIyeE5hV1J6TG14bGJtZDBhQ0F0SURGZE8xeHVJQ0FnSUNBZ0lDQjJZWElnWTI5c2VTQTlJSEp2ZDAxcFpITmJNRjBzSUdOdmJGa2dQU0J5YjNkTmFXUnpXM0p2ZDAxcFpITXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQm9iR2x1WlhNZ1BTQjBhR2x6TG5KdmQzTXViV0Z3S0daMWJtTjBhVzl1SUNoeUtTQjdJSEpsZEhWeWJpQW9leUI0TVRvZ2NtOTNlQ3dnZURJNklISnZkMWdzSUhreE9pQnlMbkJ2Y3l3Z2VUSTZJSEl1Y0c5eklIMHBPeUI5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbU52Ym1OaGRDaHliM2ROYVdSekxtMWhjQ2htZFc1amRHbHZiaUFvYlNrZ2V5QnlaWFIxY200Z0tIc2dlREU2SUhKdmQzZ3NJSGd5T2lCeWIzZFlMQ0I1TVRvZ2JTd2dlVEk2SUcwZ2ZTazdJSDBwS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpzYVc1bGN5QTlJSFJvYVhNdVkyOXNjeTV0WVhBb1puVnVZM1JwYjI0Z0tHTXBJSHNnY21WMGRYSnVJQ2g3SUhneE9pQmpMbkJ2Y3l3Z2VESTZJR011Y0c5ekxDQjVNVG9nWTI5c2VTd2dlVEk2SUdOdmJGa2dmU2s3SUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WTI5dVkyRjBLR052YkUxcFpITXViV0Z3S0daMWJtTjBhVzl1SUNodEtTQjdJSEpsZEhWeWJpQW9leUI0TVRvZ2JTd2dlREk2SUcwc0lIa3hPaUJqYjJ4NUxDQjVNam9nWTI5c1dTQjlLVHNnZlNrcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYkdsdVpYTWdQU0JvYkdsdVpYTXVZMjl1WTJGMEtIWnNhVzVsY3lrN1hHNGdJQ0FnSUNBZ0lHeHBibVZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0d3cElIc2djbVYwZFhKdUlHd3VkbVZ5ZEhNZ1BTQmJYVHNnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1WeWRITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsWkdkbGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCb2JHbHVaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpzYVc1bGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaDJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQWdQU0J1WlhjZ1ZtVnlkQ2hmZEdocGN5NTJaWEowY3k1c1pXNW5kR2dzSUhZdWVERXNJR2d1ZVRFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZ3VkbVZ5ZEhNdWNIVnphQ2h3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxuWmxjblJ6TG5CMWMyZ29jQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVkbVZ5ZEhNdWNIVnphQ2h3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhU0E5SUY5MGFHbHpMbUpoWTJ0VWIwWnliMjUwTG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibTlrWlNBOUlGOTBhR2x6TG1KaFkydFViMFp5YjI1MFcybGRMQ0J5SUQwZ2JtOWtaUzV5WldOME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pIZ2dQU0JOWVhSb0xtRmljeWh3TG5nZ0xTQnlMbU40S0NrcExDQmtlU0E5SUUxaGRHZ3VZV0p6S0hBdWVTQXRJSEl1WTNrb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtlQ0E4SUhJdWQybGtkR2dvS1NBdklESWdKaVlnWkhrZ1BDQnlMbWhsYVdkb2RDZ3BJQzhnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDNXViMlJsSUQwZ2JtOWtaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnNhVzVsY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoc0xDQnNhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWJtOWtaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGl3Z2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1Y21WamRDNXNhVzVsU1c1MFpYSnpaV04wYVc5dWN5aHNMbmd4TENCc0xua3hMQ0JzTG5neUxDQnNMbmt5S1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNocGJuUmxjbk5sWTNRc0lHb3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCdVpYY2dWbVZ5ZENoZmRHaHBjeTUyWlhKMGN5NXNaVzVuZEdnc0lHbHVkR1Z5YzJWamRDNTRMQ0JwYm5SbGNuTmxZM1F1ZVN3Z2Rpd2diQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5abGNuUnpMbkIxYzJnb2NDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd3dWRtVnlkSE11Y0hWemFDaHdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpNXdiM0owY3k1d2RYTm9LSEFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FYTkliM0pwZWlBOUlFMWhkR2d1WVdKektHd3VlVEVnTFNCc0xua3lLU0E4SURBdU1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtaV3gwWVNBOUlHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCcGMwaHZjbWw2SUQ4Z1lpNTRJQzBnWVM1NElEb2dZaTU1SUMwZ1lTNTVPeUI5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdiQzUyWlhKMGN5NXpiM0owS0dSbGJIUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F4T3lCcElEd2diQzUyWlhKMGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFJRDBnYkM1MlpYSjBjMXRwSUMwZ01WMHNJSFlnUFNCc0xuWmxjblJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxTG01dlpHVWdKaVlnZFM1dWIyUmxJRDA5UFNCMkxtNXZaR1VnSmlZZ2RTNXViMlJsTG14bFlXWXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbVZrWjJWekxuQjFjMmdvZXlCemIzVnlZMlU2SUhVdWFXUXNJSFJoY21kbGREb2dkaTVwWkN3Z2JHVnVaM1JvT2lCTllYUm9MbUZpY3loa1pXeDBZU2gxTENCMktTa2dmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQkhjbWxrVW05MWRHVnlMbkJ5YjNSdmRIbHdaUzVoZG1jZ1BTQm1kVzVqZEdsdmJpQW9ZU2tnZXlCeVpYUjFjbTRnWVM1eVpXUjFZMlVvWm5WdVkzUnBiMjRnS0hnc0lIa3BJSHNnY21WMGRYSnVJSGdnS3lCNU95QjlLU0F2SUdFdWJHVnVaM1JvT3lCOU8xeHVJQ0FnSUVkeWFXUlNiM1YwWlhJdWNISnZkRzkwZVhCbExtZGxkRWR5YVdSTWFXNWxjeUE5SUdaMWJtTjBhVzl1SUNoaGVHbHpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMngxYlc1eklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnNjeUE5SUhSb2FYTXViR1ZoZG1WekxuTnNhV05sS0RBc0lIUm9hWE11YkdWaGRtVnpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHNjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IzWmxjbXhoY0hCcGJtY2dQU0JzY3k1bWFXeDBaWElvWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlIWXVjbVZqZEZzbmIzWmxjbXhoY0NjZ0t5QmhlR2x6TG5SdlZYQndaWEpEWVhObEtDbGRLR3h6V3pCZExuSmxZM1FwT3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMndnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaWE02SUc5MlpYSnNZWEJ3YVc1bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjem9nZEdocGN5NWhkbWNvYjNabGNteGhjSEJwYm1jdWJXRndLR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCMkxuSmxZM1JiSjJNbklDc2dZWGhwYzEwb0tUc2dmU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXNkVzF1Y3k1d2RYTm9LR052YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJ3dWJtOWtaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGlrZ2V5QnlaWFIxY200Z2JITXVjM0JzYVdObEtHeHpMbWx1WkdWNFQyWW9kaWtzSURFcE95QjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyeDFiVzV6TG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRXVjRzl6SUMwZ1lpNXdiM003SUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXNkVzF1Y3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRWR5YVdSU2IzVjBaWEl1Y0hKdmRHOTBlWEJsTG1kbGRFUmxjSFJvSUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxjSFJvSUQwZ01EdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tIWXVjR0Z5Wlc1MElDRTlQU0IwYUdsekxuSnZiM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsY0hSb0t5czdYRzRnSUNBZ0lDQWdJQ0FnSUNCMklEMGdkaTV3WVhKbGJuUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsY0hSb08xeHVJQ0FnSUgwN1hHNGdJQ0FnUjNKcFpGSnZkWFJsY2k1d2NtOTBiM1I1Y0dVdWJXbGtVRzlwYm5SeklEMGdablZ1WTNScGIyNGdLR0VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2RoY0NBOUlHRmJNVjBnTFNCaFd6QmRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXbGtjeUE5SUZ0aFd6QmRJQzBnWjJGd0lDOGdNbDA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXhPeUJwSUR3Z1lTNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV2xrY3k1d2RYTm9LQ2hoVzJsZElDc2dZVnRwSUMwZ01WMHBJQzhnTWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiV2xrY3k1d2RYTm9LR0ZiWVM1c1pXNW5kR2dnTFNBeFhTQXJJR2RoY0NBdklESXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV2xrY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRWR5YVdSU2IzVjBaWEl1Y0hKdmRHOTBlWEJsTG1acGJtUk1hVzVsWVdkbElEMGdablZ1WTNScGIyNGdLSFlwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hwYm1WaFoyVWdQU0JiZGwwN1hHNGdJQ0FnSUNBZ0lHUnZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWWdQU0IyTG5CaGNtVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHBibVZoWjJVdWNIVnphQ2gyS1R0Y2JpQWdJQ0FnSUNBZ2ZTQjNhR2xzWlNBb2RpQWhQVDBnZEdocGN5NXliMjkwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4cGJtVmhaMlV1Y21WMlpYSnpaU2dwTzF4dUlDQWdJSDA3WEc0Z0lDQWdSM0pwWkZKdmRYUmxjaTV3Y205MGIzUjVjR1V1Wm1sdVpFRnVZMlZ6ZEc5eVVHRjBhRUpsZEhkbFpXNGdQU0JtZFc1amRHbHZiaUFvWVN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lXRWdQU0IwYUdsekxtWnBibVJNYVc1bFlXZGxLR0VwTENCaVlTQTlJSFJvYVhNdVptbHVaRXhwYm1WaFoyVW9ZaWtzSUdrZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9ZV0ZiYVYwZ1BUMDlJR0poVzJsZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVNzck8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QmpiMjF0YjI1QmJtTmxjM1J2Y2pvZ1lXRmJhU0F0SURGZExDQnNhVzVsWVdkbGN6b2dZV0V1YzJ4cFkyVW9hU2t1WTI5dVkyRjBLR0poTG5Oc2FXTmxLR2twS1NCOU8xeHVJQ0FnSUgwN1hHNGdJQ0FnUjNKcFpGSnZkWFJsY2k1d2NtOTBiM1I1Y0dVdWMybGliR2x1WjA5aWMzUmhZMnhsY3lBOUlHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhSb0lEMGdkR2hwY3k1bWFXNWtRVzVqWlhOMGIzSlFZWFJvUW1WMGQyVmxiaWhoTENCaUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4cGJtVmhaMlZNYjI5cmRYQWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2NHRjBhQzVzYVc1bFlXZGxjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCc2FXNWxZV2RsVEc5dmEzVndXM1l1YVdSZElEMGdlMzA3SUgwcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYjJKemRHRmpiR1Z6SUQwZ2NHRjBhQzVqYjIxdGIyNUJibU5sYzNSdmNpNWphR2xzWkhKbGJpNW1hV3gwWlhJb1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJQ0VvZGlCcGJpQnNhVzVsWVdkbFRHOXZhM1Z3S1RzZ2ZTazdYRzRnSUNBZ0lDQWdJSEJoZEdndWJHbHVaV0ZuWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQzVtYVd4MFpYSW9ablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUhZdWNHRnlaVzUwSUNFOVBTQndZWFJvTG1OdmJXMXZia0Z1WTJWemRHOXlPeUI5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc5aWMzUmhZMnhsY3lBOUlHOWljM1JoWTJ4bGN5NWpiMjVqWVhRb2RpNXdZWEpsYm5RdVkyaHBiR1J5Wlc0dVptbHNkR1Z5S0daMWJtTjBhVzl1SUNoaktTQjdJSEpsZEhWeWJpQmpJQ0U5UFNCMkxtbGtPeUI5S1NrN0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMkp6ZEdGamJHVnpMbTFoY0NobWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdYM1JvYVhNdWJtOWtaWE5iZGwwN0lIMHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1IzSnBaRkp2ZFhSbGNpNW5aWFJUWldkdFpXNTBVMlYwY3lBOUlHWjFibU4wYVc5dUlDaHliM1YwWlhNc0lIZ3NJSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFp6WldkdFpXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmxhU0E5SURBN0lHVnBJRHdnY205MWRHVnpMbXhsYm1kMGFEc2daV2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISnZkWFJsSUQwZ2NtOTFkR1Z6VzJWcFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhOcElEMGdNRHNnYzJrZ1BDQnliM1YwWlM1c1pXNW5kR2c3SUhOcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2N5QTlJSEp2ZFhSbFczTnBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TG1Wa1oyVnBaQ0E5SUdWcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITXVhU0E5SUhOcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WkhnZ1BTQnpXekZkVzNoZElDMGdjMXN3WFZ0NFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVFdGMGFDNWhZbk1vYzJSNEtTQThJREF1TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyYzJWbmJXVnVkSE11Y0hWemFDaHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG5ObFoyMWxiblJ6TG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRmJNRjFiZUYwZ0xTQmlXekJkVzNoZE95QjlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIWnpaV2R0Wlc1MGMyVjBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJWbmJXVnVkSE5sZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RuTmxaMjFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY3lBOUlIWnpaV2R0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzJWbmJXVnVkSE5sZENCOGZDQk5ZWFJvTG1GaWN5aHpXekJkVzNoZElDMGdjMlZuYldWdWRITmxkQzV3YjNNcElENGdNQzR4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVm5iV1Z1ZEhObGRDQTlJSHNnY0c5ek9pQnpXekJkVzNoZExDQnpaV2R0Wlc1MGN6b2dXMTBnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmMyVm5iV1Z1ZEhObGRITXVjSFZ6YUNoelpXZHRaVzUwYzJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sWjIxbGJuUnpaWFF1YzJWbmJXVnVkSE11Y0hWemFDaHpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG5ObFoyMWxiblJ6WlhSek8xeHVJQ0FnSUgwN1hHNGdJQ0FnUjNKcFpGSnZkWFJsY2k1dWRXUm5aVk5sWjNNZ1BTQm1kVzVqZEdsdmJpQW9lQ3dnZVN3Z2NtOTFkR1Z6TENCelpXZHRaVzUwY3l3Z2JHVm1kRTltTENCbllYQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNGdQU0J6WldkdFpXNTBjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJR2xtSUNodUlEdzlJREVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIWmhjaUIyY3lBOUlITmxaMjFsYm5SekxtMWhjQ2htZFc1amRHbHZiaUFvY3lrZ2V5QnlaWFIxY200Z2JtVjNJSFp3YzJOZk1TNVdZWEpwWVdKc1pTaHpXekJkVzNoZEtUc2dmU2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQnVPeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdhaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE14SUQwZ2MyVm5iV1Z1ZEhOYmFWMHNJSE15SUQwZ2MyVm5iV1Z1ZEhOYmFsMHNJR1V4SUQwZ2N6RXVaV1JuWldsa0xDQmxNaUE5SUhNeUxtVmtaMlZwWkN3Z2JHbHVaQ0E5SUMweExDQnlhVzVrSUQwZ0xURTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hnZ1BUMGdKM2duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1pXWjBUMllvWlRFc0lHVXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITXhXekJkVzNsZElEd2djekZiTVYxYmVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXNWtJRDBnYWl3Z2NtbHVaQ0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXNWtJRDBnYVN3Z2NtbHVaQ0E5SUdvN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNaV1owVDJZb1pURXNJR1V5S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE14V3pCZFczbGRJRHdnY3pGYk1WMWJlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVrSUQwZ2FTd2djbWx1WkNBOUlHbzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVrSUQwZ2Fpd2djbWx1WkNBOUlHazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3hwYm1RZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpjeTV3ZFhOb0tHNWxkeUIyY0hOalh6RXVRMjl1YzNSeVlXbHVkQ2gyYzF0c2FXNWtYU3dnZG5OYmNtbHVaRjBzSUdkaGNDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2MyOXNkbVZ5SUQwZ2JtVjNJSFp3YzJOZk1TNVRiMngyWlhJb2RuTXNJR056S1R0Y2JpQWdJQ0FnSUNBZ2MyOXNkbVZ5TG5OdmJIWmxLQ2s3WEc0Z0lDQWdJQ0FnSUhaekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tIWXNJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeklEMGdjMlZuYldWdWRITmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0c5eklEMGdkaTV3YjNOcGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMXN3WFZ0NFhTQTlJSE5iTVYxYmVGMGdQU0J3YjNNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtOTFkR1VnUFNCeWIzVjBaWE5iY3k1bFpHZGxhV1JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hNdWFTQStJREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MWRHVmJjeTVwSUMwZ01WMWJNVjFiZUYwZ1BTQndiM003WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY3k1cElEd2djbTkxZEdVdWJHVnVaM1JvSUMwZ01TbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM1YwWlZ0ekxta2dLeUF4WFZzd1hWdDRYU0E5SUhCdmN6dGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQkhjbWxrVW05MWRHVnlMbTUxWkdkbFUyVm5iV1Z1ZEhNZ1BTQm1kVzVqZEdsdmJpQW9jbTkxZEdWekxDQjRMQ0I1TENCc1pXWjBUMllzSUdkaGNDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RuTmxaMjFsYm5SelpYUnpJRDBnUjNKcFpGSnZkWFJsY2k1blpYUlRaV2R0Wlc1MFUyVjBjeWh5YjNWMFpYTXNJSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFp6WldkdFpXNTBjMlYwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE56SUQwZ2RuTmxaMjFsYm5SelpYUnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWMlpXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQTdJR29nUENCemN5NXpaV2R0Wlc1MGN5NXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpJRDBnYzNNdWMyVm5iV1Z1ZEhOYmFsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFpsYm5SekxuQjFjMmdvZXlCMGVYQmxPaUF3TENCek9pQnpMQ0J3YjNNNklFMWhkR2d1YldsdUtITmJNRjFiZVYwc0lITmJNVjFiZVYwcElIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MGN5NXdkWE5vS0hzZ2RIbHdaVG9nTVN3Z2N6b2djeXdnY0c5ek9pQk5ZWFJvTG0xaGVDaHpXekJkVzNsZExDQnpXekZkVzNsZEtTQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBjeTV6YjNKMEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCaExuQnZjeUF0SUdJdWNHOXpJQ3NnWVM1MGVYQmxJQzBnWWk1MGVYQmxPeUI5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmNHVnVJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IzQmxia052ZFc1MElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dVdWRIbHdaU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNHVnVMbkIxYzJnb1pTNXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQmxia052ZFc1MEt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0dWdVEyOTFiblF0TFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl3Wlc1RGIzVnVkQ0E5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVkeWFXUlNiM1YwWlhJdWJuVmtaMlZUWldkektIZ3NJSGtzSUhKdmRYUmxjeXdnYjNCbGJpd2diR1ZtZEU5bUxDQm5ZWEFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR1Z1SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFZHlhV1JTYjNWMFpYSXVjSEp2ZEc5MGVYQmxMbkp2ZFhSbFJXUm5aWE1nUFNCbWRXNWpkR2x2YmlBb1pXUm5aWE1zSUc1MVpHZGxSMkZ3TENCemIzVnlZMlVzSUhSaGNtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCMllYSWdjbTkxZEdWUVlYUm9jeUE5SUdWa1oyVnpMbTFoY0NobWRXNWpkR2x2YmlBb1pTa2dleUJ5WlhSMWNtNGdYM1JvYVhNdWNtOTFkR1VvYzI5MWNtTmxLR1VwTENCMFlYSm5aWFFvWlNrcE95QjlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOXlaR1Z5SUQwZ1IzSnBaRkp2ZFhSbGNpNXZjbVJsY2tWa1oyVnpLSEp2ZFhSbFVHRjBhSE1wTzF4dUlDQWdJQ0FnSUNCMllYSWdjbTkxZEdWeklEMGdjbTkxZEdWUVlYUm9jeTV0WVhBb1puVnVZM1JwYjI0Z0tHVXBJSHNnY21WMGRYSnVJRWR5YVdSU2IzVjBaWEl1YldGclpWTmxaMjFsYm5SektHVXBPeUI5S1R0Y2JpQWdJQ0FnSUNBZ1IzSnBaRkp2ZFhSbGNpNXVkV1JuWlZObFoyMWxiblJ6S0hKdmRYUmxjeXdnSjNnbkxDQW5lU2NzSUc5eVpHVnlMQ0J1ZFdSblpVZGhjQ2s3WEc0Z0lDQWdJQ0FnSUVkeWFXUlNiM1YwWlhJdWJuVmtaMlZUWldkdFpXNTBjeWh5YjNWMFpYTXNJQ2Q1Snl3Z0ozZ25MQ0J2Y21SbGNpd2diblZrWjJWSFlYQXBPMXh1SUNBZ0lDQWdJQ0JIY21sa1VtOTFkR1Z5TG5WdWNtVjJaWEp6WlVWa1oyVnpLSEp2ZFhSbGN5d2djbTkxZEdWUVlYUm9jeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjNWMFpYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCSGNtbGtVbTkxZEdWeUxuVnVjbVYyWlhKelpVVmtaMlZ6SUQwZ1puVnVZM1JwYjI0Z0tISnZkWFJsY3l3Z2NtOTFkR1ZRWVhSb2N5a2dlMXh1SUNBZ0lDQWdJQ0J5YjNWMFpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9jMlZuYldWdWRITXNJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd1lYUm9JRDBnY205MWRHVlFZWFJvYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdZWFJvTG5KbGRtVnljMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVm5iV1Z1ZEhNdWNtVjJaWEp6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxaMjFsYm5SekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tITmxaMjFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWbmJXVnVkQzV5WlhabGNuTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUjNKcFpGSnZkWFJsY2k1aGJtZHNaVUpsZEhkbFpXNHlUR2x1WlhNZ1BTQm1kVzVqZEdsdmJpQW9iR2x1WlRFc0lHeHBibVV5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoYm1kc1pURWdQU0JOWVhSb0xtRjBZVzR5S0d4cGJtVXhXekJkTG5rZ0xTQnNhVzVsTVZzeFhTNTVMQ0JzYVc1bE1Wc3dYUzU0SUMwZ2JHbHVaVEZiTVYwdWVDazdYRzRnSUNBZ0lDQWdJSFpoY2lCaGJtZHNaVElnUFNCTllYUm9MbUYwWVc0eUtHeHBibVV5V3pCZExua2dMU0JzYVc1bE1sc3hYUzU1TENCc2FXNWxNbHN3WFM1NElDMGdiR2x1WlRKYk1WMHVlQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQmthV1ptSUQwZ1lXNW5iR1V4SUMwZ1lXNW5iR1V5TzF4dUlDQWdJQ0FnSUNCcFppQW9aR2xtWmlBK0lFMWhkR2d1VUVrZ2ZId2daR2xtWmlBOElDMU5ZWFJvTGxCSktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FXWm1JRDBnWVc1bmJHVXlJQzBnWVc1bmJHVXhPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrYVdabU8xeHVJQ0FnSUgwN1hHNGdJQ0FnUjNKcFpGSnZkWFJsY2k1cGMweGxablFnUFNCbWRXNWpkR2x2YmlBb1lTd2dZaXdnWXlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tDaGlMbmdnTFNCaExuZ3BJQ29nS0dNdWVTQXRJR0V1ZVNrZ0xTQW9ZaTU1SUMwZ1lTNTVLU0FxSUNoakxuZ2dMU0JoTG5ncEtTQThQU0F3TzF4dUlDQWdJSDA3WEc0Z0lDQWdSM0pwWkZKdmRYUmxjaTVuWlhSUGNtUmxjaUE5SUdaMWJtTjBhVzl1SUNod1lXbHljeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiM1YwWjI5cGJtY2dQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndZV2x5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEFnUFNCd1lXbHljMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjNWMFoyOXBibWRiY0M1c1hTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBaMjlwYm1kYmNDNXNYU0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNWMFoyOXBibWRiY0M1c1hWdHdMbkpkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0d3c0lISXBJSHNnY21WMGRYSnVJSFI1Y0dWdlppQnZkWFJuYjJsdVoxdHNYU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnYjNWMFoyOXBibWRiYkYxYmNsMDdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0lDQkhjbWxrVW05MWRHVnlMbTl5WkdWeVJXUm5aWE1nUFNCbWRXNWpkR2x2YmlBb1pXUm5aWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1ZrWjJWUGNtUmxjaUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1ZrWjJWekxteGxibWQwYUNBdElERTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlHa2dLeUF4T3lCcUlEd2daV1JuWlhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pTQTlJR1ZrWjJWelcybGRMQ0JtSUQwZ1pXUm5aWE5iYWwwc0lHeGpjeUE5SUc1bGR5Qk1iMjVuWlhOMFEyOXRiVzl1VTNWaWMyVnhkV1Z1WTJVb1pTd2daaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVXNJSFpwTENCMmFqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdOekxteGxibWQwYUNBOVBUMGdNQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3hqY3k1eVpYWmxjbk5sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtTG5KbGRtVnljMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaTV5WlhabGNuTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4amN5QTlJRzVsZHlCTWIyNW5aWE4wUTI5dGJXOXVVM1ZpYzJWeGRXVnVZMlVvWlN3Z1ppazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnb2JHTnpMbk5wSUR3OUlEQWdmSHdnYkdOekxuUnBJRHc5SURBcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoc1kzTXVjMmtnS3lCc1kzTXViR1Z1WjNSb0lENDlJR1V1YkdWdVozUm9JSHg4SUd4amN5NTBhU0FySUd4amN5NXNaVzVuZEdnZ1BqMGdaaTVzWlc1bmRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVmtaMlZQY21SbGNpNXdkWE5vS0hzZ2JEb2dhU3dnY2pvZ2FpQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWTNNdWMya2dLeUJzWTNNdWJHVnVaM1JvSUQ0OUlHVXViR1Z1WjNSb0lIeDhJR3hqY3k1MGFTQXJJR3hqY3k1c1pXNW5kR2dnUGowZ1ppNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFNBOUlHVmJiR056TG5OcElDc2dNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnFJRDBnWlZ0c1kzTXVjMmtnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1rZ1BTQm1XMnhqY3k1MGFTQXRJREZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RTQTlJR1ZiYkdOekxuTnBJQ3NnYkdOekxteGxibWQwYUNBdElESmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmFTQTlJR1ZiYkdOekxuTnBJQ3NnYkdOekxteGxibWQwYUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpxSUQwZ1psdHNZM011ZEdrZ0t5QnNZM011YkdWdVozUm9YVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFZHlhV1JTYjNWMFpYSXVhWE5NWldaMEtIVXNJSFpwTENCMmFpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXUm5aVTl5WkdWeUxuQjFjMmdvZXlCc09pQnFMQ0J5T2lCcElIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWldSblpVOXlaR1Z5TG5CMWMyZ29leUJzT2lCcExDQnlPaUJxSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1IzSnBaRkp2ZFhSbGNpNW5aWFJQY21SbGNpaGxaR2RsVDNKa1pYSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1IzSnBaRkp2ZFhSbGNpNXRZV3RsVTJWbmJXVnVkSE1nUFNCbWRXNWpkR2x2YmlBb2NHRjBhQ2tnZTF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCamIzQjVVRzlwYm5Rb2NDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzZ2VEb2djQzU0TENCNU9pQndMbmtnZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnYVhOVGRISmhhV2RvZENBOUlHWjFibU4wYVc5dUlDaGhMQ0JpTENCaktTQjdJSEpsZEhWeWJpQk5ZWFJvTG1GaWN5Z29ZaTU0SUMwZ1lTNTRLU0FxSUNoakxua2dMU0JoTG5rcElDMGdLR0l1ZVNBdElHRXVlU2tnS2lBb1l5NTRJQzBnWVM1NEtTa2dQQ0F3TGpBd01Uc2dmVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxaMjFsYm5SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhJRDBnWTI5d2VWQnZhVzUwS0hCaGRHaGJNRjBwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNVHNnYVNBOElIQmhkR2d1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmlJRDBnWTI5d2VWQnZhVzUwS0hCaGRHaGJhVjBwTENCaklEMGdhU0E4SUhCaGRHZ3ViR1Z1WjNSb0lDMGdNU0EvSUhCaGRHaGJhU0FySURGZElEb2diblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFl5QjhmQ0FoYVhOVGRISmhhV2RvZENoaExDQmlMQ0JqS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxaMjFsYm5SekxuQjFjMmdvVzJFc0lHSmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoSUQwZ1lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVm5iV1Z1ZEhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JIY21sa1VtOTFkR1Z5TG5CeWIzUnZkSGx3WlM1eWIzVjBaU0E5SUdaMWJtTjBhVzl1SUNoekxDQjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUhaaGNpQnpiM1Z5WTJVZ1BTQjBhR2x6TG01dlpHVnpXM05kTENCMFlYSm5aWFFnUFNCMGFHbHpMbTV2WkdWelczUmRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOWljM1JoWTJ4bGN5QTlJSFJvYVhNdWMybGliR2x1WjA5aWMzUmhZMnhsY3loemIzVnlZMlVzSUhSaGNtZGxkQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZZbk4wWVdOc1pVeHZiMnQxY0NBOUlIdDlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOWljM1JoWTJ4bGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHZLU0I3SUhKbGRIVnliaUJ2WW5OMFlXTnNaVXh2YjJ0MWNGdHZMbWxrWFNBOUlHODdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoYzNOaFlteGxSV1JuWlhNZ1BTQjBhR2x6TG1Wa1oyVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhVZ1BTQmZkR2hwY3k1MlpYSjBjMXRsTG5OdmRYSmpaVjBzSUhZZ1BTQmZkR2hwY3k1MlpYSjBjMXRsTG5SaGNtZGxkRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTaDFMbTV2WkdVZ0ppWWdkUzV1YjJSbExtbGtJR2x1SUc5aWMzUmhZMnhsVEc5dmEzVndYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmSHdnZGk1dWIyUmxJQ1ltSUhZdWJtOWtaUzVwWkNCcGJpQnZZbk4wWVdOc1pVeHZiMnQxY0NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Uc2dhU0E4SUhOdmRYSmpaUzV3YjNKMGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhVZ1BTQnpiM1Z5WTJVdWNHOXlkSE5iTUYwdWFXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkaUE5SUhOdmRYSmpaUzV3YjNKMGMxdHBYUzVwWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHRnpjMkZpYkdWRlpHZGxjeTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJVNklIVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWME9pQjJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFEb2dNRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCMFlYSm5aWFF1Y0c5eWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMUlEMGdkR0Z5WjJWMExuQnZjblJ6V3pCZExtbGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFlnUFNCMFlYSm5aWFF1Y0c5eWRITmJhVjB1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhjM05oWW14bFJXUm5aWE11Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObE9pQjFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dkaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlc1bmRHZzZJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQm5aWFJUYjNWeVkyVWdQU0JtZFc1amRHbHZiaUFvWlNrZ2V5QnlaWFIxY200Z1pTNXpiM1Z5WTJVN0lIMHNJR2RsZEZSaGNtZGxkQ0E5SUdaMWJtTjBhVzl1SUNobEtTQjdJSEpsZEhWeWJpQmxMblJoY21kbGREc2dmU3dnWjJWMFRHVnVaM1JvSUQwZ1puVnVZM1JwYjI0Z0tHVXBJSHNnY21WMGRYSnVJR1V1YkdWdVozUm9PeUI5TzF4dUlDQWdJQ0FnSUNCMllYSWdjMmh2Y25SbGMzUlFZWFJvUTJGc1kzVnNZWFJ2Y2lBOUlHNWxkeUJ6YUc5eWRHVnpkSEJoZEdoelh6RXVRMkZzWTNWc1lYUnZjaWgwYUdsekxuWmxjblJ6TG14bGJtZDBhQ3dnZEdocGN5NXdZWE56WVdKc1pVVmtaMlZ6TENCblpYUlRiM1Z5WTJVc0lHZGxkRlJoY21kbGRDd2daMlYwVEdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSmxibVJRWlc1aGJIUjVJRDBnWm5WdVkzUnBiMjRnS0hVc0lIWXNJSGNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaElEMGdYM1JvYVhNdWRtVnlkSE5iZFYwc0lHSWdQU0JmZEdocGN5NTJaWEowYzF0MlhTd2dZeUE5SUY5MGFHbHpMblpsY25SelczZGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1I0SUQwZ1RXRjBhQzVoWW5Nb1l5NTRJQzBnWVM1NEtTd2daSGtnUFNCTllYUm9MbUZpY3loakxua2dMU0JoTG5rcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRXVibTlrWlNBOVBUMGdjMjkxY21ObElDWW1JR0V1Ym05a1pTQTlQVDBnWWk1dWIyUmxJSHg4SUdJdWJtOWtaU0E5UFQwZ2RHRnlaMlYwSUNZbUlHSXVibTlrWlNBOVBUMGdZeTV1YjJSbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1I0SUQ0Z01TQW1KaUJrZVNBK0lERWdQeUF4TURBd0lEb2dNRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5vYjNKMFpYTjBVR0YwYUNBOUlITm9iM0owWlhOMFVHRjBhRU5oYkdOMWJHRjBiM0l1VUdGMGFFWnliMjFPYjJSbFZHOU9iMlJsVjJsMGFGQnlaWFpEYjNOMEtITnZkWEpqWlM1d2IzSjBjMXN3WFM1cFpDd2dkR0Z5WjJWMExuQnZjblJ6V3pCZExtbGtMQ0JpWlc1a1VHVnVZV3gwZVNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhSb1VHOXBiblJ6SUQwZ2MyaHZjblJsYzNSUVlYUm9MbkpsZG1WeWMyVW9LUzV0WVhBb1puVnVZM1JwYjI0Z0tIWnBLU0I3SUhKbGRIVnliaUJmZEdocGN5NTJaWEowYzF0MmFWMDdJSDBwTzF4dUlDQWdJQ0FnSUNCd1lYUm9VRzlwYm5SekxuQjFjMmdvZEdocGN5NXViMlJsYzF0MFlYSm5aWFF1YVdSZExuQnZjblJ6V3pCZEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQmhkR2hRYjJsdWRITXVabWxzZEdWeUtHWjFibU4wYVc5dUlDaDJMQ0JwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdJU2hwSUR3Z2NHRjBhRkJ2YVc1MGN5NXNaVzVuZEdnZ0xTQXhJQ1ltSUhCaGRHaFFiMmx1ZEhOYmFTQXJJREZkTG01dlpHVWdQVDA5SUhOdmRYSmpaU0FtSmlCMkxtNXZaR1VnUFQwOUlITnZkWEpqWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4OElHa2dQaUF3SUNZbUlIWXVibTlrWlNBOVBUMGdkR0Z5WjJWMElDWW1JSEJoZEdoUWIybHVkSE5iYVNBdElERmRMbTV2WkdVZ1BUMDlJSFJoY21kbGRDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc0Z0lDQWdSM0pwWkZKdmRYUmxjaTVuWlhSU2IzVjBaVkJoZEdnZ1BTQm1kVzVqZEdsdmJpQW9jbTkxZEdVc0lHTnZjbTVsY25KaFpHbDFjeXdnWVhKeWIzZDNhV1IwYUN3Z1lYSnliM2RvWldsbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKdmRYUmxjR0YwYURvZ0owMGdKeUFySUhKdmRYUmxXekJkV3pCZExuZ2dLeUFuSUNjZ0t5QnliM1YwWlZzd1hWc3dYUzU1SUNzZ0p5QW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2R3WVhSb09pQW5KMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCcFppQW9jbTkxZEdVdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnliM1YwWlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2FTQTlJSEp2ZFhSbFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNElEMGdiR2xiTVYwdWVDd2dlU0E5SUd4cFd6RmRMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUjRJRDBnZUNBdElHeHBXekJkTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1I1SUQwZ2VTQXRJR3hwV3pCZExuazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0drZ1BDQnliM1YwWlM1c1pXNW5kR2dnTFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaE5ZWFJvTG1GaWN5aGtlQ2tnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRJQzA5SUdSNElDOGdUV0YwYUM1aFluTW9aSGdwSUNvZ1kyOXlibVZ5Y21Ga2FYVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQXRQU0JrZVNBdklFMWhkR2d1WVdKektHUjVLU0FxSUdOdmNtNWxjbkpoWkdsMWN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWNtOTFkR1Z3WVhSb0lDczlJQ2RNSUNjZ0t5QjRJQ3NnSnlBbklDc2dlU0FySUNjZ0p6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHd2dQU0J5YjNWMFpWdHBJQ3NnTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNE1DQTlJR3hiTUYwdWVDd2dlVEFnUFNCc1d6QmRMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0TVNBOUlHeGJNVjB1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhreElEMGdiRnN4WFM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrZUNBOUlIZ3hJQzBnZURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1I1SUQwZ2VURWdMU0I1TUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGdVoyeGxJRDBnUjNKcFpGSnZkWFJsY2k1aGJtZHNaVUpsZEhkbFpXNHlUR2x1WlhNb2JHa3NJR3dwSUR3Z01DQS9JREVnT2lBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2VESXNJSGt5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVFdGMGFDNWhZbk1vWkhncElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZURJZ1BTQjRNQ0FySUdSNElDOGdUV0YwYUM1aFluTW9aSGdwSUNvZ1kyOXlibVZ5Y21Ga2FYVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlVElnUFNCNU1EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhneUlEMGdlREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1TWlBOUlIa3dJQ3NnWkhrZ0x5Qk5ZWFJvTG1GaWN5aGtlU2tnS2lCamIzSnVaWEp5WVdScGRYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdONElEMGdUV0YwYUM1aFluTW9lRElnTFNCNEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTjVJRDBnVFdGMGFDNWhZbk1vZVRJZ0xTQjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5KdmRYUmxjR0YwYUNBclBTQW5RU0FuSUNzZ1kzZ2dLeUFuSUNjZ0t5QmplU0FySUNjZ01DQXdJQ2NnS3lCaGJtZHNaU0FySUNjZ0p5QXJJSGd5SUNzZ0p5QW5JQ3NnZVRJZ0t5QW5JQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWEp5YjNkMGFYQWdQU0JiZUN3Z2VWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhjbkp2ZDJOdmNtNWxjakVzSUdGeWNtOTNZMjl5Ym1WeU1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFMWhkR2d1WVdKektHUjRLU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dMVDBnWkhnZ0x5Qk5ZWFJvTG1GaWN5aGtlQ2tnS2lCaGNuSnZkMmhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzWTI5eWJtVnlNU0E5SUZ0NExDQjVJQ3NnWVhKeWIzZDNhV1IwYUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNuSnZkMk52Y201bGNqSWdQU0JiZUN3Z2VTQXRJR0Z5Y205M2QybGtkR2hkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlU0F0UFNCa2VTQXZJRTFoZEdndVlXSnpLR1I1S1NBcUlHRnljbTkzYUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEp5YjNkamIzSnVaWEl4SUQwZ1czZ2dLeUJoY25KdmQzZHBaSFJvTENCNVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzWTI5eWJtVnlNaUE5SUZ0NElDMGdZWEp5YjNkM2FXUjBhQ3dnZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5KdmRYUmxjR0YwYUNBclBTQW5UQ0FuSUNzZ2VDQXJJQ2NnSnlBcklIa2dLeUFuSUNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGNuSnZkMmhsYVdkb2RDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzVoY25KdmQzQmhkR2dnUFNBblRTQW5JQ3NnWVhKeWIzZDBhWEJiTUYwZ0t5QW5JQ2NnS3lCaGNuSnZkM1JwY0ZzeFhTQXJJQ2NnVENBbklDc2dZWEp5YjNkamIzSnVaWEl4V3pCZElDc2dKeUFuSUNzZ1lYSnliM2RqYjNKdVpYSXhXekZkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0t5QW5JRXdnSnlBcklHRnljbTkzWTI5eWJtVnlNbHN3WFNBcklDY2dKeUFySUdGeWNtOTNZMjl5Ym1WeU1sc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2FTQTlJSEp2ZFhSbFd6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGdnUFNCc2FWc3hYUzU0TENCNUlEMGdiR2xiTVYwdWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtlQ0E5SUhnZ0xTQnNhVnN3WFM1NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUjVJRDBnZVNBdElHeHBXekJkTG5rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYSnliM2QwYVhBZ1BTQmJlQ3dnZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYSnliM2RqYjNKdVpYSXhMQ0JoY25KdmQyTnZjbTVsY2pJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1RXRjBhQzVoWW5Nb1pIZ3BJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dMVDBnWkhnZ0x5Qk5ZWFJvTG1GaWN5aGtlQ2tnS2lCaGNuSnZkMmhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbkp2ZDJOdmNtNWxjakVnUFNCYmVDd2dlU0FySUdGeWNtOTNkMmxrZEdoZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzWTI5eWJtVnlNaUE5SUZ0NExDQjVJQzBnWVhKeWIzZDNhV1IwYUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlDMDlJR1I1SUM4Z1RXRjBhQzVoWW5Nb1pIa3BJQ29nWVhKeWIzZG9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2RqYjNKdVpYSXhJRDBnVzNnZ0t5Qmhjbkp2ZDNkcFpIUm9MQ0I1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNuSnZkMk52Y201bGNqSWdQU0JiZUNBdElHRnljbTkzZDJsa2RHZ3NJSGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5KdmRYUmxjR0YwYUNBclBTQW5UQ0FuSUNzZ2VDQXJJQ2NnSnlBcklIa2dLeUFuSUNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSnliM2RvWldsbmFIUWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG1GeWNtOTNjR0YwYUNBOUlDZE5JQ2NnS3lCaGNuSnZkM1JwY0Zzd1hTQXJJQ2NnSnlBcklHRnljbTkzZEdsd1d6RmRJQ3NnSnlCTUlDY2dLeUJoY25KdmQyTnZjbTVsY2pGYk1GMGdLeUFuSUNjZ0t5Qmhjbkp2ZDJOdmNtNWxjakZiTVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLeUFuSUV3Z0p5QXJJR0Z5Y205M1kyOXlibVZ5TWxzd1hTQXJJQ2NnSnlBcklHRnljbTkzWTI5eWJtVnlNbHN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUVkeWFXUlNiM1YwWlhJN1hHNTlLQ2twTzF4dVpYaHdiM0owY3k1SGNtbGtVbTkxZEdWeUlEMGdSM0pwWkZKdmRYUmxjanRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhVm96U25CYVNFcDJaRmhTYkdOcE5YRmplVWx6U1c1T2RtUllTbXBhVmtwMllqTlJhVTlwU1dsTVEwcDZZak5XZVZreVZucEphbkJpU1drMGRVeDVOSFZNTVdSc1dXdE9kbUpIUlhaak0wcHFUREprZVdGWFVubGlNMVl3V2xoSmRXUklUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHFjemRSVlVaRVVWTjROVkV3UmtKalZVMDNVVlZHUkdOclRYTkxNRXBDVVZjeFJVOHdSa0pSTWpWRlRFZHNSVkZWUlhkUmVuUkNVVlYwTUZGNmRFcFJWV3hLVEVoR1ExRlZSblJSYVhoR1VWVkdWa3hGVmtKUlZrMXpVMVZHUWxwVGVFWlJWVVpVVEVaR1FsRlhkRU5QTVVaQ1VWUmtSVXhGT1VKUlZWVnpVakJHUWxKcGVFWlJWVVpHVEVWT1FsRldSVGRWVlVaQ1ZYbDRWRkZWUmtwTVJXUkNVVlZ2YzFOVlJrSlRVM2hFVVZWR1dFOHhSa0pSVmsxeldWVkdRbFZUZUVoUlZVWlRURVpHUWxGV1JYTlJNRVpDVmxSMFVsRlZUVEZTVTNoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVVNVFsRlZPSE5WVlVaQ1ZWTjRURkZWUmt4TVJtUkNVVlpqYzFOVlJrSlRVM2hTVVZWR1VreEZUa0pSVlUxelZGVkdRbFJUZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUalpTVTNoRVVWVkdSRTh3YkVKUk1IZHpZVEJLUWxGVlRUZFJWVVpDVWtONFJGRlZSa1JNUlVaQ1ZVVlJjMU5WUmxCUmVuUkNVVlpDV2t4SGRFUlJWVVpZVHpCR1FsVllhRU5QTUd4Q1VUQnJjMWt3UmtKaVZVbHpVbFZHUWxaVGVFWlJWVVpVVEVWT1FsRldSWE5TVlVaQ1ZYbDRSRkZWUmxSTVJWWkNVVlpOYzFOVlJrSmtNRWx6VWxWR1FsVjVlRXBSVlVaWVR6RkdRbEZVVmtSTVNFWkRVVlZHUWt4RlZrSlJWVVZ6VmpCR1FtUXdTVGRWVlVaQ1ZYbDRlRkZyUmtKUlUzaEdVVlZHUWt4R1pFSlJWbU0zVlZWR1FtSkZZM05VTUVaQ1VsTjRTRkZWUmtkTVJWWkNVVlZWYzFFd1JrSlZWSFJTVVZWR1ZFeEZNVUpSVlUxelVqQkdRbEpEZUVSUlZVWkVURVZPUWxGVk9EZFZWVVpDVlhsNFRsRlZSa1JNUldSQ1VWVlJjMUV3UmtKUmVYaEVVVlZHVWs4eFJrSlJWazF6VlRCR1FsTlRlRWhSVlVaTFRFVnNRbEZWYTNOUk1FWkNZakJKTjFWVlJrSlZlWGhVVVZWR1NreEZaRUpSVlc5elUxVkdRbE5UZUVSUlZVWlFUekJzUWxGVlkzTlJNRVpDVVhwMFNsRlZUVE5UUTNoWVVWVkdSRTh3UmtKUlZWRnpVVEJHUWxGNWVFSlJWVnBGVEVWc1FsSlZUVGRSVlVaSFYxTjRkbEZyUmtKVFZIUkNVVlZzY1ZGcWRFcFJWWFJLVEVkMFJGRlZSblJSYVhoRVVWVkdUa3hGVmtKUlZrMXpVVEJHUWxSVWRGSlJWVVo1VVdsNFRsRlZSa1JNUldSQ1VWVlJjMUV3UmtKUmVYaEVVVlZHVEU4eFJrSlJWazF6VkZWR1FsRjVlRWhSVlVaRlRFVk9RbEZWVFhOUk1FWkNVM3AwVWxGVlRuZFJlWGhLVVZWR1NreEZWa0pSVlZWelVqQkdRbEo1ZUROUmEwWkNaREJKYzFFd1JrSlJlWGhVVVZWR1ZFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUSjRSVXhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelZEQkdRbFI1ZUVaUlZVWkdURVZPUWxGVlRUZFZWVVpFVDFWSmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpaREJLUWxGWVpFTk1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5WU1EzaEtVVlZHU2t4RlZrSlJWVlZ6VVRCR1FsRjVlRTVSVlVaT1RFVnNRbEZWYTNOU1ZVWkNVbE40UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVkhSYVVWVk9ORkZwZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTAzVjFWR1JHVkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVUekZzUWxFeWFFTk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYcDBXbEZWVG05UmFYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRWhSVlVaSVRFVjBRbEZWYzNOUk1FWkNVWHAwVkZGVlRqWlJhblJvVVZWR1RrOHhiRUpSTUdkelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkU4eGJFSlJNMmhEVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY2ZEZwUlZVNXZVV2w0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVUekZzUWxFeldrUk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVHpGT1FsRXphRU5QTUd4Q1VUQjNjMUV3UmtKUmVuUktVVlZPYWt4SGRFUlJWVVpVVEVWa1FsRllhRU5NUmxaQ1VWUlNRMHhGVGtKUlZUQnpVbFZHUWxKVGVFUlJWVVpPVHpGR1FsRXpVa1JNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVlZVWkVZV3RKYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhwMFVsRlZUbkZSYVhoS1VWVkdTa3hGZEVKUlZYTnpVakJHUWxKNWVFWlJWVVpHVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkU4eFJrSlJla1pFVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJXeENVVlZyYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFelNrTk1SWFJDVVZWemMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZVM1YxVkdSR1ZGU1hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVVE5DUTB4RmRFSlJWWE56VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVHpKa1ExRlZUakJSYVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZVM1lqQktRbEV5V1hOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHlPVU5SVlU1eFVsTjRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhNVVZWR1RFeEZUa0pSVlUxelZGVkdRbFJUZUVaUlZVWkdUek5rUTFGVlRuTlJhWGhNVVZWR1RFeEZUa0pSVlUxelZGVkdRbFJUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwME0xRnJSa1JoYTBselV6QkdRbE41ZUVSUlZVWkVURVZXUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRE5SYTBaRVkydEpjMU13UmtKVGVYaEVVVlZHUkV4RlZrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SNFVXdEdSR1ZGU1RkaU1FcENVVlZGYzFFd1JrSlJlblJ3VVd0R1JGUkVjemRpTUVwQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SVVVWVk5lRkZxZEZKUlZVNUZURVU1UWxGVk9ITlRNRVpDVTNsNFJGRlZSa1JQTUd4Q1VUSndRMHhGVGtKUlZVMDNVMVZHUkZKRGR6UlJNRVpDVm5sNFNGRlZSbGxQTVVaQ1VUQnJjMVF3UmtKVWVYaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEV5YUVkTVJVNUNVVlZOTjFOVlJrUlVRM2R5VVd0R1FsRjZkRUpSVlVaRlRFVk9RbEZWVFhOUlZVVjZVVEJSYzFOVlJYbFJNRTAzVVZWRmVsRXhhM05PUlZKQ1VWaGtRMDh3UmtKaFZWSjVVWHAwU2xGWVRrVlRVM2gyVVd0R1FtSlZTWE5aVlVaQ1kxVkpjMUpWUmtKU1UzaFNVVlZGTUZGcGVFWlJWVVpVVEVac1FsRlliRU5QTVVaQ1VWaG9TRXhIYkVOUlYzUkpVWHAwVWxGWGVFbFBSVlZ6VG10S1FsRlZSWE5TVlVaQ1VWTjRjRkZyUmtKbFZVazNWVlZHUW1OcldYTmhNRXBDVVZkRmMxSXdSa0paYVhob1VWVkdhRXhGVGtKUlZrVTNWVlZHUW1SVlRYTmhWVXBDVVZacmMxSXdSa0pYYVhoYVVWVkdXa3hGVGtKUlYwVTNWVlZHZVZKSWFFaE1SbVJDVVZVd2MxSXdSa0poTUVselUxVkdRbE5UZUVSUlZVWkVUekZHUW1Nd1VqWlJhWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURWRHUWxGWFJYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMVpWUmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaTVRFVTVRbEZWUlhOVFZVWkNVMU40V0ZGVlJsaE1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hHUmtKUlZrVnpVVEJHUWxGNWVGUlJWVVpVVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFWVlJrSlZVM2hFVVZWR1JFeEdaRUpSVm1OelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSbk5TVTNoRVVWVkdjbEpUZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFVGpCamMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUxelUxVkdRbEo1ZUZCUlZVWkNURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlZaQ1VWVTBjMUV3UmtKVVUzaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JFNVZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFZsRlZSa0pNUlU1Q1VWVk5jMU5WUmtKU2VYaFFVVlZHUWt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNWVU40UkZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk5NMUY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaGFVVlZHV2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVZbXROYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlhWVVpDVjFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlNNalZFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEdWa0pSVlVWelVUQkdRbEY2ZEZwUlZVNXhVV2w0VUZGVlJrSk1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVaV1FsRlZSWE5STUVaQ1VYbDRTbEZWUmtoTVJUbENVVlZGYzFNd1JrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbFY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHYjFGNWVFUlJWVVp1VVhsNFJGRlZSa1JQTVVaQ1VWaG9SVXhGVGtKUldHUkZURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZZelZTUTNoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWV1FsRlZWWE5WVlVaQ1ZWTjRSbEZWUmtaTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pSZW1SRFRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhHVmtKUlZVVnpVVEJHUWxGNmRGcFJWVTV2VVdsNFNsRlZSa3BNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VXpCR1FsTjVlRmhSVlVaWVRFVldRbEZWVlRkYU1FcENVVEp3UkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOVE1FWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZW5SdVVXdEdSR05yU1hOVE1FWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlblJvVVZWT2NWRjZkRnBSVlRsRlRFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdRazh4UmtKUk1taERURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VqQm5jMU5WUmtKVFUzaEVVVlZHUkV4R1pFSlJWbU56VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR5VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVl3UmtKV2VYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRlpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV3hDVVZWemMxUXdSa0pSVTNoTVVWVkdTa3hGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJYUkNVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGWE5VUk1SVTVDVVZjeFJFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZYUjVVbE40U2xGVlJrcE1SMnhEVVZWR2NGRnBlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0V0ZGVlJsaE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVVNVFsRlZPSE5TVlVaQ1VsTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUxelUxVkdRbEo1ZUZCUlZVWkNURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKVlEzaEVVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1dlVtbDRjRkZyUmtKaFZVbHpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5XVlVaQ1VWTjRSRkZWUmtSUE1XeENVVE5hUTB4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFaEdRMUZWUmxSTVJVNUNVVlZOYzFNd1JrSlRlWGhHVVZWR1JreEZUa0pSVlUwM1YxVkdSRTFWU1hOUk1FWkNVWGw0UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpWbFZHUWxGVGVFUlJWVVpFVEVWc1FsRlZZM05VTUVaQ1VWTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUV4UlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVWMlVXbDRSRkZWUlhKUmFYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHVkZVWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVYwUWxGVmEzTlJNRVpDVVhsNFdsRlZSbHBNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZOZUZGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVmtsTVJXeENVVlZyYzFRd1JrSlVlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VmxWR1FsRlRlRVJSVlVaRVRFVnNRbEZWWTNOVU1FWkNVVk40UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoR1VWVkdUVXhGVGtKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVpHdFJjMU5WUmtKVFUzaFFVVlZHVUV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVGWlJWVVpDVEVWT1FsRlZUWE5UVlVaQ1VubDRVRkZWUmtKTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZWa0pSVlhkelVUQkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZaREpTUTNoS1VWVkdTa3hGYkVKUlZXdHpVakJHUWxKNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hJVVZWR1NFeEZPVUpSVlRoelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJla1pGVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZrUWxGVlkzTlVNRVpDVkhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWklUVlZSYzFOVlJrSlRVM2hPVVZWR1RreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMVpWUmtKUlUzaEVVVlZHUkV4RmJFSlJWV056VkRCR1FsRlRlRVJSVlVaTVRFVldRbEZWVlhOU1ZVWkNVbE40UmxGVlJrWk1SV3hDVVZWcmMxSlZSa0pTVTNoR1VWVkdSa3hGVmtKUlZWVnpVMVZHUWxOVGVFWlJWVVpHVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVkZjMUpWUmtKaGExRnpVVEJHUW1GVlVYTlJNRVpDVVhwMGFGRlZUVEZTVTNoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlhOelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVVnpVbFZHUW1WclRYTlJNRVpDWlZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHU0dWRlZYTlRWVVpDVTFONFRsRlZSazVNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOV1ZVWkNVVk40UkZGVlJrUk1SV3hDVVZWamMxUXdSa0pSVTNoRVVWVkdURXhGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJWWkNVVlZWYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZXUWxGVlZYTlNWVVpDVWxONFJsRlZSa1pNUld4Q1VWVnJjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFVk9RbEZWUlhOU1ZVWkNZV3RSYzFFd1JrSmhWVkZ6VVRCR1FsRjZkR2hSVlUweFVsTjRUbEZWUms1TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUZaUlZVWkNURVZPUWxGVlRYTlRWVVpDVW5sNFVGRlZSa0pNUlU1Q1VWVnpjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGYkVKUlZXdHpVbFZHUWxKVGVFWlJWVVpHVEVWV1FsRlZWWE5UVlVaQ1UxTjRSbEZWUmtaTVJVNUNVVlZGYzFKVlJrSmxhMDF6VVRCR1FtVlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJraGxSVlZ6VTFWR1FsTlRlRXhSVlVaTVRFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNmRGSlJWV1J6VVhsNFRGRlZSa3hNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4R1ZrSlJWVVZ6VVRCR1FsRjVlRXBSVlVaSVRFVTVRbEZWUlhOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxSXdSa0pTZVhoR1VWVkdSa3hGVmtKUlZtOXpVVEJHUWxkVGVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaSVlVVk5jMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVZVVZKYzFOVlJrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRUZFZWVVpJWVVWSmMxUlZSa0pVVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVGWlJWVVpDVEVWT1FsRlZUVGRYVlVaRVYybDRVRkZWUmtKTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbEZUZUVSUlZVWkVUekprUTFGVlRtRk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVMVZHUWxOVGVFUlJWVVpFVEVWMFFsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVTV2VWtONFJGRlZSa1JNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwYmxGclJrUmhSVWx6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFeWFFTk1SWFJDVVZWcmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZrZFZGcGVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRURkZWUmtwTVJVNUNVVlZOYzFZd1JrSldlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY2ZEc1UmEwWkVZVVZOYzFRd1JrSlVlWGhFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZUZGlNRXBDVVRGdmMxTlZSa0pUVTNoS1VWVkdTa3hGWkVKUlZXTnpVekJHUWxOVGVFUlJWVVpFVEVaa1FsRldZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrUk5WVWx6VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTk4ySXdTa0pSTW5oRFRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdSRTB3U1hOU1ZVWkNVbE40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY2ZEhaUmEwWkVZVVZOYzFOVlJrSlRVM2hHVVZWR1JreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVkhRelVXdEdSR05yVFhOUk1FWkNVbE40UkZGVlJrUk1SV3hDVVZWcmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMDNaREJLUWxFelNrTk1SVEZDVVZVd04yTlZTa0pSTVZFM1lWVktRbEV3YnpkWFZVWkVWRU40UkZGVlJrUk1SVTVDVVZWTk4xVlZSbk5SYTFselVUQkdjbEZyVlhOUk1FWkVVa040UkZGVlJrUlBNVVpDVWxVMGMxTXdSa0pUZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVGWlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaUE1XeENVbGRvUTB4RmRFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMDNXakJLUWxFelFrTk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpZVlZLUWxGWGJFTk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaFdVVlZHUkV4R1RrSlJWazF6VWxWR1FsSlRlRVJSVlVaRVR6STVRMUZWVm5OU1UzaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVGUlJWVVpVVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTWpsRFVWVk9kMUpUZUV4UlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkSFpSYTBaRVltdEpjMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4ySXdTa0pSTW1oRFRFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUbmRSYVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTVSVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVakJuYzFOVlJrSlRVM2hRVVZWR1VFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU01FWkNVbmw0U0ZGVlJraE1SVTVDVVZWTk4xZFZSa1JOVlUxelUxVkdRbE5UZUV4UlZVWk1URVZrUWxGVlkzTldWVVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEtVVlZHVEV4Rk9VSlJWVVZ6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVERCSmMxRXdSa0pMTUVselVUQkdRbEY2ZEZwUlZVNHdVa040UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5kUmFYaE1VVlZHVEV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFNVJWVVpPVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWTjFvd1NrSlJNMHBFVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT01sRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5VZEhaUmEwWkNVbE40VkZGVlJsUlBNbVJEVVZWT05sSkRlRXhSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGTVVKUlZUQnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJURkNVVlV3YzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVV4UWxGVk1ITlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMDNXVlZHUkdKRldUZFZWVVpFVkVONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZzVVV4RlRrSlJWVTAzVTFWRk1WTnJPSE5rTUVwQ1VWVmpjMUl3UmtKWFEzaFdVVlZHV2t4RlRrSlJWVTF6VTFWR1FsTlRlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxWlZSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpNVEVVNVFsRlZSWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlVRM2hFVVZWR1RFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa0pNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZzTUZKRGVIQlJNRVpDVjFONFNGRlZSbmRSYVhoV1VWVkdlRkZwZUVwUlZVWktUekZHUWxFelNrTk1SV3hDVVZWcmMxUXdSa0pVZVhoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUWxGNmRGSlJWVTV4VVdsNFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5OU1EzaFFVVlZHVUV4RlZrSlJWVlZ6VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWlBNV3hDVWxkNFEweEZiRUpSVld0elZqQkdRbFo1ZUVoUlZVWklURVZXUWxGVlZYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMVpWUmtKUlUzaEVVVlZHUkV4RmJFSlJWV056VkRCR1FsRlRlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpWakJHUWxaNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZXUWxGWGVFVk1SVTVDVVZkMFJVeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNTNVbWw0U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZW5SdVVXdEdSRlJwZUV4UlZVWk1URVZXUWxGVlZYTldNRVpDVm5wMGJsRnJSa1JpUlVselVqQkdRbEo1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMVl3UmtKV2VYaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRlpSVlVaQ1RFVk9RbEZWVFhOVFZVWkNVbmw0VUZGVlJrSk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVmhDUTB4RlRrSlJWemxEVEVWT1FsRlZUWE5STUVaQ1VYcDBhRkZWVFhwU1EzaEVVVlZHUkU4eGJFSlJNRmx6VkRCR1FsUjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9jMUZwZUVoUlZVWklURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaFdVVlZHUWt4RlRrSlJWVTF6VTFWR1FsSjVlRkJSVlVaQ1RFVldRbEZWVlhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSk5NRWx6VVRCR1FrMXJTWE5STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVE5TUlU4eFJrSlJNRkZ6VkRCR1FsUjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VmxGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGYkVKUlZYTnpWREJHUWxGVGVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZWa0pSVjBselVUQkdRbGxUZUVSUlZVWkVURVZPUWxGVlJUZFZWVVpFWTJ0TmMxUXdSa0pVZVhoUVVWVkdVRXhGVGtKUlZVMDNVMVZHUkdKclNYTlJNRVpDVVhwMFNsRlZaRkJNUkZwRFVWVkdVa3hGWkVKUlYyaERURVpXUWxGWGJFTk1SVTVDVVZWTk4xVlZSa1JhUTNoS1VWVkdTa3hGZEVKUlZYTnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVdrTjRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZkRUpSVlhOelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlNWVVpDVWxSMFdsRlZUWHBSYVhoTVVWVkdURXhGVmtKUlZWVnpVVEJHUWxGNmRGcFJWVTVUVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFOHhUa0pSTW1oRFR6RkdRbEV3VVhOVU1FWkNWSGw0VEZGVlJreE1SVTVDVVZWTk4xTlZSa1JoYTBselVUQkdRbEY2ZEVwUlZXUlFURVJvUTFGVlJsUk1SV1JDVVZkd1EweEdWa0pSVjNSRFRFVk9RbEZWVFRkVlZVWkVXbWw0U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTTFKRFRFVnNRbEZWYTNOVFZVWkNVMU40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWa1FsRlZZM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWTk1WRnBlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNWSFJhVVZWTmRsRnBlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFZGRlZUbmRSZW5SU1VWVk9SVXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlNNRVpDVW5sNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMHBFVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSUE1HeENVVEpvUTB4RlRrSlJWVTAzVTFWR01WTkZPSE5hTUU1Q1VWWmpjMUl3UmtKaWEwbHpWbFZHUW1Jd1NYTlJNRVpDVVhwMFVsRlZUbkZSYVhoS1VWVkdTa3hGT1VKUlZUaHpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVEo0UTB4RlpFSlJWV00zVjFWR1JGRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZW5SYVVWVk9hVXhGT1VKUlZUaHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFVd1JrUmlhMGx6VlZWR1FsVlRlRVJSVlVaRVRFVjBRbEZWYzNOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxSlZSa0pTVkhSU1VWVk5lRkZwZUZCUlZVWlFURVU1UWxGVk9ITlJNRVpDVVhsNFVGRlZSbEJNUlZaQ1VWVlZjMUV3UmtKUmVuUktVVlZOTTFGcGVFUlJWVVpFVHpCc1FsSXdPSE5PUlU1Q1VWaFdRMHhGWkVKUlV6bERURVpXUWxGWFpFUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRTh4UmtKUk1taEVURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaFlVVlZHV0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoWVVWVkdXRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWTk5WSkRlRkJSVlVaUVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFWVlJrWk9WVWx6VkRCR1FsUjVlRVpSVlVaR1RFZE9RbEZYVFhOU1ZVWkNVbE40UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVaR1FsRldSWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWHAwU2xGVlRuZFNhWGhFVVZWR1JFOHdiRUpUVlZGelkxVk9RbEZYWkVOTVJXUkNVVmRvUTB4R1ZrSlJWMnhEVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVVmhLUTB4SGJFTlJWbVJFVHpGR1FsWnJZM05UVlVaQ1UxTjRTbEZWUmtwTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeElWa05SVlVZeFVXbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMDFVWGw0U2xGVlJrcE1SMFpDVVZkRmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNWVlZHUkdSclNYTlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VmxWR1FsRlRlRVJSVlVaRVRFVnNRbEZWWTNOVU1FWkNVVk40YUZGVlJtaE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5TVlVaQ1pVVkpjMUV3UmtKa01FbHpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXpRa1ZNUld4Q1VWVnJjMVV3UmtKVmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoV1VWVkdRa3hGVGtKUlZVMXpVMVZHUWxKNWVGQlJWVVpDVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFsVlJrSlpVM2hFVVZWR1JFeEZWa0pSV0VwRFRFVk9RbEZZUmtOTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWVmRsSlRlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVlIwYUZGVlRsTk1SVEZDVVZVd2MxRXdSa0pSZVhoV1VWVkdRa3hGVGtKUlZVMXpVMVZHUWxKNWVGQlJWVVpDVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFOVlJrSlRVM2hFVVZWR1JFeEhUa0pSVjAxelVsVkdRbUZGVFhOUk1FWkNXakJOYzFFd1JrSlJlblJvVVZWTk1WRjVlRkJSVlVaUVRFVk9RbEZWVFhOV1ZVWkNVVk40UkZGVlJrUk1SV3hDVVZWamMxUXdSa0pSVTNoVVVWVkdWRXhGWkVKUlZXTnpWVEJHUWxWNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JNUld4Q1VWVmpjMVF3UmtKUlUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNWbWw0UkZGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdNRkpUZUVSUlZVWjZVbE40UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1psYTFselZEQkdRbFI1ZUZSUlZVWlVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVYaEtVVlZHU0V4Rk9VSlJWVVZ6VXpCR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0paYVhoRVVWVkdhRXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTB4VVhsNFJGRlZSa1JQTUd4Q1UxVXdjMlZWU2tKUlYwMXpVakJHUW1OclNYTldWVVpDWXpCSmMxUlZSa0pVVTNoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVHpGR1FsSlViRU5NUld4Q1VWVnJjMVV3UmtKVmVYaElVVlZHU0V4RlZrSlJWVlZ6VVRCR1FsRjZkRkpSVlU1MVVXbDRURkZWUmt4TVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JNUlRGQ1VWVXdjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VWxWR1FsSlVkRnBSVlU0eVVYbDRTbEZWUmtwTVJYUkNVVlZ6YzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFWkd0SmMxTXdSa0pUZVhoS1VWVkdTa3hGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsTjRTRkZWUmtoTVJYUkNVVlZ6YzFFd1JrSlJlWGhPVVZWR1RreEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZUZGFNRXBDVVROU1JFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWlNURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUkdSclNYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTAzV2pCS1FsRXlVWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUwM1dqQktRbEV4VVhOVFZVWkNVMU40U0ZGVlJraE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGJsRnJSa1JPVlVselUxVkdRbE5UZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaElVVlZHU0V4RlpFSlJWV056VWxWR1FsSlVkSFpSYTBaRVkydEpjMVV3UmtKVmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwY0ZGclJrUmphMGszV1ZWR1JGTnFkRlJSVlU1TFR6RkdRbEV3VVhOVk1FWkNWWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoV1VWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWc1FsRlZjM05VTUVaQ1VWTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaeFVXbDRSRkZWUm5CUmFYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1NFNVZUWE5UVlVaQ1UxTjRXbEZWUmxwTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pSTTFKRFRFVnNRbEZWYTNOV1ZVWkNWbE40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZW5SU1VWVk9NRkZwZUV4UlZVWk1URVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VlRCR1FsVjVlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVkhSYVVWVk9NbEY1ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFZGRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHTnJTWE5UVlVaQ1UxTjRSRkZWUmtSTVJsWkNVVlpWYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRlpSVlVaV1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoR1VWVkdSazh5WkVOUlZVNDJVa040VmxGVlJsWk1SV1JDVVZWamMxSlZSa0pTVTNoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEdSa0pSVmtWelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlJNRVpDVVhwMGJsRnJSa1JPVlUxelYxVkdRbGRUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVuUm9VVlZPY1ZGNmRGcFJWVTVGVEVaV1FsRldWWE5STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZPUWxGNU9VTlBNVVpDVVRCUmMxUXdSa0pVZVhoYVVWVkdXa3hGVGtKUlZVMDNVMVZHUkdWRlNYTlJNRVpDVVhwMFNsRldUazVNUnpsRFVWVkdWRXhGWkVKUlYyaERURVpXUWxGWGJFTk1SVTVDVVZaTmMxSlZSa0pTVTNoRVVWVkdWRXhGVmtKUlZWVnpWRlZHUWxSVGVFWlJWVVpHVEVaR1FsRldSWE5TVlVaQ1VsTjRUbEZWUms1TVJWWkNVVlZWYzFJd1JrSldlblJTVVZWT05GSlRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0VWxGVlJsSk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRTh4UmtKUk0yaERURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5OMWRWUmtKU1UzaFFVVlZHVUU4eFJrSlJNalZEVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJrWkNVVlpGYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZsVkdRbEZUZUVSUlZVWkVURVZzUWxGVmEzTlVNRVpDVVZONFNsRlZSa3BNUjFaQ1VWWkZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pqYTBselVUQkdRbU5WU1hOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRKNFJVeEZiRUpSVld0elVsVkdRbEpUZUVoUlZVWklURVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZUbUZNUlhSQ1VWVnpjMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVTNWMVZHUkdWRlNYTlRNRVpDVTNsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVkhSdVVXdEdSR1ZGU1hOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZW5SMlVXdEdRbEpUZUZSUlZVWlVUekprUTFGVlRqQlJhWGhLVVZWR1NreEZWa0pSVlZWelVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VUSm9RMHhGVmtKUlZWVnpVakJHUWxKNWVGSlJWVVpTVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVEpvUTB4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlRtdE1SVlpDVVZWVmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMXpWRlZHUWxSVGVFWlJWVTVyVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrUldRM2hLVVZWR1NreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVkZkUmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVakJHUWxKNWVFWlJWVVpHVHpJNVExRlZUbGRNUld4Q1VWVnJjMVJWUmtKVVUzaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbFIwTTFGclJrWmhSVWx6VTFWR1FsTlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JrOTZVa05SVlU1NVVXbDRTbEZWUmtwTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZiRUpSVld0elVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZGxWVXBDVVROU1EwOTZXa05SVlVaT1QzcFNRMUZWVGtsTVJXeENVVlZyYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelUxVkdRbE5UZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwME5WRnJSa1JrUlVrM1kxVktRbEV3YnpkaFZVcENVVEJ2TjJOVlNrSlJWVEEzWWpCS1FsRXdaM05UVlVaQ1UxTjRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdUek5rUTFGVlRtOVJhWGhLVVZWR1NreEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVk4wNUZTa0pSTTBwRFRFVnNRbEZWYTNOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNmREVlJhMFpFWkVWSk4wNXJTa0pSVlRBM1RrVktRbEV3WjNOVFZVWkNVMU40U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoS1VWVkdTa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpOc1ExRlZUakJSYW5SNFVXdEdSRk5xZEhCUmEwWkVVMnAwYmxGclJrUlNRM2hLVVZWR1NreEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZUZGlNRXBDVWxabmMxSlZSa0pTVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVkc1ExRlZSbFpNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKc1ExRlZUbmRTUkhSb1VWVk9TMDh4VGtKUk1HODNWVlZHUkZKRGVFcFJWVVpLVEVVeFFsRlZNSE5TTUVaQ1VubDRTbEZWUmtwTVIwWkNVVlV3YzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWVVWTmMxUlZSa0pVVTNoRVVWVkdSRXhGZEVKUlZYTnpVbFZHUWxKVGVFUlJWVVpFVHpGR1FsRXlXWE5TVlVaQ1VsTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhXVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVUekZzUWxFeGIzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMVZWUmtKVlUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV6UWtOTVJXeENVVlZyYzFJd1JrSlNlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUZKUlZVWlNURVZXUWxGVlZYTlJNRVpDVVhwMFdsRlZUakpSYVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUldSQ1VWVmpjMUV3UmtKUmVuUmFVVlZPTkZGcGVFcFJWVVpLVEVWMFFsRlZjM05TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxGNlpFTk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVHpKa1ExRlZSa1pNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWa1FsRlZZM05STUVaQ1VYcDBXbEZWVGpSUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOVE1FWkNVM2w0UkZGVlJrUk1SVEZDVVZVd2MxSXdSa0pTZVhoRVVWVkdSRTh5WkVOUlZVWkdURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGWkVKUlZXTnpVVEJHUWxGNmRGSlJWVTE2VWtONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPVVV4RlRrSlJWVTAzVTFWR1JsUlRlRE5SYTBaQ1dWTjRTRkZWUm5kUmFYaFdVVlZHZUZGcGVFNVJWVVpPVEVWV1FsRlZWWE5STUVaQ1ZYbDRSbEZWUmtaTVJVNUNVVlpOYzFKVlJrSlNVM2hPVVZWRmVWRjVlRVpSVlVaR1RFVmtRbEZXWXpkVlZVWkVaR3RqYzFOVlJrSlRVM2hhVVZWR1dreEZaRUpSVldOelZsVkdRbFpUZUVSUlZVWkVURWRPUWxGWFRYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEpVVGtWTVJYUkNVVlZ6YzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNNRVpDVW5sNFdsRlZSbHBNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaR1R6RnNRbEY2UmtSTVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEdiRUpSVm10elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUalpSYVhoS1VWVkdTa3hGTVVKUlZUQnpVakJHUWxKNWVFWlJWVVpHVEVWT1FsRlZUVGRYVlVaRVlVVkpjMU13UmtKVGVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpWRlZHUWxSVGVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaUE1tUkRVVlZPTmxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRqSlJhWGhPVVZWR1RreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRXlhRVpNUlRGQ1VWVXdjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVnpVakJHUWxKNWVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZW5Sb1VWVk9kVkpVZEZwUlZVNUZURVV4UWxGVk1ITlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVpWUmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaTVRFVTVRbEZWUlhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRTbEZWUmtwTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVsVkdRa3d3U1hOUk1FWkNTekJKYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTFwRlRFVnNRbEZWYTNOVFZVWkNVMU40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SYVVWVk9hMHhGYkVKUlZXdHpWVEJHUWxWNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5OUmFYaE9VVlZHVGt4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFWldRbEZWUlhOUk1FWkNVWHAwYmxGclJrUlhhWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pQTWpsRFVWVk9hMHhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlPVU5SVlU1dFRFWk9RbEZXVFhOU1ZVWkNVbE40UkZGVlJrUlBNbXhEVVZWT2JVOHpSa05SVlVaT1R6STVRMUZWVGtsTVJrNUNVVlpOYzFKVlJrSlNVM2hFVVZWR1JFOHliRU5SVlU1dFR6SmtRMUZWVGtWTVJXeENVVlZyYzFVd1JrSlZlWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpVZEhaUmEwWkVZVVZKYzFaVlJrSldVM2hFVVZWR1JFeEdUa0pSVmsxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUlRGQ1VWVXdjMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VkZWR1FsUlRlRVpSVlVaR1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWT01GSkRlRXBSVlVaS1RFVmtRbEZWWTNOU1ZVWkNVbE40UkZGVlJrUlBNbXhEVVZWT2FVOHhiRUpSTUhkelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFVkdwMFNsRlZUazFNUlU1Q1VWVk5OMU5WUmxSU1EzZHlVV3RHUWxaVGVFaFJWVVpYVEVaV1FsRlhiRU5NUlhSQ1VWZEZjMUpWUmtKU1UzaFNVVlZHYmxGcGVFWlJWVVpHVEVVeFFsRlVTa05NUlZaQ1VWVlZjMVJWUmtKTmEwazNWVlZHUWsxVlkzTmhWVXBDVlZWTk4xVlZSbEZTZVhoS1VWVkdTa3hHVmtKUlZsVnpVakJHUWxKNWVFeFJWVVpNVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJsWkNVVlZGYzFFd1JrSlJlWGhLVVZWR1NFeEZPVUpSVlVWelV6QkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZkb1JFeEZUa0pSVjJSRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRuRlNVM2hLVVZWR1NreEZkRUpSVlhOelVqQkdRbEo1ZUZaUlZVWldURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJlbXhFVEVWc1FsRlZhM05VVlVaQ1ZGTjRTRkZWUmtoTVJsWkNVVlpWYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkVURVZzUWxGVmEzTlVNRVpDVkhsNFZsRlZSbFpNUlU1Q1VWVk5jMWRWUmtKWFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JoYTFselZsVkdRbFpUZUVSUlZVWkVURWRHUWxGWFJYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRXhSVlVaTVRFVldRbEZWVlhOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JPVlZGelZsVkdRbFpUZUVSUlZVWkVURWRHUWxGWFJYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRXhSVlVaTVRFVldRbEZWVlhOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JPVlZGelZsVkdRbFpUZUVSUlZVWkVURWRPUWxGWFRYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMVpWUmtKV1UzaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JFOVZUWE5VTUVaQ1ZIbDRUbEZWUms1TVJVNUNVVlZOTjFOVlJrUmlSVWx6VVRCR1FsRjZkRXBSVld4T1RFaHNRMUZWUm1wTVJXUkNVVmhLUTB4R1ZrSlJXRTVEVEVVeFFsRlZNSE5TVlVaQ1VsTjRWbEZWUmxaUE1VWkNVVE5DUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOV1ZVWkNVWGw0VWxGVlJsSk1SVlpDVVZWVmMxRXdSa0pSZW5SYVVWVk9NbEZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHVnJTWE5UVlVaQ1ZsTjRTbEZWUmt4TVJVNUNVVlZOYzFWVlJrSlZVM2hHVVZWR1JrOHlaRU5SVlU0d1VXbDRVbEZWUmxKTVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JreEZUa0pSVlUwM1dqQktRbEV5TlVOTVJrWkNVVlpGYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbFpUZUZCUlZVWlFUekk1UTFGVlRUVlJhWGhRVVZWR1VFeEZUa0pSVlUxelZEQkdRbFI1ZUVaUlZVWkdURVZPUWxGVlRUZGFNRXBDVVROU1EweEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekpHUWxFd05EZFZWVVpFVkVONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPVVV4RlRrSlJWVTAzVTFWR1JsUlRkekpSYTBaQ1lUQkpjMUl3UmtKbGEwbHpWbFZHUWsxRlNYTlRNRVpDV1hsNFJsRlZSa1pNUlhSQ1VWZE5OMVZWUmtSalJWRnpVMVZHUWxOVGVFNVJWVVpPVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEY2VGtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEY2WkVOTVJXeENVVlZyYzFSVlJrSlVVM2hJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVk5lbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk5NMUZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFRsRlZSazVNUldSQ1VWVmpjMVJWUmtKVVUzaEVVVlZHUkU4eFJrSlJlazVEVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZiRUpSVld0elUxVkdRbE5UZUVoUlZVWklURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1ZIUmFVVlZPZFZGNWVFcFJWVVpLVEVWa1FsRlZZM05VVlVaQ1ZGTjRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlblJVVVZWTmVGRnFkRkpSVlU1RlRFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUlBNR3hDVVRKb1EweEZUa0pSVlUwM1UxVkdTRmw1ZUhCUmEwWkNWRk40U0ZGVlJubFJhWGhXVVZWR2VsRnBlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTk4xVlZSa1JsYTBselZEQkdRbFI1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdWRlZYTlJNRVpDVVhwMFNsRlZiR3BNUnpGRFVWVkdVa3hGWkVKUldGcERURVpXUWxGWVpFTk1SWFJDVVZkc1JFOHhSa0pSTTBwRlRFVnNRbEZWYTNOVlZVWkNWVk40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SU1VWVk9jMUZwZUV4UlZVWk1URVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VXpCR1FsTjVlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVkhSYVVWVk9kVkY1ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHRnJTWE5UVlVaQ1UxTjRVRkZWUmxCTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTldNRVpDVm5wMGJsRnJSa0pTVTNoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJWWkNVVlZWYzFFd1JrSlJlblJhVVZWTk0xSkRlRkpSVlVaU1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOTjFVd1JrUk9NRWszVlZWR1JGSkRlRkJSVlVaUVRFWldRbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxTlZSa0pUZVhoUVVWVkdRa3hGT1VKUlZUaHpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJtUkNVVlpqYzFOVlJrSlRVM2hTVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWaENSVXhGVGtKUlZ6bEZURVZPUWxGVlRUZFRWVVpFVFZWVmMxRXdSa0pSZW5SS1VWVnNUa3hJUmtOUlZVWldURVZrUWxGWGNFTk1SbFpDVVZkMFEweEZkRUpSVlhNM1ZWVkdSR0pyU1hOVFZVWkNVMU40VkZGVlJsUk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4UmtKUk1qVkRURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFhOVVZVWkNWRk40U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVWRGcFJWVTR5VVhsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SWFJDVVZWemMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWVGRhTUVwQ1VUTmFSRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrUlhhWGhFVVZWR1JFeEZaRUpSVldOelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZUbUZNUldSQ1VWVmpjMUl3UmtKU2VYaEtVVlZHU2t4SVpFTlJWVVl6VVdsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVRqQk5jMU5WUmtKVFUzaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWHAwYmxGclJrUmFRM2hLVVZWR1NreEZaRUpSVldOelVUQkdRbEY1ZUU1UlZVWk9URVYwUWxGVmMzTlJNRVpDVVhwMGRsRnJSa1JoUlVselZUQkdRbFY2ZEc1UmEwWkVXV2w0U2xGVlJrcE1SV1JDVVZWamMxRXdSa0pSZVhoU1VWVkdVa3hGVmtKUlZWVTNZakJLUWxJeVVYTlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTRjMUpWUmtKU1UzaEVVVlZHUkU4eU9VTlJWVTVoVEVWT1FsRlZUWE5STUVaQ1VYbDRVbEZWUmxKTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFOHlPVU5SVlU1elVXbDRTRkZWUmtoTVJXUkNVVlZqYzFOVlJrSlRVM2d6VVd0R1FtUXdTWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lWVktRbEY2VmtSUE1tUkRVVlZPUlV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtST1ZVbHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRTRkZWUmtoTVJXUkNVVlZqYzFFd1JrSlJlWGhPVVZWR1RreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlRWVVpDVTFONFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaElVVlZHU0V4RlpFSlJWV056VVRCR1FsRjVlRTVSVlVaT1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoR1VWVkdSazh5T1VOUlZWWXdVbE40VkZGVlJsUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY2ZEhaUmEwWkVUREJKYzFVd1JrSlZlblJ3VVd0R1JGZHFkRzVSYTBaRVVrTjRTbEZWUmtwTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZaRUpSVldOelVqQkdRbEo1ZUVSUlZVWkVURVV4UWxGVk1ITlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVmtRbEZWWTNOU01FWkNVbmw0UkZGVlJrUk1SVEZDVVZVd2MxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFWlJWVVpHVHpJNVExRlZNWGRTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lqQktRbEV5ZUVOTVJWWkNVVlZWYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkdKclNYTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbXhEVVZWT01GRnFkSGhSYTBaQ1ZGUjBkbEZyUmtSVFEzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtSTU1FbHpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hJVVZWR1NFeEZaRUpSVldOelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhwMGRsRnJSa1JPVlVselVsVkdRbEpUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaElVVlZHU0V4RlpFSlJWV056VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWHAwY0ZGclJrUk1NRWszV2pCS1FsRXdVWE5UVlVaQ1UxTjRWbEZWUmxaTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZOMkl3U2tKUmVteERURVpPUWxGV1RYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRTh5YkVOUlZVNXpVWHAwZUZGclJrSlVWSFIyVVd0R1JGTkRlRlJSVlVaVVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlblJ3VVd0R1JHSkZUVGRaVlVaRVUycDBWRkZWVGt0UE1VWkNVbFZSYzFRd1JrSlVlWGhXVVZWR1ZreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVpPUWxGV1RYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VYcEdSRXhGVGtKUlZVMDNVMVZHVEZSVGVERlJhMFpDVjFONFNGRlZSblZSYVhoV1VWVkdkbEZwZUVwUlZVWm9UekZHUWxGNlpFTk1SazVDVVZaTmMxVXdSa0pWZVhoRVVWVkdSRXhGVGtKUlZrVTNWMVZHUkdSclNYTlVNRVpDV1hsNFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMDNWVlZHUkdOclRYTlJNRVpDVVhwMFVsRlZUa1ZNUld4Q1VWVnJjMVpWUmtKV1UzaElVVlZHU0V4R1ZrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV3hDVVZWemMxUXdSa0pSVTNoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaE1VVlZHVEV4RlZrSlJXRnBHVEVWT1FsRllWa1pNUlU1Q1VWVk5OMVZWUmtSa1JXTnpVMVZHUWxOVGVGSlJWVVpTVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVVEo0UTB4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTE2VVdsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVWRGcFJWVTV6VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaFVVVlZHVkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVR6RnNRbEV6Y0VaTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlVkRzVSYTBaRVRsVkpjMVZWUmtKVlUzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh5WkVOUlZVNHdVV2w0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRTh5UmtKUk1WRTNWVEJHUkZOcWRGSlJWVTVGVEVVNVFsRlZPSE5WVlVaQ1ZWTjRSRkZWUmtSUE1HeENVVE5DUTB4RlRrSlJWVTAzVTFWR1NsSkRkM2RSYTBaQ1UzbDRTRkZWUmsxTVJsWkNVVlV3YzFFd1JrSlZlWGhHVVZWR1JreEZUa0pSVmswM1ZWVkdRazFWU1hOaFZVcENUa1ZTUkU4eFJrSk5NRkpJVEVWc1FsRlZhM05VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVmsxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlVWVVpDVkZONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWazF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVZbXRWYzFOVlJrSlRVM2hFVVZWR1JFeEdUa0pSVmsxelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTmFNRXBDVVZka1EweEZUa0pSVlUxelZGVkdRbFJUZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VsaGFSVXhGYkVKUlZXdHpXVEJHUWxsNWVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVGpSUmFYaEtVVlZHU2t4RlRrSlJWVTF6VlRCR1FsVjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VmxGVlJrSk1SVTVDVVZWTmMxTlZSa0pUVTNoUVVWVkdRa3hIVGtKUlYwMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR05GRnBlRVJSVlVZelVXbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmtSVkZ6VTFWR1FsTlRlRVJSVlVaRVRFZEdRbEZYUlhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVGWlJWVVpDVEVWT1FsRlZUVGRYVlVaRVkwVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VXpCR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVmtKUk0yaERURVZPUWxGVlRYTlNNRVpDVW5sNFRGRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRUTlJhWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFZE9RbEZYVFRkaVZVcENVVE5hUkV4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGYkVKUlZXdHpXVEJHUWxsNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVlrVlJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1NGTkRlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpWRlZHUWxSVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRUbEZWUms1TVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZVM1YxVkdSRTFWVFhOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxUlZSa0pVVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFkVlJrUk5NRWx6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUVGRYVlVaRVRUQkpjMU5WUmtKVFUzaEVVVlZHUkV4SFJrSlJWMFZ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFRkYU1FcENVVE5DUTB4Rk1VSlJWVEJ6VWxWR1FsSlRlRVJSVlVaRVR6SmtRMUZWVGxWTVJURkNVVlV3YzFKVlJrSlNVM2hFVVZWR1JFOHlaRU5SVlU1VlRFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUlBNa1pDVVRGdmMxRXdSa0pSZVhoRVVWVkdSRTh4VGtKUk1EUTNWVlZHUkZKRGVFeFJWVVpNVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlUzVjFWR1JFMVZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5OMWRWUmtSTk1FbHpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRUZFhWVVpFVFRCSmMxTlZSa0pUVTNoRVVWVkdSRXhIUmtKUlYwVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUVGRhTUVwQ1VUTkNRMHhGTVVKUlZUQnpVbFZHUWxKVGVFUlJWVVpFVHpKa1ExRlZUbFZNUlRGQ1VWVXdjMUpWUmtKU1UzaEVVVlZHUkU4eVpFTlJWVTVWVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSUE1rWkNVVEZ2YzFFd1JrSlJlWGhFVVZWR1JFOHhUa0pSTURRM1ZWVkdSbEpEZUVwUlZVWktURVpPUWxGV1RYTlNNRVpDVW5sNFZsRlZSa0pNUlU1Q1VWVk5jMU5WUmtKU2VYaFFVVlZHUWt4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZXU1hOUk1FWkNWVk40UmxGVlRqUlJhWGhVVVZWR1ZFeEZaRUpSVldOelZsVkdRbEZUZUVSUlZVWkVURVZzUWxGVlkzTlVNRVpDVVZONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHVTB4RlRrSlJWa1Z6VWxWR1JHVkZTWE5WTUVaQ1ZYbDRTRkZWUmtoTVJsWkNVVlZGYzFFd1JrSlJlWGhLVVZWR1NFeEZPVUpSVlVWelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlNWVVpDVldsNFJGRlZSbEpNUlU1Q1VWVk5OMVZWUmtaT01FbHpVMVZHUWxOVGVIcFJhMFpDWXpCSmMxSXdSa0pTZVhoS1VWVkdTa3hFUWtOUlZVWldURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaE9VVlZHVGt4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFZEdRbEZYUlhOU1ZVWkNVbE40VkZGVlJsUk1SVlpDVVZWVmMxVXdSa0pWZVhoR1VWVkdSa3hHVGtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXpRa2xNUld4Q1VWVnJjMVl3UmtKV2VYaElVVlZHU0V4R1ZrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUlBNV3hDVVROU1EweEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVYwUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFVjBRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWMFFsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSRTVWVVhOVFZVWkNVMU40UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVldNbEpEZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlhSQ1VWVnpjMVJWUmtKVVUzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFeFJWVVpNVEVVeFFsRlZNSE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktUekprUTFGVlRtOVNhWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNXBURVU1UWxGVk9ITlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR5VVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtoU2FYaEtVVlZHU2t4R2JFSlJWbXR6VWpCR1FsSjVlSHBSYTBaQ1l6QkpjMUV3UmtKUmVYYzBVV3RHUWs5RlNYTlJNRVpFWTBWVmMxUlZSa0pVVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFSVlJrSlVVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VUTlNSRXhHWkVKUlZtTnpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsSXljRU5NUld4Q1VWVnJjMVpWUmtKV1UzaElVVlZHU0V4R2JFSlJWbXR6VVRCR1FsRjVlRkJSVlVaUVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxWlZSa0pSVTNoR1VWVkdSa3hGYkVKUlZXdHpWREJHUWxGVGVFeFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR2EweEZUa0pSVjAxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFeWVFWk1SbFpDVVZaVmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtoaFJWRnpWREJHUWxSNWVGWlJWVVpXVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJsWkNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUwM1YxVkdSRTFWU1hOVU1FWkNVVk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhHVmtKUlZsVnpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05STUVaQ1VYbDRTbEZWUmtwTVJsWkNVVlpWYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFRGRlZSa3hNUlRGQ1VWVXdjMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRXhSVlVaTVRFVXhRbEZWTURkaVZVcENVWHBzUmt4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxTXdSa0pUZVhoT1VWVkdUa3hGYkVKUlZXdHpWbFZHUWxaVGVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZkRUpSVlhOelZGVkdRbFJUZUVSUlZVWkVUekZHUWxKSVdrWk1SVTVDVVROV1JreEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNXhVbWw0UkZGVlJrUlBNR3hDVWxVd2MyUlZTa0pSVm10elVqQkdRbUpyU1hOV1ZVWkNZakJKYzFNd1JrSmFNRWx6VWxWR1FsSlRlRnBSVlVaMlVXbDRSbEZWUmtaTVJsWkNVVmQwUTB4RlZrSlJWVlZ6VmpCR1FtSlZTVGRWVlVaRVREQlpjMU5WUmtKVFUzaE9VVlZHVGt4RlpFSlJWV00zVjFWR1JGWkRlRlJSVlVaVVRFVldRbEZWVlhOVFZVWkNVMU40U0ZGVlJraE1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFJd1JrSlNlWGhJVVZWR1NFeEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VWpCR1FsSjZkRnBSVlUxNlVrTjRWRkZWUmxSTVJWWkNVVlZWYzFKVlJrSlNWSFJVVVZWT2IxRnBlRVJSVlVaRVR6RkdRbEV3V1hOVFZVWkNVMU40VEZGVlJreE1SVTVDVVZWTmMxUlZSa0pVVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVWRGcFJWVTV6VVdsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOVE1FWkNVM2w0UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVWRHNVJhMFpFWW10TmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPYzFGcGVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SmtRMUZWVFROUmFYaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaRVRFVmtRbEZWWTNOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFWTJ0SmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEV6U2tOTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZkRUpSVlhOelVUQkdRbEY1ZUU1UlZVWk9URVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pQTWpsRFVWVk9NRkZwZUVwUlZVWktURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1R6TmtRMUZWVG5OUmFYaEVVVlZHUkV4RmJFSlJWV3R6VWxWR1FsSlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpWMVZHUWxkVGVFUlJWVVpFVHpOR1ExRlZUalpSZW5RMVVXdEdRbFJVZEROUmEwWkVVME40UkZGVlJrUk1SV3hDVVZWcmMxSlZSa0pTVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFkVlJrSlhVM2hFVVZWR1JFOHpSa05SVlU0MlVYcDBkbEZyUmtSU1EzaE9VVlZHVGt4RlRrSlJWVTF6VlRCR1FsVjVlRXBSVlVaS1RFVnNRbEZWYTNOU01FWkNVbmw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUVGRpTUVwQ1VYcGtSRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lqQktRbEV6U2tOTVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4ySXdTa0pSZW1SRFRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRpTUVwQ1VUSm9RMHhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1lqQktRbEV5YUVOTVJWWkNVVlZWYzFJd1JrSlNlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUekk1UTFGVlRtbE1SVlpDVVZWVmMxSXdSa0pTZVhoR1VWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVHpJNVExRlZUbWxNUld4Q1VWVnJjMU13UmtKVGVYaElVVlZHU0V4R1ZrSlJWbFZ6VVRCR1FsRjVlSEpSYTBaQ1lUQkpjMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtaT01GRnpVMVZHUWxOVGVFWlJWVVpHVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSUE1qbERVVlZPV1V4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVTNaREJLUWxFeWVFTk1SVlpDVVZWVmMxSXdSa0pTZVhoR1VWVkdSa3hGWkVKUlZXTnpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelYxVkdRbGRUZUVSUlZVWkVUek5rUTFGVlRYcFJlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUek5HUTFGVlRsbFBNMnhEVVZWR1RrOHpaRU5SVlU1SlRFVldRbEZWVlhOU01FWkNVbmw0UmxGVlJrWk1SVTVDVVZWTk4yUXdTa0pSTVVselVsVkdRbEpUZUVoUlZVWklURVZXUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU01FWkNVbmw0V2xGVlJscE1SVTVDVVZWTk4yTlZTa0pSZW14RVR6STVRMUZWVGtWTVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eU9VTlJWVTE0VVdsNFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SMlVXdEdSRTFWU1hOVVZVWkNWRk40UkZGVlJrUk1SazVDVVZaTmMxTlZSa0pUVTNoS1VWVkdTa3hGWkVKUlZXTnpVbFZHUWxKVGVFaFJWVVpJVEVWa1FsRlZZM05TTUVaQ1VubDRSbEZWUmtaTVJXUkNVVlZqYzFRd1JrSlVlWGhJVVZWR1NFeEZkRUpSVlhOelVqQkdRbEo1ZUVoUlZVWklURVZrUWxGVlkzTlNWVVpDVWxONFNGRlZSa2hNUldSQ1VWVmpjMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VWpCR1FsSjVlRVJSVlVaRVR6SnNRMUZWVFhoU2FuUjRVV3RHUWxSVWRIWlJhMFpFVTBONFNsRlZSa3BNUmtaQ1VWWkZjMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwZGxGclJrUmtSVWx6VTFWR1FsTlRlRnBSVlVaYVRFVldRbEZWVlhOWFZVWkNWMU40UkZGVlJrUlBNamxEVVZWTmRsRnBlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVHpOa1ExRlZUbk5SYVhoRVVWVkdSRXhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelZqQkdRbFo1ZUVSUlZVWkVUek5rUTFGVlRubFJlWGhhVVZWR1dreEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUmxaQ1VWWlZjMUV3UmtKUmVYaEVVVlZHUkU4elpFTlJWVTUxVVhsNFdsRlZSbHBNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFWldRbEZXVlhOUk1FWkNVWGw0UkZGVlJrUlBNMFpEVVZWT01GRjZkRFZSYTBaQ1ZGUjBNMUZyUmtSVFEzaEVVVlZHUkV4RmJFSlJWV3R6VWxWR1FsSlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpWakJHUWxaNWVFUlJWVVpFVHpOa1ExRlZUbmxSZVhoYVVWVkdXa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05XVlVaQ1ZsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHpaRU5SVlU1MVVYbDRXbEZWUmxwTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelZsVkdRbFpUZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTTBaRFVWVk9NRkY2ZEhaUmEwWkVVa040VGxGVlJrNU1SVTVDVVZWTmMxVXdSa0pWZVhoS1VWVkdTa3hGYkVKUlZXdHpVakJHUWxKNWVFUlJWVVpFVEVWa1FsRlZZM05TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGhJVVZWR1NFeEZUa0pSVlUwM1lqQktRbEY2WkVSTVJXeENVVlZyYzFZd1JrSldlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpVZEROUmEwWkVZV3RKYzFSVlJrSlVVM2hFVVZWR1JFeEdUa0pSVmsxelVqQkdRbEo1ZUVwUlZVWktURVZrUWxGVlkzTlZWVVpDVlZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlpFSlJWV056VWpCR1FsSjVlRkpSVlVaU1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxTXdSa0pUZVhoSVVWVkdTRXhHYkVKUlZtdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTRkZWUmtoTVJXUkNVVlZqYzFkVlJrSlhVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2Y3pSUmEwWkVaV3RqYzFNd1JrSlRlWGhJVVZWR1NFeEdiRUpSVm10elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNGRlZSa2hNUldSQ1VWVmpjMWRWUmtKWFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6TkdRMUZWVG5sU1JIUndVV3RHUkZOcWRHaFJWVTVMVHpGT1FsRXdiemRaVlVaQ1ZGUjBXbEZWVGtsTVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUbk5SYVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eGJFSlJlbVJEVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUTktRMHhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxFelNrTk1SV3hDVVZWcmMxVlZSa0pWVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVVE5TUTB4RmJFSlJWV3R6VjFWR1FsZFRlRVpSVlVaR1RFWnNRbEZXYTNOUk1FWkNVWHAwV2xGVlRYWlJhWGhLVVZWR1NreEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUms4eVpFTlJWVTV6VVdsNFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKU1UzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV1JDVVZWamMxWXdSa0pXZVhoRVVWVkdSRTh5WkVOUlZVNTVVWGw0V2xGVlJscE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVaV1FsRldWWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPZFZGNWVGcFJWVVphVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhJVVZWR1NFeEdWa0pSVmxWelVUQkdRbEY1ZUVSUlZVWkVUekpHUWxFelVrUlBNbXhEVVZWR1RrOHlaRU5SVlU1SlRFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRXRkZWUmxoTVJVNUNVVlZOTjFvd1NrSlJNMHBFVEVac1FsRldhM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhXVVZWR1ZreEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVRJMVJFeEdiRUpSVm10elVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFZsRlZSbFpNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JHUkZUVGRYVlVaRVVrTjRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhLVVZWR1NreEZiRUpSVld0elVqQkdRbEo1ZUVSUlZVWkVURVZrUWxGVlkzTlNNRVpDVW5sNFNGRlZSa2hNUlU1Q1VWVk5jMUl3UmtKU2VYaElVVlZHU0V4RlRrSlJWVTAzVjFWR1JFNHdUWE5UVlVaQ1UxTjRXRkZWUmxoTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JrOHlaRU5SVlU1eFVXbDRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhJVVZWR1NFeEZiRUpSVld0elVqQkdRbEo1ZUZKUlZVWlNURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUl3UmtKU2VYaElVVlZHU0V4R1JrSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0VEZGVlJreE1SV1JDVVZWamMxZFZSa0pYVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWa1FsRlZZM05TTUVaQ1VubDRXbEZWUmxwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHpUa05SVlU0MlVubDRURkZWUmt4TVJXUkNVVlZqYzFkVlJrSlhVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZrUWxGVlkzTlNNRVpDVW5sNFdsRlZSbHBNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JHTnJVVGRWTUVaRVUycDBVbEZWVGtWTVJUbENVVlU0YzFSVlJrSlVVM2hFVVZWR1JFOHdiRUpSTW5oRFRFVk9RbEZWVFRkVFZVWkVWRU40Y0ZGclJrSlJlblJDVVZWR1JVeEZUa0pSVlUxelVWVkdObUpGU2tWTVJXeENaVmQ0UTFGNmRFSlJXSEJ6VVd4cmMxb3dUa0pSVmxWcFpsRTlQU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dWRtRnlJSEJoWTJ0cGJtZFBjSFJwYjI1eklEMGdlMXh1SUNBZ0lGQkJSRVJKVGtjNklERXdMRnh1SUNBZ0lFZFBURVJGVGw5VFJVTlVTVTlPT2lBb01TQXJJRTFoZEdndWMzRnlkQ2cxS1NrZ0x5QXlMRnh1SUNBZ0lFWk1UMEZVWDBWUVUwbE1UMDQ2SURBdU1EQXdNU3hjYmlBZ0lDQk5RVmhmU1U1RlVrRlVTVTlPVXpvZ01UQXdYRzU5TzF4dVpuVnVZM1JwYjI0Z1lYQndiSGxRWVdOcmFXNW5LR2R5WVhCb2N5d2dkeXdnYUN3Z2JtOWtaVjl6YVhwbExDQmtaWE5wY21Wa1gzSmhkR2x2TENCalpXNTBaWEpIY21Gd2FDa2dlMXh1SUNBZ0lHbG1JQ2hrWlhOcGNtVmtYM0poZEdsdklEMDlQU0IyYjJsa0lEQXBJSHNnWkdWemFYSmxaRjl5WVhScGJ5QTlJREU3SUgxY2JpQWdJQ0JwWmlBb1kyVnVkR1Z5UjNKaGNHZ2dQVDA5SUhadmFXUWdNQ2tnZXlCalpXNTBaWEpIY21Gd2FDQTlJSFJ5ZFdVN0lIMWNiaUFnSUNCMllYSWdhVzVwZEY5NElEMGdNQ3dnYVc1cGRGOTVJRDBnTUN3Z2MzWm5YM2RwWkhSb0lEMGdkeXdnYzNablgyaGxhV2RvZENBOUlHZ3NJR1JsYzJseVpXUmZjbUYwYVc4Z1BTQjBlWEJsYjJZZ1pHVnphWEpsWkY5eVlYUnBieUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJrWlhOcGNtVmtYM0poZEdsdklEb2dNU3dnYm05a1pWOXphWHBsSUQwZ2RIbHdaVzltSUc1dlpHVmZjMmw2WlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCdWIyUmxYM05wZW1VZ09pQXdMQ0J5WldGc1gzZHBaSFJvSUQwZ01Dd2djbVZoYkY5b1pXbG5hSFFnUFNBd0xDQnRhVzVmZDJsa2RHZ2dQU0F3TENCbmJHOWlZV3hmWW05MGRHOXRJRDBnTUN3Z2JHbHVaU0E5SUZ0ZE8xeHVJQ0FnSUdsbUlDaG5jbUZ3YUhNdWJHVnVaM1JvSUQwOUlEQXBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCallXeGpkV3hoZEdWZlltSW9aM0poY0doektUdGNiaUFnSUNCaGNIQnNlU2huY21Gd2FITXNJR1JsYzJseVpXUmZjbUYwYVc4cE8xeHVJQ0FnSUdsbUlDaGpaVzUwWlhKSGNtRndhQ2tnZTF4dUlDQWdJQ0FnSUNCd2RYUmZibTlrWlhOZmRHOWZjbWxuYUhSZmNHOXphWFJwYjI1ektHZHlZWEJvY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJR1oxYm1OMGFXOXVJR05oYkdOMWJHRjBaVjlpWWlobmNtRndhSE1wSUh0Y2JpQWdJQ0FnSUNBZ1ozSmhjR2h6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0djcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJHTjFiR0YwWlY5emFXNW5iR1ZmWW1Jb1p5azdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCallXeGpkV3hoZEdWZmMybHVaMnhsWDJKaUtHZHlZWEJvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXbHVYM2dnUFNCT2RXMWlaWEl1VFVGWVgxWkJURlZGTENCdGFXNWZlU0E5SUU1MWJXSmxjaTVOUVZoZlZrRk1WVVVzSUcxaGVGOTRJRDBnTUN3Z2JXRjRYM2tnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWjNKaGNHZ3VZWEp5WVhrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2Rpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCM0lEMGdkSGx3Wlc5bUlIWXVkMmxrZEdnZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2RpNTNhV1IwYUNBNklHNXZaR1ZmYzJsNlpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYUNBOUlIUjVjR1Z2WmlCMkxtaGxhV2RvZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCMkxtaGxhV2RvZENBNklHNXZaR1ZmYzJsNlpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNJQzg5SURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FDQXZQU0F5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVGOTRJRDBnVFdGMGFDNXRZWGdvZGk1NElDc2dkeXdnYldGNFgzZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYmw5NElEMGdUV0YwYUM1dGFXNG9kaTU0SUMwZ2R5d2diV2x1WDNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlRjk1SUQwZ1RXRjBhQzV0WVhnb2RpNTVJQ3NnYUN3Z2JXRjRYM2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJsOTVJRDBnVFdGMGFDNXRhVzRvZGk1NUlDMGdhQ3dnYldsdVgza3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtRndhQzUzYVdSMGFDQTlJRzFoZUY5NElDMGdiV2x1WDNnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuY21Gd2FDNW9aV2xuYUhRZ1BTQnRZWGhmZVNBdElHMXBibDk1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1oxYm1OMGFXOXVJSEIxZEY5dWIyUmxjMTkwYjE5eWFXZG9kRjl3YjNOcGRHbHZibk1vWjNKaGNHaHpLU0I3WEc0Z0lDQWdJQ0FnSUdkeVlYQm9jeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2huS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyVnVkR1Z5SUQwZ2V5QjRPaUF3TENCNU9pQXdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5MbUZ5Y21GNUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCalpXNTBaWEl1ZUNBclBTQnViMlJsTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVnVkR1Z5TG5rZ0t6MGdibTlrWlM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWlc1MFpYSXVlQ0F2UFNCbkxtRnljbUY1TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmxiblJsY2k1NUlDODlJR2N1WVhKeVlYa3ViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZjbTVsY2lBOUlIc2dlRG9nWTJWdWRHVnlMbmdnTFNCbkxuZHBaSFJvSUM4Z01pd2dlVG9nWTJWdWRHVnlMbmtnTFNCbkxtaGxhV2RvZENBdklESWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0I3SUhnNklHY3VlQ0F0SUdOdmNtNWxjaTU0SUNzZ2MzWm5YM2RwWkhSb0lDOGdNaUF0SUhKbFlXeGZkMmxrZEdnZ0x5QXlMQ0I1T2lCbkxua2dMU0JqYjNKdVpYSXVlU0FySUhOMloxOW9aV2xuYUhRZ0x5QXlJQzBnY21WaGJGOW9aV2xuYUhRZ0x5QXlJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5MbUZ5Y21GNUxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbmdnS3owZ2IyWm1jMlYwTG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzU1SUNzOUlHOW1abk5sZEM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCbWRXNWpkR2x2YmlCaGNIQnNlU2hrWVhSaExDQmtaWE5wY21Wa1gzSmhkR2x2S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVgySmxjM1JmWmlBOUlFNTFiV0psY2k1UVQxTkpWRWxXUlY5SlRrWkpUa2xVV1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR04xY25KZlltVnpkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHUmhkR0V1YzI5eWRDaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnlaWFIxY200Z1lpNW9aV2xuYUhRZ0xTQmhMbWhsYVdkb2REc2dmU2s3WEc0Z0lDQWdJQ0FnSUcxcGJsOTNhV1IwYUNBOUlHUmhkR0V1Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVM1M2FXUjBhQ0E4SUdJdWQybGtkR2dnUHlCaExuZHBaSFJvSURvZ1lpNTNhV1IwYUR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pXWjBJRDBnZURFZ1BTQnRhVzVmZDJsa2RHZzdYRzRnSUNBZ0lDQWdJSFpoY2lCeWFXZG9kQ0E5SUhneUlEMGdaMlYwWDJWdWRHbHlaVjkzYVdSMGFDaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2wwWlhKaGRHbHZia052ZFc1MFpYSWdQU0F3TzF4dUlDQWdJQ0FnSUNCMllYSWdabDk0TVNBOUlFNTFiV0psY2k1TlFWaGZWa0ZNVlVVN1hHNGdJQ0FnSUNBZ0lIWmhjaUJtWDNneUlEMGdUblZ0WW1WeUxrMUJXRjlXUVV4VlJUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdac1lXY2dQU0F0TVR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1I0SUQwZ1RuVnRZbVZ5TGsxQldGOVdRVXhWUlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JtSUQwZ1RuVnRZbVZ5TGsxQldGOVdRVXhWUlR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0Noa2VDQStJRzFwYmw5M2FXUjBhQ2tnZkh3Z1pHWWdQaUJ3WVdOcmFXNW5UM0IwYVc5dWN5NUdURTlCVkY5RlVGTkpURTlPS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pteGhaeUFoUFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhneElEMGdjbWxuYUhRZ0xTQW9jbWxuYUhRZ0xTQnNaV1owS1NBdklIQmhZMnRwYm1kUGNIUnBiMjV6TGtkUFRFUkZUbDlUUlVOVVNVOU9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbVgzZ3hJRDBnYzNSbGNDaGtZWFJoTENCNE1TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pteGhaeUFoUFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhneUlEMGdiR1ZtZENBcklDaHlhV2RvZENBdElHeGxablFwSUM4Z2NHRmphMmx1WjA5d2RHbHZibk11UjA5TVJFVk9YMU5GUTFSSlQwNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdaZmVESWdQU0J6ZEdWd0tHUmhkR0VzSUhneUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1I0SUQwZ1RXRjBhQzVoWW5Nb2VERWdMU0I0TWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWmlBOUlFMWhkR2d1WVdKektHWmZlREVnTFNCbVgzZ3lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htWDNneElEd2dZM1Z5Y2w5aVpYTjBYMllwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlYMkpsYzNSZlppQTlJR1pmZURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbDlpWlhOMElEMGdlREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abDk0TWlBOElHTjFjbkpmWW1WemRGOW1LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNsOWlaWE4wWDJZZ1BTQm1YM2d5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmZZbVZ6ZENBOUlIZ3lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWmZlREVnUGlCbVgzZ3lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWRDQTlJSGd4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhneElEMGdlREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmw5NE1TQTlJR1pmZURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pteGhaeUE5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWFXZG9kQ0E5SUhneU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3lJRDBnZURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1psOTRNaUE5SUdaZmVERTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabXhoWnlBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYUmxjbUYwYVc5dVEyOTFiblJsY2lzcklENGdNVEF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzNSbGNDaGtZWFJoTENCamRYSnlYMkpsYzNRcE8xeHVJQ0FnSUgxY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHUmhkR0VzSUcxaGVGOTNhV1IwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnNhVzVsSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSEpsWVd4ZmQybGtkR2dnUFNBd08xeHVJQ0FnSUNBZ0lDQnlaV0ZzWDJobGFXZG9kQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHZHNiMkpoYkY5aWIzUjBiMjBnUFNCcGJtbDBYM2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1pHRjBZUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOGdQU0JrWVhSaFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NIVjBYM0psWTNRb2J5d2diV0Y0WDNkcFpIUm9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNWhZbk1vWjJWMFgzSmxZV3hmY21GMGFXOG9LU0F0SUdSbGMybHlaV1JmY21GMGFXOHBPMXh1SUNBZ0lIMWNiaUFnSUNCbWRXNWpkR2x2YmlCd2RYUmZjbVZqZENoeVpXTjBMQ0J0WVhoZmQybGtkR2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY21WdWRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc2FXNWxMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0tHeHBibVZiYVYwdWMzQmhZMlZmYkdWbWRDQStQU0J5WldOMExtaGxhV2RvZENrZ0ppWWdLR3hwYm1WYmFWMHVlQ0FySUd4cGJtVmJhVjB1ZDJsa2RHZ2dLeUJ5WldOMExuZHBaSFJvSUNzZ2NHRmphMmx1WjA5d2RHbHZibk11VUVGRVJFbE9SeUF0SUcxaGVGOTNhV1IwYUNrZ1BEMGdjR0ZqYTJsdVowOXdkR2x2Ym5NdVJreFBRVlJmUlZCVFNVeFBUaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNtVnVkQ0E5SUd4cGJtVmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR2x1WlM1d2RYTm9LSEpsWTNRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0dGeVpXNTBJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUXVlQ0E5SUhCaGNtVnVkQzU0SUNzZ2NHRnlaVzUwTG5kcFpIUm9JQ3NnY0dGamEybHVaMDl3ZEdsdmJuTXVVRUZFUkVsT1J6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUXVlU0E5SUhCaGNtVnVkQzVpYjNSMGIyMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTjBMbk53WVdObFgyeGxablFnUFNCeVpXTjBMbWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUXVZbTkwZEc5dElEMGdjbVZqZEM1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVpXNTBMbk53WVdObFgyeGxablFnTFQwZ2NtVmpkQzVvWldsbmFIUWdLeUJ3WVdOcmFXNW5UM0IwYVc5dWN5NVFRVVJFU1U1SE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGeVpXNTBMbUp2ZEhSdmJTQXJQU0J5WldOMExtaGxhV2RvZENBcklIQmhZMnRwYm1kUGNIUnBiMjV6TGxCQlJFUkpUa2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV04wTG5rZ1BTQm5iRzlpWVd4ZlltOTBkRzl0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc1gySnZkSFJ2YlNBclBTQnlaV04wTG1obGFXZG9kQ0FySUhCaFkydHBibWRQY0hScGIyNXpMbEJCUkVSSlRrYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTjBMbmdnUFNCcGJtbDBYM2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV04wTG1KdmRIUnZiU0E5SUhKbFkzUXVlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZM1F1YzNCaFkyVmZiR1ZtZENBOUlISmxZM1F1YUdWcFoyaDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV04wTG5rZ0t5QnlaV04wTG1obGFXZG9kQ0F0SUhKbFlXeGZhR1ZwWjJoMElENGdMWEJoWTJ0cGJtZFBjSFJwYjI1ekxrWk1UMEZVWDBWUVUwbE1UMDRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZzWDJobGFXZG9kQ0E5SUhKbFkzUXVlU0FySUhKbFkzUXVhR1ZwWjJoMElDMGdhVzVwZEY5NU8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21WamRDNTRJQ3NnY21WamRDNTNhV1IwYUNBdElISmxZV3hmZDJsa2RHZ2dQaUF0Y0dGamEybHVaMDl3ZEdsdmJuTXVSa3hQUVZSZlJWQlRTVXhQVGlsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWVd4ZmQybGtkR2dnUFNCeVpXTjBMbmdnS3lCeVpXTjBMbmRwWkhSb0lDMGdhVzVwZEY5NE8xeHVJQ0FnSUgxY2JpQWdJQ0E3WEc0Z0lDQWdablZ1WTNScGIyNGdaMlYwWDJWdWRHbHlaVjkzYVdSMGFDaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIzYVdSMGFDQTlJREE3WEc0Z0lDQWdJQ0FnSUdSaGRHRXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9aQ2tnZXlCeVpYUjFjbTRnZDJsa2RHZ2dLejBnWkM1M2FXUjBhQ0FySUhCaFkydHBibWRQY0hScGIyNXpMbEJCUkVSSlRrYzdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZDJsa2RHZzdYRzRnSUNBZ2ZWeHVJQ0FnSUdaMWJtTjBhVzl1SUdkbGRGOXlaV0ZzWDNKaGRHbHZLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hKbFlXeGZkMmxrZEdnZ0x5QnlaV0ZzWDJobGFXZG9kQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVpYaHdiM0owY3k1aGNIQnNlVkJoWTJ0cGJtY2dQU0JoY0hCc2VWQmhZMnRwYm1jN1hHNW1kVzVqZEdsdmJpQnpaWEJoY21GMFpVZHlZWEJvY3lodWIyUmxjeXdnYkdsdWEzTXBJSHRjYmlBZ0lDQjJZWElnYldGeWEzTWdQU0I3ZlR0Y2JpQWdJQ0IyWVhJZ2QyRjVjeUE5SUh0OU8xeHVJQ0FnSUhaaGNpQm5jbUZ3YUhNZ1BTQmJYVHRjYmlBZ0lDQjJZWElnWTJ4MWMzUmxjbk1nUFNBd08xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHbHVhM011YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4cGJtc2dQU0JzYVc1cmMxdHBYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNHhJRDBnYkdsdWF5NXpiM1Z5WTJVN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1TWlBOUlHeHBibXN1ZEdGeVoyVjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2QyRjVjMXR1TVM1cGJtUmxlRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZWGx6VzI0eExtbHVaR1Y0WFM1d2RYTm9LRzR5S1R0Y2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2QyRjVjMXR1TVM1cGJtUmxlRjBnUFNCYmJqSmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2QyRjVjMXR1TWk1cGJtUmxlRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZWGx6VzI0eUxtbHVaR1Y0WFM1d2RYTm9LRzR4S1R0Y2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2QyRjVjMXR1TWk1cGJtUmxlRjBnUFNCYmJqRmRPMXh1SUNBZ0lIMWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHNXZaR1Z6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdWIyUmxJRDBnYm05a1pYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRZWEpyYzF0dWIyUmxMbWx1WkdWNFhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCbGVIQnNiM0psWDI1dlpHVW9ibTlrWlN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHWjFibU4wYVc5dUlHVjRjR3h2Y21WZmJtOWtaU2h1TENCcGMxOXVaWGNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFoY210elcyNHVhVzVrWlhoZElDRTlQU0IxYm1SbFptbHVaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzE5dVpYY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNkWE4wWlhKekt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtRndhSE11Y0hWemFDaDdJR0Z5Y21GNU9pQmJYU0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnRZWEpyYzF0dUxtbHVaR1Y0WFNBOUlHTnNkWE4wWlhKek8xeHVJQ0FnSUNBZ0lDQm5jbUZ3YUhOYlkyeDFjM1JsY25NZ0xTQXhYUzVoY25KaGVTNXdkWE5vS0c0cE8xeHVJQ0FnSUNBZ0lDQjJZWElnWVdScVlXTmxiblFnUFNCM1lYbHpXMjR1YVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXRmthbUZqWlc1MEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUdGa2FtRmpaVzUwTG14bGJtZDBhRHNnYWlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVIQnNiM0psWDI1dlpHVW9ZV1JxWVdObGJuUmJhbDBzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ozSmhjR2h6TzF4dWZWeHVaWGh3YjNKMGN5NXpaWEJoY21GMFpVZHlZWEJvY3lBOUlITmxjR0Z5WVhSbFIzSmhjR2h6TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwWVVkR2RWcEhlR3hhUjJ4NldUSTVkV0p0Vm1wa1IxWnJURzF3ZWtscGQybGpNamt4WTIxT2JGVnRPWFprUTBrMlNXbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1hVFIyVEdrMGRsWXlWbWxSTWpseldWTTVlbU50VFhaaFIwWjFXa2Q0YkZwSGJIcFpNamwxWW0xV2FtUkhWbXRNYmxKNlNXd3djMGx0TldoaVYxWjZTV3B3WWxoVGQybGlWMFozWTBkc2RWb3pUV2xQYVVrM1R6QkdRbEZWYTNOVFZVWkNVMU40YWxGVlJtcE1SV1JDVVZWak4xTlZSa1JoYTBselZEQkdRbFI1ZUVaUlZVWkdURVZXUWxGVlZUZFRWVVpFVjBONGFsRlZSbXBNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMDNVMVZHUkdSRlRYTlpWVVpDV1ZONFJsRlZSa1pNUlRGQ1VWVXdOMU5WUmtSamEwbHpXVEJHUWxsNWVFWlJWVVpHVEVWa1FsRlZZemRSTUVaRVpFVkpjMUV3UmtKUmVuUkNVVlZrUjB4R1RrSlJWMlJEVEVac1FsRldhM05STUVaQ1VYbDRUbEZWUm5CUmFYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOVk1FWkNWWGw0UmxGVlJrWk1SMFpDVVZkc1EweEZWa0pSVlZWelZqQkdRbUV3U1RkVFZVWkNZMnROYzA5RlNrSlJWVVZ6VWxWR1FsRlRlSEJSYTBaQ1lWVkpOMU5WUmtKU1UzY3dVV3RHUWxGVGVFWlJWVVpDVEVkMFExRlZSbkpSYW5SS1VWVldjMUo1ZUVwUlZVWktURVV4UWxGVk1ITlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VURlpjMVJWUmtKVVUzaElVVlZHU0V4RlRrSlJWVTF6VWxWR1JsWnBlRlJSVlVaVVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlRtbE1SbFpDVVZaVmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKU1YxRnpXVlZHUWxsVGVFaFJWVVpJVEVVNVFsRlZPSE5aVlVaQ1dWTjRURkZWUmt4TVJtUkNVVlpqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxeldWVkdRbGxUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VUTm9Sa3hHVGtKUlZrMXpVakJHUWxKNWVGQlJWVVpRVEVaT1FsRldUWE5UTUVaQ1UzbDRXRkZWUmxoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEdUa0pSVmsxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZWVEZTUTNoV1VWVkdWa3hGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVTVyVEVaa1FsRldZM05TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVEpaYzFVd1JrSlZlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdSbGxwZUdoUlZVWm9URVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZUbkZSYVhoS1VWVkdTa3hGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVHpCc1FsSlhVWE5UVlVaQ1UxTjRUbEZWUms1TVJVNUNVVlZOYzFSVlJrSlVVM2hLVVZWR1NreEZUa0pSVlUwM1ZWVkdSR0pGU1hOVU1FWkNWSHAwU2xGV1ZsbE1SbXhDVVZacmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTU1VVdsNFRGRlZSa3hNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUmt4SFJrSlJWMFZ6VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEY2WkVOTVJXeENVVlZqYzFZd1JrSldlWGhHVVZWR1JrOHhSa0pSTVc5elRrVktRbEZVVWtOTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUwM1V6QkdSR1ZGVFRkVFZVWklVa040VkZGVlJsUk1SbXhDVVZacmMxRXdSa0pSZVhoT1VWVkdUazh4UmtKU1dHaERURVV4UWxGVk1ITlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUkU4eGJFSlJNMUpEVEVjeFExRlZSblJSYVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpDVHpGR1FsRjZSa05NUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlNWV2R6VlRCR1FsVjVlSFJSYTBaQ1lsVkpjMUV3UmtKUmVYaE1VVlZHVEU4eGJFSlJlbXhEVEVWc1FsRlZhM05UTUVaQ1UzbDRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlWGhVVVZWR1ZFeEZWa0pSVlZWelV6QkdRbE41ZUVoUlZVWklURVV4UWxGVk1ITlJNRVpDVVhsNFZGRlZSbFJNUlZaQ1VUSjRSVXhGZEVKUlZYTnpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5UTUVaQ1UzbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWV05sRnBlRXhSVlVaTVRFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMDNXakJLUWxGNlRrTk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWMFFsRlZjM05UTUVaQ1UzbDRXRkZWUmxoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMUV3UmtKUmVuUnVVV3RHUkU0d1VYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRXhSVlVaTVRFWmtRbEZXWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5WTUVaQ1ZYbDRSRkZWUmtSUE1tUkRVVlZOZGxKRGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPVVV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVEZCYzFNd1JrSlRlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlZrSlJWVlZ6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVVEp3UkV4RmRFSlJWWE56VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPY1ZGNWVFeFJWVVpNVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUkdGclRYTlRNRVpDVTNsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdOclRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtaVFEzaE1VVlZHVEV4RlRrSlJWVTF6VXpCR1FsTjVlRWhSVlVaSVRFVjBRbEZWYzNOU01FWkNVbmw0VEZGVlJreE1SVTVDVVZWTk4xZFZSa1JPVlVselV6QkdRbE41ZUVSUlZVWkVURVV4UWxGVk1ITlNNRVpDVW5sNFRGRlZSa3hNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkU4eFJrSlJNbkJFVEVWT1FsRlZUVGRUVlVaRVZFTjRSRkZWUmtSUE1HeENaRlZPUlV4R1RrSlJWazF6VGtWS1FsRlVVa05NUlU1Q1VWVk5jMVJWUmtKVVZIUlNVVlZPTkZGNWVFNVJWVVpPVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJsWkNVVlpWYzFFd1JrSlJlblJhVVZWV01GRnBlRXBSVlVaS1RFVXhRbEZWTUhOU01FWkNVbmw0UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSUE1XeENVbFJXUTB4RlRrSlJWVTF6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZaVmMxTlZSa0pUVkhSdVVXdEdSRTFWU1hOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUblZSYVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmthMGx6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkdVME40VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSUE1XeENVWHBPUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMDNWMVZHU0Uwd1NYTlRWVVpDVTFONFRsRlZSazVNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWV1FsRlZWWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JQTVd4Q1VUTmFSa3hGYkVKUlZXdHpWRlZHUWxSVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFZGRlZSbFJNUldSQ1VWVmpjMUV3UmtKUmVYaElVVlZHU0V4R1ZrSlJWbFZ6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpWRlZHUWxSVGVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRWbEZWUmxaTVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1NFeEdaRUpSVm1OelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlRYTlJNRVpDVVhwMFdsRlZaRFpUUTNoRVVWVkdSRXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmxaTVJXeENVVlZyTjFvd1NrSlJla1pEVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVZbXRKYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUU1UlZVWk9URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUTmFRMHhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXhRWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUlZRM2hFVVZWR1JFOHdiRUpUVlZGelZUQkdRbFY1ZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJsRlZSa1pNUjBaQ1VWZEZOMVZWUmtSUFZVbHpVMVZHUWxOVGVGaFJWVVpZVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVIyeERVVlZHY0ZGcGVFUlJWVVpFVHpGR1FsRjZUa1JNUld4Q1VWVnJjMVV3UmtKVmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1elVXbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTFONFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKU1ZFNUZURVpPUWxGV1RYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4R1ZrSlJWbFZ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkWFZVWkVZa1ZOYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMDNWVlZHUkdGclVYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtaVFEzaEtVVlZHU2t4RmJFSlJWV3R6VWpCR1FsSjVlRVpSVlVaR1RFVmtRbEZWWTNOVk1FWkNWWGw0UkZGVlJrUlBNVVpDVVhwR1EweEZiRUpSVld0elV6QkdRbE41ZUVoUlZVWklURVZXUWxGVlZYTlNNRVpDVW5sNGJsRnJSa0phTUVselVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUalJSZVhoS1VWVkdTa3hIWkVOUlZVWnVVV2w0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVldObEZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFRsRlZSazVNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUkU4eFJrSlJlbFpEVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlWGhVVVZWR1ZFeEZUa0pSVlUwM1ZWVkdSRTVWU1hOVFZVWkNVMU40U2xGVlJrcE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHU0ZwRGVFcFJWVVpLVEVWV1FsRlZWWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFOHhSa0pSZWtaRFRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SVEZDVVZVd2MxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZVMDNWVlZHUmsxVlNYTlVNRVpDVkhsNFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaFVVVlZHVkV4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFVmtRbEZWWTNOWk1FWkNXWGw0UkZGVlJrUk1SMFpDVVZkRmMxSlZSa0pTVkhSYVVWVlZlRkpEZUVwUlZVWktURVZzUWxGVmEzTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZOMW93U2tKUk1XZHpVMVZHUWxOVGVFWlJWVVpHVEVWa1FsRlZZM05UTUVaQ1UzbDRTRkZWUmtoTVJVNUNVVlZOYzFNd1JrSlRlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURWRPUWxGWFRYTlJNRVpDVVhsNGFsRlZSbXBNUlU1Q1VWVk5OMW93U2tKUk1taEdURVZzUWxGVmEzTlRWVVpDVTFONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFRkWlZVWkVUakJKTjFkVlJrUlNRM2hLVVZWR1NreEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZUZGFNRXBDVVRGbmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVMVZHUWxOVGVFaFJWVVpJVEVWT1FsRlZUWE5UTUVaQ1UzbDRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEhUa0pSVjAxelVUQkdRbEY1ZUdwUlZVWnFURVZPUWxGVlRUZGFNRXBDVVhrNVJVeEZiRUpSVld0elUxVkdRbE5UZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JFNHdTVGRYVlVaR1VrTjRSbEZWUmtaTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSa2EwbHpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFOVlJrSlRVM2hJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVUekZzUWxKVVRrTk1SV3hDVVZWcmMxTlZSa0pUVTNoSVVWVkdTRXhHWkVKUlZtTnpVbFZHUWxKVWRHNVJhMFpFWTBWSmMxWXdSa0pXZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRHNVJhMFpFWW10SmMxVXdSa0pWZVhoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUWxGNmRHaFJWVTV6VVdwMFdsRlZWa1ZNUld4Q1VWVnJjMU5WUmtKVFUzaElVVlZHU0V4R1pFSlJWbU56VWxWR1FsSlVkRzVSYTBaRVkwVkpjMVl3UmtKV2VYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjZkRzVSYTBaRVltdEpjMVV3UmtKVmVYaElVVlZHU0V4RlZrSlJWVlZ6VVRCR1FsRjZkR2hSVlU1elVXcDBXbEZWVmtWTVJXeENVVlZyYzFOVlJrSlRVM2hJVVZWR1NFeEZiRUpSVld0elVsVkdRbEpVZEc1UmEwWkVXV2w0U2xGVlJrcE1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh5WkVOUlZVNVhURVZXUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMW93U2tKUk1VbHpVMVZHUWxOVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBibEZyUmtSWGFYaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV4YnpkaFZVcENVVlV3TjFvd1NrSlJNR2R6VXpCR1FsTjVlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWHAwYmxGclJrUlhRM2hHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUekprUTFGVlRsTk1SV3hDVVZWcmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMDNXakJLUWxFeGIzTlRWVVpDVTFONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUm9VVlZPWVU4eGJFSlNWVkZ6VTFWR1FsTlRlRzVSYTBaQ1dqQkpjMUpWUmtKU1UzaElVVlZHU0V4RlpFSlJWV056VWxWR1FsSlVkRzVSYTBaRVRWVkpjMVJWUmtKVVZIUm9VVlZPVlU4eFRrSlJNRzgzVlZWR1JsSkRlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRTh3YkVKUmVrWkRURVZPUWxGVlRUZFRWVVpLVWtONFZGRlZSbFJNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VlRCR1FsVjZkRkpSVlU0MlVXbDRTbEZWUmtwTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pSTVZselZsVkdRbFpUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUbTFNUm1SQ1VWWmpjMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHRkZTWE5aVlVaQ1dWTjRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlblJTVVZWV01sRnBlRXhSVlVaTVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNWSFJhVVZWT2MxRjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdGRlNYTlZWVVpDVlZONFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaFVVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjZkRlJSVlUxNFVXcDBVbEZWVmtWTVJUbENVVlU0YzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUdwUlZVWnFURVZXUWxGVlZYTlNNRVpDVW5sNGFGRlZSbWhNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPTUZKRGVFUlJWVVpFVHpCc1FsSXdVWE5WTUVaQ1ZYbDRVbEZWUmxKTVJVNUNVVlZOYzFOVlJrSlRVM2hHVVZWR1JreEdUa0pSVmswM1ZWVkdTRTR3U1hOVFZVWkNVMU40VGxGVlJrNU1SV1JDVVZWamMxVXdSa0pWZVhoRVVWVkdSRTh4UmtKU1dGcERURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSazh4YkVKUk1uaEVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VmxWR1FsWlRlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaElVVlZHU0V4SFRrSlJWMDF6VVRCR1FsRjVlRkJSVlVaUVRFVmtRbEZWWTNOVk1FWkNWWGw0UkZGVlJrUk1SV3hDVVZWcmMxa3dSa0paZVhoRVVWVkdSRXhIUmtKUlYwVnpVbFZHUWxKVWRHNVJhMFpFWkVWdmMxUlZSa0pVVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtSaGEwbHpWRlZHUWxSVWRHaFJWVTVWVHpGT1FsRXdiemRWVlVaR1VrTjRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVUekZHUWxKWGFFTk1SV3hDVVZWcmMxUlZSa0pVVTNoTVVWVkdURXhHVGtKUlZrMXpVbFZHUWxKVWRGcFJWVTR3VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOVVZVWkNWRk40UkZGVlJrUk1SWFJDVVZWemMxSXdSa0pTZVhocVVWVkdha3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVHpGc1FsRjZSa1ZNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWHAwV2xGVlRqSlJhWGhLVVZWR1NreEZUa0pSVlUxelZsVkdRbFpUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMWRWUmtSUFZVbHpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhiRUpSTTBwRFRFVXhRbEZWTUhOUk1FWkNVWGw0VmxGVlJsWk1SV3hDVVZWcmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVHcFJWVVpxVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSUE1XeENVWHBHUlV4Rk1VSlJWVEJ6VVRCR1FsRjVlRTVSVlVaT1RFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxSXdSa0pTZVhocVVWVkdha3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVHpGT1FsRXpjRVZQTWtaQ1VWVXdOMWRWUmtSVFEzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFZEdRbEZYUlhOUk1FWkNVWHAwV2xGVlRqSlJhWGhvVVZWR2FFeEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlNNRVpDVW5sNGFsRlZSbXBNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkU4eGJFSlJNMUpGVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFOHhiRUpSTW1oRFRFVnNRbEZWYTNOUk1FWkNVWGw0VGxGVlJrNU1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTU1VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMVpWUmtKV1UzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVk1FWkVZV3ROTjFWVlJrWlNRM2hLVVZWR1NreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaFlVVlZHV0V4RlpFSlJWV056VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOWlZVWkNXVlIwV2xGVlJrWk1SbVJDVVZaamMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFOHhSa0pSTTBKSlRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFaFJWVVpJVEVaV1FsRldWWE5TTUVaQ1VubDRSRkZWUmtSTVIwNUNVVmROYzFFd1JrSlJlWGhvVVZWR2FFOHhiRUpSVlZWelZsVkdRbFpUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VWpCR1FsSjVlRTVSVlVaT1RFVk9RbEZWVFRkVFZVWkVZMFZuYzFFd1JrSlJlblJLVVZWR1FreEZUa0pSVlUwM1UxVkdSbEpwZUZSUlZVWlVURWRrUTFGVlJtNVJhWGhFVVZWR1JFeEZiRUpSVldzM1ZWVkdSRTFWU1hOVFZVWkNVMU40VEZGVlJreE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1sRnpVMVZHUWxOVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFOVlJrSlRVM2hRVVZWR1VFeEZkRUpSVlhOelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVTNsNFNGRlZSa2hNUjA1Q1VWZE5jMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRuRlNhWGhRVVZWR1VFeEZkRUpSVlhOelVUQkdRbEY2ZEVwUlZVNXhVV2w0UkZGVlJrUlBNR3hDVWxWUmMxVXdSa0pWZVhocVVWVkdhazh4UmtKUk1qVkRURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSbFpNUldSQ1VWVmpjMVl3UmtKV2VYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JHUkZUWE5STUVaQ1VYcDBRbEZWVGsxTVJVNUNVVlZOTjFGVlJYaFZSVkZ6WWpCT1FrMUdRa1JQTUVaQ1ZGVlJjMVV3UmtKYU1FbHpXVEJHUWxsNWVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRURkZWUmt4UE1HeENVVE5hUkV4RmJFSlJWV3R6VXpCR1FsTjVlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWHAwU2xGVlRtMU1SV3hDVVZWcmMxTlZSa0pUVTNoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUWxGNmRFcFJWVTVyVEVWc1FsRlZhM05VVlVaQ1ZGTjRTRkZWUmtoTVJWWkNVVlZWYzFFd1JrSlJlblJLVVZWT2IxRnBlRXBSVlVaS1RFWkdRbEZXUlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1poYTBselV6QkdRbE41ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVk4xVlZSa1JpYTAxelUxVkdRbE5UZUVwUlZVWktURVZrUWxGVlkzTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMEpEVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUwM1ZWVkdSR05yU1hOVFZVWkNVMU40UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNmRGSlJWVTU1VVdsNFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVR6RnNRbEV5VVhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjA4eGJFSlNXR2hEVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZWWGhSYVhoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSUE1XeENVVEpSYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzVHpGc1FsSllhRU5NUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZW5STVVWVk5NMUZxZEVwUlZWWkZURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSazh4UmtKUk1qVkVURVZzUWxGVmEzTlRWVVpDVTFONFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1M1VXbDRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVUekZzUWxGVlZYTlZNRVpDVlhwMFVsRlZUbTlSZVhoYVVWVkdXa3hGVGtKUlZVMXpVMVZHUWxOVGVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1IUkNVWHBXUTA4d2JFSlNWVkZ6VlRCR1FsVjVlRnBSVlVaYVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVEZDVVZVd04xVlZSa1JOTUVselUxVkdRbE5UZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaE1VVlZHVEV4R1RrSlJWazAzVjFWR1FsSlRlRkJSVlVaUVR6RkdRbEV6Y0VSTVJXeENVVlZyYzFSVlJrSlVVM2hHVVZWR1JrOHhiRUpSTVVselZWVkdRbFZUZUVaUlZVWkdURVZPUWxGVlRUZFhWVVpFVjBONFRsRlZSazVNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlZrSlJWVlZ6VXpCR1FsTjVlRVpSVlVaR1RFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xVXdSa1JQVlVrM1ZWVkdSRkpEZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4R1JrSlJWa1Z6VVRCR1FsRjZkRkpSVlUxNFVXbDRUbEZWUms1TVJVNUNVVlZOYzFWVlJrSlZVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHSnJUWE5UVlVaQ1UxTjRVbEZWUmxKTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUVE5SYVhoS1VWVkdTa3hGVGtKUlZVMXpWVlZHUWxWVWRGcFJWVVpHVEVVNVFsRlZPRGRWVlVaR1pFVkpjMU13UmtKVGVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1Sa1pDVVZaRmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWVGRYVlVaRVpFVk5jMWRWUmtKWFUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZW5SVVVWVk9kMUY2ZEVwUlZVNU5URVZPUWxGVlRUZFRWVVpHVWtONFVGRlZSbEJNUlRGQ1VWVXdjMUV3UmtKUmVuUkNVVlZPYzFGcGVFUlJWVVpFVHpCR1FrNVZUa1ZNU0dSRVVWUlNSRkY1U2praUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNiblpoY2lCd2IzZGxjbWR5WVhCb0lEMGdjbVZ4ZFdseVpTaGNJaTR2Y0c5M1pYSm5jbUZ3YUZ3aUtUdGNiblpoY2lCc2FXNXJiR1Z1WjNSb2MxOHhJRDBnY21WeGRXbHlaU2hjSWk0dmJHbHVhMnhsYm1kMGFITmNJaWs3WEc1MllYSWdaR1Z6WTJWdWRGOHhJRDBnY21WeGRXbHlaU2hjSWk0dlpHVnpZMlZ1ZEZ3aUtUdGNiblpoY2lCeVpXTjBZVzVuYkdWZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDNKbFkzUmhibWRzWlZ3aUtUdGNiblpoY2lCemFHOXlkR1Z6ZEhCaGRHaHpYekVnUFNCeVpYRjFhWEpsS0Z3aUxpOXphRzl5ZEdWemRIQmhkR2h6WENJcE8xeHVkbUZ5SUdkbGIyMWZNU0E5SUhKbGNYVnBjbVVvWENJdUwyZGxiMjFjSWlrN1hHNTJZWElnYUdGdVpHeGxaR2x6WTI5dWJtVmpkR1ZrWHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTlvWVc1a2JHVmthWE5qYjI1dVpXTjBaV1JjSWlrN1hHNTJZWElnUlhabGJuUlVlWEJsTzF4dUtHWjFibU4wYVc5dUlDaEZkbVZ1ZEZSNWNHVXBJSHRjYmlBZ0lDQkZkbVZ1ZEZSNWNHVmJSWFpsYm5SVWVYQmxXMXdpYzNSaGNuUmNJbDBnUFNBd1hTQTlJRndpYzNSaGNuUmNJanRjYmlBZ0lDQkZkbVZ1ZEZSNWNHVmJSWFpsYm5SVWVYQmxXMXdpZEdsamExd2lYU0E5SURGZElEMGdYQ0owYVdOclhDSTdYRzRnSUNBZ1JYWmxiblJVZVhCbFcwVjJaVzUwVkhsd1pWdGNJbVZ1WkZ3aVhTQTlJREpkSUQwZ1hDSmxibVJjSWp0Y2JuMHBLRVYyWlc1MFZIbHdaU0E5SUdWNGNHOXlkSE11UlhabGJuUlVlWEJsSUh4OElDaGxlSEJ2Y25SekxrVjJaVzUwVkhsd1pTQTlJSHQ5S1NrN1hHNDdYRzVtZFc1amRHbHZiaUJwYzBkeWIzVndLR2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHY3ViR1ZoZG1WeklDRTlQU0FuZFc1a1pXWnBibVZrSnlCOGZDQjBlWEJsYjJZZ1p5NW5jbTkxY0hNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuTzF4dWZWeHVkbUZ5SUV4aGVXOTFkQ0E5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1RHRjViM1YwS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5allXNTJZWE5UYVhwbElEMGdXekVzSURGZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2FXNXJSR2x6ZEdGdVkyVWdQU0F5TUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWbVlYVnNkRTV2WkdWVGFYcGxJRDBnTVRBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4cGJtdE1aVzVuZEdoRFlXeGpkV3hoZEc5eUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsdWExUjVjR1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhkbTlwWkU5MlpYSnNZWEJ6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVUnBjMk52Ym01bFkzUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSjFibTVwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYm05a1pYTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWjNKdmRYQnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKdmIzUkhjbTkxY0NBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhwYm10eklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym5OMGNtRnBiblJ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnBjM1JoYm1ObFRXRjBjbWw0SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6WTJWdWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJScGNtVmpkR1ZrVEdsdWEwTnZibk4wY21GcGJuUnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHaHlaWE5vYjJ4a0lEMGdNQzR3TVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1semFXSnBiR2wwZVVkeVlYQm9JRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlozSnZkWEJEYjIxd1lXTjBibVZ6Y3lBOUlERmxMVFk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWFpsYm5RZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXhwYm10QlkyTmxjM052Y2lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRGTnZkWEpqWlVsdVpHVjRPaUJNWVhsdmRYUXVaMlYwVTI5MWNtTmxTVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhSVVlYSm5aWFJKYm1SbGVEb2dUR0Y1YjNWMExtZGxkRlJoY21kbGRFbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVEdWdVozUm9PaUJNWVhsdmRYUXVjMlYwVEdsdWEweGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZEZSNWNHVTZJR1oxYm1OMGFXOXVJQ2hzS1NCN0lISmxkSFZ5YmlCMGVYQmxiMllnWDNSb2FYTXVYMnhwYm10VWVYQmxJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJmZEdocGN5NWZiR2x1YTFSNWNHVW9iQ2tnT2lBd095QjlYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lFeGhlVzkxZEM1d2NtOTBiM1I1Y0dVdWIyNGdQU0JtZFc1amRHbHZiaUFvWlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbVYyWlc1MEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxkbVZ1ZENBOUlIdDlPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WMlpXNTBXMFYyWlc1MFZIbHdaVnRsWFYwZ1BTQnNhWE4wWlc1bGNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWFpsYm5SYlpWMGdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUV4aGVXOTFkQzV3Y205MGIzUjVjR1V1ZEhKcFoyZGxjaUE5SUdaMWJtTjBhVzl1SUNobEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVYyWlc1MElDWW1JSFI1Y0dWdlppQjBhR2x6TG1WMlpXNTBXMlV1ZEhsd1pWMGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVYyWlc1MFcyVXVkSGx3WlYwb1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1d2NtOTBiM1I1Y0dVdWEybGpheUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tDRjBhR2x6TG5ScFkyc29LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEdGNiaUFnSUNCOU8xeHVJQ0FnSUV4aGVXOTFkQzV3Y205MGIzUjVjR1V1ZEdsamF5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyRnNjR2hoSUR3Z2RHaHBjeTVmZEdoeVpYTm9iMnhrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXlkVzV1YVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnlhV2RuWlhJb2V5QjBlWEJsT2lCRmRtVnVkRlI1Y0dVdVpXNWtMQ0JoYkhCb1lUb2dkR2hwY3k1ZllXeHdhR0VnUFNBd0xDQnpkSEpsYzNNNklIUm9hWE11WDJ4aGMzUlRkSEpsYzNNZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JpQTlJSFJvYVhNdVgyNXZaR1Z6TG14bGJtZDBhQ3dnYlNBOUlIUm9hWE11WDJ4cGJtdHpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdkbUZ5SUc4c0lHazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxjMk5sYm5RdWJHOWphM011WTJ4bFlYSW9LVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJRzQ3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2J5QTlJSFJvYVhNdVgyNXZaR1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOHVabWw0WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzh1Y0hnZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElIUjVjR1Z2WmlCdkxuQjVJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxuQjRJRDBnYnk1NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2TG5CNUlEMGdieTU1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjQ0E5SUZ0dkxuQjRMQ0J2TG5CNVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmpaVzUwTG14dlkydHpMbUZrWkNocExDQndLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2N6RWdQU0IwYUdsekxsOWtaWE5qWlc1MExuSjFibWRsUzNWMGRHRW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITXhJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloYkhCb1lTQTlJREE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhSb2FYTXVYMnhoYzNSVGRISmxjM01nSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aGJIQm9ZU0E5SUhNeE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JUZEhKbGMzTWdQU0J6TVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVk9iMlJsVUc5emFYUnBiMjV6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWg3SUhSNWNHVTZJRVYyWlc1MFZIbHdaUzUwYVdOckxDQmhiSEJvWVRvZ2RHaHBjeTVmWVd4d2FHRXNJSE4wY21WemN6b2dkR2hwY3k1ZmJHRnpkRk4wY21WemN5QjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzUxY0dSaGRHVk9iMlJsVUc5emFYUnBiMjV6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2VDQTlJSFJvYVhNdVgyUmxjMk5sYm5RdWVGc3dYU3dnZVNBOUlIUm9hWE11WDJSbGMyTmxiblF1ZUZzeFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc4c0lHa2dQU0IwYUdsekxsOXViMlJsY3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc4Z1BTQjBhR2x6TGw5dWIyUmxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzh1ZUNBOUlIaGJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZMbmtnUFNCNVcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQk1ZWGx2ZFhRdWNISnZkRzkwZVhCbExtNXZaR1Z6SUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZibTlrWlhNdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUhSb2FYTXVYMnhwYm10ekxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JpQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiR2x1YTNNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdUlEMGdUV0YwYUM1dFlYZ29iaXdnYkM1emIzVnlZMlVzSUd3dWRHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dWIyUmxjeUE5SUc1bGR5QkJjbkpoZVNncksyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYmpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI1dlpHVnpXMmxkSUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyNXZaR1Z6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDI1dlpHVnpJRDBnZGp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCTVlYbHZkWFF1Y0hKdmRHOTBlWEJsTG1keWIzVndjeUE5SUdaMWJtTjBhVzl1SUNoNEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJR2xtSUNnaGVDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5jbTkxY0hNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJkeWIzVndjeUE5SUhnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKdmIzUkhjbTkxY0NBOUlIdDlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW5jbTkxY0hNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm5MbkJoWkdScGJtY2dQVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaeTV3WVdSa2FXNW5JRDBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWnk1c1pXRjJaWE1nSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbkxteGxZWFpsY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMkxDQnBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkaUE5UFQwZ0oyNTFiV0psY2ljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1p5NXNaV0YyWlhOYmFWMGdQU0JmZEdocGN5NWZibTlrWlhOYmRsMHBMbkJoY21WdWRDQTlJR2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2N1WjNKdmRYQnpJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWnk1bmNtOTFjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWjJrc0lHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm5hU0E5UFQwZ0oyNTFiV0psY2ljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1p5NW5jbTkxY0hOYmFWMGdQU0JmZEdocGN5NWZaM0p2ZFhCelcyZHBYU2t1Y0dGeVpXNTBJRDBnWnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSnZiM1JIY205MWNDNXNaV0YyWlhNZ1BTQjBhR2x6TGw5dWIyUmxjeTVtYVd4MFpYSW9ablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUhSNWNHVnZaaUIyTG5CaGNtVnVkQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDYzdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5YjI5MFIzSnZkWEF1WjNKdmRYQnpJRDBnZEdocGN5NWZaM0p2ZFhCekxtWnBiSFJsY2lobWRXNWpkR2x2YmlBb1p5a2dleUJ5WlhSMWNtNGdkSGx3Wlc5bUlHY3VjR0Z5Wlc1MElEMDlQU0FuZFc1a1pXWnBibVZrSnpzZ2ZTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdUR0Y1YjNWMExuQnliM1J2ZEhsd1pTNXdiM2RsY2tkeVlYQm9SM0p2ZFhCeklEMGdablZ1WTNScGIyNGdLR1lwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2NnUFNCd2IzZGxjbWR5WVhCb0xtZGxkRWR5YjNWd2N5aDBhR2x6TGw5dWIyUmxjeXdnZEdocGN5NWZiR2x1YTNNc0lIUm9hWE11YkdsdWEwRmpZMlZ6YzI5eUxDQjBhR2x6TGw5eWIyOTBSM0p2ZFhBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1keWIzVndjeWhuTG1keWIzVndjeWs3WEc0Z0lDQWdJQ0FnSUdZb1p5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJSDA3WEc0Z0lDQWdUR0Y1YjNWMExuQnliM1J2ZEhsd1pTNWhkbTlwWkU5MlpYSnNZWEJ6SUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmhjbWQxYldWdWRITXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRjJiMmxrVDNabGNteGhjSE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkYyYjJsa1QzWmxjbXhoY0hNZ1BTQjJPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVhR0Z1Wkd4bFJHbHpZMjl1Ym1WamRHVmtJRDBnWm5WdVkzUnBiMjRnS0hZcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJoaGJtUnNaVVJwYzJOdmJtNWxZM1JsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxSR2x6WTI5dWJtVmpkR1ZrSUQwZ2RqdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQk1ZWGx2ZFhRdWNISnZkRzkwZVhCbExtWnNiM2RNWVhsdmRYUWdQU0JtZFc1amRHbHZiaUFvWVhocGN5d2diV2x1VTJWd1lYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGeVozVnRaVzUwY3k1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhlR2x6SUQwZ0oza25PMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWthWEpsWTNSbFpFeHBibXREYjI1emRISmhhVzUwY3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGNGFYTTZJR0Y0YVhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhSTmFXNVRaWEJoY21GMGFXOXVPaUIwZVhCbGIyWWdiV2x1VTJWd1lYSmhkR2x2YmlBOVBUMGdKMjUxYldKbGNpY2dQeUJtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCdGFXNVRaWEJoY21GMGFXOXVPeUI5SURvZ2JXbHVVMlZ3WVhKaGRHbHZibHh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOU8xeHVJQ0FnSUV4aGVXOTFkQzV3Y205MGIzUjVjR1V1YkdsdWEzTWdQU0JtZFc1amRHbHZiaUFvZUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdGeVozVnRaVzUwY3k1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkdsdWEzTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeHBibXR6SUQwZ2VEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQk1ZWGx2ZFhRdWNISnZkRzkwZVhCbExtTnZibk4wY21GcGJuUnpJRDBnWm5WdVkzUnBiMjRnS0dNcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOdmJuTjBjbUZwYm5Sek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amIyNXpkSEpoYVc1MGN5QTlJR003WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzVrYVhOMFlXNWpaVTFoZEhKcGVDQTlJR1oxYm1OMGFXOXVJQ2hrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWVhKbmRXMWxiblJ6TG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrYVhOMFlXNWpaVTFoZEhKcGVEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHbHpkR0Z1WTJWTllYUnlhWGdnUFNCa08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1d2NtOTBiM1I1Y0dVdWMybDZaU0E5SUdaMWJtTjBhVzl1SUNoNEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGVDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpZVzUyWVhOVGFYcGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpZVzUyWVhOVGFYcGxJRDBnZUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZUdGNiaUFnSUNCTVlYbHZkWFF1Y0hKdmRHOTBlWEJsTG1SbFptRjFiSFJPYjJSbFUybDZaU0E5SUdaMWJtTjBhVzl1SUNoNEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGVDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWtaV1poZFd4MFRtOWtaVk5wZW1VN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSbFptRjFiSFJPYjJSbFUybDZaU0E5SUhnN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMDdYRzRnSUNBZ1RHRjViM1YwTG5CeWIzUnZkSGx3WlM1bmNtOTFjRU52YlhCaFkzUnVaWE56SUQwZ1puVnVZM1JwYjI0Z0tIZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmR5YjNWd1EyOXRjR0ZqZEc1bGMzTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyZHliM1Z3UTI5dGNHRmpkRzVsYzNNZ1BTQjRPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXViR2x1YTBScGMzUmhibU5sSUQwZ1puVnVZM1JwYjI0Z0tIZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkdsdWEwUnBjM1JoYm1ObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeHBibXRFYVhOMFlXNWpaU0E5SUhSNWNHVnZaaUI0SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCNElEb2dLM2c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhwYm10TVpXNW5kR2hEWVd4amRXeGhkRzl5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JNWVhsdmRYUXVjSEp2ZEc5MGVYQmxMbXhwYm10VWVYQmxJRDBnWm5WdVkzUnBiMjRnS0dZcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHVhMVI1Y0dVZ1BTQm1PMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVZMjl1ZG1WeVoyVnVZMlZVYUhKbGMyaHZiR1FnUFNCbWRXNWpkR2x2YmlBb2VDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkR2h5WlhOb2IyeGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBhSEpsYzJodmJHUWdQU0IwZVhCbGIyWWdlQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnZUNBNklDdDRPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVZV3h3YUdFZ1BTQm1kVzVqZEdsdmJpQW9lQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV3h3YUdFN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdlQ0E5SUN0NE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJGc2NHaGhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZ2dQaUF3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aGJIQm9ZU0E5SUhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloYkhCb1lTQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoNElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNuVnVibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXlkVzV1YVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5S0hzZ2RIbHdaVG9nUlhabGJuUlVlWEJsTG5OMFlYSjBMQ0JoYkhCb1lUb2dkR2hwY3k1ZllXeHdhR0VnUFNCNElIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXRwWTJzb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzVuWlhSTWFXNXJUR1Z1WjNSb0lEMGdablZ1WTNScGIyNGdLR3hwYm1zcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMGFHbHpMbDlzYVc1clJHbHpkR0Z1WTJVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBL0lDc29kR2hwY3k1ZmJHbHVhMFJwYzNSaGJtTmxLR3hwYm1zcEtTQTZJSFJvYVhNdVgyeHBibXRFYVhOMFlXNWpaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1elpYUk1hVzVyVEdWdVozUm9JRDBnWm5WdVkzUnBiMjRnS0d4cGJtc3NJR3hsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JzYVc1ckxteGxibWQwYUNBOUlHeGxibWQwYUR0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVaMlYwVEdsdWExUjVjR1VnUFNCbWRXNWpkR2x2YmlBb2JHbHVheWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JSFJvYVhNdVgyeHBibXRVZVhCbElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QjBhR2x6TGw5c2FXNXJWSGx3WlNoc2FXNXJLU0E2SURBN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JNWVhsdmRYUXVjSEp2ZEc5MGVYQmxMbk41YlcxbGRISnBZMFJwWm1aTWFXNXJUR1Z1WjNSb2N5QTlJR1oxYm1OMGFXOXVJQ2hwWkdWaGJFeGxibWQwYUN3Z2R5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2R5QTlQVDBnZG05cFpDQXdLU0I3SUhjZ1BTQXhPeUI5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR2x1YTBScGMzUmhibU5sS0daMWJtTjBhVzl1SUNoc0tTQjdJSEpsZEhWeWJpQnBaR1ZoYkV4bGJtZDBhQ0FxSUd3dWJHVnVaM1JvT3lCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbHVhMHhsYm1kMGFFTmhiR04xYkdGMGIzSWdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCc2FXNXJiR1Z1WjNSb2MxOHhMbk41YlcxbGRISnBZMFJwWm1aTWFXNXJUR1Z1WjNSb2N5aGZkR2hwY3k1ZmJHbHVhM01zSUY5MGFHbHpMbXhwYm10QlkyTmxjM052Y2l3Z2R5azdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzVxWVdOallYSmtUR2x1YTB4bGJtZDBhSE1nUFNCbWRXNWpkR2x2YmlBb2FXUmxZV3hNWlc1bmRHZ3NJSGNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGNnUFQwOUlIWnZhV1FnTUNrZ2V5QjNJRDBnTVRzZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGJtdEVhWE4wWVc1alpTaG1kVzVqZEdsdmJpQW9iQ2tnZXlCeVpYUjFjbTRnYVdSbFlXeE1aVzVuZEdnZ0tpQnNMbXhsYm1kMGFEc2dmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhwYm10TVpXNW5kR2hEWVd4amRXeGhkRzl5SUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdiR2x1YTJ4bGJtZDBhSE5mTVM1cVlXTmpZWEprVEdsdWEweGxibWQwYUhNb1gzUm9hWE11WDJ4cGJtdHpMQ0JmZEdocGN5NXNhVzVyUVdOalpYTnpiM0lzSUhjcE95QjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVjM1JoY25RZ1BTQm1kVzVqZEdsdmJpQW9hVzVwZEdsaGJGVnVZMjl1YzNSeVlXbHVaV1JKZEdWeVlYUnBiMjV6TENCcGJtbDBhV0ZzVlhObGNrTnZibk4wY21GcGJuUkpkR1Z5WVhScGIyNXpMQ0JwYm1sMGFXRnNRV3hzUTI5dWMzUnlZV2x1ZEhOSmRHVnlZWFJwYjI1ekxDQm5jbWxrVTI1aGNFbDBaWEpoZEdsdmJuTXNJR3RsWlhCU2RXNXVhVzVuTENCalpXNTBaWEpIY21Gd2FDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNXBkR2xoYkZWdVkyOXVjM1J5WVdsdVpXUkpkR1Z5WVhScGIyNXpJRDA5UFNCMmIybGtJREFwSUhzZ2FXNXBkR2xoYkZWdVkyOXVjM1J5WVdsdVpXUkpkR1Z5WVhScGIyNXpJRDBnTURzZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYVc1cGRHbGhiRlZ6WlhKRGIyNXpkSEpoYVc1MFNYUmxjbUYwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3SUdsdWFYUnBZV3hWYzJWeVEyOXVjM1J5WVdsdWRFbDBaWEpoZEdsdmJuTWdQU0F3T3lCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm1sMGFXRnNRV3hzUTI5dWMzUnlZV2x1ZEhOSmRHVnlZWFJwYjI1eklEMDlQU0IyYjJsa0lEQXBJSHNnYVc1cGRHbGhiRUZzYkVOdmJuTjBjbUZwYm5SelNYUmxjbUYwYVc5dWN5QTlJREE3SUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR2R5YVdSVGJtRndTWFJsY21GMGFXOXVjeUE5UFQwZ2RtOXBaQ0F3S1NCN0lHZHlhV1JUYm1Gd1NYUmxjbUYwYVc5dWN5QTlJREE3SUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3RsWlhCU2RXNXVhVzVuSUQwOVBTQjJiMmxrSURBcElIc2dhMlZsY0ZKMWJtNXBibWNnUFNCMGNuVmxPeUI5WEc0Z0lDQWdJQ0FnSUdsbUlDaGpaVzUwWlhKSGNtRndhQ0E5UFQwZ2RtOXBaQ0F3S1NCN0lHTmxiblJsY2tkeVlYQm9JRDBnZEhKMVpUc2dmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2FTd2dhaXdnYmlBOUlIUm9hWE11Ym05a1pYTW9LUzVzWlc1bmRHZ3NJRTRnUFNCdUlDc2dNaUFxSUhSb2FYTXVYMmR5YjNWd2N5NXNaVzVuZEdnc0lHMGdQU0IwYUdsekxsOXNhVzVyY3k1c1pXNW5kR2dzSUhjZ1BTQjBhR2x6TGw5allXNTJZWE5UYVhwbFd6QmRMQ0JvSUQwZ2RHaHBjeTVmWTJGdWRtRnpVMmw2WlZzeFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhnZ1BTQnVaWGNnUVhKeVlYa29UaWtzSUhrZ1BTQnVaWGNnUVhKeVlYa29UaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQkhJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGdklEMGdkR2hwY3k1ZllYWnZhV1JQZG1WeWJHRndjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZibTlrWlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2Rpd2dhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkaTVwYm1SbGVDQTlJR2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFl1ZUNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxuZ2dQU0IzSUM4Z01pd2dkaTU1SUQwZ2FDQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCNFcybGRJRDBnZGk1NExDQjVXMmxkSUQwZ2RpNTVPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyeHBibXRNWlc1bmRHaERZV3hqZFd4aGRHOXlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsdWEweGxibWQwYUVOaGJHTjFiR0YwYjNJb0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdScGMzUmhibU5sY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyUnBjM1JoYm1ObFRXRjBjbWw0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhOMFlXNWpaWE1nUFNCMGFHbHpMbDlrYVhOMFlXNWpaVTFoZEhKcGVEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdScGMzUmhibU5sY3lBOUlDaHVaWGNnYzJodmNuUmxjM1J3WVhSb2MxOHhMa05oYkdOMWJHRjBiM0lvVGl3Z2RHaHBjeTVmYkdsdWEzTXNJRXhoZVc5MWRDNW5aWFJUYjNWeVkyVkpibVJsZUN3Z1RHRjViM1YwTG1kbGRGUmhjbWRsZEVsdVpHVjRMQ0JtZFc1amRHbHZiaUFvYkNrZ2V5QnlaWFIxY200Z1gzUm9hWE11WjJWMFRHbHVhMHhsYm1kMGFDaHNLVHNnZlNrcExrUnBjM1JoYm1ObFRXRjBjbWw0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JISUQwZ1pHVnpZMlZ1ZEY4eExrUmxjMk5sYm5RdVkzSmxZWFJsVTNGMVlYSmxUV0YwY21sNEtFNHNJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SURJN0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkdsdWEzTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9iQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JDNXpiM1Z5WTJVZ1BUMGdYQ0p1ZFcxaVpYSmNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDNXpiM1Z5WTJVZ1BTQmZkR2hwY3k1ZmJtOWtaWE5iYkM1emIzVnlZMlZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JDNTBZWEpuWlhRZ1BUMGdYQ0p1ZFcxaVpYSmNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JDNTBZWEpuWlhRZ1BTQmZkR2hwY3k1ZmJtOWtaWE5iYkM1MFlYSm5aWFJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2FXNXJjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFVnUFNCTVlYbHZkWFF1WjJWMFUyOTFjbU5sU1c1a1pYZ29aU2tzSUhZZ1BTQk1ZWGx2ZFhRdVoyVjBWR0Z5WjJWMFNXNWtaWGdvWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1IxdDFYVnQyWFNBOUlFZGJkbDFiZFYwZ1BTQmxMbmRsYVdkb2RDQjhmQ0F4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJRVFnUFNCa1pYTmpaVzUwWHpFdVJHVnpZMlZ1ZEM1amNtVmhkR1ZUY1hWaGNtVk5ZWFJ5YVhnb1Rpd2dablZ1WTNScGIyNGdLR2tzSUdvcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrYVhOMFlXNWpaWE5iYVYxYmFsMDdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmNtOXZkRWR5YjNWd0lDWW1JSFI1Y0dWdlppQjBhR2x6TGw5eWIyOTBSM0p2ZFhBdVozSnZkWEJ6SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdrZ1BTQnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0ZrWkVGMGRISmhZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpQW9hU3dnYWl3Z2MzUnlaVzVuZEdnc0lHbGtaV0ZzUkdsemRHRnVZMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCSFcybGRXMnBkSUQwZ1IxdHFYVnRwWFNBOUlITjBjbVZ1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUmJhVjFiYWwwZ1BTQkVXMnBkVzJsZElEMGdhV1JsWVd4RWFYTjBZVzVqWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bmNtOTFjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaRUYwZEhKaFkzUnBiMjRvYVN3Z2FTQXJJREVzSUY5MGFHbHpMbDluY205MWNFTnZiWEJoWTNSdVpYTnpMQ0F3TGpFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaeTVpYjNWdVpITWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhoYmFWMGdQU0IzSUM4Z01pd2dlVnRwS3l0ZElEMGdhQ0F2SURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGhiYVYwZ1BTQjNJQzhnTWl3Z2VWdHBLeXRkSUQwZ2FDQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNFcybGRJRDBnWnk1aWIzVnVaSE11ZUN3Z2VWdHBLeXRkSUQwZ1p5NWliM1Z1WkhNdWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUZ0cFhTQTlJR2N1WW05MWJtUnpMbGdzSUhsYmFTc3JYU0E5SUdjdVltOTFibVJ6TGxrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtOXZkRWR5YjNWd0lEMGdleUJzWldGMlpYTTZJSFJvYVhNdVgyNXZaR1Z6TENCbmNtOTFjSE02SUZ0ZElIMDdYRzRnSUNBZ0lDQWdJSFpoY2lCamRYSkRiMjV6ZEhKaGFXNTBjeUE5SUhSb2FYTXVYMk52Ym5OMGNtRnBiblJ6SUh4OElGdGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWkdseVpXTjBaV1JNYVc1clEyOXVjM1J5WVdsdWRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdsdWEwRmpZMlZ6YzI5eUxtZGxkRTFwYmxObGNHRnlZWFJwYjI0Z1BTQjBhR2x6TGw5a2FYSmxZM1JsWkV4cGJtdERiMjV6ZEhKaGFXNTBjeTVuWlhSTmFXNVRaWEJoY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzVnlRMjl1YzNSeVlXbHVkSE1nUFNCamRYSkRiMjV6ZEhKaGFXNTBjeTVqYjI1allYUW9iR2x1YTJ4bGJtZDBhSE5mTVM1blpXNWxjbUYwWlVScGNtVmpkR1ZrUldSblpVTnZibk4wY21GcGJuUnpLRzRzSUhSb2FYTXVYMnhwYm10ekxDQjBhR2x6TGw5a2FYSmxZM1JsWkV4cGJtdERiMjV6ZEhKaGFXNTBjeTVoZUdsekxDQW9kR2hwY3k1c2FXNXJRV05qWlhOemIzSXBLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoZG05cFpFOTJaWEpzWVhCektHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWelkyVnVkQ0E5SUc1bGR5QmtaWE5qWlc1MFh6RXVSR1Z6WTJWdWRDaGJlQ3dnZVYwc0lFUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaWE5qWlc1MExteHZZMnR6TG1Oc1pXRnlLQ2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2Jqc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2J5QTlJSFJvYVhNdVgyNXZaR1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOHVabWw0WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZMbkI0SUQwZ2J5NTRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1Y0hrZ1BTQnZMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQWdQU0JiYnk1NExDQnZMbmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJsYzJObGJuUXViRzlqYTNNdVlXUmtLR2tzSUhBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSbGMyTmxiblF1ZEdoeVpYTm9iMnhrSUQwZ2RHaHBjeTVmZEdoeVpYTm9iMnhrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1YVhScFlXeE1ZWGx2ZFhRb2FXNXBkR2xoYkZWdVkyOXVjM1J5WVdsdVpXUkpkR1Z5WVhScGIyNXpMQ0I0TENCNUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dOMWNrTnZibk4wY21GcGJuUnpMbXhsYm1kMGFDQStJREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmpaVzUwTG5CeWIycGxZM1FnUFNCdVpYY2djbVZqZEdGdVoyeGxYekV1VUhKdmFtVmpkR2x2YmloMGFHbHpMbDl1YjJSbGN5d2dkR2hwY3k1ZlozSnZkWEJ6TENCMGFHbHpMbDl5YjI5MFIzSnZkWEFzSUdOMWNrTnZibk4wY21GcGJuUnpLUzV3Y205cVpXTjBSblZ1WTNScGIyNXpLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYzJObGJuUXVjblZ1S0dsdWFYUnBZV3hWYzJWeVEyOXVjM1J5WVdsdWRFbDBaWEpoZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxjR0Z5WVhSbFQzWmxjbXhoY0hCcGJtZERiMjF3YjI1bGJuUnpLSGNzSUdnc0lHTmxiblJsY2tkeVlYQm9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhkbTlwWkU5MlpYSnNZWEJ6S0dGdktUdGNiaUFnSUNBZ0lDQWdhV1lnS0dGdktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl1YjJSbGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaDJMQ0JwS1NCN0lIWXVlQ0E5SUhoYmFWMHNJSFl1ZVNBOUlIbGJhVjA3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6WTJWdWRDNXdjbTlxWldOMElEMGdibVYzSUhKbFkzUmhibWRzWlY4eExsQnliMnBsWTNScGIyNG9kR2hwY3k1ZmJtOWtaWE1zSUhSb2FYTXVYMmR5YjNWd2N5d2dkR2hwY3k1ZmNtOXZkRWR5YjNWd0xDQmpkWEpEYjI1emRISmhhVzUwY3l3Z2RISjFaU2t1Y0hKdmFtVmpkRVoxYm1OMGFXOXVjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJtOWtaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGl3Z2FTa2dleUI0VzJsZElEMGdkaTU0TENCNVcybGRJRDBnZGk1NU95QjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWlhOalpXNTBMa2NnUFNCSE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmpaVzUwTG5KMWJpaHBibWwwYVdGc1FXeHNRMjl1YzNSeVlXbHVkSE5KZEdWeVlYUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2R5YVdSVGJtRndTWFJsY21GMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpZMlZ1ZEM1emJtRndVM1J5Wlc1bmRHZ2dQU0F4TURBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6WTJWdWRDNXpibUZ3UjNKcFpGTnBlbVVnUFNCMGFHbHpMbDl1YjJSbGMxc3dYUzUzYVdSMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJsYzJObGJuUXViblZ0UjNKcFpGTnVZWEJPYjJSbGN5QTlJRzQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmpaVzUwTG5OallXeGxVMjVoY0VKNVRXRjRTQ0E5SUc0Z0lUMGdUanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJITUNBOUlHUmxjMk5sYm5SZk1TNUVaWE5qWlc1MExtTnlaV0YwWlZOeGRXRnlaVTFoZEhKcGVDaE9MQ0JtZFc1amRHbHZiaUFvYVN3Z2Fpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElENDlJRzRnZkh3Z2FpQStQU0J1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1IxdHBYVnRxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpZMlZ1ZEM1SElEMGdSekE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmpaVzUwTG5KMWJpaG5jbWxrVTI1aGNFbDBaWEpoZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFRtOWtaVkJ2YzJsMGFXOXVjeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sY0dGeVlYUmxUM1psY214aGNIQnBibWREYjIxd2IyNWxiblJ6S0hjc0lHZ3NJR05sYm5SbGNrZHlZWEJvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd0bFpYQlNkVzV1YVc1bklEOGdkR2hwY3k1eVpYTjFiV1VvS1NBNklIUm9hWE03WEc0Z0lDQWdmVHRjYmlBZ0lDQk1ZWGx2ZFhRdWNISnZkRzkwZVhCbExtbHVhWFJwWVd4TVlYbHZkWFFnUFNCbWRXNWpkR2x2YmlBb2FYUmxjbUYwYVc5dWN5d2dlQ3dnZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZaM0p2ZFhCekxteGxibWQwYUNBK0lEQWdKaVlnYVhSbGNtRjBhVzl1Y3lBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1SUQwZ2RHaHBjeTVmYm05a1pYTXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVmtaMlZ6SUQwZ2RHaHBjeTVmYkdsdWEzTXViV0Z3S0daMWJtTjBhVzl1SUNobEtTQjdJSEpsZEhWeWJpQW9leUJ6YjNWeVkyVTZJR1V1YzI5MWNtTmxMbWx1WkdWNExDQjBZWEpuWlhRNklHVXVkR0Z5WjJWMExtbHVaR1Y0SUgwcE95QjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIyY3lBOUlIUm9hWE11WDI1dlpHVnpMbTFoY0NobWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdLSHNnYVc1a1pYZzZJSFl1YVc1a1pYZ2dmU2s3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaM0p2ZFhCekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHY3NJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmN5NXdkWE5vS0hzZ2FXNWtaWGc2SUdjdWFXNWtaWGdnUFNCdUlDc2dhU0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlozSnZkWEJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0djc0lHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdjdWJHVmhkbVZ6SUNFOVBTQW5kVzVrWldacGJtVmtKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1p5NXNaV0YyWlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2Rpa2dleUJ5WlhSMWNtNGdaV1JuWlhNdWNIVnphQ2g3SUhOdmRYSmpaVG9nWnk1cGJtUmxlQ3dnZEdGeVoyVjBPaUIyTG1sdVpHVjRJSDBwT3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2N1WjNKdmRYQnpJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWnk1bmNtOTFjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWjJjcElIc2djbVYwZFhKdUlHVmtaMlZ6TG5CMWMyZ29leUJ6YjNWeVkyVTZJR2N1YVc1a1pYZ3NJSFJoY21kbGREb2daMmN1YVc1a1pYZ2dmU2s3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1RHRjViM1YwS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWMybDZaU2gwYUdsekxuTnBlbVVvS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWJtOWtaWE1vZG5NcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xteHBibXR6S0dWa1oyVnpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVoZG05cFpFOTJaWEpzWVhCektHWmhiSE5sS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1c2FXNXJSR2x6ZEdGdVkyVW9kR2hwY3k1c2FXNXJSR2x6ZEdGdVkyVW9LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YzNsdGJXVjBjbWxqUkdsbVpreHBibXRNWlc1bmRHaHpLRFVwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1OdmJuWmxjbWRsYm1ObFZHaHlaWE5vYjJ4a0tERmxMVFFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5OMFlYSjBLR2wwWlhKaGRHbHZibk1zSURBc0lEQXNJREFzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI1dlpHVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNFczWXVhVzVrWlhoZElEMGdkbk5iZGk1cGJtUmxlRjB1ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNVczWXVhVzVrWlhoZElEMGdkbk5iZGk1cGJtUmxlRjB1ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpZMlZ1ZEM1eWRXNG9hWFJsY21GMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXdjbTkwYjNSNWNHVXVjMlZ3WVhKaGRHVlBkbVZ5YkdGd2NHbHVaME52YlhCdmJtVnVkSE1nUFNCbWRXNWpkR2x2YmlBb2QybGtkR2dzSUdobGFXZG9kQ3dnWTJWdWRHVnlSM0poY0dncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNBZ0lDQWdhV1lnS0dObGJuUmxja2R5WVhCb0lEMDlQU0IyYjJsa0lEQXBJSHNnWTJWdWRHVnlSM0poY0dnZ1BTQjBjblZsT3lCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZaR2x6ZEdGdVkyVk5ZWFJ5YVhnZ0ppWWdkR2hwY3k1ZmFHRnVaR3hsUkdselkyOXVibVZqZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlRjh4SUQwZ2RHaHBjeTVmWkdWelkyVnVkQzU0V3pCZExDQjVYekVnUFNCMGFHbHpMbDlrWlhOalpXNTBMbmhiTVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXViMlJsY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMkxDQnBLU0I3SUhZdWVDQTlJSGhmTVZ0cFhTd2dkaTU1SUQwZ2VWOHhXMmxkT3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm5jbUZ3YUhNZ1BTQm9ZVzVrYkdWa2FYTmpiMjV1WldOMFpXUmZNUzV6WlhCaGNtRjBaVWR5WVhCb2N5aDBhR2x6TGw5dWIyUmxjeXdnZEdocGN5NWZiR2x1YTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxaR2x6WTI5dWJtVmpkR1ZrWHpFdVlYQndiSGxRWVdOcmFXNW5LR2R5WVhCb2N5d2dkMmxrZEdnc0lHaGxhV2RvZEN3Z2RHaHBjeTVmWkdWbVlYVnNkRTV2WkdWVGFYcGxMQ0FvYUdWcFoyaDBJQzhnZDJsa2RHZ3BMQ0JqWlc1MFpYSkhjbUZ3YUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXViMlJsY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMkxDQnBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMlJsYzJObGJuUXVlRnN3WFZ0cFhTQTlJSFl1ZUN3Z1gzUm9hWE11WDJSbGMyTmxiblF1ZUZzeFhWdHBYU0E5SUhZdWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZGk1aWIzVnVaSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTVpYjNWdVpITXVjMlYwV0VObGJuUnlaU2gyTG5ncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyTG1KdmRXNWtjeTV6WlhSWlEyVnVkSEpsS0hZdWVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1d2NtOTBiM1I1Y0dVdWNtVnpkVzFsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aGJIQm9ZU2d3TGpFcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzV6ZEc5d0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhiSEJvWVNnd0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUV4aGVXOTFkQzV3Y205MGIzUjVjR1V1Y0hKbGNHRnlaVVZrWjJWU2IzVjBhVzVuSUQwZ1puVnVZM1JwYjI0Z0tHNXZaR1ZOWVhKbmFXNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNXZaR1ZOWVhKbmFXNGdQVDA5SUhadmFXUWdNQ2tnZXlCdWIyUmxUV0Z5WjJsdUlEMGdNRHNnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyYVhOcFltbHNhWFI1UjNKaGNHZ2dQU0J1WlhjZ1oyVnZiVjh4TGxSaGJtZGxiblJXYVhOcFltbHNhWFI1UjNKaGNHZ29kR2hwY3k1ZmJtOWtaWE11YldGd0tHWjFibU4wYVc5dUlDaDJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RpNWliM1Z1WkhNdWFXNW1iR0YwWlNndGJtOWtaVTFoY21kcGJpa3VkbVZ5ZEdsalpYTW9LVHRjYmlBZ0lDQWdJQ0FnZlNrcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdGNWIzVjBMbkJ5YjNSdmRIbHdaUzV5YjNWMFpVVmtaMlVnUFNCbWRXNWpkR2x2YmlBb1pXUm5aU3dnWVdnc0lHUnlZWGNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZvSUQwOVBTQjJiMmxrSURBcElIc2dZV2dnUFNBMU95QjlYRzRnSUNBZ0lDQWdJSFpoY2lCc2FXNWxSR0YwWVNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RtY3lJRDBnYm1WM0lHZGxiMjFmTVM1VVlXNW5aVzUwVm1semFXSnBiR2wwZVVkeVlYQm9LSFJvYVhNdVgzWnBjMmxpYVd4cGRIbEhjbUZ3YUM1UUxDQjdJRlk2SUhSb2FYTXVYM1pwYzJsaWFXeHBkSGxIY21Gd2FDNVdMQ0JGT2lCMGFHbHpMbDkyYVhOcFltbHNhWFI1UjNKaGNHZ3VSU0I5S1N3Z2NHOXlkREVnUFNCN0lIZzZJR1ZrWjJVdWMyOTFjbU5sTG5nc0lIazZJR1ZrWjJVdWMyOTFjbU5sTG5rZ2ZTd2djRzl5ZERJZ1BTQjdJSGc2SUdWa1oyVXVkR0Z5WjJWMExuZ3NJSGs2SUdWa1oyVXVkR0Z5WjJWMExua2dmU3dnYzNSaGNuUWdQU0IyWnpJdVlXUmtVRzlwYm5Rb2NHOXlkREVzSUdWa1oyVXVjMjkxY21ObExtbHVaR1Y0S1N3Z1pXNWtJRDBnZG1jeUxtRmtaRkJ2YVc1MEtIQnZjblF5TENCbFpHZGxMblJoY21kbGRDNXBibVJsZUNrN1hHNGdJQ0FnSUNBZ0lIWm5NaTVoWkdSRlpHZGxTV1pXYVhOcFlteGxLSEJ2Y25ReExDQndiM0owTWl3Z1pXUm5aUzV6YjNWeVkyVXVhVzVrWlhnc0lHVmtaMlV1ZEdGeVoyVjBMbWx1WkdWNEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJrY21GM0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhKaGR5aDJaeklwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6YjNWeVkyVkpibVFnUFNCbWRXNWpkR2x2YmlBb1pTa2dleUJ5WlhSMWNtNGdaUzV6YjNWeVkyVXVhV1E3SUgwc0lIUmhjbWRsZEVsdVpDQTlJR1oxYm1OMGFXOXVJQ2hsS1NCN0lISmxkSFZ5YmlCbExuUmhjbWRsZEM1cFpEc2dmU3dnYkdWdVozUm9JRDBnWm5WdVkzUnBiMjRnS0dVcElIc2djbVYwZFhKdUlHVXViR1Z1WjNSb0tDazdJSDBzSUhOd1EyRnNZeUE5SUc1bGR5QnphRzl5ZEdWemRIQmhkR2h6WHpFdVEyRnNZM1ZzWVhSdmNpaDJaekl1Vmk1c1pXNW5kR2dzSUhabk1pNUZMQ0J6YjNWeVkyVkpibVFzSUhSaGNtZGxkRWx1WkN3Z2JHVnVaM1JvS1N3Z2MyaHZjblJsYzNSUVlYUm9JRDBnYzNCRFlXeGpMbEJoZEdoR2NtOXRUbTlrWlZSdlRtOWtaU2h6ZEdGeWRDNXBaQ3dnWlc1a0xtbGtLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITm9iM0owWlhOMFVHRjBhQzVzWlc1bmRHZ2dQVDA5SURFZ2ZId2djMmh2Y25SbGMzUlFZWFJvTG14bGJtZDBhQ0E5UFQwZ2RtY3lMbFl1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY205MWRHVWdQU0J5WldOMFlXNW5iR1ZmTVM1dFlXdGxSV1JuWlVKbGRIZGxaVzRvWldSblpTNXpiM1Z5WTJVdWFXNXVaWEpDYjNWdVpITXNJR1ZrWjJVdWRHRnlaMlYwTG1sdWJtVnlRbTkxYm1SekxDQmhhQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNhVzVsUkdGMFlTQTlJRnR5YjNWMFpTNXpiM1Z5WTJWSmJuUmxjbk5sWTNScGIyNHNJSEp2ZFhSbExtRnljbTkzVTNSaGNuUmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzRnUFNCemFHOXlkR1Z6ZEZCaGRHZ3ViR1Z1WjNSb0lDMGdNaXdnY0NBOUlIWm5NaTVXVzNOb2IzSjBaWE4wVUdGMGFGdHVYVjB1Y0N3Z2NTQTlJSFpuTWk1V1czTm9iM0owWlhOMFVHRjBhRnN3WFYwdWNDd2diR2x1WlVSaGRHRWdQU0JiWldSblpTNXpiM1Z5WTJVdWFXNXVaWEpDYjNWdVpITXVjbUY1U1c1MFpYSnpaV04wYVc5dUtIQXVlQ3dnY0M1NUtWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdianNnYVNBK1BTQXdPeUF0TFdrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHVaVVJoZEdFdWNIVnphQ2gyWnpJdVZsdHphRzl5ZEdWemRGQmhkR2hiYVYxZExuQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHbHVaVVJoZEdFdWNIVnphQ2h5WldOMFlXNW5iR1ZmTVM1dFlXdGxSV1JuWlZSdktIRXNJR1ZrWjJVdWRHRnlaMlYwTG1sdWJtVnlRbTkxYm1SekxDQmhhQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc2FXNWxSR0YwWVR0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNW5aWFJUYjNWeVkyVkpibVJsZUNBOUlHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdaUzV6YjNWeVkyVWdQVDA5SUNkdWRXMWlaWEluSUQ4Z1pTNXpiM1Z5WTJVZ09pQmxMbk52ZFhKalpTNXBibVJsZUR0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNW5aWFJVWVhKblpYUkpibVJsZUNBOUlHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwZVhCbGIyWWdaUzUwWVhKblpYUWdQVDA5SUNkdWRXMWlaWEluSUQ4Z1pTNTBZWEpuWlhRZ09pQmxMblJoY21kbGRDNXBibVJsZUR0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXNhVzVyU1dRZ1BTQm1kVzVqZEdsdmJpQW9aU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVEdGNWIzVjBMbWRsZEZOdmRYSmpaVWx1WkdWNEtHVXBJQ3NnWENJdFhDSWdLeUJNWVhsdmRYUXVaMlYwVkdGeVoyVjBTVzVrWlhnb1pTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCTVlYbHZkWFF1WkhKaFoxTjBZWEowSUQwZ1puVnVZM1JwYjI0Z0tHUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSM0p2ZFhBb1pDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeGhlVzkxZEM1emRHOXlaVTltWm5ObGRDaGtMQ0JNWVhsdmRYUXVaSEpoWjA5eWFXZHBiaWhrS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNWVhsdmRYUXVjM1J2Y0U1dlpHVW9aQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtMbVpwZUdWa0lIdzlJREk3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRDNXpkRzl3VG05a1pTQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lIWXVjSGdnUFNCMkxuZzdYRzRnSUNBZ0lDQWdJSFl1Y0hrZ1BTQjJMbms3WEc0Z0lDQWdmVHRjYmlBZ0lDQk1ZWGx2ZFhRdWMzUnZjbVZQWm1aelpYUWdQU0JtZFc1amRHbHZiaUFvWkN3Z2IzSnBaMmx1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaQzVzWldGMlpYTWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa0xteGxZWFpsY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTVtYVhobFpDQjhQU0F5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4aGVXOTFkQzV6ZEc5d1RtOWtaU2gyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxsOWtjbUZuUjNKdmRYQlBabVp6WlhSWUlEMGdkaTU0SUMwZ2IzSnBaMmx1TG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpNWZaSEpoWjBkeWIzVndUMlptYzJWMFdTQTlJSFl1ZVNBdElHOXlhV2RwYmk1NU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJrTG1keWIzVndjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUXVaM0p2ZFhCekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHY3BJSHNnY21WMGRYSnVJRXhoZVc5MWRDNXpkRzl5WlU5bVpuTmxkQ2huTENCdmNtbG5hVzRwT3lCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1RHRjViM1YwTG1SeVlXZFBjbWxuYVc0Z1BTQm1kVzVqZEdsdmJpQW9aQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWE5IY205MWNDaGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRPaUJrTG1KdmRXNWtjeTVqZUNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIazZJR1F1WW05MWJtUnpMbU41S0NsY2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1RHRjViM1YwTG1SeVlXY2dQU0JtZFc1amRHbHZiaUFvWkN3Z2NHOXphWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dselIzSnZkWEFvWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pDNXNaV0YyWlhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDNXNaV0YyWlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2Rpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa0xtSnZkVzVrY3k1elpYUllRMlZ1ZEhKbEtIQnZjMmwwYVc5dUxuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa0xtSnZkVzVrY3k1elpYUlpRMlZ1ZEhKbEtIQnZjMmwwYVc5dUxua3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMkxuQjRJRDBnZGk1ZlpISmhaMGR5YjNWd1QyWm1jMlYwV0NBcklIQnZjMmwwYVc5dUxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdWNIa2dQU0IyTGw5a2NtRm5SM0p2ZFhCUFptWnpaWFJaSUNzZ2NHOXphWFJwYjI0dWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pDNW5jbTkxY0hNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pDNW5jbTkxY0hNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1p5a2dleUJ5WlhSMWNtNGdUR0Y1YjNWMExtUnlZV2NvWnl3Z2NHOXphWFJwYjI0cE95QjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdRdWNIZ2dQU0J3YjNOcGRHbHZiaTU0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdaQzV3ZVNBOUlIQnZjMmwwYVc5dUxuazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1a2NtRm5SVzVrSUQwZ1puVnVZM1JwYjI0Z0tHUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHpSM0p2ZFhBb1pDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaQzVzWldGMlpYTWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaQzVzWldGMlpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1ZWGx2ZFhRdVpISmhaMFZ1WkNoMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFl1WDJSeVlXZEhjbTkxY0U5bVpuTmxkRmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMkxsOWtjbUZuUjNKdmRYQlBabVp6WlhSWk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa0xtZHliM1Z3Y3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa0xtZHliM1Z3Y3k1bWIzSkZZV05vS0V4aGVXOTFkQzVrY21GblJXNWtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdRdVptbDRaV1FnSmowZ2ZqWTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZEM1dGIzVnpaVTkyWlhJZ1BTQm1kVzVqZEdsdmJpQW9aQ2tnZTF4dUlDQWdJQ0FnSUNCa0xtWnBlR1ZrSUh3OUlEUTdYRzRnSUNBZ0lDQWdJR1F1Y0hnZ1BTQmtMbmdzSUdRdWNIa2dQU0JrTG5rN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JNWVhsdmRYUXViVzkxYzJWUGRYUWdQU0JtZFc1amRHbHZiaUFvWkNrZ2UxeHVJQ0FnSUNBZ0lDQmtMbVpwZUdWa0lDWTlJSDQwTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFeGhlVzkxZER0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGt4aGVXOTFkQ0E5SUV4aGVXOTFkRHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhV0pIUmpWaU0xWXdURzF3ZWtscGQybGpNamt4WTIxT2JGVnRPWFprUTBrMlNXbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1hVFIyVEdrMGRsWXlWbWxSTWpseldWTTVlbU50VFhaaVIwWTFZak5XTUV4dVVucEpiREJ6U1cwMWFHSlhWbnBKYW5CaVdGTjNhV0pYUm5kalIyeDFXak5OYVU5cFNUZFBNRVpDVVZWRmMyVlZUa0pSVkVKRVR6QkdRbEY2UmtSTVJGcEVVVlZGY2xORWRFSlJWVTEyVTBONGVGRXdSa0poVlUwM1VWVkdSR0ZyVFhObFZVNUNVVlJvUms4d1JrSlJlbXhHVEVkc1JWRlZSWGRSZW5SQ1VWVk5lRkY1ZDNKUmEwWkNaRlZSTjFGVlJrUmthMUZ6VFd0U1FsRlhiRVpQTUVaQ1ZIcGtSVXhGYkVKUlZtdHpWVEJHUWs5RlNUZFJWVVpDVFZWTmMxWXdSa0pYVTNoVVVWVkdWRTh3YkVKUlZXTnpUV3RPUWxGVmMzTlJNRVpDVVZSMFNsRlZSa1pNU0d4RVVWVkdTa3hGVGtKUlZVVTNVMVZHUWxKVGVERlJNRVpDVW5sNFJGRlZSa0pQTUVaQ1VWVk5jMUV3UmtKUmVYaEdVVlZGTlZGcGVGUlJWVVpVVEVWa1FsRldVWE5oVlVwQ1VWWk5jMU13UmtKV1EzaHdVV3RHUWxWNWVGSlJWVVo0VVdwMFFsRlZSa0pNUlU1Q1VWVk5OMUZWUlhKUmVrNUVURVpPUWxGV1RYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVXdOMU5WUmtSaWEwbHpWREJHUWxSNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFZd1JrSldlWGhLVVZWR1NreEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlRNRVpDVTNsNFdGRlZSbGhNUlU1Q1VWVk5OMUZWUmtSUFZWVnpVVEJHUWxGNmRFSlJXR1JEVWtSMFNsRlZSa0pQTVVaQ1VWVkZjMkZWU2tKa1dHeERVWHAwVWxGWVVqVlJiR056V2pCS1FsRldZM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNTVVV2w0Y2xGclJrSlpVM2hJVVZWR05WRjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVaV3RSYzJOVlNrSlJWMlJEVEVWa1FsRldZM05TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVWHBzUTB4RVFrTlJWVVo0VVdsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUlNVVlZOTTFGcGVHcFJWVVpVVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSUE1VWkNVVEp3UTB4SE1VTlJWVVpxVEVWa1FsRlZZM05UTUVaQ1UzbDRSRkZWUmtSUE1VWkNVVE5hUTB4SVpFTlJWVVowVVdsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUlNVVlZqZWxGcGVHaFJWVVpTVEVWa1FsRlZZM05UTUVaQ1UzbDRSRkZWUmtSUE1VWkNVVEp3UTB4R1pFSlJWVEJ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVWMmw0V2xGVlJsQk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4UmtKUk1rbHpXbFZHUWxaVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVG5OUmFYaFlVVlZHVGt4RlpFSlJWRUpEVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVG5WUmVYaHdVV3RHUWxkVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVG5OUmFYaDJVV3RHUWxwVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVGpKUmFYaG9VVlZHVWt4RlpFSlJWbXR6VTFWR1FsTlRlRVJSVlVaRVR6RkdRbEV6Y0VOTVJGcERVVlZHTTFGcGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVG05UmVYaHNVVlZHVmt4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6RkdRbEV5ZUVOTVNFWkRVVlZHYmxGcGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVGpSUmFYaDZVV3RHUW1GVlNYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5OMVZWUmtoa2EwbHpWbFZHUWxONWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZYZEZka2EwbHpZVlZLUWxGV2EzTlNNRVpDVFd0Sk4xZFZSa1JpYTAxeldUQkdRbGw1ZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVVhsNGFsRlZSbXBQTVd4Q1VUTktSRXhIVGtKUlYwMXpVbFZHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5aTUVaQ1dYcDBXbEZWVG5sUmVYaFVVVlZHVkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFZEdRbEZYUlRkWFZVWkVUREJKYzFRd1JrSlVlWGhHVVZWR1JreEdWa0pSVlVWelVUQkdRbEY1ZUVwUlZVWktURVU1UWxGVlJYTlVNRVpDVkhsNFRGRlZSa3BNUlU1Q1VWVk5jMVV3UmtKVmVYaE1VVlZHVEV4R1ZrSlJWbFZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVE1FWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUlRGU1EzaEVVVlZGTUZKRWRGUlJWVTB6VWxONFJGRlZSa1JQTUd4Q1pESktUMHhGVGtKUlZVMDNVMVZGZW1Rd1NsWk1SekZEVVZWR1JreEZaRUpSVmxGelZsVkdRbFpUZUVSUlZVWjRVV2w0UmxGVlJrWk1Sa1pDVVZkc1JFOHhSa0pTVkd4RlRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZW5SYVVWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVVEp3UkV4RmJFSlJWV3R6VkRCR1FsUjVlRVJSVlVaRVRFVjBRbEZWYzNOVlZVWkNWVk40UmxGVlJrWlBNV3hDVVROYVEweEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlZNRVpDVlhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VlZWR1FsVlRlRVJSVlVaRVR6Rk9RbEV6V2tSUE1rWkNVVlV3TjFkVlJrUlRRM2hLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUmtaQ1VWWkZjMUV3UmtKUmVuUlVVVlZOTVZGcWRGSlJWVTVGVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSUE1HeENVVEpvUTB4RlRrSlJWVTAzVTFWR1NsVjVlRE5SYTBaQ1ZIbDRTRkZWUm5GUmFYaFdVVlZHY2xGcGVFUlJWVVpTVHpGR1FsRXpVa05NUld4Q1VWVnJjMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VTFWR1FsTlRlRkJSVlVaUVRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVaa1FsRldZM05TVlVaQ1VsUjBXbEZWVGpaU1EzaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGUlJWVTQyVVdwMFNsRlZUazFNUlU1Q1VWVk5OMU5WUmt4VmVYaDRVV3RHUWxOVGVFaFJWVVpyVHpGR1FsRXdhM05VTUVaQ1ZIbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZWa0pSVlZVM1YxVkdRbEY1ZUVSUlZVWkVUekJzUWxFemNFTk1SVTVDVVZWTk4xTlZSa3hWZVhoNFVXdEdRbE5UZUVoUlZVWnJUekZHUWxFd2EzTlRWVVpDVTFONFNsRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRlpSVlVaV1RFVldRbEZWVlRkWFZVWkVUREJKYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVqQkdRbEo1ZUV4UlZVWk1URVZPUWxGVlRUZFhWVVpFWkVWSmMxTlZSa0pUVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFWlJWVVpHVEVWc1FsRlZhM05TVlVaQ1VsTjRWRkZWUmxSTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZkRUpSVlhOelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaE9VVlZHVGt4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFWmtRbEZXWTNOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JsUlZselZEQkdRbFI1ZUVwUlZVWktURVZPUWxGVlRUZFZNRVpFV21wMFVsRlZUa1ZNUld4Q1VWVXdjMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlRqQlJhWGhFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMVZWUmtST01FbHpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVbFpSYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlRNRVpDVTNsNFJsRlZSa1pNUlU1Q1VWVk5OMVZWUmtST1ZVbHpVekJHUWxONWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZXUWxGVlZUZFhWVVpFWTBWSmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmlhMGx6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOVE1FWkNVM2w0UmxGVlJrWlBNbVJEVVZWT1ZVeEZiRUpSVld0elZEQkdRbFI1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFRGRlZSa3hNUm1SQ1VWWmpjMU5WUmtKVFUzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVjBRbEZWYzNOV01FWkNWbmw0UmxGVlJrWlBNamxEVVZWTk1WSkRlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNZakJLUWxFeFozTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SnNRMUZWVG10UE1tUkRVVlZPUlV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUVGRhTUVwQ1VUTktRMHhGYkVKUlZXdHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFpWVVpFWVd0Tk4xVXdSa1JUYW5SU1VWVldSVXhGYkVKUlZXdHpVbFZHUWxKVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFaVlJrSldVM2hHVVZWR1JreEZUa0pSVlUwM1ZWVkdSbU5GVFhOVFZVWkNVMU40UmxGVlJrWk1SWFJDVVZWemMxRXdSa0pSZVhoR1VWVkdSazh4YkVKUk1WbHpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFVd1JrUmlhMGszV1ZWR1FsUlRlRXBSVlVaS1RFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUk1SbVJDVVZaamMxTXdSa0pUZVhoWVVWVkdXRXhGVmtKUlZWVTNWMVZHUkdGRlVYTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTAzVlRCR1JHTkZTVGRWVlVaRVVrTjRTbEZWUmtwTVJVNUNVVlZOYzFZd1JrSldlWGhJVVZWR1NFeEZWa0pSVlZWelVUQkdRbEY2ZEZKUlZWWXdVV2w0U2xGVlJrcE1SVTVDVVZWTmMySlZTa0pSVnpGRFRFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlZYcFJhWGhLVVZWR1NreEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUms1Q1VWWk5jMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VXpCR1FsTjVlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0VGxGVlJrNU1SVlpDVVZWVmMxUlZSa0pVVTNoR1VWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVGaFJWVVpZVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVE5LUjB4Rk9VSlJWVGh6VXpCR1FsTjVlRVJSVlVaRVR6QnNRbEV5Y0VOTVJVNUNVVlZOTjFOVlJraFVlWGgyVVRCR1FtSlZTWE5TTUVaQ1RUQkpOMVZWUmtSVFUzaEtVVlZHVGt4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWTJ0UmMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFOHhSa0pSZW14RFRFVTVRbEZWT0hOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVk4xZFZSa1JWYVhoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWT2RWRnBlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTVaVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZPUWxFeVVUZFRWVVpFVkVONFJGRlZSa1JQTUd4Q1ZqQlJjMk13U2tKUlZYTnpVakJHUWxSRGVGWlJWVVpPVEVWT1FsRlZPRGRWVlVaRVZrTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JrOHhiRUpSTUc5elUxVkdRbE5UZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlRGQ1VWVXdjMU13UmtKVGVYaEVVVlZHUkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0VGxGVlJrNU1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSazh5WkVOUlZXUjNVa040U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFeFdYTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VmxWR1FsWlRlRVJSVlVaRVR6STVRMUZWVFhwUmFYaEVVVlZHUkV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZaVmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxaVGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOTjFvd1NrSlJNMmhGVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZPU1V4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOVFZVWkNVMU40VEZGVlJreE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFVGpCSmMxTXdSa0pUZVhoS1VWVkdTa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpVZEhaUmEwWkVaVVZKYzFOVlJrSlRVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMkZWU2tKUk0xcERUekpHUWxFd2J6ZFhWVVpFVWtONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTAzVlRCR1JHUkZTVGRWVlVaRVVrTjRTbEZWUmtwTVJVNUNVVlZOYzFSVlJrSlVVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNXZVV2w0VUZGVlJsQk1SV3hDVVZWcmMxRXdSa0pSZW5SS1VWVk9iMUZwZUVSUlZVWkVUekJzUWxVd1VYTmtWVXBDVVZVd2MxSXdSa0pVYVhoV1VWVkdVRXhGVGtKUlYyUkRUekZHUWxGWVdrTk1SMnhEVVZoV1ExRjZkRkpSV0ZKRFVubDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWR1JreEZPVUpSVlRoelUxVkdRbE5UZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhwMFVsRlZUVEZSYVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5GUmFYaEtVVlZHU2t4RlRrSlJWVTF6VmxWR1FsWlRlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlRubFJhWGhLVVZWR1NreEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSa0pNUlU1Q1VWVk5OMWRWUmtSaVJVbHpVMVZHUWxOVGVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRVRkZWUmxCTVJYUkNVVlZ6YzFZd1JrSldlblJ1VVd0R1JHRkZUWE5STUVaQ1VYbDRSRkZWUmtSTVJUbENVVlU0YzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR0pGU1hOVFZVWkNVMU40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGZEVKUlZYTnpWakJHUWxaNWVFWlJWVVpHVHpKa1ExRlZUbkZSZVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFOHlPVU5SVlU1elVXbDRTbEZWUmtwTVJUbENVVlU0YzFFd1JrSlJlWGhNVVZWR1RFeEdSa0pSVmtVM1pEQktRbEV6U2tOTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFRGRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSVkhSdVVXdEdSR0ZyVVhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xbFZSa1JVYW5SYVVWVk9SVXhGYkVKUlZXdHpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRURkZWUmt4TVJtUkNVVlpqYzFKVlJrSlNWSFJ1VVd0R1JHRnJUWE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlJNRVpDVVhwMGRsRnJSa1JpYTBselUxVkdRbE5UZUZCUlZVWlFURVZXUWxGVlZYTlRNRVpDVTNsNFVsRlZSbEpQTTJSRFVWVk9NRkZwZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VXpCR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZSVGRhTUVwQ1VUSTFSVXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKR1FsRXdORGRWVlVaRVZFTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT1NVeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFWldRbEZWUlhOUk1FWkNVWGw0U2xGVlJrcE1SVGxDVVZWRmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFeFJWVVpNVEVaa1FsRldZM05TVlVaQ1REQkpjMUV3UmtKTE1FbHpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXllRWRNUld4Q1VWVnJjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhHVmtKUlZVVnpVVEJHUWxGNWVFcFJWVVpLVEVVNVFsRlZSWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hNVVZWR1RFeEdaRUpSVm1OelVsVkdRa3d3U1hOUk1FWkNTekJKYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTWpWSFRFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUlBNR3hDVVRKb1EweEZUa0pSVlUwM1UxVkdSbEpEZUhCUk1FWkNXakJKYzFJd1JrSmhSVWx6VmxWR1FtRlZTWE5STUVaQ1ZucDBVbEZWVGpSUmFYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRlpSVlVaV1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFkVlJrSlhVM2hHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUWHBTYVhoS1VWVkdTa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT01GRnBlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JVUTNoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNmRFcFJWVTV2VVdsNFJGRlZSa1JQTUd4Q1ZsVlJjMDlGU2tKUlYwVnpVakJHUWxscGVGWlJWVVpxVEVWT1FsRldZemRWVlVaRVkydEpjMU5WUmtKVFUzaEVVVlZHUkV4R1RrSlJWazF6VVRCR1FsRjVlRTVSVlVaT1R6RnNRbEZWVlhOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTmMxa3dSa0paZVhoRVVWVkdSRTh4UmtKUk1uaEZURVZzUWxGVmEzTlJNRVpDVVhsNGFsRlZSbXBNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMmhEVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSUE1HeENVVEpvUTB4RlRrSlJWVTAzVTFWR1dsSkRlSFJSTUVaQ1lUQkpjMUl3UmtKaVJVbHpWbFZHUW1KVlNYTlJNRVpDVm5wMFVsRlZUWGhSYVhoS1VWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVVeFFsRlZNRGRYVlVaQ1VsTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGgwVVd0R1FtSlZTWE5STUVaQ1VYcDBVbEZWVGpKU1EzaEtVVlZHU2t4RlRrSlJWVTF6WWxWS1FsRlhNVU5NUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJlbVJEVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSUE1HeENVVEpvUTB4RlRrSlJWVTAzVTFWR1VsSkRkM2xSYTBaQ1ZsTjRTRkZWUmxkTVJsWkNVVlpqYzFOVlJrSlhVM2hHVVZWR1JreEhSa0pSV0dSRVR6RkdRbEY2WkVWTVJXeENVVlZyYzFFd1JrSlJlWGhVVVZWR1ZFeEZUa0pSVlUxelZGVkdRbFJVZEZwUlZVWkdURVZzUWxGVmEzTlNNRVpDVW5sNFNGRlZSa2hNUlU1Q1VWVk5OMVZWUmtSaVJVMXpVMVZHUWxOVGVFUlJWVVpFVEVoa1ExRlZSak5SYVhoSVVWVkdTRTh4YkVKUmVsWkRURVZzUWxGVmEzTlNWVVpDVWxONFNsRlZSa3BQTVd4Q1VURlpjMW93U2tKUlYyUkRURVZXUWxGVlZYTlVNRVpDVkhsNGFGRlZSbWhNUlhSQ1VWVnpjMVZWUmtKVlUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlR3BSVlVacVRFVTVRbEZWT0hOWlZVWkNXVk40UkZGVlJrSk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVHaFJWVVpvVHpGT1FsRjZaRWhNUlU1Q1VWVk5OMVZWUmtSU2FYaFFVVlZHVUV4RmJFSlJWV3R6VVRCR1FsRjZkRXBSVlU1dlVXbDRSRkZWUmtSUE1HeENWVEJSYzJNd1NrSlJWWE56VWpCR1FsUkRlRlpSVlVaT1RFVk9RbEZVVWtOUE1VWkNVWHBzUTB4RmJFSlJWV3R6VVRCR1FsRjVlRlJSVlVaVVRFVk9RbEZWVFhOVVZVWkNWRlIwV2xGVlJrWk1SVGxDVVZVNGMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNmRGSlJWVTE0VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1dlVXbDRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlblJLVVZWT2IxRnBlRVJSVlVaRVR6QnNRbFpWVVhOT1JVcENVVlpqYzFJd1JrSlhRM2hXVVZWR1dreEZUa0pSVjAwM1ZWVkdSR1JGU1hOVFZVWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoT1VWVkdUazh4YkVKUlZWVnpWREJHUWxSNWVFcFJWVVpLVEVWT1FsRlZUWE5YVlVaQ1YxTjRSRkZWUmtSUE1VWkNVVEpvUlV4RmJFSlJWV3R6VVRCR1FsRjVlRnBSVlVaYVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVROU1EweEZPVUpSVlRoelUxVkdRbE5UZUVSUlZVWkVUekJzUWxFeWFFTk1SVTVDVVZWTk4xTlZSbGhTUTNkeVVXdEdRbGw1ZUVoUlZVWnJURVpXUWxGWFZYTlJNRVpDVkhwMFVsRlZUbk5SYVhoS1VWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVVeFFsRlZNRGRYVlVaQ1VsTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhzVVZWR2JFeEZUa0pSVlUwM1ZWVkdSR0pyVVhOVFZVWkNVMU40UkZGVlJrUk1SMVpDVVZkVmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkdWclNYTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5OMU5WUmtSaFJVbHpVVEJHUWxGNmRFcFJWbFpGVEVoR1ExRlZSa3BNUldSQ1VWVnZjMVpWUmtKVGVYaEVVVlZHY0ZGcWRGSlJWVTV6VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZHUmt4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVRFWmtRbEZXWTNOUk1FWkNVWHAwVWxGVlRtOVJlWGhLVVZWR1NreEZUa0pSVlUxelZqQkdRbFo1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUbmxSYVhoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNmRFcFJWVTV2VVdsNFJGRlZSa1JQTUd4Q1ZUQlJjMW93VGtKUlYxVnpVakJHUWxwcGVGWlJWVVp1VVdsNFJGRlZSbEJQTVVaQ1VUSTFRMHhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRlZWWE5VTUVaQ1ZIbDRTbEZWUmtwTVJVNUNVVlZOYzFvd1NrSlJWMlJEVEVWT1FsRlZUVGRWVlVaRVkydE5jMU5WUmtKVFUzaEVVVlZHUkV4SFpFTlJWVVp1VVdsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZOZUZGcGVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYcDBTbEZWVG05UmFYaEVVVlZHUkU4d2JFSlZNRkZ6WVZWT1FsRlhaRU5NUldSQ1VWZG9RMHhHVmtKUlYyeERURVZPUWxGVk9EZFZWVVpFWTBWSmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUWxKVGVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYbDRjRkZyUmtKaFZVbHpVVEJHUWxGNmRGSlJWVTR3VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMkZWU2tKUlYyeERURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VYcE9RMHhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVHpCc1FsRXlhRU5NUlU1Q1VWVk5OMU5WUmxSU1EzY3lVV3RHUWxkVGVFaFJWVVpoVEVaV1FsRlhSWE5STUVaQ1ZIcDBVbEZWVG05UmFYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1R6RnNRbEV3YjNOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTmMxbFZSa0paVTNoRVVWVkdSRTh4VGtKUmVtUkRUekZHUWxFd1VYTlRWVVpDVTFONFJGRlZSa1JNUjBaQ1VWZEZjMUl3UmtKU2VYaFFVVlZHVUV4RlRrSlJWVTF6VXpCR1FsTjVlRlpSVlVaV1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVpFVlJjMU5WUmtKVFUzaEVVVlZHUkV4SVJrTlJWVVo0VVdsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUlNVVlZPYzFGNWVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYcDBTbEZWVG05UmFYaEVVVlZHUkU4d2JFSlNWVkZ6WlZWS1FsRldSWE5TTUVaQ1ZXbDRWbEZWUmxSTVJVNUNVVmM1UTA4eFJrSlJNM0JEVEVWc1FsRlZhM05STUVaQ1VYbDRWRkZWUmxSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTWpWRFRFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUlBNR3hDVVRKb1EweEZUa0pSVlUwM1UxVkdTbEpEZUhoUk1FWkNZakJKYzFJd1JrSmpSVWx6VmxWR1FtTlZTWE5STUVaQ1ZsUjBVbEZWVFhwUmFYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlVaR1RFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUk1SbFpDVVZaVmMxRXdSa0pSZW5SU1VWVk5kbEZwZUVwUlZVWktURVZPUWxGVlRYTldWVVpDVmxONFNGRlZSa2hNUlRsQ1VWVTRjMUV3UmtKUmVYaE1VVlZHVEV4R1ZrSlJWbFZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTUxVWtONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVuUktVVlZPYjFGcGVFUlJWVVpFVHpCc1FsTlZVWE5qTUVwQ1VWVnpjMUl3UmtKVVEzaFdVVlZHVGt4RlRrSlJWbFUzVlZWR1JGZHBlRXBSVlVaS1RFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SVEZDVVZVd04xZFZSa0pTVTNoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUVGRaVlVaRVkydE5OMWRWUmtSU1EzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVWVU40U2xGVlJrcE1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVTNXakJLUWxFeVNYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVuUjJVV3RHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlbk0zWWpCS1FsRXpVa05NUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV6YUVOUE1teERVVlZHVGt4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbFIwYmxGclJrUmFRM2hLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxSMGRsRnJSa1JoUlVselUxVkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5OMkl3U2tKUk0wcERURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMUpWUmtKU1UzaEtVVlZHU2t4RlZrSlJWVlZ6VlRCR1FsVjVlRVJSVlVaRVRFVjBRbEZWYzNOU1ZVWkNVbE40VEZGVlJreE1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVakJHUWxKNWVFUlJWVVpFVEVWV1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1qbERVVlZOZGxKRGVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSbEZWUmtaTVJVNUNVVlZOTjJGVlNrSlJNbGszV1ZWR1JGTnFkRnBSVlU1RlRFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUlBNVTVDVVRKWk4xTlZSa1JVUTNoRVVWVkdSRTh3YkVKU1ZWRnpUMFZLUWxGWFJYTlNNRVpDV1dsNFZsRlZSbXBNUld4Q1VWaHNRMDh4UmtKUk1qVkVURVU1UWxGVk9ITlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5jMWxWUmtKWlUzaE1VVlZHVEV4R1ZrSlJWbFZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJYSlJhWGhLVVZWR1NreEZUa0pSVlUxeldWVkdRbGw1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHVkV4RmJFSlJWV3R6VVRCR1FsRjVlR2hSVlVab1RFVk9RbEZWVFRkVFZVWkVUMVZyYzFFd1JrSlJlblJLVVZWV1RreEhPVU5SVlVab1RFVmtRbEZZUWtOTVJsWkNVVmhHUTB4RmJFSlJXRlpEVEVWV1FsRlZWWE5VVlVaQ1dYcDBVbEZWVGpSU1EzaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVXhRbEZWTUhOUk1FWkNVWHAwU2xGVlRqWlJhWGhFVVZWR1JFOHdiRUpTVlZGelRrVktRbEZXWTNOU01FWkNWME40VmxGVlJscE1SV3hDVVZoc1EwOHhSa0pSTW5CRVRFVTVRbEZWT0hOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoTVVWVkdURXhHVmtKUlZsVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VYcE9Sa3hGVGtKUlZVMDNVMVZHZEZGclVYTmxWVTVDVVZoa1EweEZaRUpSV0doRFRFWldRbEZZYkVOTVJtUkNVVmN4UTB4RlZrSlJWVlZ6VVRCR1FsbFVkRkpSVlVWNlVrTjRjRkZyUmtwUmVuUlNVVlZ2TWxGNWVISlJhMFpDVVZONFJsRlZSa0pNUlhSQ1VWZEZOMVZWUmtSa2ExRnpVMVZHUWxOVGVFUlJWVVpFVEVac1FsRldhM05STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlRVM2hRVVZWR1FreEdaRUpSVm1OelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJsRlZSakJSYVhoRVVWVkdlbEZwZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFVERCTmMxTlZSa0pUVTNoRVVWVkdSRXhJUmtOUlZVWjRVV2w0U0ZGVlJraE1SMDVDVVZVd2MxUXdSa0pSVTNoNlVUQkdRbVF3U1hOUk1FWkNVWGw0VEZGVlJrcE1SVTVDVVZWTmMxUlZSa0pVVTNoR1VWVkdSa3hGZEVKUlZXdHpVVEJHUWxGNWVGcFJWVVphVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlJPUlV4RlRrSlJWRXBGVEVWT1FsRlZUVGRWVlVaRVREQlpjMVF3UmtKVWVYaEtVVlZHU2t4RlRrSlJWVTAzVTFWR1JHRkZTWE5STUVaQ1VYcDBTbEZXYkVWTVJ6RkVVVlZHY2xGcGVFaFJWVVp6VVdsNFZsRlZSblJSYVhoWVVWVkdkRkZwZUVaUlZVWkdURVZPUWxGWFJUZFZWVVpDWTJ0UmMyRlZTa0pUVlUwM1ZWVkdTMlJWVFhOaE1FcENVVlZGYzFKVlJrSlJVM2hNVVZWR2FFOHhSa0pSTW5CRlRFVnNRbEZWYTNOUk1FWkNVWGw0V2xGVlJscE1SVTVDVVZWTmMxWlZSa0pSVTNoRVVWVkdSRXhGYkVKUlZXdHpWREJHUWxGVGVGaFJWVVpZVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSmtSVWx6VVRCR1FtTXdTWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVWGs1UkV4RmJFSlJWV3R6VVRCR1FsRjVlSGhSYTBaQ1kxVkpjMUl3UmtKU2VYaHFVVlZHVGt4Rk9VSlJWVVZ6V2pCT1FsRlhkRU5NUlU1Q1VWVk5jMU13UmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VWxWR1FsSlRlRXhSVlVaS1RFVk9RbEZWVFhOWFZVWkNWMU40UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdlVkpEZUVSUlZVWjRVa040UkZGVlJrUlBNVVpDVVROd1IweEZPVUpSVlRoelUxVkdRbE5UZUVSUlZVWkVUekJzUWxFeWFFTk1SVTVDVVZWTk4xTlZSbHBTUTNoNlVXdEdRbE41ZUVoUlZVWk5URVpXUWxFd2EzTlBSVXBDVVZSQ1JFeEZWa0pSZWtaRVRFTjBRMUZWUlhsUmVYaEdVVlZOZWxGNWQzSlJhMFpDVFd0TmMxSlZSa1JOTUUxellUQktRbEZVYUVOTVJWWkNVWHBzUTB4R1pFSlJWM1JEVEVWV1FsRXllRU5NUm1SQ1VWZDBRMDh4UmtKVWJsSkRURWRzUTFGVVNrdFJlblJTVVZSR1MxSjVkM0pSTUVaQ1VWTjRSbEZWUmtKTVIzUkVVVlZGZDFGNmRGSlJWVTE0VVhsNGJsSkZSa0pSVTNoR1VWVkdRa3hITVVSUlZVVjVVWHAwVWxGVlRYcFJlWGh1VWtWR1FsRlRlRVpSVlVaQ1RFY3hSRkZWUlhsUmVuUlNVVlZOZWxGNWVIUlJNRVpDVVZONFJsRlZSa0pNU0U1RFVWVkZORkZxZEZKUlZVMDFVV2wzTUZGclJrSlJVM2hHVVZWR1FreEhkRU5SVlVaeVVXcDBVbEZWVG5OUmFYY3dVV3RHUWxGVGVFWlJWVVpDVEVkMFExRlZSbkpSYW5SU1VWVldjMUZwZUVwUlZVWktURVZPUWxGV1RYTlNWVVpFVmtONFJGRlZSbFJNUlZaQ1VURlJjMUV3UmtKUmVYaElVVlZHYmxGcGVFcFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSbEZWUmtoTVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWT2VWRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaRVREQkpjMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlRqQlJhWGhFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtSa2EwbHpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRXRkZWUmxoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSazVWU1hOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxTlZSa0pUVTNoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTRkZWUmtoTVJXeENVVlZyYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxKWVdrUk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGSlJWVlpwVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhxVVZWR2FreEZUa0pSVlUwM1ZWVkdSazR3U1hOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpWbFZHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYcDBXbEZWVG5sUmFYaEVVVlZHUkV4RlRrSlJWVTF6VXpCR1FsTjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRtRk1SV3hDVVZWcmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVaa1FsRldZM05TVlVaQ1VsUjBibEZyUmtST1ZVbHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUm9VVlZOTVZGcWRGcFJWVTVGVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEY2VGtOTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pTVldkelUxVkdRbE5UZUVwUlZVWktURVZPUWxGVlRYTmpWVXBDVVZoR1EwOHhiRUpSVlZWelUxVkdRbE5UZUVSUlZVWkVURWhHUTFGVlJuaFJhWGhHVVZWR1JreEZUa0pSVlUwM1ZWVkdURTR3VVhOVFZVWkNVMU40VkZGVlJsUk1SVTVDVVZWTk4xVlZSa1JhUTNoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNWVHeFJWVVpzVEVWV1FsRlZWVGRYVlVaR1pFVkpjMVV3UmtKVmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlR3hSVlVac1RFVk9RbEZWVFRkVk1FWkVZMFZOTjFsVlJrSlVWSFJhVVZWV1NVeEdUa0pSVmsxelVqQkdRbEo1ZUVSUlZVWkVURVZzUWxGVmEzTk5SVXBDVVZaVmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFrd1JrSlplWGhHVVZWR1JreEZNVUpSVlRCelVUQkdRbEY1ZUdwUlZVWnFURVZXUWxGVlZYTldWVVpDVVZONFJGRlZSa1JNUld4Q1VWVmpjMVF3UmtKUlUzaE1VVlZHU2t4RlRrSlJWVTF6V1ZWR1FsbFRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJubFJhWGhFVVZWR2VGRnBlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0YWxGVlJtcE1SVlpDVVZWVmMxRXdSa0pSZW5SYVVWVnNNbE5UZUVSUlZVWkVURVZrUWxGVlkzTmhWVXBDVVZVNGMxRXdSa0pSZVhoeVVXdEdRbUV3U1hOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxa3dSa0pVVTNoUVVWVkdRa3hGVGtKUlZVMXpVbFZHUWxKRGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVFhwUmVYaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VmxGVlJrSk1SVTVDVVZWTk4xb3dTa0pSTW5CRFRFVnNRbEZWYTNOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoS1VWVkdTa3hHUmtKUlZrVTNZakJLUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUl3UmtKU2VYaE1VVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaVVRFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZW5SdVVXdEdSRTFWVlhOVFZVWkNVMU40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGYkVKUlZXdHpWVlZHUWxWVWRIWlJhMFpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4RmRFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZXVFhOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUmVteEdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUQm5jMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOV1ZVWkNVVk40UkZGVlJrUlBNbVJEVVZWT2NWRnBlRXBSVlVaT1RFVk9RbEZWVFhOU01FWkNVbmw0VGxGVlJrNU1SVTVDVVZWTmMxa3dSa0paZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFrd1JrSlplWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRuRlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXpVa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFRrSlJNRFEzVlZWR1JsSkRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0Y0ZGclJrSlVlWGhFVVZWR1JFeEhkRU5SVlVaeVVXbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hXVVZWR1ZreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVUekZzUWxFeWFFVk1SVGxDVVZVNGMxVXdSa0pWZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVWHBPUTB4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEpWWjNOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXVTNoS1VWVkdTa3hGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVEVaV1FsRldWWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZ6YzFZd1JrSldlWGhHVVZWR1JrOHhiRUpSTW5oR1RFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9WMHhGYkVKUlZXdHpXVlZHUWxsVGVFaFJWVVpJVEVaV1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNVM2hTVVZWR1VreEZWa0pSVlZWeldWVkdRbGxVZEc1UmEwWkVUMVZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0VWxGVlJsSk1SVTVDVVZWTk4xb3dTa0pSZW1SRFRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOeldWVkdRbGxUZUVSUlZVWkVUekZzUWxFelVrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9SMHhGYkVKUlZXdHpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJsWkNVVlZGYzFFd1JrSlJlblJ1VVd0R1JHSkZTWE5aVlVaQ1dWTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVYwUWxGVmEzTlJNRVpDVVhsNGNGRnJSa0poVlVselVsVkdRbEpUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMGJsRnJSbkJSYmtwRlRFVnNRbEZWYTNOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoTVVWVkdURXhHWkVKUlZtTnpVbFZHUWxKVWRIWlJhMFpFWVd0TmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkU0d1NYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBjRkZyUmtSaFJVMDNZMVZLUWxGVk1EZGlNRXBDVVRCbmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6STVRMUZWVGpKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGhWVXBDVVhwR1JFOHhiRUpSTUhkelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFVkdwek4xZFZSa0pVVTNoS1VWVkdTa3hGVGtKUlZVMXpWbFZHUWxaVGVFaFJWVVpJVEVWV1FsRlZWWE5VVlVaQ1ZGTjRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhPVVZWR1RreEZWa0pSVlZWelZGVkdRbFJUZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VsUmtSVXhGYkVKUlZXdHpXVEJHUWxsNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRXbEZWUmxwTVJXeENVVlZyYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pSZW1SRVRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1TR1JEVVZWR00xRnBlRVpSVlVaR1R6RnNRbEV6Y0VOTVJXeENVVlZyYzFFd1JrSlJlWGhhVVZWR2FFeEZUa0pSVlUxeldqQktRbEZYWkVOTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeElaRU5SVlVZelVXbDRSRkZWUmtSTVIyUkRVVlZHYmxGcGVFUlJWVVpFVHpGc1FsRjZUa2RNUjA1Q1VWZE5jMUl3UmtKU2VYaHFVVlZHYWt4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFUmFSRkZWUlhKUmFYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhnelVXdEdRbVF3U1hOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZVNGMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWMVZHUWxkVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VNUNVak53UzA4eFJrSlNWVkZ6VTFWR1FsTlRlRVJSVlVaRVRFZEdRbEZYUlhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk5lRkZwZUVwUlZVWktURVZPUWxGVlRYTlZWVVpDVlZONFNGRlZSa2hNUld4Q1VWVnJjMkZWU2tKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZWWXlVWGw0U2xGVlJrcE1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVFRGUmFYaE1VVlZHVEV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVHpGc1FsRXphRU5NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JrYTBselUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVTNsNFJsRlZSa1pQTW1SRFVWVk9WVXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JGZERlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFeFozTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SdVVXdEdSR0pyU1hOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJvVVZWT2NWRjZkRlJSVlU1TFR6RkdRbEV3VVhOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoVVVWVkdWRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVaV1FsRldWWE5STUVaQ1VYcDBVbEZWYzNoUmVYaEtVVlZHU2t4RlRrSlJWVTF6V1ZWR1FsbFRlRVJSVlVaRVRFUm9RMUZWUlRSUmFYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlpEWlNRM2hLVVZWR1NreEhUa0pSVjAxelVUQkdRbEY1ZUU1UlZVWk9URVZrUWxGVlkzTlJNRVpDVVhwMFdsRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VkRCR1FsUjVlRWhSVlVaSVRFVnNRbEZWYTNOak1FcENVVlpWYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelZGVkdRbFJUZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlZaQ1VWVlZjMU5WUmtKVFUzaEVVVlZHUkV4R1ZrSlJWbFZ6VWxWR1FsSlRlR3BSVlVacVRFVk9RbEZWVFhOUk1FWkNVWGw0YmxGclJrSmFNRWx6VWxWR1FsSlRlRVJSVlVaRVR6RkdRbEV6U2t0TVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURU4wUTFGVlJYSlJhWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSR0pyVVhOVFZVWkNVMU40UkZGVlJrUk1SRnBEVVZWRk1sRnBlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxWXdSa0pXZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHU0dSRlVYTlRWVVpDVTFONFJGRlZSa1JNUjBaQ1VWZEZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU0eVVXbDRTbEZWUmtwTVJWWkNVVlZWYzFKVlJrSlNWSFJhVVZWT1MweEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUmxaQ1VWWlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUSndSa3hGYkVKUlZXdHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5VTUVaQ1ZIbDRTRkZWUmtoTVJXeENVVlZyYzJNd1NrSlJWbFZ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVaV1FsRldWWE5TVlVaQ1VsTjRhbEZWUm1wTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxeldqQktRbEZYWkVOTVJWWkNVVlZWYzFFd1JrSlJlblJhVVZWTk1WTkRlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SVVVWVk9kMUpVZEZKUlZXUkZURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1M1VXbDRTbEZWUmtwTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZDNKUmEwWkNTekJKYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pTVnpWRlRFVnNRbEZWYTNOaE1FcENVVmQwUTB4RlZrSlJWVlUzVjFWR1JHTkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhhVVZWR1dreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVUekZzUWxFeWVFUk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpWMVZHUWxkVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVUekZzUWxFeWVFVk1SV3hDVVZWcmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpXakJLUWxGWFpFTk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk1qVkVURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMXBWUmtKYVUzaElVVlZHU0V4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVaR3ROYzFOVlJrSlRVM2hHVVZWR1JreEZaRUpSVldOellWVktRbEZWT0hOUk1FWkNVWGw0Y2xGclJrSmhNRWx6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVFhOV1ZVWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZW5SdVVXdEdSR1JyVFhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVHpJNVExRlZSa1pNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT2VWRjVlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVVlIwV2xGVlRtRk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk1HZHpVMVZHUWxOVGVFUlJWVVpFVEVaR1FsRldSWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFOHhiRUpSTTBwRFRFVnNRbEZWYTNOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhIZEVOUlZVWnlVV2w0UkZGVlJrUk1SVTVDVVZWTk4xVXdSa1JsYTAwM1ZWVkdSbEpEZUVwUlZVWktURVZPUWxGVlRYTmlWVXBDVVZjeFEweEZWa0pSVlZWelVUQkdRbEY2ZEZKUlZVMTZVV2w0U2xGVlJrcE1SVTVDVVZWTmMwNXJTa0pSVkZwRFRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoWVVWVkdXRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR3VWtONFVGRlZSbEJNUm1SQ1VWWmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUkU5VlRYTlJNRVpDVVhwMFNsRlZWbEJNUkdoRFVWVkdhRXhGWkVKUldFcERURVpXUWxGWVRrTk1SbFpDVVZkMFEweEZWa0pSVlZWelVUQkdRbFo1ZUVaUlZVWkdURVZPUWxGV1l6ZFZWVVpFVDFWUmMxTlZSa0pUVTNoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVVeFFsRlZNSE5TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFaVlJrSldVM2hJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpVZEZwUlZXTjZVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYcDBXbEZWVFhwUmFYaEtVVlZHU2t4RmRFSlJWWE56VWpCR1FsSjVlRXBSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoV1VWVkdRa3hGVGtKUlZVMXpVMVZHUWxOVGVGQlJWVVpDVEVWT1FsRlZjM05TVlVaQ1VsTjRUbEZWUms1TVJWWkNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRoelVUQkdRbEY1ZUV4UlZVWk1URVZXUWxGVlZYTlVWVVpDVkZONFJsRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVUV4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVk9RbEZWUlhOU1ZVWkNaR3RWYzFFd1JrSmtWVlZ6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEY2UmtoTVJXeENVVlZyYzFKVlJrSlNVM2hJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVYaEtVVlZHU2t4Rk9VSlJWVVZ6VVRCR1FsTjVlRVpSVlVaR1RFVjBRbEZWYzNOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoR1VWVkdSa3hGVGtKUlZVVnpVbFZHUW1SclNYTlJNRVpDWkZWSmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk0xcEZURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4R1ZrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFRkYU1FcENVVE5TUTB4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWTUhOU1ZVWkNVbE40VEZGVlJreE1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGZEVKUlZYTnpVakJHUWxKNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWTk0xRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRrbE1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVaV1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFvd1NrSlJNMUpEVEVWc1FsRlZhM05VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hNVVZWR1RFeEdaRUpSVm1NM1lqQktRbEY1T1VOTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURVpXUWxGVlJYTlJNRVpDVVhsNFNsRlZSa3BNUlRsQ1VWVkZjMU13UmtKVGVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoR1VWVkdSa3hGTVVKUlZUQnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5UTUVaQ1UzbDRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSmhSVkZ6VVRCR1Fsb3dVWE5STUVaQ1VYbDRSRkZWUmtSUE1tUkRVVlZOTVZKVGVFcFJWVVpLVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFNd1JrSlRlWGhZVVZWR1dFOHlPVU5SVlUxMlVXbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZaUlZVWkNURVZXUWxGVlZYTlRWVVpDVTFONFVGRlZSa0pNUlhSQ1VWVnpjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VWxWR1FsSlRlRTVSVlVaT1RFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxSlZSa0pTVTNoT1VWVkdUa3hGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVmR3UlV4RlRrSlJWMnhGVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5OU2FYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVldSSlRFVnNRbEZWYTNOVVZVWkNWRk40UmxGVlJrWlBNbXhEVVZWT1VVeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFJsRlZSa1pNUlU1Q1VWVk5OMkZWU2tKUk1uQkRURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5OMkZWU2tKUk1WRnpVekJHUWxONWVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYcDBjRkZyUmtSWGFYaG9VVlZHYUV4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVR6SnNRMUZWVG5kUmFYaGFVVlZHV2t4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFWnNRbEZXYTNOU1ZVWkNVbE40UkZGVlJrUlBNbXhEVVZWT2NWRjVlRE5SYTBaQ1pEQkpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWVZWS1FsRjZUa05NUnpsRFVWVkdkbEZwZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhwMGNGRnJSa1JOVlVselV6QkdRbE41ZUVSUlZVWkVURVpXUWxGV1ZYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlZqSlJlWGhLVVZWR1NreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSa0pNUlU1Q1VWVk5OMW93U2tKUk1uQkRURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxGNlRrTk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFVERCSmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVEJHUkZScWRHaFJWVVpPVHpGc1FsRXdaM05UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFWVd0Tk4xTlZSa1JVUTNoRVVWVkdSRTh3YkVKU01EaHpUMFZPUWxGVVdrTk1SV1JDVVZoS1JFeEdWa0pSV0U1RVRFVjBRbEZYUlhOU1ZVWkNVbE40VGxGVlJtcE1SVlpDVVZWVmMxWXdSa0pOYTBrM1ZWVkdRbUZGWTNOaFZVcENXbFZOTjFWVlJtMWlNRlZ6VGtWS1FsRlZSWE5TVlVaQ1VWTjRjbEZyUmtKTmEwazNWVlZHUms1VldYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaHNVVlZHYkV4RmJFSlJWV3R6VTFWR1FsTlRlRVJSVlVaRVRFY3hRMUZWUm5SUmFYaEdVVlZHUms4eGJFSlJNalZGVEVWc1FsRlZhM05TTUVaQ1VYbDRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUldSQ1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9kVkpEZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoSVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhJVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPY1ZKVGVFcFJWVVpLVEVVeFFsRlZNSE5TTUVaQ1VubDRkRkV3UmtKWmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk0xSkZURWRzUkZGVlJscE1SVTVDVVZWTmMxUlZSa0pVVTNoR1VWVkdSa3hGZEVKUlZYTnpVbFZHUWxKVGVFNVJWVVpPVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVIyUkRVVlZHYmxGcGVFWlJWVVpHVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJYUkNVVlZ6YzFFd1JrSlJlWGhHVVZWR1JreEdaRUpSVm1OelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxGNlJrZE1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVaV1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFvd1NrSlJNMHBEVEVWMFFsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VXpCR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ1VVd0R1JHVnJVWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWR1JrOHlPVU5SVlU1WFRFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtSbGEwbHpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekpzUTFGVlRURlJhblJhVVZWT1RVeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZPUWxFd05EZFRWVVpFVkVONFJGRlZSa1JQTUd4Q1VsVlJjMlJWU2tKUlZUQnpVakJHUWxScWRGSlJWVTVLVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMTZVV2w0UkZGVlJrUlBNR3hDVWxWUmMyTlZTa0pSVld0elVqQkdRbE5xZEZKUlZVNUtURVU1UWxGVk9ITlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU0MlVXbDRSRkZWUmtSUE1HeENVMVZSYzJKVlRrSlJWM1JEVEVWa1FsRlhlRU5NUmxaQ1VWY3hRMHhHVmtKUldFNURUekZHUWxGWVVrTk1SRXBEVVZWR1FreEZWa0pSVlVWeldUQkdRbU13U1RkVlZVWkVZMnROYzFOVlJrSlRVM2hFVVZWR1JFeEhaRU5SVlVadVVXbDRTRkZWUmtoTVJXeENVVlZyYzA1clNrSlJXRTVEVEVWT1FsRjZiRVJNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFWldRbEZXVlhOUk1FWkNVWHAwV2xGVlRqSlJhWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUkV4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVZMFZSYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNWhURVZPUWxGVlRUZFRWVVpZVWtOM2QxRnJSa0pWZVhoSVVWVkdWVXhHVmtKUlZsVnpVMVZHUWxOVGVFWlJWVVpHVEVWV1FsRlhUWE5TVlVaQ1VsTjRTbEZWUmtwUE1VWkNVVmhDUTB4SE1VTlJWVVpDVEVWV1FsRlZSWE5VVlVaQ1dYcDBVbEZWVFhoUmFYaEtVVlZHU2t4R1JrSlJWa1Z6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWktZa1ZKYzFOVlJrSlRVM2hJVVZWR1NFeEZaRUpSVldOelUxVkdRbE5UZHpKUmEwWkNZekJKYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxeldqQktRbEZYWkVOTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNGJsRnJSa0phTUVselVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaHVVV3RHUWxvd1NYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZPZVZORGVFeFJWVVpNVEVWa1FsRlhSWE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEV6YUVWTVJYUkNVVlZ6YzFJd1JrSlpVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxSlZSa1JsUlZGelV6QkdRbE41ZUVoUlZVWklURVZrUWxGVlkzTlJNRVpDVVhsNFVsRlZSbEpNUlU1Q1VWVk5jMU13UmtKVGVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVlpDVVhwc1JFeEZaRUpSVldOelVqQkdRbEo1ZUVoUlZVWklURVZPUWxGVlRYTlZWVVpDVlZONFJGRlZSa1JNUlhSQ1VWVnpjMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRKd1JVeEZaRUpSVldOelVUQkdRbEY1ZUc1UmEwWkNXakJKYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelV6QkdRbE41ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMU13UmtKVGVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JsYTFWelUxVkdRbE5UZUZCUlZVWlFURVZzUWxGVmEzTlRNRVpDVTNsNFdGRlZSbGhNUlZaQ1VWVlZOMWRWUmtST01FbHpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVEpKTjFWVlJrUlNRM2hLVVZWR1NreEdUa0pSVmsxelVqQkdRbEo1ZUZaUlZVWkNURVZPUWxGVlRYTlRWVVpDVTFONFVGRlZSa0pNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaWlRFVk9RbEZXWTNOU1ZVWkNVbE40VkZGVlJsUk1SV1JDVVZWamMxWlZSa0pSVTNoRVVWVkdSRXhGYkVKUlZXdHpWREJHUWxGVGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlhRM2hFVVZWR1dFeEZWa0pSVlZWelZGVkdRbFJUZUVoUlZVWklURVpXUWxGVlJYTlJNRVpDVVhsNFNsRlZSa3BNUlRsQ1VWVkZjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VWxWR1FsSlRlRVpSVlVaWFRFVk9RbEZXVlhOU1ZVWkVZMFZaYzFSVlJrSlVVM2hJVVZWR1NFeEZiRUpSVld0elRVVktRbEZXVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJrNUNVVlpOYzFKVlJrSlNVM2hVVVZWR1ZFeEZWa0pSVlZWelZGVkdRbFJUZUVSUlZVWkVURVZXUWxGNlJrWk1SbXhDVVZacmMxSXdSa0pTZVhoT1VWVkdUa3hGVGtKUlZVMXpZVEJLUWxGWGRFTk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVmtKUlZWVnpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUk1NRkZ6VTFWR1FsTlRlRnBSVlVaYVRFVk9RbEZWVFhOVVZVWkNWRk40VEZGVlJreE1SVTVDVVZWTmMxTlZSa0pUVTNoYVVWVkdXa3hGVGtKUlZVMXpWRlZHUWxSVGVFeFJWVVpNVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWR1JrOHhiRUpSTWpWR1RFVnNRbEZWYTNOVE1FWkNVM2w0U0ZGVlJraE1SRXBEVVZWR2JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFdGRlZSbGhNUlZaQ1VWVlZjMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRmhSVlVaWVRFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JpUlZselZWVkdRbFZUZUVoUlZVWklURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUjNSRFVWVkdjbEZwZUVaUlZVWkdURVYwUWxGVmMzTlJNRVpDVVhsNFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZOZWxKRWRHaFJWVVpPVHpGc1FsRXdaM05UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFkVlJrSlhVM2hFVVZWR1JFeEZNVUpSVlRCelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGNlRrTk1SVTVDVVZWTmMxSXdSa0pTZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVac1FsRldhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdSRTVWU1hOUk1FWkNVWGw0U0ZGVlJraE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpWMVZHUWxkVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWTk1WRnBlRkpSVlVaU1RFVmtRbEZWWTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhHWkVKUlZtTnpVVEJHUWxGNWVHeFJWVVpzVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUblZTVTNoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY2ZEc1UmEwWkVaR3RKYzFWVlJrSlZVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUm14Q1VWWnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVhwV1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTmpNRXBDVVZaVmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRXRkZWUmxoTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVMHpVa1IwVWxGWFJrVk1SVGxDVVZVNGMxVlZSa0pWVTNoRVVWVkdSRTh3YkVKUk0wSkRURVZPUWxGVlRUZFRWVVpJVkZONGVGRnJSa0paZVhoSVVWVkdlVkZwZUZaUlZVWjZVV2w0UkZGVlJucFJhblJTVVZWT05GRjVlRkJSVlVaUVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxTXdSa0pUZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpVVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWlFURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JQTUd4Q1VUTkNSMHhGVGtKUlZVMDNVMVZHU0ZSVGVIaFJhMFpDV1hsNFNGRlZSbmxSYVhoV1VWVkdlbEZwZUVSUlZVWjZVV3AwVWxGVlRqUlJlWGhRVVZWR1VFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlRNRVpDVTNsNFVsRlZSbEpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJsSk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdVRXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVHpCc1FsRXpRa2RNUlU1Q1VWVk5OMU5WUmtoVVUzaG9VVlZHVGt4RlpFSlJWMGx6VmxWR1FsbDVlRVJSVlVaNlVXcDBVbEZWVG05UmVYaFFVVlZHVUV4Rk1VSlJWVEJ6VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGTVVKUlZUQnpVVEJHUWxGNWVHcFJWVVpxVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUmphMVZ6VVRCR1FsRjZkRXBSVlRGT1RFZGtRMUZWUmxSTVJXUkNVVmRvUTB4R1ZrSlJWMnhEVEVWT1FsRlhWVGRWVlVaRVRsVkpjMU5WUmtKVFUzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlRkWFZVWkVWMmw0VGxGVlJrNU1SVTVDVVZWTmMxWXdSa0pXZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5XVlVaQ1ZsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZUQkdSRXd3VFRkWlZVWkNWRlIwV2xGVlRrbE1SVEZDVVZVd2MxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVltdEpjMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkVk1FWkVZVVZKTjFOVlJrUlVRM2hFVVZWR1JFOHdiRUpUVjAxeldsVkdRbFZUZUVoUlZVWXlVV2w0VmxGVlJqTlJhWGhFVVZWR1VFOHhSa0pSTTBwRFRFVk9RbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTVoVEVWT1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNHdVV2w0UkZGVlJrUlBNR3hDVTFkTmMyRXdTa0pSVm1OelVqQkdRazFWU1hOV1ZVWkNUV3RKYzFFd1JrSlZVM2hHVVZWR1JreEZNVUpSVjJSRVR6RkdRbEV5Y0VaTVJXeENVVlZyYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUV4UlZVWk1URVprUWxGV1kzTlNWVVpDVWxSMFdsRlZUbkZSZVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOTjFvd1NrSlJNbEZ6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTk4xb3dTa0pSTWtselZGVkdRbFJUZUVSUlZVWkVURVpHUWxGV1JYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUnVVV3RHUkZscGVFUlJWVVpHVEVWT1FsRlZUWE5oVlVwQ1VWZHNRMHhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlU0d1VYbDRSRkZWUmtaTVJVNUNVVlZOYzJGVlNrSlJWMnhEVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhPVVZWR1RreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZzUWxFeWFFVk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4VGtKUk1EUTNWVlZHUkZKRGVFcFJWVVpLVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFNd1JrSlRlWGhZVVZWR1dFeEZWa0pSVlZVM1YxVkdSR0ZyVFhOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpWbFZHUWxGVGVFUlJWVVpFVEVWc1FsRlZhM05VTUVaQ1VWTjRUbEZWUms1TVJVNUNVVlZOYzFZd1JrSldlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUU1UlZVWk9URVZPUWxGVlRYTlNWVVpDVGpCSmMxRXdSa0pPYTBselVUQkdRbEY1ZUVSUlZVWkVUekZPUWxFemFFVlBNR3hDVVRCM2MxRXdSa0pSZW5SS1VWVmtUa3hIYkVOUlZVWldURVZrUWxGWGNFTk1SbFpDVVZkMFEweEZUa0pSVjFVM1ZWVkdSRTR3U1hOVFZVWkNVMU40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVTNWMVZHUkZkcGVGQlJWVVpRVHpKa1ExRlZUa2xNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbFIwYmxGclJrUmhSVWx6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSazh5UmtKUk1qVkRURVZPUWxGVlRUZFZNRVpFVkVSMGFGRlZSazVQTVd4Q1VUQm5jMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzVlRCR1JGZHFkRXBSVlU1TlRFVk9RbEZWVFRkVFZVWktWRk40V0ZGVlJrcE1SV1JDVVZabmMxWlZSa0pYVTNoRVVWVkdiRXhGVmtKUlZWVnpWVlZHUW1Fd1RUZFZWVVpFVFRCUmMxTlZSa0pUVTNoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWVGRYVlVaRVYybDRTbEZWUmtwTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelV6QkdRbE41ZUZoUlZVWllURVZXUWxGVlZUZGFNRXBDVVRKd1JFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVuUjJVV3RHUkZwRGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJsWkNVVlpWYzFFd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGlNRXBDVVRKb1JFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkSFpSYTBaRVRWVkpjMUV3UmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VWpCR1FsVjVlRVJSVlVaR1RFVk9RbEZWVFhOaFZVcENVVmRzUTB4RlpFSlJWV056VlZWR1FsVlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwZGxGclJrUmhSVkZ6VVRCR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOU01FWkNWWGw0UkZGVlJrWk1SVTVDVVZWTmMyRlZTa0pSVjJ4RFRFVmtRbEZWWTNOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SdVVXdEdSRTFWVVhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xbFZSa1JVYW5SYVVWVk9SVXhGYkVKUlZXdHpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRURkZWUmt4TVJtUkNVVlpqYzFKVlJrSlNWSFJ1VVd0R1JHRnJUWE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbEZUZUVSUlZVWkVURVZzUWxGVmEzTlVNRVpDVVZONFRsRlZSazVNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRkpSVlVaU1RFVk9RbEZWVFhOU1ZVWkNaVVZKYzFFd1JrSmtNRWx6VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV5TlVWUE1VNUNVVEJ2TjFsVlJrSlVWSFJhVVZWT1NFeEZUa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlZWVVpDVlZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPZFZGcGVFUlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRTRkZWUmtoTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZUQkdSRTVWU1RkVFZVWkVWRU40UkZGVlJrUlBNR3hDVTFVd2Mxa3dSa0pVZVhoSVVWVkdhMHhHVmtKUlYxVnpVVEJHUWxGNmRGSlJWVTVoVEVWc1FsRlZhM05VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JrOHhiRUpSTVc5elUxVkdRbE5UZUZCUlZVWlFURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlhSQ1VWVnpjMVl3UmtKV2VYaEdVVlZHUms4eVpFTlJWVTV4VVhsNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRlpSVlVaQ1RFVk9RbEZWVFRkaU1FcENVVEpSYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGRsRnJSa1JpUlVselZEQkdRbGxUZUVSUlZVWkdURVZPUWxGVlRYTmhWVXBDVVZkc1EweEZUa0pSVlUwM1lqQktRbEV5ZUVSTVJUbENVVmRGYzFFd1JrSlNVM2hFVVZWR1JFeEhiRU5SVlVad1VXbDRSRkZWUmtSUE1tUkRVVlZPTUZGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBhRkZWVGs5UE1XeENVVEJSYzFOVlJrSlRVM2hRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVYwUWxGVmMzTldNRVpDVm5sNFJsRlZSa1pQTW1SRFVWVk9jVkY1ZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFRkWlZVWkVZMFZOTjFVd1JrUlRhblJvVVZWR1RrOHhiRUpSTUdkelVUQkdRbEY1ZUVSUlZVWkVURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZXY1ZGcWRFcFJWVTVOVEVWT1FsRlZUVGRUVlVaSVZGTjRibEZyUmtKVmVYaElVVlZHYjFGcGVGWlJWVVp3VVdsNFJGRlZSa1JQTVVaQ1VUSlJjMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVXV2w0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxGNlRrTk1SVTVDVVZWTk4xTlZSa2hVVTNoc1VWVkdVa3hGWkVKUlYxbHpWbFZHUWxvd1NYTlJNRVpDVVhwMFVsRlZUbWxNUlU1Q1VWVk5jMUV3UmtKUmVYaE1VVlZHVEV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZa1ZKYzFFd1JrSlJlblJLVVZWT1RVeEhSa0pSVlUwM1VWVkdRbEpEZUVSUlZVWkVURVZHUW1SdWJFTlNRM2hLVVZoV05WRnJUVGRSVlVZeVpWVktXa3hJWkVOUlZVWk9TVzR3UFNJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVkbUZ5SUhOb2IzSjBaWE4wY0dGMGFITmZNU0E5SUhKbGNYVnBjbVVvWENJdUwzTm9iM0owWlhOMGNHRjBhSE5jSWlrN1hHNTJZWElnWkdWelkyVnVkRjh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZaR1Z6WTJWdWRGd2lLVHRjYm5aaGNpQnlaV04wWVc1bmJHVmZNU0E5SUhKbGNYVnBjbVVvWENJdUwzSmxZM1JoYm1kc1pWd2lLVHRjYm5aaGNpQnNhVzVyYkdWdVozUm9jMTh4SUQwZ2NtVnhkV2x5WlNoY0lpNHZiR2x1YTJ4bGJtZDBhSE5jSWlrN1hHNTJZWElnVEdsdWF6TkVJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCTWFXNXJNMFFvYzI5MWNtTmxMQ0IwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiM1Z5WTJVZ1BTQnpiM1Z5WTJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBJRDBnZEdGeVoyVjBPMXh1SUNBZ0lIMWNiaUFnSUNCTWFXNXJNMFF1Y0hKdmRHOTBlWEJsTG1GamRIVmhiRXhsYm1kMGFDQTlJR1oxYm1OMGFXOXVJQ2g0S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9Mbk54Y25Rb2VDNXlaV1IxWTJVb1puVnVZM1JwYjI0Z0tHTXNJSFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2VDQTlJSFpiWDNSb2FYTXVkR0Z5WjJWMFhTQXRJSFpiWDNSb2FYTXVjMjkxY21ObFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqSUNzZ1pIZ2dLaUJrZUR0Y2JpQWdJQ0FnSUNBZ2ZTd2dNQ2twTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFeHBibXN6UkR0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGt4cGJtc3pSQ0E5SUV4cGJtc3pSRHRjYm5aaGNpQk9iMlJsTTBRZ1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR1oxYm1OMGFXOXVJRTV2WkdVelJDaDRMQ0I1TENCNktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoNElEMDlQU0IyYjJsa0lEQXBJSHNnZUNBOUlEQTdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIa2dQVDA5SUhadmFXUWdNQ2tnZXlCNUlEMGdNRHNnZlZ4dUlDQWdJQ0FnSUNCcFppQW9laUE5UFQwZ2RtOXBaQ0F3S1NCN0lIb2dQU0F3T3lCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVTQTlJSGs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlaUE5SUhvN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQk9iMlJsTTBRN1hHNTlLQ2twTzF4dVpYaHdiM0owY3k1T2IyUmxNMFFnUFNCT2IyUmxNMFE3WEc1MllYSWdUR0Y1YjNWME0wUWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUV4aGVXOTFkRE5FS0c1dlpHVnpMQ0JzYVc1cmN5d2dhV1JsWVd4TWFXNXJUR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJR2xtSUNocFpHVmhiRXhwYm10TVpXNW5kR2dnUFQwOUlIWnZhV1FnTUNrZ2V5QnBaR1ZoYkV4cGJtdE1aVzVuZEdnZ1BTQXhPeUI5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTlrWlhNZ1BTQnViMlJsY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1cmN5QTlJR3hwYm10ek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sa1pXRnNUR2x1YTB4bGJtZDBhQ0E5SUdsa1pXRnNUR2x1YTB4bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjV6ZEhKaGFXNTBjeUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYTmxTbUZqWTJGeVpFeHBibXRNWlc1bmRHaHpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFFnUFNCdVpYY2dRWEp5WVhrb1RHRjViM1YwTTBRdWF5azdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnVEdGNWIzVjBNMFF1YXpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMzVnNkRnRwWFNBOUlHNWxkeUJCY25KaGVTaHViMlJsY3k1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHNXZaR1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hZc0lHa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlGOXBJRDBnTUN3Z1gyRWdQU0JNWVhsdmRYUXpSQzVrYVcxek95QmZhU0E4SUY5aExteGxibWQwYURzZ1gya3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmthVzBnUFNCZllWdGZhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMlcyUnBiVjBnUFQwZ0ozVnVaR1ZtYVc1bFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaYlpHbHRYU0E5SUUxaGRHZ3VjbUZ1Wkc5dEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWE4xYkhSYk1GMWJhVjBnUFNCMkxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WlhOMWJIUmJNVjFiYVYwZ1BTQjJMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpYTjFiSFJiTWwxYmFWMGdQU0IyTG5vN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNBN1hHNGdJQ0FnVEdGNWIzVjBNMFF1Y0hKdmRHOTBlWEJsTG14cGJtdE1aVzVuZEdnZ1BTQm1kVzVqZEdsdmJpQW9iQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYkM1aFkzUjFZV3hNWlc1bmRHZ29kR2hwY3k1eVpYTjFiSFFwTzF4dUlDQWdJSDA3WEc0Z0lDQWdUR0Y1YjNWME0wUXVjSEp2ZEc5MGVYQmxMbk4wWVhKMElEMGdablZ1WTNScGIyNGdLR2wwWlhKaGRHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2wwWlhKaGRHbHZibk1nUFQwOUlIWnZhV1FnTUNrZ2V5QnBkR1Z5WVhScGIyNXpJRDBnTVRBd095QjlYRzRnSUNBZ0lDQWdJSFpoY2lCdUlEMGdkR2hwY3k1dWIyUmxjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJSFpoY2lCc2FXNXJRV05qWlhOemIzSWdQU0J1WlhjZ1RHbHVhMEZqWTJWemMyOXlLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5WelpVcGhZMk5oY21STWFXNXJUR1Z1WjNSb2N5bGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGJtdHNaVzVuZEdoelh6RXVhbUZqWTJGeVpFeHBibXRNWlc1bmRHaHpLSFJvYVhNdWJHbHVhM01zSUd4cGJtdEJZMk5sYzNOdmNpd2dNUzQxS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1cmN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxLU0I3SUhKbGRIVnliaUJsTG14bGJtZDBhQ0FxUFNCZmRHaHBjeTVwWkdWaGJFeHBibXRNWlc1bmRHZzdJSDBwTzF4dUlDQWdJQ0FnSUNCMllYSWdaR2x6ZEdGdVkyVk5ZWFJ5YVhnZ1BTQW9ibVYzSUhOb2IzSjBaWE4wY0dGMGFITmZNUzVEWVd4amRXeGhkRzl5S0c0c0lIUm9hWE11YkdsdWEzTXNJR1oxYm1OMGFXOXVJQ2hsS1NCN0lISmxkSFZ5YmlCbExuTnZkWEpqWlRzZ2ZTd2dablZ1WTNScGIyNGdLR1VwSUhzZ2NtVjBkWEp1SUdVdWRHRnlaMlYwT3lCOUxDQm1kVzVqZEdsdmJpQW9aU2tnZXlCeVpYUjFjbTRnWlM1c1pXNW5kR2c3SUgwcEtTNUVhWE4wWVc1alpVMWhkSEpwZUNncE8xeHVJQ0FnSUNBZ0lDQjJZWElnUkNBOUlHUmxjMk5sYm5SZk1TNUVaWE5qWlc1MExtTnlaV0YwWlZOeGRXRnlaVTFoZEhKcGVDaHVMQ0JtZFc1amRHbHZiaUFvYVN3Z2Fpa2dleUJ5WlhSMWNtNGdaR2x6ZEdGdVkyVk5ZWFJ5YVhoYmFWMWJhbDA3SUgwcE8xeHVJQ0FnSUNBZ0lDQjJZWElnUnlBOUlHUmxjMk5sYm5SZk1TNUVaWE5qWlc1MExtTnlaV0YwWlZOeGRXRnlaVTFoZEhKcGVDaHVMQ0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlBeU95QjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNhVzVyY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoZllTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE52ZFhKalpTQTlJRjloTG5OdmRYSmpaU3dnZEdGeVoyVjBJRDBnWDJFdWRHRnlaMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFZGJjMjkxY21ObFhWdDBZWEpuWlhSZElEMGdSMXQwWVhKblpYUmRXM052ZFhKalpWMGdQU0F4TzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pYTmpaVzUwSUQwZ2JtVjNJR1JsYzJObGJuUmZNUzVFWlhOalpXNTBLSFJvYVhNdWNtVnpkV3gwTENCRUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pYTmpaVzUwTG5Sb2NtVnphRzlzWkNBOUlERmxMVE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WTJWdWRDNUhJRDBnUnp0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVjM1J5WVdsdWRITXBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYzJObGJuUXVjSEp2YW1WamRDQTlJRzVsZHlCeVpXTjBZVzVuYkdWZk1TNVFjbTlxWldOMGFXOXVLSFJvYVhNdWJtOWtaWE1zSUc1MWJHd3NJRzUxYkd3c0lIUm9hWE11WTI5dWMzUnlZV2x1ZEhNcExuQnliMnBsWTNSR2RXNWpkR2x2Ym5Nb0tUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxtNXZaR1Z6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkaUE5SUhSb2FYTXVibTlrWlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kaTVtYVhobFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHVnpZMlZ1ZEM1c2IyTnJjeTVoWkdRb2FTd2dXM1l1ZUN3Z2RpNTVMQ0IyTG5wZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SbGMyTmxiblF1Y25WdUtHbDBaWEpoZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRXhoZVc5MWRETkVMbkJ5YjNSdmRIbHdaUzUwYVdOcklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzJObGJuUXViRzlqYTNNdVkyeGxZWElvS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG01dlpHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RpQTlJSFJvYVhNdWJtOWtaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpNW1hWGhsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdWelkyVnVkQzVzYjJOcmN5NWhaR1FvYVN3Z1czWXVlQ3dnZGk1NUxDQjJMbnBkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWtaWE5qWlc1MExuSjFibWRsUzNWMGRHRW9LVHRjYmlBZ0lDQjlPMXh1SUNBZ0lFeGhlVzkxZERORUxtUnBiWE1nUFNCYkozZ25MQ0FuZVNjc0lDZDZKMTA3WEc0Z0lDQWdUR0Y1YjNWME0wUXVheUE5SUV4aGVXOTFkRE5FTG1ScGJYTXViR1Z1WjNSb08xeHVJQ0FnSUhKbGRIVnliaUJNWVhsdmRYUXpSRHRjYm4wb0tTazdYRzVsZUhCdmNuUnpMa3hoZVc5MWRETkVJRDBnVEdGNWIzVjBNMFE3WEc1MllYSWdUR2x1YTBGalkyVnpjMjl5SUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQk1hVzVyUVdOalpYTnpiM0lvS1NCN1hHNGdJQ0FnZlZ4dUlDQWdJRXhwYm10QlkyTmxjM052Y2k1d2NtOTBiM1I1Y0dVdVoyVjBVMjkxY21ObFNXNWtaWGdnUFNCbWRXNWpkR2x2YmlBb1pTa2dleUJ5WlhSMWNtNGdaUzV6YjNWeVkyVTdJSDA3WEc0Z0lDQWdUR2x1YTBGalkyVnpjMjl5TG5CeWIzUnZkSGx3WlM1blpYUlVZWEpuWlhSSmJtUmxlQ0E5SUdaMWJtTjBhVzl1SUNobEtTQjdJSEpsZEhWeWJpQmxMblJoY21kbGREc2dmVHRjYmlBZ0lDQk1hVzVyUVdOalpYTnpiM0l1Y0hKdmRHOTBlWEJsTG1kbGRFeGxibWQwYUNBOUlHWjFibU4wYVc5dUlDaGxLU0I3SUhKbGRIVnliaUJsTG14bGJtZDBhRHNnZlR0Y2JpQWdJQ0JNYVc1clFXTmpaWE56YjNJdWNISnZkRzkwZVhCbExuTmxkRXhsYm1kMGFDQTlJR1oxYm1OMGFXOXVJQ2hsTENCc0tTQjdJR1V1YkdWdVozUm9JRDBnYkRzZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVEdsdWEwRmpZMlZ6YzI5eU8xeHVmU2dwS1R0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVdKSFJqVmlNMVl3VFRKUmRXRnVUV2xNUTBwNllqTldlVmt5VmxOaU1qa3dTV3B2YVVscGQybGpNamt4WTIxT2JHTjVTVFpYZVVsMVRHazRkVXhwT1ZoYVYwcEVZako0YUV3elRubFplVGx6V1Zoc2RtUllVWHBhUXpVd1kzbEtaRXhEU25WWlZ6RnNZM2xKTmxjeE1ITkpiVEZvWTBoQ2NHSnRaSHBKYW05cFQzcDBRbEZWUmtKTVIyeEZVVlZGZDFGNmRFSlJWVTE0VVhsNGVGRXdSa0poVlUwM1VWVkdSR0ZyVFhObFZVNUNVVlJTUlU4d1JrSlNWRlpGVEVSYVJGRlZSblpTVkhSQ1VWVldkMUpVZEVwUlZWWlNURWRrUTFGVlJuUlJhWGhPVVZWR2FreEZWa0pSVmsxelZGVkdRbGw2ZEZKUlZVWjVVWGw0V0ZGVlJrNU1SV1JDVVZVMGMxUlZSa0pVVTNoRVVWVkdVazh4UmtKUlZrMXpWakJHUWxSVGVFaFJWVVpQVEVVeFFsRlZNSE5STUVaQ1ZWUjBTbEZWUmtwTVJVNUNVVlZOTjFOVlJrUk9NRkZ6VG10S1FsRldhM05TTUVaQ1YybDRWbEZWUm1oTVJVNUNVVmRGTjFWVlJrSk5WVWx6WVZWS1FsUlZUVGRWVlVaTlVubDRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSTVc5elVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFZsRlZSa1JNUlU1Q1VWWk5jMUpWUmtKU1UzaEVVVlZHV0U4eGJFSlJlbFpEVEVWc1FsRlZNSE5TVlVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1NreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUlhSQ1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlUxNlVYbDRVRkZWUmxCTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUekZHUWxFeldrTk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXlXWE5STUVaQ1VYcDBTbEZWVGsxTVIwWkNVVlZOTjFGVlJrSlNRM2hFVVZWR1JFeEZSa0pXYTNkelUxVkdWbE42ZEVKUlZscFNURWhrUTFGVlJrNVBNRVpDVmpKWk4xTlZSbFJUVTNodVVXdEdSRlo1ZUVSUlZVWm9URVZXUWxFeVNYTlJNRVpDV1ZONFJsRlZUbWxNUlU1Q1VWZEZOMVZWUmtkWmFYaHlVV3RHUWxGVGVFWlJWVVpDVEVWMFFsRlhSVGRWVlVaRVdXbDRjbEZyUmtKUlUzaEdVVlZHUWt4RmRFSlJWMFUzVlZWR1JGbHBlSEpSYTBaQ1VWTjRSbEZWUmtKTVJYUkNVVmRGTjFWVlJrZFphWGhPVVZWR1JFeEZaRUpSVlZGelVUQkdRbEY1ZUVSUlZVWmFUekZHUWxFeVNYTlVWVVpDVVhsNFNGRlZSa1ZNUlU1Q1VWVk5jMUV3UmtKWFZIUlNVVlZPYVV4Rk1VSlJWVTF6VWpCR1FsSkRlRVJSVlVaRVRFVk9RbEZXYXpkVFZVWkNVMU40UkZGVlJrUlBNR3hDVVRKd1JFeEhSa0pSVlUwM1VWVkdRbEpEZUVSUlZVWkVURVZHUWxsclVYTlRWVVpvVVhwMFFsRlhTbHBNU0dSRFVWVkdUazh3UmtKWk1qVkRUekJzUWxSVmEzTmhNRXBDVVZjeFEweEZkRUpSVjFWelVsVkdRbFY1ZUV4UlZVWnNURVZXUWxGV1RYTmFWVVpDVFd0Sk4xVlZSa0pQVlZsellWVktRbGxWVFRkVlZVWnBZVEJWYzFvd1RrSlJWVVZ6VWxWR1FsRlRlSFJSYTBaQ1RXdEpOMVZWUmtKTk1GVnpWbFZHUWxONWVFaFJWVVpOVEVWMFFsRlZjM05STUVaQ1ZsUjBVbEZWUmxSTVJsWkNVVlZ6YzFJd1JrSlVRM2hNVVZWR1RFeEZUa0pSVmxVM1ZWVkdRbFY1ZUhaUmEwWkNXbE40U0ZGVlJtMU1SMVpDVVZkVmMxRXdSa0pYVkhSU1VWVlpOVkpwZUc1UmEwWkNWbmw0U0ZGVlJsWk1SV3hDVVZWcmMxRXdSa0pSZW5SU1VWaEdRMDFWU1hOTlJVcENVVmhHUTB4RlpFSlJWbXR6VTFWR1FsTlRlRVJSVlVaRVR6RkdRbUpGU25OUmVYaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVnNRbEZWYTNOVE1FWkNVM2w0UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTUzVVhsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVWRGcFJWVTV4VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYTNOVE1FWkNVM2w0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNmRGUlJWVTB4VVhwMFVsRlZUa1ZNUlhSQ1VWVnpjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VmxWR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWHAwV2xGVlRtMU1SWFJDVVZka1EweEdWa0pSVjBWelVsVkdRbGxwZUV4UlZVWkNURVpHUWxGV1JYTlJNRVpDVVhsNFNsRlZSa3BNUlZaQ1VWZEpjMWt3UmtKWlUzaEdVVlZHYVV4RmJFSlJWMFZ6VWxWR1FsSlVkRzVSYTBaQ1RWVkpjMU5WUmtKVFUzaElVVlZHU0V4R1RrSlJWVVUzV2pCS1FsRXhTWE5UVlVaQ1UxTjRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUZoUlZVWllUekk1UTFGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSbEZWUmtaTVJVNUNVVlZOTjFsVlJrUk9WVkUzVjFWR1JGSkRlRXhSVlVaS1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmxSVWx6VXpCR1FsTlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVVE5vUTB4RmRFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVFRGUmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1UlRFVk9RbEZWVFRkVFZVWkNVVk40UkZGVlJrUlBNR3hDVWxWWmMwNXJTa0pSVmxWelVqQkdRbFpwZUZaUlZVWllURVZPUWxGV1RUZFZWVVpFWVVWSmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpWMVZHUWxkVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlblJLVVZWT01sRjVlRVJSVlVaRVR6QnNRbE13VVhOa01FcENVVlZ6YzFJd1JrSlVRM2hXVVZWR1RreEdWa0pSV0dSRFR6RkdRbEZVYkVOTVIyeERVVmhXUkZGNmRGSlJXRnBFVTNsM2VWRnJSa0pSVTNoR1VWVkdRa3hIWkVOUlZVWXpVV3AwVWxGVlRYaFJhWGhLVVZWR1RreEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVuUlNVVlZWTVZGcGVFcFJWVVpLVEVac1FsRldhM05TTUVaQ1VubDRTbEZWUmtwTVJteENVVlpyYzFKVlJrSlNVM2hFVVZWR1JFOHhSa0pTV0ZKRVRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1TRVpEVVZWR2VGRnFkRnBSVlUxNFVXbDRibEV3UmtKaE1FbHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSbEZWUmtaTVJteENVVlpyYzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZWWXdVa040U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVGWlJWVVpDVEVWT1FsRlZUWE5UVlVaQ1UxTjRVRkZWUmtKTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZiRUpSVld0elV6QkdRbE5UZUVSUlZVWkVURWRXUWxGWFZYTlNWVVpDWVVWTmMxRXdSa0phTUUxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxKNlJrVk1SV3hDVVZVd2Mxa3dSa0paZVhoSVVWVkdTRXhGVGtKUlZVMXpVMVZHUWxOVGQzZFJhMFpDVmxONFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlU1dlVrTjRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGV1NYTlJNRVpDVlZONFJsRlZSa1pNUmxaQ1VWVkZjMUV3UmtKUmVYaEtVVlZHU0V4Rk9VSlJWVVZ6VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNWV2w0UkZGVlJsSk1SVlpDVVZWVmMxWlZSa0pSVTNoRVVWVkdSRXhGYkVKUlZXdHpWREJHUWxGVGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSbEZWUmxOTVJVNUNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxeldUQkdRbGw1ZUVaUlZVWkdURVZPUWxGVlRUZFZWVVpHWVd0VmMxTlZSa0pVVTNoRVVWVkdSRXhGWkVKUlZXTnpZVlZLUWxGVk9ITlJNRVpDVVhsNGNsRnJSa0poTUVselVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTldWVVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEtVVlZHVEV4Rk9VSlJWVVZ6V1RCR1FsbDVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdkMUZwZUVSUlZVWjJVV2w0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa3BsUlZWelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTmhWVXBDVVZVNGMxRXdSa0pSZVhoeVVXdEdRbUV3U1hOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxa3dSa0paZVhoUVVWVkdVRXhGVGtKUlZVMXpVVEJHUWxGVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVEpvUmt4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWTmMxSlZSa0poTUVrM1dqQktRbEZYYUVOTVIzUkRVVlZHVGt4RlZrSlJWVlZ6WVRCS1FsRlZNRGRYVlVaQ1ZIbDRVRkZWUmtKTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWHAwVWxGVlJqWlJlWGhFVVZWR05WRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkdaRVZaYzFOVlJrSlRVM2hFVVZWR1JFeEZPVUpSVlRoelVqQkdRbEo1ZUVwUlZVWktURWRzUTFGVlJsQk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVFhwUmVYaEtVVlZHU2t4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFWk9RbEZXVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTk4xVlZSa1JQVlVselUxVkdRbE5UZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlRWelZEVEVWc1FsRlZhM05UVlVaQ1UxTjRSRkZWUmtSTVJtUkNVVlpqTjFkVlJrUmhSVWx6VTFWR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VUZGVlJsQk1SV1JDVVZWamMxTlZSa0pUVTNoNlVXdEdRbFpUZUVSUlZVWnFURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMU5WUmtKVFUzaEdVVlZHUmt4RmJFSlJWV3R6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOV01FWkNWbmw0UkZGVlJrUk1SVTVDVVZWTmMxb3dTa0pSVjJSRFRFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlZuZFRRM2hNVVZWR1RFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRTVSVlVaT1RFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVk4xZFZSa1JsUlUxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlU0d1VXbDRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZVM1dqQktRbEV4VVhOVFZVWkNVMU40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkR2hSVlUwMVVYcDBWRkZWVGt0UE1VWkNVbFZSYzFOVlJrSlRVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTldWVVpDVmxONFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtST01FbHpWREJHUWxSNWVFcFJWVVpLVEVWT1FsRlZUVGRUVlVaRVlVVkpjMUV3UmtKUmVuUktVVlZXUlV4SVZrTlJWVVpLVEVWa1FsRlZiemRWVlVaRVUxTjRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUV4UlZVWk1URVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZUWHBSYVhoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZOMWRWUmtSbFJVMXpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNHdVV2w0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVmtKUlZWVTNXakJLUWxFeFVYTlRWVVpDVTFONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEdoUlZVMDFVWHAwVkZGVlRrdFBNVVpDVVRCUmMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVaV1FsRldWWE5TVlVaQ1VsTjRSRkZWUmtSUE1HeENVVE5LUkV4RlRrSlJWVTAzVTFWRk0xSlZNSE5aVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUakpSYVhoV1VWVkdSRXhGWkVKUlZXTnpWVlZHUWxWVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOTjFOVlJUSlNXRUpFVEVkV1FsRlZUVGRSTUVaQ1VWTjRRbEZUT1VaU1EzaEtVVk4wUmxGNmRFSlJVemxHVjFOM01GRnJSa0pWVkhSQ1VWZHNSMk5yU1RkVFZVWkNVVlIwU2xGVmRFSk1SVTVDVVZWTk4xTlZSa3RTZVhoNFVUQkdRbGw1ZUVoUlZVWnJURVpXUWxGWFZYTlJNRVpDVkZONFNsRlZSbHBNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZbXRSYzJOVlRrSlJWMDF6VWpCR1FscERlRlpSVlVac1RFVk9RbEZWTUhOVFZVWkNWMU40VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXlOVVZNUjJSRVVWVkdWRXhGWkVKUlZsRnpWbFZHUWxaVGVFUlJWVVpPVEVWc1FsRldhM05VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMDFVWGw0YmxFd1JrSlZlWGhJVVZWR1ZVeEdWa0pSVmxWelVUQkdRbFJUZUVaUlZVWkdURVZPUWxGV1RYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZa1ZSYzJKVlNrSlJWVTAzVVZWR1FsSkRlRVJSVlVaRVRFVkdRbFJGVVhOVFZVWk1VWGxLT1NJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVablZ1WTNScGIyNGdkVzVwYjI1RGIzVnVkQ2hoTENCaUtTQjdYRzRnSUNBZ2RtRnlJSFVnUFNCN2ZUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElHbHVJR0VwWEc0Z0lDQWdJQ0FnSUhWYmFWMGdQU0I3ZlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUdsdUlHSXBYRzRnSUNBZ0lDQWdJSFZiYVYwZ1BTQjdmVHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9kU2t1YkdWdVozUm9PMXh1ZlZ4dVpuVnVZM1JwYjI0Z2FXNTBaWEp6WldOMGFXOXVRMjkxYm5Rb1lTd2dZaWtnZTF4dUlDQWdJSFpoY2lCdUlEMGdNRHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJR2x1SUdFcFhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZbHRwWFNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXJLMjQ3WEc0Z0lDQWdjbVYwZFhKdUlHNDdYRzU5WEc1bWRXNWpkR2x2YmlCblpYUk9aV2xuYUdKdmRYSnpLR3hwYm10ekxDQnNZU2tnZTF4dUlDQWdJSFpoY2lCdVpXbG5hR0p2ZFhKeklEMGdlMzA3WEc0Z0lDQWdkbUZ5SUdGa1pFNWxhV2RvWW05MWNuTWdQU0JtZFc1amRHbHZiaUFvZFN3Z2Rpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1bGFXZG9ZbTkxY25OYmRWMGdQVDA5SUNkMWJtUmxabWx1WldRbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WcFoyaGliM1Z5YzF0MVhTQTlJSHQ5TzF4dUlDQWdJQ0FnSUNCdVpXbG5hR0p2ZFhKelczVmRXM1pkSUQwZ2UzMDdYRzRnSUNBZ2ZUdGNiaUFnSUNCc2FXNXJjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIxSUQwZ2JHRXVaMlYwVTI5MWNtTmxTVzVrWlhnb1pTa3NJSFlnUFNCc1lTNW5aWFJVWVhKblpYUkpibVJsZUNobEtUdGNiaUFnSUNBZ0lDQWdZV1JrVG1WcFoyaGliM1Z5Y3loMUxDQjJLVHRjYmlBZ0lDQWdJQ0FnWVdSa1RtVnBaMmhpYjNWeWN5aDJMQ0IxS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVZwWjJoaWIzVnljenRjYm4xY2JtWjFibU4wYVc5dUlHTnZiWEIxZEdWTWFXNXJUR1Z1WjNSb2N5aHNhVzVyY3l3Z2R5d2daaXdnYkdFcElIdGNiaUFnSUNCMllYSWdibVZwWjJoaWIzVnljeUE5SUdkbGRFNWxhV2RvWW05MWNuTW9iR2x1YTNNc0lHeGhLVHRjYmlBZ0lDQnNhVzVyY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoc0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaElEMGdibVZwWjJoaWIzVnljMXRzWVM1blpYUlRiM1Z5WTJWSmJtUmxlQ2hzS1YwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpSUQwZ2JtVnBaMmhpYjNWeWMxdHNZUzVuWlhSVVlYSm5aWFJKYm1SbGVDaHNLVjA3WEc0Z0lDQWdJQ0FnSUd4aExuTmxkRXhsYm1kMGFDaHNMQ0F4SUNzZ2R5QXFJR1lvWVN3Z1lpa3BPMXh1SUNBZ0lIMHBPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2MzbHRiV1YwY21salJHbG1aa3hwYm10TVpXNW5kR2h6S0d4cGJtdHpMQ0JzWVN3Z2R5a2dlMXh1SUNBZ0lHbG1JQ2gzSUQwOVBTQjJiMmxrSURBcElIc2dkeUE5SURFN0lIMWNiaUFnSUNCamIyMXdkWFJsVEdsdWEweGxibWQwYUhNb2JHbHVhM01zSUhjc0lHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCTllYUm9Mbk54Y25Rb2RXNXBiMjVEYjNWdWRDaGhMQ0JpS1NBdElHbHVkR1Z5YzJWamRHbHZia052ZFc1MEtHRXNJR0lwS1RzZ2ZTd2diR0VwTzF4dWZWeHVaWGh3YjNKMGN5NXplVzF0WlhSeWFXTkVhV1ptVEdsdWEweGxibWQwYUhNZ1BTQnplVzF0WlhSeWFXTkVhV1ptVEdsdWEweGxibWQwYUhNN1hHNW1kVzVqZEdsdmJpQnFZV05qWVhKa1RHbHVhMHhsYm1kMGFITW9iR2x1YTNNc0lHeGhMQ0IzS1NCN1hHNGdJQ0FnYVdZZ0tIY2dQVDA5SUhadmFXUWdNQ2tnZXlCM0lEMGdNVHNnZlZ4dUlDQWdJR052YlhCMWRHVk1hVzVyVEdWdVozUm9jeWhzYVc1cmN5d2dkeXdnWm5WdVkzUnBiMjRnS0dFc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWJXbHVLRTlpYW1WamRDNXJaWGx6S0dFcExteGxibWQwYUN3Z1QySnFaV04wTG10bGVYTW9ZaWt1YkdWdVozUm9LU0E4SURFdU1TQS9JREFnT2lCcGJuUmxjbk5sWTNScGIyNURiM1Z1ZENoaExDQmlLU0F2SUhWdWFXOXVRMjkxYm5Rb1lTd2dZaWs3WEc0Z0lDQWdmU3dnYkdFcE8xeHVmVnh1Wlhod2IzSjBjeTVxWVdOallYSmtUR2x1YTB4bGJtZDBhSE1nUFNCcVlXTmpZWEprVEdsdWEweGxibWQwYUhNN1hHNW1kVzVqZEdsdmJpQm5aVzVsY21GMFpVUnBjbVZqZEdWa1JXUm5aVU52Ym5OMGNtRnBiblJ6S0c0c0lHeHBibXR6TENCaGVHbHpMQ0JzWVNrZ2UxeHVJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUnpJRDBnYzNSeWIyNW5iSGxEYjI1dVpXTjBaV1JEYjIxd2IyNWxiblJ6S0c0c0lHeHBibXR6TENCc1lTazdYRzRnSUNBZ2RtRnlJRzV2WkdWeklEMGdlMzA3WEc0Z0lDQWdZMjl0Y0c5dVpXNTBjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqTENCcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc1dlpHVnpXM1pkSUQwZ2FUc2dmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdkbUZ5SUdOdmJuTjBjbUZwYm5SeklEMGdXMTA3WEc0Z0lDQWdiR2x1YTNNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2JDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RXa2dQU0JzWVM1blpYUlRiM1Z5WTJWSmJtUmxlQ2hzS1N3Z2Rta2dQU0JzWVM1blpYUlVZWEpuWlhSSmJtUmxlQ2hzS1N3Z2RTQTlJRzV2WkdWelczVnBYU3dnZGlBOUlHNXZaR1Z6VzNacFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0hVZ0lUMDlJSFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMGNtRnBiblJ6TG5CMWMyZ29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Y0YVhNNklHRjRhWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWREb2dkV2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21sbmFIUTZJSFpwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkaGNEb2diR0V1WjJWMFRXbHVVMlZ3WVhKaGRHbHZiaWhzS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMjl1YzNSeVlXbHVkSE03WEc1OVhHNWxlSEJ2Y25SekxtZGxibVZ5WVhSbFJHbHlaV04wWldSRlpHZGxRMjl1YzNSeVlXbHVkSE1nUFNCblpXNWxjbUYwWlVScGNtVmpkR1ZrUldSblpVTnZibk4wY21GcGJuUnpPMXh1Wm5WdVkzUnBiMjRnYzNSeWIyNW5iSGxEYjI1dVpXTjBaV1JEYjIxd2IyNWxiblJ6S0c1MWJWWmxjblJwWTJWekxDQmxaR2RsY3l3Z2JHRXBJSHRjYmlBZ0lDQjJZWElnYm05a1pYTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUhaaGNpQnpkR0ZqYXlBOUlGdGRPMXh1SUNBZ0lIWmhjaUJqYjIxd2IyNWxiblJ6SUQwZ1cxMDdYRzRnSUNBZ1puVnVZM1JwYjI0Z2MzUnliMjVuUTI5dWJtVmpkQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lIWXVhVzVrWlhnZ1BTQjJMbXh2ZDJ4cGJtc2dQU0JwYm1SbGVDc3JPMXh1SUNBZ0lDQWdJQ0J6ZEdGamF5NXdkWE5vS0hZcE8xeHVJQ0FnSUNBZ0lDQjJMbTl1VTNSaFkyc2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmZhU0E5SURBc0lGOWhJRDBnZGk1dmRYUTdJRjlwSUR3Z1gyRXViR1Z1WjNSb095QmZhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2R5QTlJRjloVzE5cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2R5NXBibVJsZUNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRISnZibWREYjI1dVpXTjBLSGNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdWJHOTNiR2x1YXlBOUlFMWhkR2d1YldsdUtIWXViRzkzYkdsdWF5d2dkeTVzYjNkc2FXNXJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hjdWIyNVRkR0ZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXViRzkzYkdsdWF5QTlJRTFoZEdndWJXbHVLSFl1Ykc5M2JHbHVheXdnZHk1cGJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIWXViRzkzYkdsdWF5QTlQVDBnZGk1cGJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJYQnZibVZ1ZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0hOMFlXTnJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGNnUFNCemRHRmpheTV3YjNBb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNMbTl1VTNSaFkyc2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUXVjSFZ6YUNoM0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZHlBOVBUMGdkaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyMXdiMjVsYm5SekxuQjFjMmdvWTI5dGNHOXVaVzUwTG0xaGNDaG1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnZGk1cFpEc2dmU2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYm5WdFZtVnlkR2xqWlhNN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCdWIyUmxjeTV3ZFhOb0tIc2dhV1E2SUdrc0lHOTFkRG9nVzEwZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9kbUZ5SUY5cElEMGdNQ3dnWldSblpYTmZNU0E5SUdWa1oyVnpPeUJmYVNBOElHVmtaMlZ6WHpFdWJHVnVaM1JvT3lCZmFTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxJRDBnWldSblpYTmZNVnRmYVYwN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyWHpFZ1BTQnViMlJsYzF0c1lTNW5aWFJUYjNWeVkyVkpibVJsZUNobEtWMHNJSGNnUFNCdWIyUmxjMXRzWVM1blpYUlVZWEpuWlhSSmJtUmxlQ2hsS1YwN1hHNGdJQ0FnSUNBZ0lIWmZNUzV2ZFhRdWNIVnphQ2gzS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNoMllYSWdYMkVnUFNBd0xDQnViMlJsYzE4eElEMGdibTlrWlhNN0lGOWhJRHdnYm05a1pYTmZNUzVzWlc1bmRHZzdJRjloS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhZZ1BTQnViMlJsYzE4eFcxOWhYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMkxtbHVaR1Y0SUQwOVBTQW5kVzVrWldacGJtVmtKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjbTl1WjBOdmJtNWxZM1FvZGlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmpiMjF3YjI1bGJuUnpPMXh1ZlZ4dVpYaHdiM0owY3k1emRISnZibWRzZVVOdmJtNWxZM1JsWkVOdmJYQnZibVZ1ZEhNZ1BTQnpkSEp2Ym1kc2VVTnZibTVsWTNSbFpFTnZiWEJ2Ym1WdWRITTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGlSMngxWVRKNGJHSnRaREJoU0UxMVlXNU5hVXhEU25waU0xWjVXVEpXVTJJeU9UQkphbTlwU1dsM2FXTXlPVEZqYlU1c1kzbEpObGQ1U1hWTWFUaDFUR2s1V0ZwWFNrUmlNbmhvVEROT2VWbDVPWE5oVnpWeVlrZFdkVm96VW05amVUVXdZM2xLWkV4RFNuVlpWekZzWTNsSk5sY3hNSE5KYlRGb1kwaENjR0p0WkhwSmFtOXBUM3AwUWxGV1ZrcE1SazVDVVZaTmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZUQnpVbFZHUWxKVGVFUlJWVVpPVHpCc1FsRjZiRU5NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlZrSlJWVlZ6VVRCR1FsRjZkRXBSVlU1WlRFVjBRbEZWYzNOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZW5SU1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOTjFOVlJrUk5NRWx6VXpCR1FsTjVlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUlBNVVpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBTbEZWVFhwUmFYaFFVVlZHVUV4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRTh3UmtKUk1uQkVURVZPUWxGVlRUZFJWVVpJVWtONFZGRlZSbFJNUjJ4RFVWVkdjRkZwZUVSUlZVWkVURVZPUWxGV1kzTlNWVVpDVWxONFJGRlZSbGhQTUd4Q1VYazVSRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVGxkTVJYUkNVVlZ6YzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY2ZEZKUlZVWkdURVZzUWxGVmEzTlVNRVpDVkhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmRFSlJWWE56VmpCR1FsWjZkRnBSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVROU1JVeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVUekJHUWxFeVNYTlJNRVpDVVhwMFFsRlZWa1ZNUms1Q1VWWk5jMWxWUmtKWlUzaEVVVlZHVUV4RmRFSlJWMFZ6VWxWR1FsSlRlRVpSVlVaNlVXcDBTbEZWVFRWU1EzaEtVVlZHU2t4R1ZrSlJWbFZ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVFZVWkVZMFZKYzFOVlJrSlRVM2hvVVZWR2FFeEZaRUpSVldOelZsVkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZUbmxSYVhoS1VWVkdTa3hGT1VKUlZUaHpWbFZHUWxaVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJtUkNVVlpqTjFkVlJrUmpSVTF6VmxWR1FsWlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SU1VWVk9NbEZwZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEY2UmtOTVJVNUNVVlZOYzFFd1JrSlJlblJLVVZWT1IweEZkRUpSVlhOelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JQTVVaQ1VURm5jMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFZE9RbEZYVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVkT1FsRlhUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT01sSkRlR2hSVlVab1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk0wSkRURWRHUWxGWFJYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JHVkZTWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUlRRM2hRVVZWR1VFeEdWa0pSVmxWelVUQkdRbEY2ZEVKUlZVNHdVV2w0UkZGVlJrUlBNRVpDVWpCUmMxVXdSa0pWZVhoeVVXdEdRbUV3U1hOUk1FWkNWSGw0VEZGVlJtaE1SVlpDVVZWVmMxRXdSa0pWZVhoR1VWVkdSa3hGVGtKUlZGcERURVZXUWxGVlZYTlNWVVpDVGtWSk4xTlZSa1JpYTJkelUxVkdRbE5UZUZaUlZVWldURVZrUWxGVlkzTlpWVVpDV1ZONFJGRlZSa1JNUlhSQ1VWVnpjMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlUxNFVYbDRURkZWUmt4TVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEdWa0pSVlVWelVUQkdRbEY2ZEZKUlZVNVpURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUmxaQ1VWWlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6V1RCR1FsbDVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JsYTAxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTldWVVpDVmxONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaHFVVlZHYWt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRqWlJlWGhHVVZWR1JreEZUa0pSVlUxelZUQkdRbFY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9lVkY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFFsRlZUbEZNUlU1Q1VWVk5OMUZWUmt4U1EzaFVVVlZHYmxGcGVETlJhMFpDWkRCSmMxRXdSa0pVZVhoTVVWVkdhRXhGVmtKUlZWVnpVbFZHUWs1RlNYTlNWVVpDVWxONFJGRlZSbWhQTUd4Q1VWZEpjMkV3U2tKUlZVVnpVbFZHUWxGVGVFeFJWVVpvVHpCc1FsRXpTa2hNUjNSRFVWVkdjbEZwZUVSUlZVWkVURVYwUWxGVmMzTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMVpWUmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaTVRFVTVRbEZWUlhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVIyeERVVlZHY0ZGcGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR2VWSkRlRVJSVlVaNFVrTjRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTTFKSVRFVk9RbEZWVFRkUlZVWkhVa04zTUZKRlJrWlJlblJDVVZWMFJVeEdUa0pSVjJSRFRFZDBRMUZWUm5KUmFYaEVVVlZHVUV4RmRFSlJWMFZ6VWxWR1FsSlRlRVpSVlVVd1VXbDRSbEZWUmtaTVJVNUNVVmRGTjFOVlJrSlphWGh5VVd0R1FsRlRlRVpSVlVaQ1RFVjBRbEZYUlRkVFZVWkVUREJaYzJFd1NrSlJWM1JEVEVWT1FsRlZUWE5UTUVaQ1UzbDRSbEZWUmtaTVJVNUNVVlZOYzFKVlJrSlNVM2hXVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVUekZHUWxGNmJFTk1SVGxDVVZWRmMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVsVkdRbEpUZUU1UlZVWk9URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRWhSVlVaSVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVIQlJhMFpDWVZWSmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05XVlVaQ1ZsTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUwM1UxVkdRazR3WTNOUk1FWkNUbXRqYzFKVlJrUk5NR056VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkVXa040UkZGVlJrUlBNRVpDVTJ0UmMxb3dVa0pUVlUwM1VWVkdkbEZyVVhOVk1FWkNXakJKYzBzd1NrSlJVM1JEVEVWT1FsRlZPSE5STUVaQ1ZYbDRSbEZWUmtaTVJYUkNVVmRGYzFKVlJrSlNVM2hLVVZWR1dreEZWa0pSTTJoSFRFVldRbEZZYkVOUE1HeENVbGh3UTB4RmJFSlJWV3R6VmxWR1FsWlRlRWhSVlVaSVRFUktRMUZWUlhsUmFYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRXhSVlVaTVRFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1JOTUZGelUxVkdRbE5UZUV4UlZVWk1URVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JQTUd4Q1VUSlpjMVpWUmtKV1UzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRlpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVWGw0UkZGVlJrUlBNVVpDVVRJMVEweEZPVUpSVlVWelVUQkdRbEY1ZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFZsRlZSa0pNUlU1Q1VWVk5jMU5WUmtKVFUzaFFVVlZHUWt4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZadmMxRXdSa0pYVTNoRVVWVkdSRTh3YkVKUlZGWkRURVZPUWxGVVVrTk1SVTVDVVhrNVEweEZUa0pSVlUwM1UxVkdSRkpwZUVwUlZVWktURVprUWxGV1kzTlNNRVpDVmxONFJsRlZSa1pNUlU1Q1VWVk5OMU5WUmtST1ZVbHpVekJHUWxONWVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOTjFWVlJrUlhRM2hLVVZWR1NreEZWa0pSVlZWelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRYTlpNRVpDV1hsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFhOWk1FWkNXWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVk9kMUpEZUVSUlZVWkVURVZrUWxGVlkzTlRNRVpDVTNsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JoYTAxelUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pQTVd4Q1VURlJjMVl3UmtKV2VYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjZkRzVSYTBaRVdXbDRTbEZWUmtwTVJWWkNVVlZWYzFOVlJrSlRWSFJ1VVd0R1JGWnBlRXBSVlVaS1RFVldRbEZWVlhOU1ZVWkNVbFIwYmxGclJrUlZhWGhNVVZWR1RFeEZWa0pSVlZWelVsVkdRbEpVZEc1UmEwWkVWa040U0ZGVlJraE1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhIWkVOUlZVWnVVV2w0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5Sb1VWVk5OVkZwZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFVkdwMFNsRlZUazFNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJNR2R6VkRCR1FsUjVlRmhSVlVaWVRFVk9RbEZWVFRkUlZVWkVaR3RKYzFFd1JrSlJlblJDVVZoU1ExSkRkM2RTVlVaNlVXdE5OMUZWUmxKU1EzaFVVVlZHYmxGcGQzbFJhMFpDVFd0SmMxRXdSa0pVZVhoWVVWVkdkRkZwZUVaUlZVWkdURVYwUWxGWFJYTlNWVVpDVWxONFJsRlZSbnBSYW5SS1VWVk9ORko1ZUVwUlZVWktURVYwUWxGVmMzTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMU5WUmtSYWFYaEtVVlZHU2t4RmRFSlJWWE56VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVXa040U2xGVlJrcE1SWFJDVVZWemMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkZwcGVFcFJWVVpLVEVaV1FsRldWWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOTjFOVlJrUmpSVWx6VlRCR1FsVjVlR2hSVlVab1RFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlZuZFJhWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFVGRlZSbEJNUldSQ1VWVmpjMU13UmtKVGVYaEdVVlZHUmt4RlRrSlJWVTAzVlZWR1JFOVZTWE5UTUVaQ1UzbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNXJURVZPUWxGVlRYTlJNRVpDVVhsNFVGRlZSbEJNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkU4eFJrSlNNbkJEVEVWMFFsRlhUWE5XVlVaQ1UzbDRSbEZWUmsxTVJYUkNVVlZGYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVsVkdRbFJEZUdwUlZVWk1URVZXUWxGVmQzTlRWVVpDVTNsNFJsRlZSa1pQTVd4Q1VWZG9RMHhGYkVKUlZXdHpVVEJHUWxGNWVGUlJWVVpDVHpGc1FsRXdOSE5UVlVaQ1UxTjRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZkRUpSVlhOelZqQkdRbFo1ZUVaUlZVWkdUekprUTFGVlZtOVJlWGhvVVZWR2FFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVRKd1EweEZUa0pSVlUxelVUQkdRbEY1ZUZCUlZVWlFURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VkRCR1FsUjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZW5Sb1VWVk5OVkY2ZEhCUmEwWkNWRk40U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoUVVWVkdVRXhGVmtKUlZWVTNXakJLUWxKWGVFTk1SVTVDVVZWTmMxRXdSa0pSZVhoUVVWVkdVRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFRd1JrSlVlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwMGFGRlZUVEZSZW5SVVVWVk9TMDh4UmtKU01GRnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5VTUVaQ1ZIbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZVM1YxVkdSbVJyU1hOVFZVWkNVMU40VkZGVlJsUk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4YkVKUk1qVkRURVU1UWxGVk9ITlRNRVpDVTNsNFJGRlZSa1JNUlRGQ1VWVXdjMUpWUmtKU1ZIUnVVV3RHUkdGclNYTlJNRVpDVVhsNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4RlZrSlJWVlZ6VVRCR1FsRjZkRzVSYTBaRVlVVkpjMUV3UmtKUmVYaEVVVlZHUkV4Rk9VSlJWVGh6VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFRkYU1FcENVbGQ0UTB4R1RrSlJWazF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xb3dTa0pSTW5oRFRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTk4ySXdTa0pSVlZWelZGVkdRbFJVZEdoUlZVNHdVV3AwV2xGVlZrVk1SbFpDVVZaVmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlRVM2hRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVmIzTlJNRVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZOTTFGNmRFcFJWVTVOVEVWT1FsRlZUVGRUVlVaRVVrTjRURkZWUmt4TVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTldNRVpDVm5sNFJsRlZSa1pNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUms4eFJrSlJNbmhFVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFKVlJrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d2RFSlJNbWhFVHpCc1FsRXdVWE5UTUVaQ1dYbDRWbEZWUmt4TVJWWkNVVlYzYzFwVlJrSlRlWGhHVVZWR1RVeEhNVU5SVlVaTVRFVldRbEZWZDNOVFZVWkNVM2w0UmxGVlJrWlBNVVpDVVZkb1EweEZiRUpSVld0elVUQkdRbEY1ZUdwUlZVWkNUekZHUWxFd05ITlRWVVpDVTFONFNGRlZSa1JNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa1JNTUVselVUQkdRbEY1ZUVoUlZVWklURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMWt3UmtKWmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVZMFZOYzFJd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU13UmtSaGEwazNVMVZHUkZKRGVFeFJWVVpxVEVaV1FsRlZjM05TVlVaQ1ZFTjRiRkZWUmt4TVJWWkNVVlYzYzJKVlNrSlJWWE56VWxWR1FsUkRlRXBSVlVaTVR6RkdRbEZYVVhOVFZVWkNVMU40UkZGVlJrUk1SMDVDVVZWRk4xVlZSa0pXZVhoS1VWVkdTa3hGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWMFFsRlZjM05UTUVaQ1UzbDRXRkZWUmxoUE1XeENVVlZWYzFsVlJrSlpVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekIwUWxGVlJUZFRWVVpFVFZWVmMxUXdSa0pVZVhoV1VWVkdWa3hGVGtKUlZVMDNVVlZHUkdSRlNYTlJNRVpDVVhwMFFsRlhhRVZTUTNoeVVsVkdibEpGVFdsbVVUMDlJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUhzZ2RtRnNkV1U2SUhSeWRXVWdmU2s3WEc1MllYSWdVRzkzWlhKRlpHZGxJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCUWIzZGxja1ZrWjJVb2MyOTFjbU5sTENCMFlYSm5aWFFzSUhSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiM1Z5WTJVZ1BTQnpiM1Z5WTJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBJRDBnZEdGeVoyVjBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNCMGVYQmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVUc5M1pYSkZaR2RsTzF4dWZTZ3BLVHRjYm1WNGNHOXlkSE11VUc5M1pYSkZaR2RsSUQwZ1VHOTNaWEpGWkdkbE8xeHVkbUZ5SUVOdmJtWnBaM1Z5WVhScGIyNGdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUVOdmJtWnBaM1Z5WVhScGIyNG9iaXdnWldSblpYTXNJR3hwYm10QlkyTmxjM052Y2l3Z2NtOXZkRWR5YjNWd0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHVhMEZqWTJWemMyOXlJRDBnYkdsdWEwRmpZMlZ6YzI5eU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdlpIVnNaWE1nUFNCdVpYY2dRWEp5WVhrb2JpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKdmIzUkhjbTkxY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibWwwVFc5a2RXeGxjMFp5YjIxSGNtOTFjQ2h5YjI5MFIzSnZkWEFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eWIyOTBjeTV3ZFhOb0tHNWxkeUJOYjJSMWJHVlRaWFFvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc0N0lDc3JhU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1J6V3pCZExtRmtaQ2gwYUdsekxtMXZaSFZzWlhOYmFWMGdQU0J1WlhjZ1RXOWtkV3hsS0drcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsSWdQU0JsWkdkbGN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lHVmtaMlZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpJRDBnWDNSb2FYTXViVzlrZFd4bGMxdHNhVzVyUVdOalpYTnpiM0l1WjJWMFUyOTFjbU5sU1c1a1pYZ29aU2xkTENCMElEMGdYM1JvYVhNdWJXOWtkV3hsYzF0c2FXNXJRV05qWlhOemIzSXVaMlYwVkdGeVoyVjBTVzVrWlhnb1pTbGRMQ0IwZVhCbElEMGdiR2x1YTBGalkyVnpjMjl5TG1kbGRGUjVjR1VvWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6TG05MWRHZHZhVzVuTG1Ga1pDaDBlWEJsTENCMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhRdWFXNWpiMjFwYm1jdVlXUmtLSFI1Y0dVc0lITXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdRMjl1Wm1sbmRYSmhkR2x2Ymk1d2NtOTBiM1I1Y0dVdWFXNXBkRTF2WkhWc1pYTkdjbTl0UjNKdmRYQWdQU0JtZFc1amRHbHZiaUFvWjNKdmRYQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXZaSFZzWlZObGRDQTlJRzVsZHlCTmIyUjFiR1ZUWlhRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBjeTV3ZFhOb0tHMXZaSFZzWlZObGRDazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWjNKdmRYQXViR1ZoZG1WekxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJR2R5YjNWd0xteGxZWFpsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnRiMlIxYkdVZ1BTQnVaWGNnVFc5a2RXeGxLRzV2WkdVdWFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjJSMWJHVnpXMjV2WkdVdWFXUmRJRDBnYlc5a2RXeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOWtkV3hsVTJWMExtRmtaQ2h0YjJSMWJHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG5jbTkxY0M1bmNtOTFjSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnWjNKdmRYQXVaM0p2ZFhCekxteGxibWQwYURzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTm9hV3hrSUQwZ1ozSnZkWEF1WjNKdmRYQnpXMnBkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtaV1pwYm1sMGFXOXVJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NISnZjQ0JwYmlCamFHbHNaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNBZ0lUMDlJRndpYkdWaGRtVnpYQ0lnSmlZZ2NISnZjQ0FoUFQwZ1hDSm5jbTkxY0hOY0lpQW1KaUJqYUdsc1pDNW9ZWE5QZDI1UWNtOXdaWEowZVNod2NtOXdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1sdWFYUnBiMjViY0hKdmNGMGdQU0JqYUdsc1pGdHdjbTl3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIyUjFiR1ZUWlhRdVlXUmtLRzVsZHlCTmIyUjFiR1VvTFRFZ0xTQnFMQ0J1WlhjZ1RHbHVhMU5sZEhNb0tTd2dibVYzSUV4cGJtdFRaWFJ6S0Nrc0lIUm9hWE11YVc1cGRFMXZaSFZzWlhOR2NtOXRSM0p2ZFhBb1kyaHBiR1FwTENCa1pXWnBibWwwYVc5dUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMXZaSFZzWlZObGREdGNiaUFnSUNCOU8xeHVJQ0FnSUVOdmJtWnBaM1Z5WVhScGIyNHVjSEp2ZEc5MGVYQmxMbTFsY21kbElEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHc3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHc2dQVDA5SUhadmFXUWdNQ2tnZXlCcklEMGdNRHNnZlZ4dUlDQWdJQ0FnSUNCMllYSWdhVzVKYm5RZ1BTQmhMbWx1WTI5dGFXNW5MbWx1ZEdWeWMyVmpkR2x2YmloaUxtbHVZMjl0YVc1bktTd2diM1YwU1c1MElEMGdZUzV2ZFhSbmIybHVaeTVwYm5SbGNuTmxZM1JwYjI0b1lpNXZkWFJuYjJsdVp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlHNWxkeUJOYjJSMWJHVlRaWFFvS1R0Y2JpQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc0dVlXUmtLR0VwTzF4dUlDQWdJQ0FnSUNCamFHbHNaSEpsYmk1aFpHUW9ZaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRJRDBnYm1WM0lFMXZaSFZzWlNoMGFHbHpMbTF2WkhWc1pYTXViR1Z1WjNSb0xDQnZkWFJKYm5Rc0lHbHVTVzUwTENCamFHbHNaSEpsYmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5a2RXeGxjeTV3ZFhOb0tHMHBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RYQmtZWFJsSUQwZ1puVnVZM1JwYjI0Z0tITXNJR2tzSUc4cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhNdVptOXlRV3hzS0daMWJtTjBhVzl1SUNodGN5d2diR2x1YTNSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0Y3k1bWIzSkJiR3dvWm5WdVkzUnBiMjRnS0c0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHNXNjeUE5SUc1YmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1c2N5NWhaR1FvYkdsdWEzUjVjR1VzSUcwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YkhNdWNtVnRiM1psS0d4cGJtdDBlWEJsTENCaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm14ekxuSmxiVzkyWlNoc2FXNXJkSGx3WlN3Z1lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGYmIxMHVjbVZ0YjNabEtHeHBibXQwZVhCbExDQnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lsdHZYUzV5WlcxdmRtVW9iR2x1YTNSNWNHVXNJRzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFZ3WkdGMFpTaHZkWFJKYm5Rc0lGd2lhVzVqYjIxcGJtZGNJaXdnWENKdmRYUm5iMmx1WjF3aUtUdGNiaUFnSUNBZ0lDQWdkWEJrWVhSbEtHbHVTVzUwTENCY0ltOTFkR2R2YVc1blhDSXNJRndpYVc1amIyMXBibWRjSWlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VWlBdFBTQnBia2x1ZEM1amIzVnVkQ2dwSUNzZ2IzVjBTVzUwTG1OdmRXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEhOYmExMHVjbVZ0YjNabEtHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1J6VzJ0ZExuSmxiVzkyWlNoaUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBjMXRyWFM1aFpHUW9iU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ0TzF4dUlDQWdJSDA3WEc0Z0lDQWdRMjl1Wm1sbmRYSmhkR2x2Ymk1d2NtOTBiM1I1Y0dVdWNtOXZkRTFsY21kbGN5QTlJR1oxYm1OMGFXOXVJQ2hyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hySUQwOVBTQjJiMmxrSURBcElIc2dheUE5SURBN0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhKeklEMGdkR2hwY3k1eWIyOTBjMXRyWFM1dGIyUjFiR1Z6S0NrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1SUQwZ2NuTXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQjJZWElnYldWeVoyVnpJRDBnYm1WM0lFRnljbUY1S0c0Z0tpQW9iaUF0SURFcEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOMGNpQTlJREE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwWHlBOUlHNGdMU0F4T3lCcElEd2dhVjg3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJR2tnS3lBeE95QnFJRHdnYmpzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRWdQU0J5YzF0cFhTd2dZaUE5SUhKelcycGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsY21kbGMxdGpkSEpkSUQwZ2V5QnBaRG9nWTNSeUxDQnVSV1JuWlhNNklIUm9hWE11YmtWa1oyVnpLR0VzSUdJcExDQmhPaUJoTENCaU9pQmlJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNSeUt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWxjbWRsY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRU52Ym1acFozVnlZWFJwYjI0dWNISnZkRzkwZVhCbExtZHlaV1ZrZVUxbGNtZGxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFJvYVhNdWNtOXZkSE11YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KdmIzUnpXMmxkTG0xdlpIVnNaWE1vS1M1c1pXNW5kR2dnUENBeUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMXpJRDBnZEdocGN5NXliMjkwVFdWeVoyVnpLR2twTG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRXVia1ZrWjJWeklEMDlJR0l1YmtWa1oyVnpJRDhnWVM1cFpDQXRJR0l1YVdRZ09pQmhMbTVGWkdkbGN5QXRJR0l1YmtWa1oyVnpPeUI5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdElEMGdiWE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JTNXVSV1JuWlhNZ1BqMGdkR2hwY3k1U0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRaWEpuWlNodExtRXNJRzB1WWl3Z2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ1EyOXVabWxuZFhKaGRHbHZiaTV3Y205MGIzUjVjR1V1YmtWa1oyVnpJRDBnWm5WdVkzUnBiMjRnS0dFc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVTVzUwSUQwZ1lTNXBibU52YldsdVp5NXBiblJsY25ObFkzUnBiMjRvWWk1cGJtTnZiV2x1Wnlrc0lHOTFkRWx1ZENBOUlHRXViM1YwWjI5cGJtY3VhVzUwWlhKelpXTjBhVzl1S0dJdWIzVjBaMjlwYm1jcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVTSUMwZ2FXNUpiblF1WTI5MWJuUW9LU0F0SUc5MWRFbHVkQzVqYjNWdWRDZ3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1EyOXVabWxuZFhKaGRHbHZiaTV3Y205MGIzUjVjR1V1WjJWMFIzSnZkWEJJYVdWeVlYSmphSGtnUFNCbWRXNWpkR2x2YmlBb2NtVjBZWEpuWlhSbFpFVmtaMlZ6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJuY205MWNITWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2YjNRZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnZEc5SGNtOTFjSE1vZEdocGN5NXliMjkwYzFzd1hTd2djbTl2ZEN3Z1ozSnZkWEJ6S1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z6SUQwZ2RHaHBjeTVoYkd4RlpHZGxjeWdwTzF4dUlDQWdJQ0FnSUNCbGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVNBOUlGOTBhR2x6TG0xdlpIVnNaWE5iWlM1emIzVnlZMlZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdJZ1BTQmZkR2hwY3k1dGIyUjFiR1Z6VzJVdWRHRnlaMlYwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEdGeVoyVjBaV1JGWkdkbGN5NXdkWE5vS0c1bGR5QlFiM2RsY2tWa1oyVW9kSGx3Wlc5bUlHRXVaMmxrSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1pTNXpiM1Z5WTJVZ09pQm5jbTkxY0hOYllTNW5hV1JkTENCMGVYQmxiMllnWWk1bmFXUWdQVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJsTG5SaGNtZGxkQ0E2SUdkeWIzVndjMXRpTG1kcFpGMHNJR1V1ZEhsd1pTa3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkeWIzVndjenRjYmlBZ0lDQjlPMXh1SUNBZ0lFTnZibVpwWjNWeVlYUnBiMjR1Y0hKdmRHOTBlWEJsTG1Gc2JFVmtaMlZ6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1EyOXVabWxuZFhKaGRHbHZiaTVuWlhSRlpHZGxjeWgwYUdsekxuSnZiM1J6V3pCZExDQmxjeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsY3p0Y2JpQWdJQ0I5TzF4dUlDQWdJRU52Ym1acFozVnlZWFJwYjI0dVoyVjBSV1JuWlhNZ1BTQm1kVzVqZEdsdmJpQW9iVzlrZFd4bGN5d2daWE1wSUh0Y2JpQWdJQ0FnSUNBZ2JXOWtkV3hsY3k1bWIzSkJiR3dvWm5WdVkzUnBiMjRnS0cwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcwdVoyVjBSV1JuWlhNb1pYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXVabWxuZFhKaGRHbHZiaTVuWlhSRlpHZGxjeWh0TG1Ob2FXeGtjbVZ1TENCbGN5azdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFTnZibVpwWjNWeVlYUnBiMjQ3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVEYjI1bWFXZDFjbUYwYVc5dUlEMGdRMjl1Wm1sbmRYSmhkR2x2Ymp0Y2JtWjFibU4wYVc5dUlIUnZSM0p2ZFhCektHMXZaSFZzWlhNc0lHZHliM1Z3TENCbmNtOTFjSE1wSUh0Y2JpQWdJQ0J0YjJSMWJHVnpMbVp2Y2tGc2JDaG1kVzVqZEdsdmJpQW9iU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iUzVwYzB4bFlXWW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbmNtOTFjQzVzWldGMlpYTXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM0p2ZFhBdWJHVmhkbVZ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtOTFjQzVzWldGMlpYTXVjSFZ6YUNodExtbGtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJuSUQwZ1ozSnZkWEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRMbWRwWkNBOUlHZHliM1Z3Y3k1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVcwdWFYTkpjMnhoYm1Rb0tTQjhmQ0J0TG1selVISmxaR1ZtYVc1bFpDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWnlBOUlIc2dhV1E2SUcwdVoybGtJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMHVhWE5RY21Wa1pXWnBibVZrS0NrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNBZ2FXNGdiUzVrWldacGJtbDBhVzl1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjF0d2NtOXdYU0E5SUcwdVpHVm1hVzVwZEdsdmJsdHdjbTl3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV2R5YjNWd0xtZHliM1Z3Y3lsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM0p2ZFhBdVozSnZkWEJ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM0p2ZFhBdVozSnZkWEJ6TG5CMWMyZ29iUzVuYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3Y3k1d2RYTm9LR2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOUhjbTkxY0hNb2JTNWphR2xzWkhKbGJpd2daeXdnWjNKdmRYQnpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dWZWeHVkbUZ5SUUxdlpIVnNaU0E5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1RXOWtkV3hsS0dsa0xDQnZkWFJuYjJsdVp5d2dhVzVqYjIxcGJtY3NJR05vYVd4a2NtVnVMQ0JrWldacGJtbDBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2ZFhSbmIybHVaeUE5UFQwZ2RtOXBaQ0F3S1NCN0lHOTFkR2R2YVc1bklEMGdibVYzSUV4cGJtdFRaWFJ6S0NrN0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dsdVkyOXRhVzVuSUQwOVBTQjJiMmxrSURBcElIc2dhVzVqYjIxcGJtY2dQU0J1WlhjZ1RHbHVhMU5sZEhNb0tUc2dmVnh1SUNBZ0lDQWdJQ0JwWmlBb1kyaHBiR1J5Wlc0Z1BUMDlJSFp2YVdRZ01Da2dleUJqYUdsc1pISmxiaUE5SUc1bGR5Qk5iMlIxYkdWVFpYUW9LVHNnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbWxrSUQwZ2FXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzVjBaMjlwYm1jZ1BTQnZkWFJuYjJsdVp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJtTnZiV2x1WnlBOUlHbHVZMjl0YVc1bk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ob2FXeGtjbVZ1SUQwZ1kyaHBiR1J5Wlc0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWbWFXNXBkR2x2YmlBOUlHUmxabWx1YVhScGIyNDdYRzRnSUNBZ2ZWeHVJQ0FnSUUxdlpIVnNaUzV3Y205MGIzUjVjR1V1WjJWMFJXUm5aWE1nUFNCbWRXNWpkR2x2YmlBb1pYTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZkWFJuYjJsdVp5NW1iM0pCYkd3b1puVnVZM1JwYjI0Z0tHMXpMQ0JsWkdkbGRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiWE11Wm05eVFXeHNLR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY3k1d2RYTm9LRzVsZHlCUWIzZGxja1ZrWjJVb1gzUm9hWE11YVdRc0lIUmhjbWRsZEM1cFpDd2daV1JuWlhSNWNHVXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRTF2WkhWc1pTNXdjbTkwYjNSNWNHVXVhWE5NWldGbUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWphR2xzWkhKbGJpNWpiM1Z1ZENncElEMDlQU0F3TzF4dUlDQWdJSDA3WEc0Z0lDQWdUVzlrZFd4bExuQnliM1J2ZEhsd1pTNXBjMGx6YkdGdVpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM1YwWjI5cGJtY3VZMjkxYm5Rb0tTQTlQVDBnTUNBbUppQjBhR2x6TG1sdVkyOXRhVzVuTG1OdmRXNTBLQ2tnUFQwOUlEQTdYRzRnSUNBZ2ZUdGNiaUFnSUNCTmIyUjFiR1V1Y0hKdmRHOTBlWEJsTG1selVISmxaR1ZtYVc1bFpDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUIwYUdsekxtUmxabWx1YVhScGIyNGdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSTdYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnVFc5a2RXeGxPMXh1ZlNncEtUdGNibVY0Y0c5eWRITXVUVzlrZFd4bElEMGdUVzlrZFd4bE8xeHVablZ1WTNScGIyNGdhVzUwWlhKelpXTjBhVzl1S0cwc0lHNHBJSHRjYmlBZ0lDQjJZWElnYVNBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlIWWdhVzRnYlNsY2JpQWdJQ0FnSUNBZ2FXWWdLSFlnYVc0Z2JpbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsYmRsMGdQU0J0VzNaZE8xeHVJQ0FnSUhKbGRIVnliaUJwTzF4dWZWeHVkbUZ5SUUxdlpIVnNaVk5sZENBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdUVzlrZFd4bFUyVjBLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJoWW14bElEMGdlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lFMXZaSFZzWlZObGRDNXdjbTkwYjNSNWNHVXVZMjkxYm5RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVhMlY1Y3loMGFHbHpMblJoWW14bEtTNXNaVzVuZEdnN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JOYjJSMWJHVlRaWFF1Y0hKdmRHOTBlWEJsTG1sdWRHVnljMlZqZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2h2ZEdobGNpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2JtVjNJRTF2WkhWc1pWTmxkQ2dwTzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFF1ZEdGaWJHVWdQU0JwYm5SbGNuTmxZM1JwYjI0b2RHaHBjeTUwWVdKc1pTd2diM1JvWlhJdWRHRmliR1VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1RXOWtkV3hsVTJWMExuQnliM1J2ZEhsd1pTNXBiblJsY25ObFkzUnBiMjVEYjNWdWRDQTlJR1oxYm1OMGFXOXVJQ2h2ZEdobGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGJuUmxjbk5sWTNScGIyNG9iM1JvWlhJcExtTnZkVzUwS0NrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JOYjJSMWJHVlRaWFF1Y0hKdmRHOTBlWEJsTG1OdmJuUmhhVzV6SUQwZ1puVnVZM1JwYjI0Z0tHbGtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwWkNCcGJpQjBhR2x6TG5SaFlteGxPMXh1SUNBZ0lIMDdYRzRnSUNBZ1RXOWtkV3hsVTJWMExuQnliM1J2ZEhsd1pTNWhaR1FnUFNCbWRXNWpkR2x2YmlBb2JTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUmhZbXhsVzIwdWFXUmRJRDBnYlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRTF2WkhWc1pWTmxkQzV3Y205MGIzUjVjR1V1Y21WdGIzWmxJRDBnWm5WdVkzUnBiMjRnS0cwcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11ZEdGaWJHVmJiUzVwWkYwN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JOYjJSMWJHVlRaWFF1Y0hKdmRHOTBlWEJsTG1admNrRnNiQ0E5SUdaMWJtTjBhVzl1SUNobUtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJRzFwWkNCcGJpQjBhR2x6TG5SaFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1LSFJvYVhNdWRHRmliR1ZiYldsa1hTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lFMXZaSFZzWlZObGRDNXdjbTkwYjNSNWNHVXViVzlrZFd4bGN5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFp6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptOXlRV3hzS0daMWJtTjBhVzl1SUNodEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzB1YVhOUWNtVmtaV1pwYm1Wa0tDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbk11Y0hWemFDaHRLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMmN6dGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJOYjJSMWJHVlRaWFE3WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVOYjJSMWJHVlRaWFFnUFNCTmIyUjFiR1ZUWlhRN1hHNTJZWElnVEdsdWExTmxkSE1nUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFeHBibXRUWlhSektDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkSE1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dUlEMGdNRHRjYmlBZ0lDQjlYRzRnSUNBZ1RHbHVhMU5sZEhNdWNISnZkRzkwZVhCbExtTnZkVzUwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dU8xeHVJQ0FnSUgwN1hHNGdJQ0FnVEdsdWExTmxkSE11Y0hKdmRHOTBlWEJsTG1OdmJuUmhhVzV6SUQwZ1puVnVZM1JwYjI0Z0tHbGtLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYjNKQmJHeE5iMlIxYkdWektHWjFibU4wYVc5dUlDaHRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMzVnNkQ0FtSmlCdExtbGtJRDA5SUdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVHRjYmlBZ0lDQk1hVzVyVTJWMGN5NXdjbTkwYjNSNWNHVXVZV1JrSUQwZ1puVnVZM1JwYjI0Z0tHeHBibXQwZVhCbExDQnRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpJRDBnYkdsdWEzUjVjR1VnYVc0Z2RHaHBjeTV6WlhSeklEOGdkR2hwY3k1elpYUnpXMnhwYm10MGVYQmxYU0E2SUhSb2FYTXVjMlYwYzF0c2FXNXJkSGx3WlYwZ1BTQnVaWGNnVFc5a2RXeGxVMlYwS0NrN1hHNGdJQ0FnSUNBZ0lITXVZV1JrS0cwcE8xeHVJQ0FnSUNBZ0lDQXJLM1JvYVhNdWJqdGNiaUFnSUNCOU8xeHVJQ0FnSUV4cGJtdFRaWFJ6TG5CeWIzUnZkSGx3WlM1eVpXMXZkbVVnUFNCbWRXNWpkR2x2YmlBb2JHbHVhM1I1Y0dVc0lHMHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXpJRDBnZEdocGN5NXpaWFJ6VzJ4cGJtdDBlWEJsWFR0Y2JpQWdJQ0FnSUNBZ2JYTXVjbVZ0YjNabEtHMHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JYTXVZMjkxYm5Rb0tTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdWMyVjBjMXRzYVc1cmRIbHdaVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0xTMTBhR2x6TG00N1hHNGdJQ0FnZlR0Y2JpQWdJQ0JNYVc1clUyVjBjeTV3Y205MGIzUjVjR1V1Wm05eVFXeHNJRDBnWm5WdVkzUnBiMjRnS0dZcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdiR2x1YTNSNWNHVWdhVzRnZEdocGN5NXpaWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtS0hSb2FYTXVjMlYwYzF0c2FXNXJkSGx3WlYwc0lFNTFiV0psY2loc2FXNXJkSGx3WlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCTWFXNXJVMlYwY3k1d2NtOTBiM1I1Y0dVdVptOXlRV3hzVFc5a2RXeGxjeUE5SUdaMWJtTjBhVzl1SUNobUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptOXlRV3hzS0daMWJtTjBhVzl1SUNodGN5d2diSFFwSUhzZ2NtVjBkWEp1SUcxekxtWnZja0ZzYkNobUtUc2dmU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQk1hVzVyVTJWMGN5NXdjbTkwYjNSNWNHVXVhVzUwWlhKelpXTjBhVzl1SUQwZ1puVnVZM1JwYjI0Z0tHOTBhR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0J1WlhjZ1RHbHVhMU5sZEhNb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWIzSkJiR3dvWm5WdVkzUnBiMjRnS0cxekxDQnNkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4MElHbHVJRzkwYUdWeUxuTmxkSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhU0E5SUcxekxtbHVkR1Z5YzJWamRHbHZiaWh2ZEdobGNpNXpaWFJ6VzJ4MFhTa3NJRzRnUFNCcExtTnZkVzUwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzRnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV6WlhSelcyeDBYU0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXVJQ3M5SUc0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQk1hVzVyVTJWMGN6dGNibjBvS1NrN1hHNWxlSEJ2Y25SekxreHBibXRUWlhSeklEMGdUR2x1YTFObGRITTdYRzVtZFc1amRHbHZiaUJwYm5SbGNuTmxZM1JwYjI1RGIzVnVkQ2h0TENCdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektHbHVkR1Z5YzJWamRHbHZiaWh0TENCdUtTa3ViR1Z1WjNSb08xeHVmVnh1Wm5WdVkzUnBiMjRnWjJWMFIzSnZkWEJ6S0c1dlpHVnpMQ0JzYVc1cmN5d2diR0VzSUhKdmIzUkhjbTkxY0NrZ2UxeHVJQ0FnSUhaaGNpQnVJRDBnYm05a1pYTXViR1Z1WjNSb0xDQmpJRDBnYm1WM0lFTnZibVpwWjNWeVlYUnBiMjRvYml3Z2JHbHVhM01zSUd4aExDQnliMjkwUjNKdmRYQXBPMXh1SUNBZ0lIZG9hV3hsSUNoakxtZHlaV1ZrZVUxbGNtZGxLQ2twWEc0Z0lDQWdJQ0FnSUR0Y2JpQWdJQ0IyWVhJZ2NHOTNaWEpGWkdkbGN5QTlJRnRkTzF4dUlDQWdJSFpoY2lCbklEMGdZeTVuWlhSSGNtOTFjRWhwWlhKaGNtTm9lU2h3YjNkbGNrVmtaMlZ6S1R0Y2JpQWdJQ0J3YjNkbGNrVmtaMlZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdZZ1BTQm1kVzVqZEdsdmJpQW9aVzVrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1p5QTlJR1ZiWlc1a1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1p5QTlQU0JjSW01MWJXSmxjbHdpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWYlpXNWtYU0E5SUc1dlpHVnpXMmRkTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQm1LRndpYzI5MWNtTmxYQ0lwTzF4dUlDQWdJQ0FnSUNCbUtGd2lkR0Z5WjJWMFhDSXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCN0lHZHliM1Z3Y3pvZ1p5d2djRzkzWlhKRlpHZGxjem9nY0c5M1pYSkZaR2RsY3lCOU8xeHVmVnh1Wlhod2IzSjBjeTVuWlhSSGNtOTFjSE1nUFNCblpYUkhjbTkxY0hNN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0N1ltRnpaVFkwTEdWNVNqSmFXRXA2WVZjNWRVbHFiM3BNUTBwdFlWZDRiRWxxYjJsalJ6a3pXbGhLYm1OdFJuZGhRelZ4WTNsSmMwbHVUblprV0VwcVdsWktkbUl6VVdsUGFVbHBURU5LZW1JelZubFpNbFo2U1dwd1lrbHBOSFZNZVRSMVRERmtiRmxyVG5aaVIwVjJZek5LYWt3elFuWmtNbFo1V2pOS2FHTkhaM1ZrU0UxcFdGTjNhV0p0Um5SYVdFMXBUMngwWkV4RFNuUlpXRUozWVZjMWJtTjVTVFpKYW5NM1VWVkdVRk5VZEVwUlZVNUtURWN4UTFGVlRsaE1SVEZDVVZaamMxSlZSa1JYUTNoT1VWVkdXRXhGVmtKUk1XZHpVMVZHUWxkVWRGSlJWVnBoVEVaa1FsRlZNSE5TTUVaQ1ZHbDRUbEZWUms1TVJVNUNVVlZ6TjFWVlJrUlhRM2hZVVZWR1RreEZaRUpSVlRSelZGVkdRbFJUZUVSUlZVWk1UekZHUWxFeFozTlZNRVpDVTFONFNGRlZSa3RNUld4Q1VWVnJjMUV3UmtKVlZIUktVVlZHU2t4RlRrSlJWVTAzVTFWR1JHRkZUWE5hTUVwQ1VWVk5OMUZWUmtKU1EzaEVVVlZHUkV4RlJrSlVSVkZ6VTFWR1RGRjZkRUpSVlhoYVRFUm9RMUZWUmxSUE1FWkNWRE5TUTA4d2JFSlZNR3R6WkZWS1FsRldhM05STUVaQ1ZYbDRSbEZWUmtaTVJYUkNVVmRGYzFKVlJrSldVM2hhVVZWR2RsRjVlRVpSVlVaR1RFWk9RbEZYYkVOUE1VWkNVVmhLU0V4SGJFTlJWM1JEVVhwMFVsRlhlRU5PYTAxellWVktRbEZXYTNOU01FWkNWMmw0V2xGVlJscE1SVTVDVVZoa1EwOHhSa0pSZW14R1RFVnNRbEZWYTNOUk1FWkNVWGw0VUZGVlJsQk1SV1JDVVZWamMxTlZSa0pUVTNoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVRsVkpjMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVZVVZKYzFOVlJrSlRVM2hVVVZWR1ZFeEZWa0pSVlZVM1YxVkdSRmREZUVwUlZVWktURVZPUWxGVlRYTmlNRXBDVVZjNVEweEZUa0pSVlUxelZUQkdRbFY1ZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFWlVWTk4xbFZSa0pVVkhSYVVWVk9TVXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFVd1JrSlZlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNXhVWGw0VEZGVlJreE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlblJ1VVd0R1JHUkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRXBSVlVaS1RFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4VGtKUmVrWkZUekZHUWxFd1VYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaE1VVlZHVEV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVR6RkdRbEV6VWtOTVJYUkNVVlZ6YzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbEZUZUVSUlZVWkVUekZzUWxFeFozTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMU13UmtKVFUzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRnBSVlVaYVRFVk9RbEZWVFhOWk1FWkNXWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUk1taEZURVZPUWxGVlRYTlNNRVpDVW5sNFRGRlZSa3BNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4R2JFSlJWbXR6VVRCR1FsRjVlR3BSVlVacVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa1JoUlZGelUxVkdRbE5UZUVoUlZVWklURVpzUWxGV2EzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHSnJUWE5STUVaQ1VYbDRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUTm9RMHhGVGtKUlZVMXpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMHhVV2w0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9VVXhGVGtKUlZVMDNVMVZHUmxSNWR6QlJNRVpDWWpCSmMxSXdSa0pPVlVselZsVkdRazVyU1hOVE1FWkNVM3AwVWxGVlRUVlJhWGhLVVZWR1NreEdUa0pSVmsxelVqQkdRbEo1ZUVwUlZVWktURVpPUWxGV1RYTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VUSm9SRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSZWs1RFRFVjBRbEZWYzNOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVakJHUWxKNWVFeFJWVVpNVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpVZEZwUlZVMTRVWGw0U2xGVlJrcE1SV3hDVVZWcmMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVWHBPUTB4RmJFSlJWV3R6VkZWR1FsUlRlRWhSVlVaSVRFVnNRbEZWYTNOVVZVWkNWRk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTV4VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU01FWkNVbmw0VGxGVlJrNU1SVTVDVVZWTk4xZFZSa1JNTUVselZUQkdRbFY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZPTmxGcWRGSlJWVTVGVEVWc1FsRlZhM05UTUVaQ1UzbDRSRkZWUmtSTVJURkNVVlV3YzFKVlJrSlNWSFJhVVZWT2EweEZkRUpSVlhOelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKU2VYaE1VVlZHVEV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOU1ZVWkNVbE40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVkhSdVVXdEdSRTFWVFhOVFZVWkNVMU40VEZGVlJreE1SV1JDVVZWamMxTXdSa0pUZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtaT1ZVbHpVMVZHUWxOVGVGWlJWVVpXVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSUE1tUkRVVlZPZDFGcGVFeFJWVVpNVEVWc1FsRlZhM05UVlVaQ1UxTjRTbEZWUmtwTVJYUkNVVlZ6TjJJd1NrSlJNbmhEVEVWc1FsRlZhM05UVlVaQ1UxTjRURkZWUmt4TVJrWkNVVlpGYzFOVlJrSlRVM2hLVVZWR1NreEZkRUpSVlhOelZWVkdRbFZUZUVwUlZVWktURVYwUWxGVmMzTlJNRVpDVVhsNGFsRlZSbXBNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkU4elpFTlJWVTUzVWxONFZsRlZSbFpNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VXpCR1FsTjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWV01sRjVlRlJSVlVaVVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRTbEZWUmtwTVJrWkNVVlpGYzFKVlJrSlNVM2hHVVZWR1JreEZiRUpSVld0elZWVkdRbFZUZUVaUlZVWkdURVZXUWxGVlZYTlRWVVpDVTFONFJGRlZSa1JNUnpsRFVWVkdkbEZwZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pNUmxaQ1VWWlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzV1ZWR1JHRnJaemRWTUVaRVUycDBVbEZWVGtWTVJUbENVVlU0YzFVd1JrSlZlWGhFVVZWR1JFOHdiRUpSTTBKRFRFVk9RbEZWVFRkVFZVWklVbWwzTWxGclJrSlRlWGhJVVZWR1RVeEdWa0pSVlRCelVUQkdRbFY1ZUVaUlZVWkdURVZPUWxGV1RYTlNWVVpDVWxONFJGRlZSbWhQTVVaQ1VWZEpjMkV3U2tKUlZVVnpVbFZHUWxGVGVFeFJWVVpvVHpGR1FsRXpTa1JNUld4Q1VWVnJjMU13UmtKVGVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOWFZVWkNWMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVbFZHUkUwd1RYTlVWVVpDVkZONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VjFWR1FsZFRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9jVkpEZUVwUlZVWktURVpHUWxGV1JYTlNNRVpDVW5sNFNsRlZSa3BNUms1Q1VWWk5jMUpWUmtKU1UzaEVVVlZHUkU4eFJrSlJlVGxEVEVaR1FsRldSWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSR0ZGU1hOVlZVWkNWVk40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTV2VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4Rk1VSlJWVEJ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoT1VWVkdUa3hGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVaR1FsRldSWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVVEp3Umt4RmJFSlJWV3R6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk0wcERURVZzUWxGVmEzTlVWVVpDVkZONFNGRlZSa2hNUmxaQ1VWVk5jMUV3UmtKV2VYaEdVVlZHUmt4RlRrSlJWazF6VWxWR1FsSlRlRVJSVlVaVVR6RnNRbEY2VGtSTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelZsVkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlZWVVpDVlZSMGJsRnJSa1JpUlVselVsVkdRbEpUZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFZsRlZSa0pNUlU1Q1VWVk5OMkl3U2tKUk1VRnpVMVZHUWxOVGVFaFJWVVpJVEVWa1FsRlhSWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlPVU5SVlU0MlVXbDRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEdSa0pSVmtWelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGRsRnJSa1JqYTBselVqQkdRbEo1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWWpCS1FsRXphRU5NUldSQ1VWVmpjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNamxEVVZWT2FVeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlZYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMVZWUmtKVlUzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6STVRMUZWVFhoUmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaR1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFWld0TmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkZWRGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGxGTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT1IweEZNVUpSVlRCelVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGVlZYTldWVVpDVmxONFJsRlZSa1pNUmxaQ1VWWlZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMXBFVEVVeFFsRlZNSE5STUVaQ1VYbDRURkZWUmt4TVJWWkNVVlZWYzFaVlJrSldVM2hHVVZWR1JreEdWa0pSVmxWelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFelVrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVekJHUWxONWVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRTRkZWUmtoTVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelVUQkdRbEY2ZEZKUlZVNDJVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT05GRnBlRXBSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGpSUmFYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTU1VVdsNFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZPYVV4RlRrSlJWVTAzVTFWR1JsUjVlSEpSTUVaQ1ZsTjRTRkZWUm5OUmFYaFdVVlZHZEZGcGVFUlJWVVpvVHpGR1FsRlhTWE5oTUVwQ1VWVkZjMUpWUmtKUlUzaE1VVlZHYUU4eFJrSlVWRlpEVEVWc1FsRlZhM05TVlVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlVNRVpDVkhsNFJsRlZSa1pNUlU1Q1VWVk5OMVZWUmtSaGEwMXpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlblJTVVZWT2MxRnBlRXBSVlVaS1RFVXhRbEZWTUhOU01FWkNVbmw0U2xGVlJrcE1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT2QxRjVlRXBSVlVaS1RFVmtRbEZWWTNOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JYYVhoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUms4eGJFSlJNMHBFVEVWMFFsRlZjM05UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUms4eVpFTlJWVTE0VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFWld0SmMxUlZSa0pVVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJXUkNVVlZqYzFKVlJrSlNVM2hPVVZWR1RreEZWa0pSVlZWelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMDNXakJLUWxFeWNFWk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh5UmtKUk1WRTNWVEJHUkZOcWRGSlJWVTVGVEVVNVFsRlZPSE5VVlVaQ1ZGTjRSRkZWUmtSUE1HeENVVEo0UTB4RlRrSlJWVTAzVTFWR1JsSkRlSFJSTUVaQ1ZubDRTRkZWUmxsUE1VWkNVVEJyYzFNd1JrSlRlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VkZWR1FsUlRlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWlBNV3hDVWxob1JFeEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaFFVVlZHVUV4RlZrSlJWVlZ6VVRCR1FsRjVlRTVSVlVaT1RFVmtRbEZWWTNOUk1FWkNVWHAwYmxGclJrSlNVM2hVVVZWR1ZFOHhiRUpTTW5CRlRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoV1VWVkdWa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJsWkNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelUxVkdRbE41ZUZCUlZVWkNURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGWWFFVk1SVTVDVVZoa1JVeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNTVVbmw0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVdrTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVZWVmMxVXdSa0pWZW5SYVVWVk9jVkY1ZUVwUlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9ORkZwZUZCUlZVWlFURVZzUWxGVmEzTlJNRVpDVVhwMFZGRlZUbTFQTUd4Q1VUQjNjMUV3UmtKUmVuUktVVlZXVUV4RWFFTlJWVVpPVEVWa1FsRlhVWE5XVlVaQ1dsTjRSRkZWUmxSTVJWWkNVVlZWYzFFd1JrSlZlblJTVVZWTmRsRnBlRXBSVlVaS1RFVjBRbEZWYzNOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhHYkVKUlZtdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJWWkNVWHBPUkV4Rk1VSlJWVEJ6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SbXhDVVZacmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVlXdFJjMVF3UmtKVWVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVjBRbEZWYzNOUk1FWkNVWGw0VEZGVlJreE1SVlpDVVZWVmMxSXdSa0pTZVhoT1VWVkdUa3hGVGtKUlZVMXpVekJHUWxONWVFWlJWVVpHVEVWT1FsRlZUVGRUVlVaRVltdFJjMUV3UmtKUmVuUktVVlZXUlV4SWJFUlJWVVp3VVdsNFNGRlZSbkZSYVhoV1VWVkdjbEZwZUd4UlZVVXdVV3AwVWxGVlJUVlJlWGh3VVd0R2JGRjZkRkpSVjFKSVRFVnNRbEZWYTNOVVZVWkNWRk40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SU1VWVk9iMUZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMVZWUmtSYVEzaFNVVlZHVWt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoS1VWVkdTa3hGVmtKUlZWVnpWRlZHUWxSVGVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVpFVk5jMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOU1ZVWkNVbE40UkZGVlJrUlBNVVpDVVROd1EweEZWa0pSVlZWelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JQTVd4Q1VURkpjMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VXpCR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkV3d1NYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMU13UmtKVFUzaEVVVlZHUkV4Rk9VSlJWVGh6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTk4xZFZSa1JNTUVseldsVkdRbHBUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUms1Q1VWWk5jMUV3UmtSUFZVbHpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRURkZWUmt4TVJtUkNVVlpqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkVaR3RSYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUV4UlZVWk1URVprUWxGV1kzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUkdSclVYTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtSV1EzaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JGVkRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRrbE1SVGxDVVZVNGMxUlZSa0pVVTNoRVVWVkdSRTh3YkVKUk1uaERURVZPUWxGVlRUZFRWVVpHVWtONGJsRXdSa0pWVTNoSVVWVkdVMDh4UmtKUk1HdHpVMVZHUWxOVGVFWlJWVVpHVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSUE1VWkNVVEZ2YzFsVlJrSlpVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEY2UmtSTVJUbENVVlU0YzFKVlJrSlNVM2hFVVZWR1JFOHdiRUpSTWxGelVUQkdRbEY2ZEVwUlZWWk9URWhPUTFGVlJsSk1SV1JDVVZkWmMxWlZSa0phTUVselZEQkdRbUV3U1hOU1ZVWkNVbE40UmxGVlJteFBNVVpDVVhrNVJFeEZPVUpSVlRoelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JQTVd4Q1VURnZjMUV3UmtKUmVYaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRtMU1SMFpDVVZkRmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVaR1FsRldSWE5TVlVaQ1VsTjRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWTmVsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVlRsRk1SVTVDVVZWTk4xTlZSa1JVUTNoMlVXdEdRbEY2ZEVKUlZVWkZURVZPUWxGVlRYTlJWVVkwVTJ0UmMxTlZSak5UYTAwM1VWVkdORk5zYTNOak1FNUNVVmRGTjFGVlJYZFRha1pEVEVaT1FsRldUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJUbENVVmQwUTB4RlZrSlJWVlZ6VXpCR1FsTjVlRVpSVlVaR1RFVXhRbEZWTURkVFZVWkVUREJOYzFRd1JrSlVlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUZaUlZVWkNURVZPUWxGVlRUZFZWVVpFVjJsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlZrSlJWVlZ6VWxWR1FsSlVkRnBSVlU1aFRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxUlZSa0pVVkhSdVVXdEdRbEpUZUV4UlZVWk1URVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuUmFVVlZPZVZGNWVFeFJWVVpNVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFVFRCSk4xbFZSa0pVVkhSYVVWVk9TVXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYcDBXbEZWVG10TVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelZGVkdRbFJUZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhwMFdsRlZUakJSYVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVaR1FsRldSWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhhVVZWR1dreEZWa0pSVlZWelVsVkdRbEpVZEc1UmEwWkVZbXROYzFFd1JrSlJlWGhJVVZWR1NFeEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuUnVVV3RHUkdKRlNYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMWRWUmtKWFUzaEdVVlZHUms4eU9VTlJWVlp2VVdsNFRGRlZSa3hNUld4Q1VWVnJjMU5WUmtKVFUzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRlpSVlVaV1R6TmtRMUZWVGpaUmFYaEVVVlZHUkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SbFpDVVZaVmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNmRHNVJhMFpFWTJ0TmMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFNVJWVVpPVHpJNVExRlZSa1pNUlhSQ1VWVnpjMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVR6SmtRMUZWVG5sUmVYaE1VVlZHVEV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFemNFTk1SVEZDVVZVd2MxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRaVlVaRVlrVkpOMWRWUmtSU1EzaFNVVlZHVWt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFWkdRbEZXUlhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMDNWVEJHUkdKclRUZFRWVVpFVkVONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZPVVV4RlRrSlJWVTAzVVZWR1JsSkVkRXBSVldSS1RFZGtRMUZWVGxoTVJWWkNVVlpWYzFKVlJrUldhWGhTVVZWR2RGRjVlRVpSVlU1MVVYbDRVbEZWUm5SUmVYaEdVVlZPZFZGNWVGSlJWVVo0VVhsNFJsRlZUbmxSZVhoV1VWVkdibEZxZEZKUlZXaHZVV2w0TlZGclJrSlJVM2hHVVZWR1FreEhWa0pSV0d4RFRFWkdRbEZXUlhOU1ZVWkNVbFIwVWxGVlRuVlJlWGcxVVd0R1FsRlRlRVpSVlVaQ1RFZFdRbEZZYkVOTVJrWkNVVlpGYzFKVlJrSlNWSFJTVVZWT2RWRjVlRFZSYTBaQ1VWTjRSbEZWUmtKTVIxWkNVVlJDUTB4R1RrSlJWazF6VWxWR1FsSlVkRkpSVldoNVVYbDRVRkZWUmtaTVJXUkNVVlZaYzFKVlJrSlNVM2hFVVZWR1VrOHhSa0pSTVZseldWVkdRbFZUZUVoUlZVWlRURVpHUWxGV1JYTlJNRVpDVFd0Sk4xVlZSa1JpYTAxeldWVkdRbFZUZUVoUlZVWlRURVpHUWxGV1JYTlJNRVpDVFd0Sk4xVlZSa1JpYTAxeldWVkdRbFZUZUVoUlZVWlRURVpHUWxGV1JYTlJNRVpDVG10Sk4xVlZSa1JqYTAxeldsVkdRbFpUZUVoUlZVWlhURVpXUWxGV1ZYTlJNRVpDVkZSMFNsRlZSa3BNUlU1Q1VWVk5OMU5WUmtaaFJVMXpaVlZLUWxGV1JYTlNNRVpDVldsNFZsRlZSbFJNUlZaQ1VWZFZOMVZWUmtKbFJVbHpZVlZLUWxSVlRUZFZWVVpOVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRlpSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40VWxGVlJsSlBNV3hDVVhwc1EweEZWa0pSVlZWelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVVZONFRsRlZSazVQTW1SRFVWVk9ZVXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRWRkZWUmxSTVJVNUNVVlZOYzFNd1JrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUU1UlZVWk9URVZPUWxGVlRYTlNWVVpDVWxONFJsRlZSa1pNUmtaQ1VWWkZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHVnJVWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUlZRM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNVJURVZPUWxGVlRUZFRWVVpHVWtONE1WRnJSa0pVVTNoSVVWVkdUMDh4UmtKUk1HdHpWREJHUWxSNWVFcFJWVVpLVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNHlVWGw0UkZGVlJrUlBNR3hDVWxWUmMyVlZTa0pSVmtWelVqQkdRbFZxZEZKUlZVNUtURVU1UWxGVk9ITlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaE1VVlZHVEV4RlZrSlJWVlZ6VXpCR1FsTjVlRVJSVlVaRVRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoTVVWVkdURXhGVmtKUlZWVnpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVpFVlZjMUV3UmtKUmVuUktVVlZXUlV4RVdrTlJWVVphVEVWa1FsRldiemRWVlVaRVUxTjRVRkZWUmxCTVJUbENVVlU0YzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelV6QkdRbE41ZUZoUlZVWllURVZPUWxGVlRUZFRWVVpFWWtWUmMxRXdSa0pSZW5SS1VWVk9UVXhIUmtKUlZVMDNVVlZHUWxKRGVFUlJWVVpFVEVWR1FrNHdTa1ZNUld4Q1RtdEtSRTh3UmtKT01FcGFURWhrUTFGVlJrNVBNRVpDU3pCS2RWRnBlRlJSVlVaVVRFWnNRbEZXYTNOUk1FWkNVWGw0UkZGVlJrNU1SVlpDVVZWVmMxRXdSa0pVVkhSS1VWVk9iMUY1ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMU5WUmtSWFEzaE1VVlZHVEV4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFRkVlZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRTh4YkVKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVNDJVWGw0VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZW5SQ1VWVk9hVXhGVGtKUlZVMDNVVlZHUmxKRWRFcFJWVVpDVHpGR1FsRXdhM05XVlVaQ1UzbDRTRkZWUmxKTVJWWkNVVlZWYzFFd1JrSlJlblJLVVZkMFJHTkZTWE5STUVaQ1VYcDBTbEZYY0VSU2VYZzFVV3RHUWxONWVFaFJWVVpOVHpGR1FsRXdhM05VTUVaQ1ZIbDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMU5WUmtSTlZVMXpVVEJHUWxGNmRFcFJWVTVGVEVka1JGRlZSbHBNUldSQ1VWWnZjMVpWUmtKWlUzaE1VVlZHYmxGcWRGSlJWVTQyVVdsNFNsRlZSa3BNUlRGQ1VWVXdjMUl3UmtKU2VYaEtVVlZHU2t4R1RrSlJWazF6VWxWR1FsSlRlRVJSVlVaRVR6RkdRbEY2WkVOTVJURkNVVlV3YzFFd1JrSlJlWGhNVVZWR1RFeEZaRUpSVldOelYxVkdRbGRUZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMU13UmtKVGVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEV6U2tWTVJUbENVVlU0YzFSVlJrSlVVM2hFVVZWR1JFOHdiRUpSTW5oRFRFVk9RbEZWVFRkVFZVWkVVa040ZUZFd1JrSmhWVWx6VWpCR1FtRnJTWE5XVlVaQ1lUQkpjMU13UmtKYU1FazNWVlZHUkU5VlNYTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5jMWRWUmtKWFUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOU1ZVWkNVbE40UkZGVlJrUlBNR3hDVVhwV1JFeEZUa0pSVlUwM1UxVkdSRkpEZHpCUmEwWkNWVk40U0ZGVlJsTk1SbFpDVVZaTmMxSlZSa0pXVkhSU1VWVk9iVXhGT1VKUlZUaHpVbFZHUWxKVGVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOTjFOVlJrUk9WVWx6VVRCR1FsRjZkRXBSVlU1RlRFaFdRMUZWUmtoTVJXUkNVVlZuYzFaVlJrSlRVM2hFVVZWR1ZFOHhSa0pSTVZGelUxVkdRbE5UZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEV6Y0VOTVJVNUNVVlZOTjFOVlJrUlNRM2QzVVd0R1FsUlRlRWhSVlVaUFRFWldRbEZWT0hOUk1FWkNWWHAwVWxGVlRtRk1SVGxDVVZVNGMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrUk9WVWx6VVRCR1FsRjZkRXBSVlU1RlRFUkNRMUZWUms1TVJXUkNVVlUwYzFaVlJrSlVlWGhFVVZWR2VsRnFkRkpSVlU0MlVXbDRURkZWUmt4TVJXeENVVlZyYzFJd1JrSlNlWGhLVVZWR1NreEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZXUWxGVlZUZFhWVVpFWlVWSmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJVVVZWT01GRnFkRXBSVlU1TlRFVk9RbEZWVFRkVFZVWkVVa04zZVZGclJrSlVlWGhJVVZWR1VVOHhSa0pSTUd0elUxVkdRbE5UZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VURnZjMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRlpSVlVaQ1RFVk9RbEZWVFRkWFZVWkVWa040U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhHYkVKUlZtdHpVbFZHUWxKVWRHNVJhMFpFWVd0SmMxSlZSa0pTVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG5WUmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1SlRFVTVRbEZWT0hOU1ZVWkNVbE40UkZGVlJrUlBNR3hDVVRKUmMxRXdSa0pSZW5SS1VWVk9UVXhIWkVOUlZVWkVUekJHUWxGVlVYTlJNRVpDVVhsNFFsRlhOVVJTUTNoS1VWY3hSRkY2ZEVKUlZ6VkVWMU4zTkZGclJrSlZlblJDVVZoR1JHUkZTVGRUVlVaQ1VWUjBVbEZWVGtwTVJrNUNVVlZyYzFJd1JrSlZVM2hHVVZWR1JreEZUa0pSVlUwM1ZWVkdSRnBwZUU1UlZVWkVURVZrUWxGV1kzTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1dqQlNjMUZwZUVSUlZVWkVUekJzUWt3d1RraE1TR1JEVVZWR1RFeEZaRUpSVlhjM1ZWVkdSRk5UZUZCUlZVWlFURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSaVJVbHpVVEJHUWxGNmRFcFJWVTVGVEVSS1ExRlZSbEpNUldSQ1VWWkpjMVpWUmtKVmVYaEdVVlZHVms4eFJrSlJNbGx6VTFWR1FsTlRlRTVSVlVaT1RFVmtRbEZWWTNOVE1FWkNVM2w0UkZGVlJrUlBNVVpDVVRJMVEweEZiRUpSVld0elVUQkdRbEY1ZUdoUlZVWm9URVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JQTVd4Q1VUSm9RMHhGYkVKUlZXdHpVVEJHUWxGNWVFNVJWVVpPVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEZWa0pSVlZVM1dqQktRbEV6V2tOTVJURkNVVlV3YzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUwM1dWVkdSR0ZyU1RkVlZVWkVWRU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9TVXhGT1VKUlZUaHpWRlZHUWxSVGVFUlJWVVpFVHpCc1FsRXllRU5NUlU1Q1VWVk5OMU5WUmtSU1EzaDZVV3RHUWxKNWVFaFJWVVpKVEVaV1FsRlZhM05WVlVaQ1dqQkpjMUpWUmtKU1UzaEVVVlZHVkU4eFJrSlJlazVEVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUm1wTVJrWkNVVlpGYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05WTUVaQ1ZYbDRSbEZWUmtaTVJVNUNVVlZOTjFWVlJrUmthMk56VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9WVXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVG1sTVJVNUNVVlZOTjFOVlJrUlNRM2cxVVd0R1FsUlRlRWhSVlVaUFRFWldRbEZWT0hOVlZVWkNXakJKYzFKVlJrSlNVM2hFVVZWR1ZFOHhSa0pSZW14RFRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJtcE1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVpVVk5jMUpWUmtKU1UzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRtbE1SV3hDVVZWcmMxSlZSa0pTVTNoRVVWVkdSRXhGZEVKUlZYTnpVbFZHUWxKVGVFeFJWVVpNVEVWT1FsRlZUWE5TVlVaQ1VsUjBXbEZWVG5OUmFYaFFVVlZHVUV4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTk4xVXdSa1JQVlVrM1ZWVkdSRkpEZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSWmFYaEVVVlZHUkU4d2JFSlJNRkZ6WlZWS1FsRlZNSE5TTUVaQ1ZHbDRWbEZWUmxCTVJVNUNVVlJTUkU4eFJrSlJlVGxFVEVWMFFsRlZjM05UVlVaQ1UxTjRVbEZWUmxKTVJXeENVVlZyYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVsVkdRbEpVZEZwUlZVMHhVV2w0UkZGVlJrUk1SVTVDVVZacmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVNHlVa1IwU2xGVlRrMU1SVTVDVVZWTk4xTlZSa1JTUTNodVVUQkdRbGxUZUVoUlZVWnBURVpXUWxGWFRYTlJNRVpDWXpCSk4xVlZSa1JoUlUxelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFZsRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZHUmt4RmJFSlJWWE56VkRCR1FsRlRlRVpSVlVaR1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdZVXhGVGtKUlZtdHpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRjZSa1JNUlU1Q1VWVk5OMU5WUmtSU1EzZHlVV3RHUWxkVGVFaFJWVVpoVEVaV1FsRlhSWE5UTUVaQ1dsUjBVbEZWVGpSUmFYaEtVVlZHU2t4Rk1VSlJWVEJ6VWpCR1FsbFRlRXBSVlVaS1RFWkdRbEZXUlhOU1ZVWkNVbE40UkZGVlJrUlBNVVpDVVROU1JFeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTldWVVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1ZIUmFVVlZPYlV4RmJFSlJWV3R6VWxWR1FsSlRlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZWVk4xb3dTa0pSTW5oRFRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZVhoYVVWVkdXa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWT2RWRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxSlZSa0pTVTNoRVVWVkdSRTh5WkVOUlZVNXpVV2w0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVmtKUlZWVTNZakJLUWxFeFFYTlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkaU1FcENVVE5DUTB4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUlBNbXhEVVZWT2NWRnFkR2hSVlU1TFR6RkdRbEV3ZDNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xVlZSa1JUUTNoUVVWVkdVRXhGTVVKUlZUQnpVVEJHUWxGNmRFcFJWVTV6VVdsNFJGRlZSa1JQTUd4Q1VUQjNjMXBWUmtKUmVuUkNVVlZHUlV4RlRrSlJWVTF6VVZWR2MxSkZVWE5UVlVaeVVrVk5OMUZWUm5OU1JtdHpUa1ZLUWxGV1JUZFJWVVoyVWtoS1EweEdUa0pSVmsxellWVktRbEZYYkVOTVJVNUNVVlZOYzFFd1JrSlVVM2hHVVZWR1JreEZUa0pSVlRBM1UxVkdSR05yVFhOVU1FWkNWSGw0VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhHYkVKUlZtdHpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlVVM1VWVkdSR0ZyVVhOUk1FWkNVWHAwUWxGVlZrVk1SazVDVVZka1EweEdUa0pSVmsxelVUQkdRbFI1ZUV4UlZVWmFURVZXUWxGVlZYTlRNRVpDV1ZONFJsRlZSa1pNUlZaQ1VWUkNRMHhGVmtKUlZWVnpWVEJHUW1GVlNUZFRWVVpFWkVWamMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaRVlVVkpjMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6V1ZWR1FsbFRlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40VEZGVlJreE1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hHVGtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXlOVVZNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4R1pFSlJWbU56VWxWR1FsSlVkRkpSVlVaRVRFVk9RbEZWVFRkVFZVWkVaVVZKYzFOVlJrSlRVM2hXVVZWR1ZreEZaRUpSVjJSRFRFVldRbEZWVlhOUk1FWkNVWHAwU2xGVlRuRlJlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTmhWVXBDVVZkc1EweEZUa0pSVlUxelZsVkdRbFpUZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpFWlVWTmMxWlZSa0pXVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVGWlJWVVpXVEVWT1FsRlZUVGRWVlVaRVRWVkpjMU5WUmtKVFUzaEVVVlZHUkV4RlpFSlJWV056VmxWR1FsRjVlRWhSVlVaSVR6RnNRbEV4U1hOVFZVWkNVMU40UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXlXWE5UVlVaQ1UxTjRVRkZWUmxCTVJVNUNVVlZOYzFOVlJrSlRVM2hTVVZWR1VrOHlaRU5SVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxSXdSa0pTZVhoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVlVVlJjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNRmx6VVRCR1FsRjVlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRGdmMxRXdSa0pSZVhoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXlhRU5NUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJNR2R6VkRCR1FsUjVlRVpSVlVaR1RFVXhRbEZWTUhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxWlZSa0pXVTNoR1VWVkdSa3hHVmtKUlZsVnpVbFZHUWxKVGVFUlJWVVpFVHpCR1FsRXljRVZNUlU1Q1VWVk5OMUZWUm0xU1EzYzBVV3RHYkZGNVNqa2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYm5aaGNpQlFZV2x5YVc1blNHVmhjQ0E5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1VHRnBjbWx1WjBobFlYQW9aV3hsYlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMGdQU0JsYkdWdE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMVltaGxZWEJ6SUQwZ1cxMDdYRzRnSUNBZ2ZWeHVJQ0FnSUZCaGFYSnBibWRJWldGd0xuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5QTlJR1oxYm1OMGFXOXVJQ2h6Wld4bFkzUnZjaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjM1J5SUQwZ1hDSmNJaXdnYm1WbFpFTnZiVzFoSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV6ZFdKb1pXRndjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjFZbWhsWVhBZ1BTQjBhR2x6TG5OMVltaGxZWEJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpkV0pvWldGd0xtVnNaVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpXVmtRMjl0YldFZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WldWa1EyOXRiV0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRISWdQU0J6ZEhJZ0t5QmNJaXhjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjaUE5SUhOMGNpQXJJSE4xWW1obFlYQXVkRzlUZEhKcGJtY29jMlZzWldOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVmxaRU52YlcxaElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYzNSeUlDRTlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISWdQU0JjSWloY0lpQXJJSE4wY2lBcklGd2lLVndpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTVsYkdWdElEOGdjMlZzWldOMGIzSW9kR2hwY3k1bGJHVnRLU0E2SUZ3aVhDSXBJQ3NnYzNSeU8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUdGcGNtbHVaMGhsWVhBdWNISnZkRzkwZVhCbExtWnZja1ZoWTJnZ1BTQm1kVzVqZEdsdmJpQW9aaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVpXMXdkSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWmloMGFHbHpMbVZzWlcwc0lIUm9hWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRXSm9aV0Z3Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoektTQjdJSEpsZEhWeWJpQnpMbVp2Y2tWaFkyZ29aaWs3SUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCUVlXbHlhVzVuU0dWaGNDNXdjbTkwYjNSNWNHVXVZMjkxYm5RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnRjSFI1S0NrZ1B5QXdJRG9nTVNBcklIUm9hWE11YzNWaWFHVmhjSE11Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2h1TENCb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYmlBcklHZ3VZMjkxYm5Rb0tUdGNiaUFnSUNBZ0lDQWdmU3dnTUNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JRWVdseWFXNW5TR1ZoY0M1d2NtOTBiM1I1Y0dVdWJXbHVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsYkdWdE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUdGcGNtbHVaMGhsWVhBdWNISnZkRzkwZVhCbExtVnRjSFI1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGJHVnRJRDA5SUc1MWJHdzdYRzRnSUNBZ2ZUdGNiaUFnSUNCUVlXbHlhVzVuU0dWaGNDNXdjbTkwYjNSNWNHVXVZMjl1ZEdGcGJuTWdQU0JtZFc1amRHbHZiaUFvYUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5QTlQVDBnYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YzNWaWFHVmhjSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMVltaGxZWEJ6VzJsZExtTnZiblJoYVc1ektHZ3BLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQmhhWEpwYm1kSVpXRndMbkJ5YjNSdmRIbHdaUzVwYzBobFlYQWdQU0JtZFc1amRHbHZiaUFvYkdWemMxUm9ZVzRwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1ZpYUdWaGNITXVaWFpsY25rb1puVnVZM1JwYjI0Z0tHZ3BJSHNnY21WMGRYSnVJR3hsYzNOVWFHRnVLRjkwYUdsekxtVnNaVzBzSUdndVpXeGxiU2tnSmlZZ2FDNXBjMGhsWVhBb2JHVnpjMVJvWVc0cE95QjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQmhhWEpwYm1kSVpXRndMbkJ5YjNSdmRIbHdaUzVwYm5ObGNuUWdQU0JtZFc1amRHbHZiaUFvYjJKcUxDQnNaWE56VkdoaGJpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFpYSm5aU2h1WlhjZ1VHRnBjbWx1WjBobFlYQW9iMkpxS1N3Z2JHVnpjMVJvWVc0cE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUdGcGNtbHVaMGhsWVhBdWNISnZkRzkwZVhCbExtMWxjbWRsSUQwZ1puVnVZM1JwYjI0Z0tHaGxZWEF5TENCc1pYTnpWR2hoYmlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxiWEIwZVNncEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hsWVhBeU8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaG9aV0Z3TWk1bGJYQjBlU2dwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0d4bGMzTlVhR0Z1S0hSb2FYTXVaV3hsYlN3Z2FHVmhjREl1Wld4bGJTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNWaWFHVmhjSE11Y0hWemFDaG9aV0Z3TWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hsWVhBeUxuTjFZbWhsWVhCekxuQjFjMmdvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdWaGNESTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lGQmhhWEpwYm1kSVpXRndMbkJ5YjNSdmRIbHdaUzV5WlcxdmRtVk5hVzRnUFNCbWRXNWpkR2x2YmlBb2JHVnpjMVJvWVc0cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVaVzF3ZEhrb0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WlhKblpWQmhhWEp6S0d4bGMzTlVhR0Z1S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRkJoYVhKcGJtZElaV0Z3TG5CeWIzUnZkSGx3WlM1dFpYSm5aVkJoYVhKeklEMGdablZ1WTNScGIyNGdLR3hsYzNOVWFHRnVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5OMVltaGxZWEJ6TG14bGJtZDBhQ0E5UFNBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUVlXbHlhVzVuU0dWaGNDaHVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RHaHBjeTV6ZFdKb1pXRndjeTVzWlc1bmRHZ2dQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzVmlhR1ZoY0hOYk1GMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabWx5YzNSUVlXbHlJRDBnZEdocGN5NXpkV0pvWldGd2N5NXdiM0FvS1M1dFpYSm5aU2gwYUdsekxuTjFZbWhsWVhCekxuQnZjQ2dwTENCc1pYTnpWR2hoYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdkR2hwY3k1dFpYSm5aVkJoYVhKektHeGxjM05VYUdGdUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtYVhKemRGQmhhWEl1YldWeVoyVW9jbVZ0WVdsdWFXNW5MQ0JzWlhOelZHaGhiaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJRkJoYVhKcGJtZElaV0Z3TG5CeWIzUnZkSGx3WlM1a1pXTnlaV0Z6WlV0bGVTQTlJR1oxYm1OMGFXOXVJQ2h6ZFdKb1pXRndMQ0J1WlhkV1lXeDFaU3dnYzJWMFNHVmhjRTV2WkdVc0lHeGxjM05VYUdGdUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZElaV0Z3SUQwZ2MzVmlhR1ZoY0M1eVpXMXZkbVZOYVc0b2JHVnpjMVJvWVc0cE8xeHVJQ0FnSUNBZ0lDQnpkV0pvWldGd0xtVnNaVzBnUFNCdVpYZElaV0Z3TG1Wc1pXMDdYRzRnSUNBZ0lDQWdJSE4xWW1obFlYQXVjM1ZpYUdWaGNITWdQU0J1WlhkSVpXRndMbk4xWW1obFlYQnpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVjBTR1ZoY0U1dlpHVWdJVDA5SUc1MWJHd2dKaVlnYm1WM1NHVmhjQzVsYkdWdElDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUklaV0Z3VG05a1pTaHpkV0pvWldGd0xtVnNaVzBzSUhOMVltaGxZWEFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVdseWFXNW5UbTlrWlNBOUlHNWxkeUJRWVdseWFXNW5TR1ZoY0NodVpYZFdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WlhSSVpXRndUbTlrWlNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFNHVmhjRTV2WkdVb2JtVjNWbUZzZFdVc0lIQmhhWEpwYm1kT2IyUmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXRaWEpuWlNod1lXbHlhVzVuVG05a1pTd2diR1Z6YzFSb1lXNHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUZCaGFYSnBibWRJWldGd08xeHVmU2dwS1R0Y2JtVjRjRzl5ZEhNdVVHRnBjbWx1WjBobFlYQWdQU0JRWVdseWFXNW5TR1ZoY0R0Y2JuWmhjaUJRY21sdmNtbDBlVkYxWlhWbElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJRY21sdmNtbDBlVkYxWlhWbEtHeGxjM05VYUdGdUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHVnpjMVJvWVc0Z1BTQnNaWE56VkdoaGJqdGNiaUFnSUNCOVhHNGdJQ0FnVUhKcGIzSnBkSGxSZFdWMVpTNXdjbTkwYjNSNWNHVXVkRzl3SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVsYlhCMGVTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliMjkwTG1Wc1pXMDdYRzRnSUNBZ2ZUdGNiaUFnSUNCUWNtbHZjbWwwZVZGMVpYVmxMbkJ5YjNSdmRIbHdaUzV3ZFhOb0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdZWEpuY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJmYVNBOUlEQTdJRjlwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ1gya3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpuYzF0ZmFWMGdQU0JoY21kMWJXVnVkSE5iWDJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCd1lXbHlhVzVuVG05a1pUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHRnlaenNnWVhKbklEMGdZWEpuYzF0cFhUc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVdseWFXNW5UbTlrWlNBOUlHNWxkeUJRWVdseWFXNW5TR1ZoY0NoaGNtY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MElEMGdkR2hwY3k1bGJYQjBlU2dwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXbHlhVzVuVG05a1pTQTZJSFJvYVhNdWNtOXZkQzV0WlhKblpTaHdZV2x5YVc1blRtOWtaU3dnZEdocGN5NXNaWE56VkdoaGJpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJoYVhKcGJtZE9iMlJsTzF4dUlDQWdJSDA3WEc0Z0lDQWdVSEpwYjNKcGRIbFJkV1YxWlM1d2NtOTBiM1I1Y0dVdVpXMXdkSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhkR2hwY3k1eWIyOTBJSHg4SUNGMGFHbHpMbkp2YjNRdVpXeGxiVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnlhVzl5YVhSNVVYVmxkV1V1Y0hKdmRHOTBlWEJsTG1selNHVmhjQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y205dmRDNXBjMGhsWVhBb2RHaHBjeTVzWlhOelZHaGhiaWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQlFjbWx2Y21sMGVWRjFaWFZsTG5CeWIzUnZkSGx3WlM1bWIzSkZZV05vSUQwZ1puVnVZM1JwYjI0Z0tHWXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwTG1admNrVmhZMmdvWmlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JRY21sdmNtbDBlVkYxWlhWbExuQnliM1J2ZEhsd1pTNXdiM0FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ0Y0hSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnZZbW9nUFNCMGFHbHpMbkp2YjNRdWJXbHVLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZENBOUlIUm9hWE11Y205dmRDNXlaVzF2ZG1WTmFXNG9kR2hwY3k1c1pYTnpWR2hoYmlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZUdGNiaUFnSUNCUWNtbHZjbWwwZVZGMVpYVmxMbkJ5YjNSdmRIbHdaUzV5WldSMVkyVkxaWGtnUFNCbWRXNWpkR2x2YmlBb2FHVmhjRTV2WkdVc0lHNWxkMHRsZVN3Z2MyVjBTR1ZoY0U1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxkRWhsWVhCT2IyUmxJRDA5UFNCMmIybGtJREFwSUhzZ2MyVjBTR1ZoY0U1dlpHVWdQU0J1ZFd4c095QjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQ0E5SUhSb2FYTXVjbTl2ZEM1a1pXTnlaV0Z6WlV0bGVTaG9aV0Z3VG05a1pTd2dibVYzUzJWNUxDQnpaWFJJWldGd1RtOWtaU3dnZEdocGN5NXNaWE56VkdoaGJpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCUWNtbHZjbWwwZVZGMVpYVmxMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNoelpXeGxZM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5YjI5MExuUnZVM1J5YVc1bktITmxiR1ZqZEc5eUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUZCeWFXOXlhWFI1VVhWbGRXVXVjSEp2ZEc5MGVYQmxMbU52ZFc1MElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliMjkwTG1OdmRXNTBLQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1VISnBiM0pwZEhsUmRXVjFaVHRjYm4wb0tTazdYRzVsZUhCdmNuUnpMbEJ5YVc5eWFYUjVVWFZsZFdVZ1BTQlFjbWx2Y21sMGVWRjFaWFZsTzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwWTBoR01WcFlWbXhNYlhCNlNXbDNhV015T1RGamJVNXNWVzA1ZG1SRFNUWkphVWx6U1c1T2RtUllTbXBhV0UxcFQyeHphVXhwTkhaTWFUUjJWakpXYVZFeU9YTlpVemw2WTIxTmRtTklSakZhV0Zac1RHNVNla2xzTUhOSmJUVm9ZbGRXZWtscWNHSllVM2RwWWxkR2QyTkhiSFZhTTAxcFQybEpOMDh3UmtKUk1FVTNVMVZHU2xOVGVIaFJhMFpDWWxWSmMxTlZSa0pVZW5SU1VWVkdVVXhHVGtKUlZXdHpVakJHUWxOcGVFcFJWVVpLVEVWT1FsRlZZemRWVlVaRVpFVkpjMU5WUmtKVFUzaEVVVlZHUkV4R1JrSlJWa1Z6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVFZVWkVaR3RKYzFFd1JrSlJlblJLVVZWV1RreEVhRU5SVlVaU1RFVmtRbEZYV1hOV1ZVWkNXakJKYzFWVlJrSlZWSFJTVVZWT2QxRnBlRXBSVlVaS1RFVmtRbEZWWTNOU01FWkNVbmw0UmxGVlJrWk1SVlpDVVZWVmMxVXdSa0pWZVhoSVVWVkdTRXhGZEVKUlZYTnpVVEJHUWxGNmRGSlJWVTV2VVhsNFRGRlZSa3hNUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWV1FsRlZWVGRYVlVaRVRUQk5jMU5WUmtKVFUzaFFVVlZHVUV4RlpFSlJWekZEVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSRXd3VFhOVFZVWkNVMU40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoS1VWVkdTa3hGVmtKUlZWVTNXakJLUWxFeVdYTlZNRVpDVlhsNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVuUnVVV3RHUkdKRlNYTlZNRVpDVlhwMGFGRlZUbUZQTVd4Q1VUQlJjMU5WUmtKVFUzaFVVVlZHVkV4RlZrSlJWVlUzV2pCS1FsRXhaM05TTUVaQ1VubDRTRkZWUmtoTVJXUkNVVlZqYzFJd1JrSlNlWGhJVVZWR1NFeEZUa0pSVlUwM1dWVkdSR0pyU1RkWFZVWkVVa040U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGT1VKUlZUaHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmthMDF6VlRCR1FsVjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWHAwVkZGVlRuZFJhblJTVVZWT1JVeEZiRUpSVld0elVqQkdRbEo1ZUV4UlZVWk1URVZXUWxGVlZYTlNWVVpDVWxSMFdsRlZUbUZNUldSQ1VWVmpjMUl3UmtKU2VYaElVVlZHU0V4RlpFSlJWV056VWpCR1FsSjVlRWhSVlVaSVRFVmtRbEZWWTNOUk1FWkNVWHAwVkZGVlRqWlJhblJTVVZWT1JVeEZPVUpSVlRoelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUVGRUVlVaRVpVVlJjMUV3UmtKUmVuUktVVlZXVGt4RVdrTlJWVVpRVEVWa1FsRlhVWE5XVlVaQ1dsTjRSRkZWUmtSUE1VWkNVVEZ2YzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZXUWxGVlZYTlNWVVpDVWxSMFdsRlZUbTFNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVRJMVEweEZiRUpSVld0elVUQkdRbEY1ZUZKUlZVWlNURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVYaEtVVlZHU2t4Rk9VSlJWVVZ6VVRCR1FsRjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pYYVhoRVVWVkdXa3hGVGtKUlZVMXpVVEJHUWxGNmRGUlJWVTB4VVhwMFNsRlZUazFNUlU1Q1VWVk5OMU5WUmtaVVUzZDVVV3RHUWxONWVFaFJWVVpoVHpGR1FsRXdhM05VTUVaQ1ZIbDRTbEZWUmtwTVJVNUNVVlZOYzFNd1JrSlRlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SbFpDVVZWTmMxRXdSa0pWZVhoR1VWVkdSa3hGVGtKUlYyeERUekZzUWxGNlZrWk1SVGxDVVZVNGMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVGpaUmFYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVWbWw0UkZGVlJrUlBNR3hDVWxVd2MyVlZTa0pSVldOelVqQkdRbFpxZEZKUlZVNUtURVU1UWxGVk9ITlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVuUktVVlZPZVZGcGVFUlJWVVpFVHpCc1FsSlZNSE5OYTBwQ1VWVnpjMUl3UmtKWGFuUlNVVlZPU2t4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTk4xTlZSa1JPTUVselVUQkdRbEY2ZEVwUlZWWk9URVJvUTFGVlJsSk1SV1JDVVZkWmMxWlZSa0phTUVselVUQkdRbUZWU1RkVlZVWkVUakJKYzFOVlJrSlRVM2hLVVZWR1NreEZkRUpSVlhOelVUQkdRbEY2ZEZwUlZVWkdURVU1UWxGVk9ITlRWVVpDVTFONFJGRlZSa1JQTVVaQ1VYcFdRMHhGZEVKUlZYTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVV4UWxGVk1ITlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1ZIUmFVVlZOZWxGNWVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGJsRnJSa0pTVTNoUVVWVkdVRXhGYkVKUlZXdHpVVEJHUWxGNmRGUlJWVTV4VWtSMFVsRlZUa1ZNUlRsQ1VWVTRjMU13UmtKVGVYaEVVVlZHUkU4d2JFSlJNbkJEVEVWT1FsRlZUVGRUVlVaR1ZGTjNNRkZyUmtKVVUzaElVVlZHYVV4R1ZrSlJWMDF6VlZWR1FtRlZUVGRWVlVaQ1REQk5jMkZWU2tKU1ZVMDNWVlZHUlZKNWVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEdWa0pSVlVWelVUQkdRbEY1ZUVwUlZVWklURVU1UWxGVlJYTlZWVVpDVlZONFJGRlZSa1JNUlhSQ1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWV1FsRlhjRVZNUlU1Q1VWZHNSVXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTR3VW1sNFJGRlZSa1JQTUd4Q1VsVXdjMDVGU2tKUlZUQnpVakJHUWxscGVGWlJWVVpxVEVWa1FsRlZPSE5TVlVaQ1VsTjRVbEZWUmxKUE1VWkNVWHBPUTB4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0U2xGVlJrcE1SbVJDVVZaamMxRXdSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVGSlJWVVpTVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVGpaU1EzaEVVVlZHUkU4d2JFSlNWVEJ6VFd0S1FsRlZjM05TTUVaQ1YybDRWbEZWUm1oTVJYUkNVVmhHUTB4RlZrSlJWVlZ6VlZWR1FsVlVkRkpSVlU0MFVYbDRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZVM1YxVkdRbEpUZUZCUlZVWlFURVYwUWxGVmMzTlJNRVpDVVhwMGFGRlZUWGhSYVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxGNWVFeFJWVVpNVEVWV1FsRlZWVGRYVlVaQ1VsTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlblJvVVZWTmRsRnBlRXBSVlVaS1RFWkdRbEZXUlhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdSa3hGZEVKUlZYTnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TVlVaQ1VsUjBXbEZWVGpCUmVYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk5lRkZwZUZCUlZVWlFURVZzUWxGVmEzTlJNRVpDVVhwMFZGRlZUbTFQTWtaQ1VWVXdOMWRWUmtSVFEzaE1VVlZHVEV4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk5lRkZwZUZCUlZVWlFURVYwUWxGVmMzTlJNRVpDVVhwMFZGRlZUbTlSYW5SS1VWVk9UVXhGVGtKUlZVMDNVMVZHUmxSVGQzSlJhMFpDVlhsNFNGRlZSbTlSYVhoV1VWVkdjRkZwZUZKUlZVWndVWHAwVWxGVlRUVlJlWGhLVVZWR1NreEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZXUWxGVlZUZFhWVVpDVWxONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVuTTNWMVZHUkdWclNYTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEY2UmtSTVJVNUNVVlZOTjFOVlJrWlVVM2h1VVRCR1FsWlRlRWhSVlVaeFVXbDRWbEZWUm5KUmFYaFNVVlZHY0ZGNmRGSlJWVTEyVVhsNFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VkZWR1FsUlRlRXBSVlVaS1RFVk9RbEZWVFRkWFZVWkNVbE40VUZGVlJsQk1SV3hDVVZWcmMxWXdSa0pXZVhoRVVWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVHpKR1FsRjZSa1ZNUld4Q1VWVnJjMU5WUmtKVFUzaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRTVSVlVaT1RFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWlBNV3hDVVZWVmMxUXdSa0pVZVhoS1VWVkdTa3hGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVlZWTjFsVlJrUk5NRkUzVjFWR1JGSkRlRXBSVlVaS1RFWk9RbEZXVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZaRUpSVldOelVsVkdRbEpUZUVaUlZVWkdURVpHUWxGV1JYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUTndSa3hGYkVKUlZXdHpWVEJHUWxWNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUwM1YxVkdSRTFWVFhOVU1FWkNWSGw0VkZGVlJsUk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhHVGtKUlZrMXpVbFZHUWxKVGVGSlJWVVpTVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVFhaUmVuUktVVlZPVFV4RlRrSlJWVTAzVTFWR1JGUlRlSEJSTUVaQ1ZubDRTRkZWUm5OUmFYaFdVVlZHZEZGcGVGQlJWVVl4VVdsNFJsRlZSa1pNUmtaQ1VWWmpjMUpWUmtKU1UzaFlVVlZGTUZGNWVFWlJWVVpHVEVaR1FsRlhiRVJQTVVaQ1VUTkNTa3hGYkVKUlZXdHpWREJHUWxSNWVFaFJWVVpJVEVVNVFsRlZPSE5STUVaQ1VYbDRWRkZWUmxSTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSazFWVFhOVU1FWkNWSGw0UkZGVlJrUk1SV3hDVVZWcmMxSXdSa0pTZVhoUVVWVkdVRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVHpGR1FsRjZWa05NUlRsQ1VWVTRjMUV3UmtKUmVYaFNVVlZHVWt4RlpFSlJWV056VkRCR1FsUjVlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWHAwVWxGVlRuZFJlWGhLVVZWR1NreEdaRUpSVm1OelV6QkdRbE41ZUVwUlZVWktURVZzUWxGVmEzTlVNRVpDVkhsNFJGRlZSa1JNUld4Q1VWVnJjMU13UmtKVGVYaEtVVlZHU2t4RlZrSlJWVlUzVjFWR1JFd3dUWE5XTUVaQ1ZubDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhLVVZWR1NreEZWa0pSVlZWelZEQkdRbFI1ZUVSUlZVWkVURVZPUWxGVlRUZFZNRVpFWkVWTk4xVlZSa1JTUTNoS1VWVkdTa3hHWkVKUlZtTnpVakJHUWxKNWVFcFJWVVpLVEVaa1FsRldZM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWTk1WRjVlRXBSVlVaS1RFWmtRbEZXWTNOVE1FWkNVM2w0U2xGVlJrcE1SVlpDVVZWVk4xZFZSa1JrUlVselZqQkdRbFo1ZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxONFdGRlZSbGhNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZPTUZGNmRGSlJWVTVGVEVVNVFsRlZPSE5UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhZVVZWR1dFeEZWa0pSVlZWelZWVkdRbFZUZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpFVGpCTmMxRXdSa0pSZW5SS1VWVk9UVXhIZEVOUlZVWkVUekJHUWxGVlVYTlJNRVpDVVhsNFFsRlljRWhTUTNoS1VWaHNTRkY2ZEVKUldIQklWMU40Y2xFd1JrSldlblJDVVZSb1NHVkZTVGRUVlVaR1UxTjRNVkZyUmtKaU1FbHpWVlZHUW1GVlRUZFZWVVpDWVd0TmMxbFZSa0pWVTNoSVVWVkdVMHhHUmtKUlZrVnpVVEJHUW1WVlNUZFRWVVpDVTFONFJGRlZSa1JQTUd4Q1V6STFSVXhFU2tOUlZVWklURVZrUWxGV1dUZFZWVVpFVTFONFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlZrSlJWVlZ6VWxWR1FsSlVkRnBSVlVaR1RFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUlBNVTVDVVZWVk4xVlZSa1JpUlUxelZEQkdRbFI1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVuUktVVlZOZUZGcGVFUlJWVVpFVHpCc1FsTXdNSE5PUlVwQ1VWVnJjMUl3UmtKWFJIUlNVVlZHV2t4SFRrSlJWbXMzV1ZWR1FsZHBlRlpSVlVaYVRFVldRbEZXYjNOalZVcENVVlpyYzFKVlJrSlhhWGhLVVZWR1drOHhiRUpSVm05elpWVktRbEZXYXpkUE1VWkNVVE5DUTB4RmJFSlJWV3R6VmpCR1FsWjVlRVJSVlVaRVR6RkdRbEV5YUVOTVJYUkNVVlZ6YzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFNGRlZSa2hNUldSQ1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWlBNV3hDVVRJMVJFeEdaRUpSVm1OelVqQkdRbEo1ZUVwUlZVWktURVprUWxGV1kzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPZFZGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRqQlJhWGhZVVZWR1dFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4R1pFSlJWbU56VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SVTVDVVZWTk4xVXdSa1JoYTFVM1ZWVkdSRkpEZUZCUlZVWlFURVprUWxGV1kzTlJNRVpDVVhwMFNsRlZUakpSYVhoRVVWVkdSRTh3YkVKVE1EQnpUbXRLUWxGVmMzTlNNRVpDVjJwMFVsRlZUa3BNUlRsQ1VWVTRjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMDNVMVZHUkdWclRYTlJNRVpDVVhwMFNsRlZkRTVNUkdoRFVWVkdUa3hGWkVKUlYwazNWVlZHUkZOVGVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUZKUlZVWlNURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUWHBSZVhoRVVWVkdSRTh3YkVKVE1EQnpTekJLUWxGVk9ITlNNRVpDV2tONFZsRlZSbXhNUlU1Q1VWVk5OMVZWUmtSWGFYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9ObEZwZUVSUlZVWkVUekJzUWxOVk1ITk5hMHBDVVZWamMxSXdSa0pXYW5SU1VWVk9Ta3hGYkVKUlZXdHpVMVZHUWxOVGVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRSbEZWUmtaUE1XeENVVEpSYzFRd1JrSlVlWGhLVVZWR1NreEZUa0pSVlUwM1ZUQkdSRnBxZEZKUlZVNUZURVZzUWxGVmEzTlNNRVpDVW5sNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFRkVlZVWkVUVlZKYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUms1Q1VWWk5jMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUREJOYzFRd1JrSlVlWGhJVVZWR1NFeEZUa0pSVlUwM1UxVkdSRnBwZUVSUlZVWkVUekJzUWxOVk1ITmhWVTVDVVZaTmMxSXdSa0poUlVselZsVkdRbUZWU1hOVlZVWkNaREJKYzFKVlJrSlNVM2hPVVZWR1ZFeEZWa0pSVlZWelZqQkdRbUpWVVRkVlZVWkNZbXRSYzA1RlNrSlJWVVZ6VWxWR1FsRlRlSEpSYTBaQ1lsVlJOMVZWUmtSamEyTnpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEdaRUpSVm1OelVUQkdRbEY1ZUZKUlZVWlNURVZXUWxGVlZYTlVWVVpDVkZONFJsRlZSa1pNUm1SQ1VWWmpjMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVZMFZaYzFFd1JrSlJlblJLVVZWT1RreEhaRVJSVlVaU1RFVmtRbEZYV1hOV1ZVWkNXakJKYzFWVlJrSlZWSFJTVVZWT2QxRnBlRkJSVlVaUVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXphRVJNUlU1Q1VWVk5OMU5WUmt4VVUzY3lVV3RHUWxONWVFaFJWVVpoVHpGR1FsRXdhM05VTUVaQ1ZIbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVsVkdRbEpUZUVSUlZVWkVUekJzUWxGNlpFTk1SVTVDVVZWTk4xTlZSa1JVUTNoMlVXdEdRbEY2ZEVKUlZVWkZURVZPUWxGVlRYTlJWVVkwVWxWUmMxTlZSak5TVlUwM1VWVkdORkpXYTNOak1FNUNVVmRGYVdaUlBUMGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiblpoY2lCZlgyVjRkR1Z1WkhNZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZlpYaDBaVzVrY3lrZ2ZId2dLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1pYaDBaVzVrVTNSaGRHbGpjeUE5SUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3WEc0Z0lDQWdJQ0FnSUdWNGRHVnVaRk4wWVhScFkzTWdQU0JQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNoN0lGOWZjSEp2ZEc5Zlh6b2dXMTBnZlNCcGJuTjBZVzVqWlc5bUlFRnljbUY1SUNZbUlHWjFibU4wYVc5dUlDaGtMQ0JpS1NCN0lHUXVYMTl3Y205MGIxOWZJRDBnWWpzZ2ZTa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaGtMQ0JpS1NCN0lHWnZjaUFvZG1GeUlIQWdhVzRnWWlrZ2FXWWdLR0l1YUdGelQzZHVVSEp2Y0dWeWRIa29jQ2twSUdSYmNGMGdQU0JpVzNCZE95QjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGgwWlc1a1UzUmhkR2xqY3loa0xDQmlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb1pDd2dZaWtnZTF4dUlDQWdJQ0FnSUNCbGVIUmxibVJUZEdGMGFXTnpLR1FzSUdJcE8xeHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmZYeWdwSUhzZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2lBOUlHUTdJSDFjYmlBZ0lDQWdJQ0FnWkM1d2NtOTBiM1I1Y0dVZ1BTQmlJRDA5UFNCdWRXeHNJRDhnVDJKcVpXTjBMbU55WldGMFpTaGlLU0E2SUNoZlh5NXdjbTkwYjNSNWNHVWdQU0JpTG5CeWIzUnZkSGx3WlN3Z2JtVjNJRjlmS0NrcE8xeHVJQ0FnSUgwN1hHNTlLU2dwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVkbUZ5SUZSeVpXVkNZWE5sSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQlVjbVZsUW1GelpTZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1hVzVrU1hSbGNpQTlJR1oxYm1OMGFXOXVJQ2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6SUQwZ2RHaHBjeTVmY205dmREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBkR1Z5SUQwZ2RHaHBjeTVwZEdWeVlYUnZjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tISmxjeUFoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpJRDBnZEdocGN5NWZZMjl0Y0dGeVlYUnZjaWhrWVhSaExDQnlaWE11WkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dNZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsY2k1ZlkzVnljMjl5SUQwZ2NtVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlhJdVgyRnVZMlZ6ZEc5eWN5NXdkWE5vS0hKbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGN5QTlJSEpsY3k1blpYUmZZMmhwYkdRb1l5QStJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmlBZ0lDQlVjbVZsUW1GelpTNXdjbTkwYjNSNWNHVXVZMnhsWVhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0p2YjNRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5wZW1VZ1BTQXdPMXh1SUNBZ0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUZSeVpXVkNZWE5sTG5CeWIzUnZkSGx3WlM1bWFXNWtJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjeUE5SUhSb2FYTXVYM0p2YjNRN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoeVpYTWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqSUQwZ2RHaHBjeTVmWTI5dGNHRnlZWFJ2Y2loa1lYUmhMQ0J5WlhNdVpHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWXlBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNdVpHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY3lBOUlISmxjeTVuWlhSZlkyaHBiR1FvWXlBK0lEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDA3WEc0Z0lDQWdPMXh1SUNBZ0lGUnlaV1ZDWVhObExuQnliM1J2ZEhsd1pTNXNiM2RsY2tKdmRXNWtJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgySnZkVzVrS0dSaGRHRXNJSFJvYVhNdVgyTnZiWEJoY21GMGIzSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUZSeVpXVkNZWE5sTG5CeWIzUnZkSGx3WlM1MWNIQmxja0p2ZFc1a0lEMGdablZ1WTNScGIyNGdLR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOdGNDQTlJSFJvYVhNdVgyTnZiWEJoY21GMGIzSTdYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSEpsZG1WeWMyVmZZMjF3S0dFc0lHSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJYQW9ZaXdnWVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJKdmRXNWtLR1JoZEdFc0lISmxkbVZ5YzJWZlkyMXdLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lEdGNiaUFnSUNCVWNtVmxRbUZ6WlM1d2NtOTBiM1I1Y0dVdWJXbHVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WeklEMGdkR2hwY3k1ZmNtOXZkRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjeUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0hKbGN5NXNaV1owSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhNZ1BTQnlaWE11YkdWbWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TG1SaGRHRTdYRzRnSUNBZ2ZUdGNiaUFnSUNBN1hHNGdJQ0FnVkhKbFpVSmhjMlV1Y0hKdmRHOTBlWEJsTG0xaGVDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsY3lBOUlIUm9hWE11WDNKdmIzUTdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2h5WlhNdWNtbG5hSFFnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY3lBOUlISmxjeTV5YVdkb2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TG1SaGRHRTdYRzRnSUNBZ2ZUdGNiaUFnSUNBN1hHNGdJQ0FnVkhKbFpVSmhjMlV1Y0hKdmRHOTBlWEJsTG1sMFpYSmhkRzl5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsMFpYSmhkRzl5S0hSb2FYTXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUZSeVpXVkNZWE5sTG5CeWIzUnZkSGx3WlM1bFlXTm9JRDBnWm5WdVkzUnBiMjRnS0dOaUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGRDQTlJSFJvYVhNdWFYUmxjbUYwYjNJb0tTd2daR0YwWVR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0Noa1lYUmhJRDBnYVhRdWJtVjRkQ2dwS1NBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJJb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQWdJRHRjYmlBZ0lDQlVjbVZsUW1GelpTNXdjbTkwYjNSNWNHVXVjbVZoWTJnZ1BTQm1kVzVqZEdsdmJpQW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2wwSUQwZ2RHaHBjeTVwZEdWeVlYUnZjaWdwTENCa1lYUmhPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9LR1JoZEdFZ1BTQnBkQzV3Y21WMktDa3BJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZaWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUZSeVpXVkNZWE5sTG5CeWIzUnZkSGx3WlM1ZlltOTFibVFnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU3dnWTIxd0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamRYSWdQU0IwYUdsekxsOXliMjkwTzF4dUlDQWdJQ0FnSUNCMllYSWdhWFJsY2lBOUlIUm9hWE11YVhSbGNtRjBiM0lvS1R0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0dOMWNpQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR01nUFNCMGFHbHpMbDlqYjIxd1lYSmhkRzl5S0dSaGRHRXNJR04xY2k1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGNpNWZZM1Z5YzI5eUlEMGdZM1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhWFJsY2k1ZllXNWpaWE4wYjNKekxuQjFjMmdvWTNWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNpQTlJR04xY2k1blpYUmZZMmhwYkdRb1l5QStJREFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0JwZEdWeUxsOWhibU5sYzNSdmNuTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUF0TFdrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNpQTlJR2wwWlhJdVgyRnVZMlZ6ZEc5eWMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYlhBb1pHRjBZU3dnWTNWeUxtUmhkR0VwSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlhJdVgyTjFjbk52Y2lBOUlHTjFjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwZEdWeUxsOWhibU5sYzNSdmNuTXViR1Z1WjNSb0lEMGdhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcGRHVnlMbDloYm1ObGMzUnZjbk11YkdWdVozUm9JRDBnTUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpYSTdYRzRnSUNBZ2ZUdGNiaUFnSUNBN1hHNGdJQ0FnY21WMGRYSnVJRlJ5WldWQ1lYTmxPMXh1ZlNncEtUdGNibVY0Y0c5eWRITXVWSEpsWlVKaGMyVWdQU0JVY21WbFFtRnpaVHRjYm5aaGNpQkpkR1Z5WVhSdmNpQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnU1hSbGNtRjBiM0lvZEhKbFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBjbVZsSUQwZ2RISmxaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZVzVqWlhOMGIzSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOMWNuTnZjaUE5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUVsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1a1lYUmhJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTNWeWMyOXlJQ0U5UFNCdWRXeHNJRDhnZEdocGN5NWZZM1Z5YzI5eUxtUmhkR0VnT2lCdWRXeHNPMXh1SUNBZ0lIMDdYRzRnSUNBZ08xeHVJQ0FnSUVsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1dVpYaDBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZZM1Z5YzI5eUlEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbTl2ZENBOUlIUm9hWE11WDNSeVpXVXVYM0p2YjNRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtOXZkQ0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFwYms1dlpHVW9jbTl2ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZZM1Z5YzI5eUxuSnBaMmgwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5oZG1VN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCellYWmxJRDBnZEdocGN5NWZZM1Z5YzI5eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWVc1alpYTjBiM0p6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5YzI5eUlEMGdkR2hwY3k1ZllXNWpaWE4wYjNKekxuQnZjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljMjl5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCM2FHbHNaU0FvZEdocGN5NWZZM1Z5YzI5eUxuSnBaMmgwSUQwOVBTQnpZWFpsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZ1WTJWemRHOXljeTV3ZFhOb0tIUm9hWE11WDJOMWNuTnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV2x1VG05a1pTaDBhR2x6TGw5amRYSnpiM0l1Y21sbmFIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amRYSnpiM0lnSVQwOUlHNTFiR3dnUHlCMGFHbHpMbDlqZFhKemIzSXVaR0YwWVNBNklHNTFiR3c3WEc0Z0lDQWdmVHRjYmlBZ0lDQTdYRzRnSUNBZ1NYUmxjbUYwYjNJdWNISnZkRzkwZVhCbExuQnlaWFlnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKemIzSWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5YjI5MElEMGdkR2hwY3k1ZmRISmxaUzVmY205dmREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHliMjkwSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldGNFRtOWtaU2h5YjI5MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKemIzSXViR1ZtZENBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WVhabE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRjJaU0E5SUhSb2FYTXVYMk4xY25OdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJGdVkyVnpkRzl5Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk4xY25OdmNpQTlJSFJvYVhNdVgyRnVZMlZ6ZEc5eWN5NXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTjFjbk52Y2lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ2QyaHBiR1VnS0hSb2FYTXVYMk4xY25OdmNpNXNaV1owSUQwOVBTQnpZWFpsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkZ1WTJWemRHOXljeTV3ZFhOb0tIUm9hWE11WDJOMWNuTnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV0Y0VG05a1pTaDBhR2x6TGw5amRYSnpiM0l1YkdWbWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOMWNuTnZjaUFoUFQwZ2JuVnNiQ0EvSUhSb2FYTXVYMk4xY25OdmNpNWtZWFJoSURvZ2JuVnNiRHRjYmlBZ0lDQjlPMXh1SUNBZ0lEdGNiaUFnSUNCSmRHVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVgyMXBiazV2WkdVZ1BTQm1kVzVqZEdsdmJpQW9jM1JoY25RcElIdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tITjBZWEowTG14bFpuUWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGdVkyVnpkRzl5Y3k1d2RYTm9LSE4wWVhKMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBJRDBnYzNSaGNuUXViR1ZtZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amRYSnpiM0lnUFNCemRHRnlkRHRjYmlBZ0lDQjlPMXh1SUNBZ0lEdGNiaUFnSUNCSmRHVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVgyMWhlRTV2WkdVZ1BTQm1kVzVqZEdsdmJpQW9jM1JoY25RcElIdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tITjBZWEowTG5KcFoyaDBJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aGJtTmxjM1J2Y25NdWNIVnphQ2h6ZEdGeWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkQ0E5SUhOMFlYSjBMbkpwWjJoME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTjFjbk52Y2lBOUlITjBZWEowTzF4dUlDQWdJSDA3WEc0Z0lDQWdPMXh1SUNBZ0lISmxkSFZ5YmlCSmRHVnlZWFJ2Y2p0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGtsMFpYSmhkRzl5SUQwZ1NYUmxjbUYwYjNJN1hHNTJZWElnVG05a1pTQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVG05a1pTaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlTQTlJR1JoZEdFN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdWbWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21sbmFIUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJRTV2WkdVdWNISnZkRzkwZVhCbExtZGxkRjlqYUdsc1pDQTlJR1oxYm1OMGFXOXVJQ2hrYVhJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUnBjaUEvSUhSb2FYTXVjbWxuYUhRZ09pQjBhR2x6TG14bFpuUTdYRzRnSUNBZ2ZUdGNiaUFnSUNBN1hHNGdJQ0FnVG05a1pTNXdjbTkwYjNSNWNHVXVjMlYwWDJOb2FXeGtJRDBnWm5WdVkzUnBiMjRnS0dScGNpd2dkbUZzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrYVhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbWxuYUhRZ1BTQjJZV3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14bFpuUWdQU0IyWVd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUR0Y2JpQWdJQ0J5WlhSMWNtNGdUbTlrWlR0Y2JuMG9LU2s3WEc1MllYSWdVa0pVY21WbElEMGdLR1oxYm1OMGFXOXVJQ2hmYzNWd1pYSXBJSHRjYmlBZ0lDQmZYMlY0ZEdWdVpITW9Va0pVY21WbExDQmZjM1Z3WlhJcE8xeHVJQ0FnSUdaMWJtTjBhVzl1SUZKQ1ZISmxaU2hqYjIxd1lYSmhkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJRjl6ZFhCbGNpNWpZV3hzS0hSb2FYTXBJSHg4SUhSb2FYTTdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXliMjkwSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMk52YlhCaGNtRjBiM0lnUFNCamIyMXdZWEpoZEc5eU8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1emFYcGxJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpPMXh1SUNBZ0lIMWNiaUFnSUNCU1FsUnlaV1V1Y0hKdmRHOTBlWEJsTG1sdWMyVnlkQ0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWFFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNKdmIzUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKdmIzUWdQU0J1WlhjZ1RtOWtaU2hrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTnBlbVVyS3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCb1pXRmtJRDBnYm1WM0lFNXZaR1VvZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2FYSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNZWE4wSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWjNBZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdkbmNDQTlJR2hsWVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUhSb2FYTXVYM0p2YjNRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWjNBdWNtbG5hSFFnUFNCMGFHbHpMbDl5YjI5ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxJRDBnYm1WM0lFNXZaR1VvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhBdWMyVjBYMk5vYVd4a0tHUnBjaXdnYm05a1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMybDZaU3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoU1FsUnlaV1V1YVhOZmNtVmtLRzV2WkdVdWJHVm1kQ2tnSmlZZ1VrSlVjbVZsTG1selgzSmxaQ2h1YjJSbExuSnBaMmgwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuSmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dlpHVXViR1ZtZEM1eVpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNXlhV2RvZEM1eVpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZKQ1ZISmxaUzVwYzE5eVpXUW9ibTlrWlNrZ0ppWWdVa0pVY21WbExtbHpYM0psWkNod0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR2x5TWlBOUlHZG5jQzV5YVdkb2RDQTlQVDBnWjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodWIyUmxJRDA5UFNCd0xtZGxkRjlqYUdsc1pDaHNZWE4wS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyZHdMbk5sZEY5amFHbHNaQ2hrYVhJeUxDQlNRbFJ5WldVdWMybHVaMnhsWDNKdmRHRjBaU2huY0N3Z0lXeGhjM1FwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2RuY0M1elpYUmZZMmhwYkdRb1pHbHlNaXdnVWtKVWNtVmxMbVJ2ZFdKc1pWOXliM1JoZEdVb1ozQXNJQ0ZzWVhOMEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR050Y0NBOUlIUm9hWE11WDJOdmJYQmhjbUYwYjNJb2JtOWtaUzVrWVhSaExDQmtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjF3SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBJRDBnWkdseU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjaUE5SUdOdGNDQThJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZHdJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZG5jQ0E5SUdkd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jQ0E5SUhBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NDQTlJRzV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaU0E5SUc1dlpHVXVaMlYwWDJOb2FXeGtLR1JwY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eWIyOTBJRDBnYUdWaFpDNXlhV2RvZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eWIyOTBMbkpsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0FnSUgwN1hHNGdJQ0FnTzF4dUlDQWdJRkpDVkhKbFpTNXdjbTkwYjNSNWNHVXVjbVZ0YjNabElEMGdablZ1WTNScGIyNGdLR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0p2YjNRZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2FHVmhaQ0E5SUc1bGR5Qk9iMlJsS0hWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1YjJSbElEMGdhR1ZoWkR0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzV5YVdkb2RDQTlJSFJvYVhNdVgzSnZiM1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQndJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkbUZ5SUdkd0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1p2ZFc1a0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JwY2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2h1YjJSbExtZGxkRjlqYUdsc1pDaGthWElwSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkQ0E5SUdScGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkd0lEMGdjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQWdQU0J1YjJSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTQTlJRzV2WkdVdVoyVjBYMk5vYVd4a0tHUnBjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTIxd0lEMGdkR2hwY3k1ZlkyOXRjR0Z5WVhSdmNpaGtZWFJoTENCdWIyUmxMbVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdseUlEMGdZMjF3SUQ0Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiWEFnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJRzV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVZKQ1ZISmxaUzVwYzE5eVpXUW9ibTlrWlNrZ0ppWWdJVkpDVkhKbFpTNXBjMTl5WldRb2JtOWtaUzVuWlhSZlkyaHBiR1FvWkdseUtTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1VrSlVjbVZsTG1selgzSmxaQ2h1YjJSbExtZGxkRjlqYUdsc1pDZ2haR2x5S1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITnlJRDBnVWtKVWNtVmxMbk5wYm1kc1pWOXliM1JoZEdVb2JtOWtaU3dnWkdseUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0M1elpYUmZZMmhwYkdRb2JHRnpkQ3dnYzNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3SUQwZ2MzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLQ0ZTUWxSeVpXVXVhWE5mY21Wa0tHNXZaR1V1WjJWMFgyTm9hV3hrS0NGa2FYSXBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJsaWJHbHVaeUE5SUhBdVoyVjBYMk5vYVd4a0tDRnNZWE4wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOcFlteHBibWNnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hVa0pVY21WbExtbHpYM0psWkNoemFXSnNhVzVuTG1kbGRGOWphR2xzWkNnaGJHRnpkQ2twSUNZbUlDRlNRbFJ5WldVdWFYTmZjbVZrS0hOcFlteHBibWN1WjJWMFgyTm9hV3hrS0d4aGMzUXBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQXVjbVZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MybGliR2x1Wnk1eVpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdWNtVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrYVhJeUlEMGdaM0F1Y21sbmFIUWdQVDA5SUhBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0ZKQ1ZISmxaUzVwYzE5eVpXUW9jMmxpYkdsdVp5NW5aWFJmWTJocGJHUW9iR0Z6ZENrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHdMbk5sZEY5amFHbHNaQ2hrYVhJeUxDQlNRbFJ5WldVdVpHOTFZbXhsWDNKdmRHRjBaU2h3TENCc1lYTjBLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRkpDVkhKbFpTNXBjMTl5WldRb2MybGliR2x1Wnk1blpYUmZZMmhwYkdRb0lXeGhjM1FwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNDNXpaWFJmWTJocGJHUW9aR2x5TWl3Z1VrSlVjbVZsTG5OcGJtZHNaVjl5YjNSaGRHVW9jQ3dnYkdGemRDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWjNCaklEMGdaM0F1WjJWMFgyTm9hV3hrS0dScGNqSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkd1l5NXlaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dlpHVXVjbVZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNHTXViR1ZtZEM1eVpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuY0dNdWNtbG5hSFF1Y21Wa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnZkVzVrSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDNWtZWFJoSUQwZ2JtOWtaUzVrWVhSaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY0M1elpYUmZZMmhwYkdRb2NDNXlhV2RvZENBOVBUMGdibTlrWlN3Z2JtOWtaUzVuWlhSZlkyaHBiR1FvYm05a1pTNXNaV1owSUQwOVBTQnVkV3hzS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTnBlbVV0TFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eWIyOTBJRDBnYUdWaFpDNXlhV2RvZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzSnZiM1FnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzSnZiM1F1Y21Wa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWnZkVzVrSUNFOVBTQnVkV3hzTzF4dUlDQWdJSDA3WEc0Z0lDQWdPMXh1SUNBZ0lGSkNWSEpsWlM1cGMxOXlaV1FnUFNCbWRXNWpkR2x2YmlBb2JtOWtaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm05a1pTQWhQVDBnYm5Wc2JDQW1KaUJ1YjJSbExuSmxaRHRjYmlBZ0lDQjlPMXh1SUNBZ0lGSkNWSEpsWlM1emFXNW5iR1ZmY205MFlYUmxJRDBnWm5WdVkzUnBiMjRnS0hKdmIzUXNJR1JwY2lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJGMlpTQTlJSEp2YjNRdVoyVjBYMk5vYVd4a0tDRmthWElwTzF4dUlDQWdJQ0FnSUNCeWIyOTBMbk5sZEY5amFHbHNaQ2doWkdseUxDQnpZWFpsTG1kbGRGOWphR2xzWkNoa2FYSXBLVHRjYmlBZ0lDQWdJQ0FnYzJGMlpTNXpaWFJmWTJocGJHUW9aR2x5TENCeWIyOTBLVHRjYmlBZ0lDQWdJQ0FnY205dmRDNXlaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J6WVhabExuSmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMkYyWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRkpDVkhKbFpTNWtiM1ZpYkdWZmNtOTBZWFJsSUQwZ1puVnVZM1JwYjI0Z0tISnZiM1FzSUdScGNpa2dlMXh1SUNBZ0lDQWdJQ0J5YjI5MExuTmxkRjlqYUdsc1pDZ2haR2x5TENCU1FsUnlaV1V1YzJsdVoyeGxYM0p2ZEdGMFpTaHliMjkwTG1kbGRGOWphR2xzWkNnaFpHbHlLU3dnSVdScGNpa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVa0pVY21WbExuTnBibWRzWlY5eWIzUmhkR1VvY205dmRDd2daR2x5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQlNRbFJ5WldVN1hHNTlLRlJ5WldWQ1lYTmxLU2s3WEc1bGVIQnZjblJ6TGxKQ1ZISmxaU0E5SUZKQ1ZISmxaVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhV050U2pCamJWWnNURzF3ZWtscGQybGpNamt4WTIxT2JGVnRPWFprUTBrMlNXbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1hVFIyVEdrMGRsWXlWbWxSTWpseldWTTVlbU50VFhaamJVb3dZMjFXYkV4dVVucEpiREJ6U1cwMWFHSlhWbnBKYW5CaVdGTjNhV0pYUm5kalIyeDFXak5OYVU5cFNUZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcDBRbEZZVmtOVFZIUktVVlZHUWs4eFJrSk9SVXBLVEVkR1FsRldSWE5TTUVaQ1VubDRWbEZWUmxaTVJXeENVVlZyTjFkVlJrUmphMGx6VTFWR1FsTlRlRWhSVlVaSVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZW5SYVVWVk9lVkZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEdVVlZHUmt4RlRrSlJWVTAzVjFWR1JrMHdTWE5VTUVaQ1ZIbDRTRkZWUmtoTVJYUkNVVlZ6YzFOVlJrSlRVM2hHVVZWR1JrOHlaRU5SVlU1eFVXbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelZqQkdRbFo1ZUVSUlZVWkVURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzV2pCS1FsRXpjRVJNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTF6VWxWR1FsSlVkSFpSYTBaRVZrTjRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhJVVZWR1NFeEZaRUpSVldOelVUQkdRbEY2ZEhaUmEwWkVZbXRKYzFRd1JrSlVlWGhLVVZWR1NreEZUa0pSVlUwM1lWVktRbEV5V1RkalZVcENVVEJyTjJJd1NrSlJNRkZ6VTFWR1FsTlRlRVJSVlVaRVRFWldRbEZXVlhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNZakJLUWxGNlJrTk1SV1JDVVZWamMxSXdSa0pTZVhoSVVWVkdTRXhGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJ3VVd0R1JFOVZTVGRaVlVaRVUycDBXbEZWVmtWTVJUbENVVlU0YzFOVlJrSlRVM2hFVVZWR1JFOHhSa0pSTW1oRFRFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVGRFZFVhWGhFVVZWR1JFOHdiRUprYTJ4SVRFaGtRMUZWUmt4TVJXUkNVVlYzTjFWVlJrUlRVM2hLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMFVsRlZUbk5SYVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVG5OUmFYaEVVVlZHUkU4d2JFSlJWVVZ6VVRCR1FsRjZkRXBSVldSSFRFaFdRMUZWUmtwTVJXUkNVVlZ2YzFaVlJrSlRlWGhLVVZWR1NrOHhSa0pSTUhkelUxVkdRbE5UZUVoUlZVWklURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVuUlNVVlZXZVZGcGVGQlJWVVpRVEVWa1FsRlZZM05UTUVaQ1UzbDRTbEZWUmtwTVJWWkNVVlZWTjFkVlJrUmhhMGx6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SbVJDVVZaamMxRXdSa0pSZVhoS1VWVkdTa3hGVmtKUlZWVnpVakJHUWxKNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1XeENVVE53UkV4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOU1ZVWkNVbFIwYmxGclJrUldRM2hRVVZWR1VFeEZaRUpSVldOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRUZFpWVVpFWW10Sk4yRlZTa0pSTUdzM1dqQktRbEV3VVhOU01FWkNVbmw0U0ZGVlJraE1SV1JDVVZWamMxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1rWkNVWHBzUTA4eFRrSlJNRzgzVlZWR1JsSkRlRkJSVlVaUVRFVnNRbEZWYTNOUk1FWkNVWHAwU2xGVlRtOVJhWGhFVVZWR1JFOHdiRUpSVlVWelVUQkdRbEY2ZEVwUldGWkRVbWwzTWxGclJrSldVM2hJVVZWR1YweEdWa0pSVm1OelUxVkdRbE5VZEZKUlZVNVpURVU1UWxGVk9ITlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFWmtRbEZXWTNOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVhrNVJFeEZUa0pSVlUwM1UxVkdRbEZUZUVSUlZVWkVUekJzUWxJd1dYTk9hMHBDVVZaVmMxSXdSa0pXYVhoV1VWVkdXRXhGYkVKUlZXczNWVlZHUkZkRGVFcFJWVVpLVEVWa1FsRlZZM05TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFZd1JrSldlWGhFVVZWR1JFOHhSa0pTVkU1RFRFWk9RbEZXVFhOV01FWkNWbmw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRTh4YkVKUk0wcERURVU1UWxGVk9ITlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1NVVXbDRSRkZWUmtSUE1VWkNVbFZSYzFRd1JrSlVlWGhLVVZWR1NreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZzUWxGVmEzTlNWVVpDVWxONFdGRlZSbGhNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZOZUZGNWVFUlJWVVpFVHpCc1FsRlZSWE5STUVaQ1VYcDBTbEZWWkVkTVNFNURVVlZHU0V4RlpFSlJWV2MzVlZWR1JGTlRlRXBSVlVaS1RFVmtRbEZWWTNOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRTh4UmtKUk0wcERURVZzUWxGVmEzTlNNRVpDVW5sNFRGRlZSa3hNUld4Q1VWVnJjMUpWUmtKU1ZIUmFVVlZPYTB4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVR6Rk9RbEV5V1RkVlZVWkdVa040VUZGVlJsQk1SV1JDVVZWamMxRXdSa0pSZVhoS1VWVkdTa3hGZEVKUlZYTnpVMVZHUWxOVGVFWlJWVVpHVHpGc1FsRXpVa05NUldSQ1VWVmpjMUl3UmtKU2VYaElVVlZHU0V4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVR6Rk9RbEV5ZUVOUE1VWkNVbFZSYzFRd1JrSlVlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVUekJzUWxFelFrTk1SVTVDVVZWTk4xTlZSa0pSVTNoRVVWVkdSRTh3YkVKU01GbHpZekJLUWxGVlkzTlNNRVpDVTBSMFVsRlZUa3BNUld4Q1VWVnJjMUl3UmtKU2VYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFRkVlZVWkVZMnRKYzFOVlJrSlRVM2hJVVZWR1NFeEZkRUpSVlhOelUxVkdRbE5UZUVaUlZVWkdUekZzUWxFeVVYTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5OMVV3UmtSYWFuUlNVVlZXUlV4Rk9VSlJWVGh6VWpCR1FsSjVlRVJSVlVaRVRFVjBRbEZWYzNOVE1FWkNVM2w0U2xGVlJrcE1SVlpDVVZWVk4xZFZSa1JrYTBselVqQkdRbEo1ZUVoUlZVWklURVZrUWxGVlkzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5OMVV3UmtSaWEwazNWVlZHUmxKRGVGQlJWVVpRVEVWa1FsRlZZM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOTjFOVlJrUmpSVWx6VVRCR1FsRjZkRXBSVlVaQ1RFVk9RbEZWVFRkVFZVWktVbWwzZVZGclJrSlZVM2hJVVZWR1UwOHhSa0pSTUd0elZEQkdRbFI1ZUVwUlZVWktURVpHUWxGV1JYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUktVVlZOTlZGcGVFUlJWVVpFVHpCc1FsRlZSWE5STUVaQ1VYcDBTbEZWWkVkTVNGWkRVVlZHU2t4RlpFSlJWVzl6VmxWR1FsTjVlRVpSVlVaR1R6RkdRbEV3WjNOVFZVWkNVMU40UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVbFZHUWxKVGVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVFhaUmFYaFFVVlZHVUV4RlRrSlJWVTF6VTFWR1FsTlRlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZWVmMxRXdSa0pSZVhoTVVWVkdURXhGYkVKUlZXdHpVbFZHUWxKVWRGcFJWVTV2VVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzVlRCR1JGZHFkRXBSVlU1TlRFVk9RbEZWVFRkVFZVWkNVVk40UkZGVlJrUlBNR3hDVWpCWmMyUXdTa0pSVlhOelVqQkdRbFJEZUZaUlZVWk9URVZXUWxGVlZUZFZWVVpFVTJsNFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlVaR1RFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUlBNVVpDVVhrNVEweEZPVUpSVlRoelVUQkdRbEY1ZUVwUlZVWktURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JNUld4Q1VWVnJjMUpWUmtKU1UzaEVVVlZHUkV4RmRFSlJWWE56VTFWR1FsTlRlRVpSVlVaR1R6RnNRbEV5YUVSTVJWWkNVVlZWYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVNWhUekJzUWxFd2QzTlJNRVpDVVhwMFNsRlZSa0pNUlU1Q1VWVk5OMU5WUmtoU2FYZzFVV3RHUWxSVGVFaFJWVVpQVEVaV1FsRlZPSE5UVlVaQ1UxTjRSbEZWUmtaTVJXUkNVVlZqTjFWVlJrUlhhWGhLVVZWR1NreEZaRUpSVldOelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JQTVVaQ1VUTktRMHhGYkVKUlZXdHpVMVZHUWxOVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJWWkNVVlZWYzFFd1JrSlJlblJTVVZWVmVsRnBlRkJSVlVaUVRFVmtRbEZWWTNOVE1FWkNVM2w0U2xGVlJrcE1SVlpDVVZWVk4xZFZSa1JoYTBselUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUm1SQ1VWWmpjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVROd1JFeEZiRUpSVld0elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlNWVVpDVWxSMGJsRnJSa1JXUTNoS1VWVkdTa3hGVGtKUlZVMXpWREJHUWxSNWVFaFJWVVpJVEVWa1FsRlZZM05STUVaQ1VYcDBibEZyUmtSaWEwbHpWREJHUWxSNWVFcFJWVVpLVEVWT1FsRlZUVGRaVlVaRVdtcDBXbEZWVGtWTVJXeENVVlZyYzFFd1JrSlJlWGhXVVZWR1ZreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VYcEdRMHhGWkVKUlZXTnpVakJHUWxKNWVFaFJWVVpJVEVWT1FsRlZUWE5WTUVaQ1ZYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVMDFVV3AwVWxGVlZrVk1SWFJDVVZWemMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVaV1FsRldWWE5STUVaQ1VYbDRUbEZWUms1TVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZOMWRWUmtSaVJWRnpVakJHUWxKNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR1ZyU1hOVFZVWkNVMU40U0ZGVlJraE1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJWWkNVVlZWTjFvd1NrSlJNM0JEVEVWc1FsRlZhM05STUVaQ1VYbDRVRkZWUmxCTVJXUkNVVlZqYzFJd1JrSlNlWGhFVVZWR1JFOHlaRU5SVlU1MVVXbDRTbEZWUmtwTVJVNUNVVlZOYzFaVlJrSldVM2hFVVZWR1JFeEZNVUpSVlRCelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZGFNRXBDVVhwT1EweEZPVUpSVlRoelUxVkdRbE5UZUVSUlZVWkVUekpHUWxFeVdUZFZNRVpFVTJwMFVsRlZWa1ZNUld4Q1VWVnJjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VkZWR1FsUlRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRYcFJhWGhRVVZWR1VFeEZiRUpSVld0elVUQkdRbEY2ZEVwUlZVNXZVV2w0UkZGVlJrUlBNR3hDVVZWRmMxRXdSa0pSZW5SS1VWVk9UMHhIVmtKUlZVMDNVVlZHUWxKRGVFUlJWVVpFVEVWR1FrNVZiRVZNUld4Q1RrVnNSRTh3UmtKT1ZXeGFURVJTUTFGVlJsSlBNRVpDVG10c2VWRnFkRXBSVld4S1RFZDBRMUZWUmxwTVJXeENVVlZyTjFWVlJrUlhhWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMFVsRlZUbk5SYVhoS1VWVkdTa3hGVGtKUlZVMXpWbFZHUWxaVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVG5sUmFYaEtVVlZHU2t4RlRrSlJWVTF6VkRCR1FsUjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWHAwU2xGVlRqUlJhWGhFVVZWR1JFOHdiRUpTVlZGelpGVktRbEZWYTNOU01FWkNVMnAwVWxGVlRrcE1SVGxDVVZVNGMxTlZSa0pUVTNoRVVWVkdSRXhGT1VKUlZUaHpVekJHUWxONWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5OMU5WUmtST1ZWRnpVVEJHUWxGNmRFcFJWVVpDVEVWT1FsRlZUVGRUVlVaS1VtbDRNVkZyUmtKVFUzaElVVlZHUzA4eFJrSlJNR3R6VTFWR1FsTlRlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0VEZGVlJreE1SV3hDVVZWcmMxSlZSa0pTVkhSYVVWVk9NbEZwZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjZkRnBSVlUweFVXbDRTbEZWUmtwTVJXeENVVlZyYzFNd1JrSlRlWGhLVVZWR1NreEZWa0pSVlZVM1dqQktRbEV5V1hOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNmRHaFJWVTR5VVdwMFZGRlZUa3RQTWtaQ1VUQnJOMWRWUmtSU1EzaEtVVlZHU2t4RmJFSlJWV3R6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOVE1FWkNVM2w0VEZGVlJreE1SV3hDVVZWcmMxSlZSa0pTVkhSdVVXdEdTRTR3U1hOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTk4xb3dTa0pSTVZGelVqQkdRbEo2ZEhaUmEwWkVVWGw0U2xGVlJrcE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNmRIWlJhMFpFWTBWSmMxTlZSa0pUVTNoS1VWVkdTa3hGVGtKUlZVMXpWbFZHUWxaVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsUjBNMUZyUmtSbFJVbHpVMVZHUWxOVGVFUlJWVVpFVEVVNVFsRlZPSE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOYzFaVlJrSldVM2hFVVZWR1JFeEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUek5HUTFGVlRqUlJlblExVVd0R1JGTlVkRE5SYTBaRVVrTjRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY2ZEROUmEwWkVZMFZKYzFSVlJrSlVWSFI0VVd0R1JGWkVkSEJSYTBaRVUybDRVbEZWUmxKTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelV6QkdRbE41ZUV4UlZVWk1URVZzUWxGVmEzTlNWVVpDVWxSMGFGRlZUalpSZW5Sd1VXdEdSRk5VZEc1UmEwWkdVa040U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOTjFvd1NrSlJNalZFVEVWc1FsRlZhM05STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwMGFGRlZUbmxSZW5SVVVWVk9TMDh4UmtKUk1GRnpWREJHUWxSNWVFcFJWVVpLVEVWT1FsRlZUWE5VTUVaQ1ZIbDRURkZWUmt4TVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjZkRXBSVlUweFVrTjRSRkZWUmtSUE1HeENVVlZGYzFFd1JrSlJlblJLVVZWc1IweElWa05SVlVaS1RFVmtRbEZWYnpkVlZVWkVVMU40U2xGVlJrcE1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGZEVKUlZYTnpVMVZHUWxOVGVFWlJWVVpHVHpGc1FsRXpXa05NUld4Q1VWVnJjMU5WUmtKVFUzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUlBNV3hDVVhwV1EweEZiRUpSVld0elUxVkdRbE5UZUV4UlZVWk1URVZzUWxGVmEzTlNWVVpDVWxSMGJsRnJSa1JhYVhoS1VWVkdTa3hGVGtKUlZVMXpWVlZHUWxWVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1rWkNVVE5hUTA4eFRrSlJNRzgzV1ZWR1JGTlVkRnBSVlU1RlRFVnNRbEZWYTNOVFZVWkNVMU40UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoS1VWVkdTa3hGZEVKUlZYTnpVMVZHUWxOVGVFWlJWVVpHVHpKa1ExRlZUVEZSYVhoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNmRHNVJhMFpFVmtONFNGRlZSa2hQTWpsRFVWVk9SRXhGYkVKUlZXdHpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSUE1qbERVVlZPZDFGcGVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRWbEZWUmxaTVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWR1JrOHpaRU5SVlU0MFVXbDRTbEZWUmtwTVJVNUNVVlZOYzFRd1JrSlVlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pNUlU1Q1VWVk5OMk5WU2tKUk0yaEVUek5zUTFGVlRrcFBNMlJEVVZWT1JVeEZiRUpSVld0elVUQkdRbEY1ZUZCUlZVWlFURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JQTTJSRFVWVk9kMUZwZUU1UlZVWk9Uek5HUTFGVlRsVlBNbXhEVVZWT1MweEdSa0pSVmtWelUxVkdRbE5UZUVSUlZVWkVURVU1UWxGVk9ITlJNRVpDVVhsNFNsRlZSa3BNUlhSQ1VWVnpjMU5WUmtKVFUzaEdVVlZHUms4eVJrSlJNMmhFVHpKc1ExRlZUa3BQTW1SRFVWVk9SVXhGYkVKUlZXdHpVVEJHUWxGNWVGWlJWVVpXVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVZbXROYzFOVlJrSlRVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkU4eVJrSlJNMEpFVHpGT1FsRXdiemRWVlVaRVVrTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZkRUpSVlhOelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUlBNR3hDVVhwV1JVeEZUa0pSVlUwM1UxVkdRbEZUZUVSUlZVWkVUekJzUWxKVldYTk5hMHBDVVZaRmMxSXdSa0pWYVhoV1VWVkdWRXhGZEVKUlZYTTNWVlZHUkZacGVGQlJWVVpRVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJYUkNVVlZ6YzFOVlJrSlRVM2hHVVZWR1JrOHhiRUpSTTJoRFRFVnNRbEZWYTNOUk1FWkNVWGw0VmxGVlJsWk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRjZWa05NUlhSQ1VWVnpjMUl3UmtKU2VYaE1VVlZHVEV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVR6Rk9RbEV6VWtOUE1VWkNVVEJSYzFOVlJrSlRVM2hFVVZWR1JFeEZPVUpSVlRoelVqQkdRbEo1ZUV4UlZVWk1URVZPUWxGVlRUZFRWVVpFWld0SmMxRXdSa0pSZW5SS1VWVkdRa3hGVGtKUlZVMDNVMVZHUmxKcGQzbFJhMFpDVlZONFNGRlZSbE5NUmxaQ1VWWk5jMU13UmtKVGVuUlNVVlZPVjB4Rk9VSlJWVGh6VXpCR1FsTjVlRVJSVlVaRVRFVjBRbEZWYzNOVE1FWkNVM2w0U2xGVlJrcE1SVlpDVVZWVk4xZFZSa1JsYTBselUxVkdRbE5UZUVSUlZVWkVURVpXUWxGV1ZYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JFNVZTWE5UTUVaQ1UzbDRTRkZWUmtoTVJYUkNVVlZ6YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUwM1ZUQkdSR1JyU1RkVlZVWkVVa040U2xGVlJrcE1SVTVDVVZWTmMxUXdSa0pVZVhoSVVWVkdTRXhGZEVKUlZYTnpVVEJHUWxGNmRFcFJWVTQyVVdsNFJGRlZSa1JQTUd4Q1VWVkZjMUV3UmtKUmVuUktVVlZPVDB4SFZrSlJWVTAzVVZWR1FsSkRlRVJSVlVaRVRFVkdRazlWV2tWTVJXeENUMFZhUkU4d1JrSlBWVnBhVEVSU1ExRlZSbEpQTUVaQ1dqQmtlVkZxZEVwUlZYUktURWRPUWxGV2EzTlRWVVpDVTFSMFVsRlZUbUZNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6RkdRbEV5Y0VOTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVUekZHUWxFeWNFTk1SV3hDVVZWcmMxRXdSa0pSZVhoTVVWVkdURXhGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVHpGR1FsRXllRU5NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6QnNRbEV6UWtOTVJVNUNVVlZOTjFOVlJrWlNRM2d6VVd0R1FsVjVlRWhSVlVaVlRFWldRbEZXVlhOU01FWkNVbnAwVWxGVlRsVk1SVGxDVVZVNGMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVUekJzUWxFemFFUk1SVTVDVVZWTk4xTlZSa0pSVTNoRVVWVkdSRTh3YkVKU1ZWbHpaREJLUWxGV1RYTlNNRVpDVmtONFZsRlZSbFpNUldSQ1VWVmpjMUpWUmtKU1UzaElVVlZHU0U4eFJrSlJNbEZ6VTFWR1FsTlRlRWhSVlVaSVRFVldRbEZWVlRkWFZVWkVWRU40U2xGVlJrcE1SVTVDVVZWTmMxTXdSa0pUZVhoSVVWVkdTRXhGWkVKUlZXTnpVVEJHUWxGNmRGUlJWVTUzVVdwMGFGRlZUa3BQTVd4Q1VUQlJjMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VWpCR1FsSjVlRWhSVlVaSVRFVk9RbEZWVFRkVk1FWkVZbXRKTjFOVlJrUlVRM2hFVVZWR1JFOHdiRUpSVlVWelVUQkdRbEY2ZEVwUlZVNVBURVprUWxGVlRUZFJWVVpDVWtONFJGRlZSa1JNUlVaQ1pVVktSVXhGYkVKa01FcEVUekJHUWxKVlVUZFRWVVpDU3pCSmMwMUZTa0pSVmtVM1UxVkdUR0pyVFhOYU1FcENVVlpyYzFaVlJrSmhNRTAzVlZWR1FrOVZUWE5YVlVaRVUxTjRjRkZyUmtKVWVYaFVVVlZzVjA4eFJrSlRSV056VXpCR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTk4xVlZSa1JpUlVselV6QkdRbE5UZUVSUlZVWkVURVprUWxGV1kzTlNNRVpDVW5sNFZsRlZSbFpNUlU1Q1VWVk5OMVZWUmtSUFZVbHpVekJHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjA4d2JFSlJNbmhEVEVWT1FsRlZUVGRUVlVaSVVrTjRNVkZyUmtKVVUzaElVVlZHVDB4R1ZrSlJWVGh6VTFWR1FsTlVkRkpSVlU1UlRFVnNRbEZWYTNOU01FWkNVbmw0U0ZGVlJraE1SWFJDVVZWemMxRXdSa0pSZW5SU1VWVldiMUZwZUVwUlZVWktURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlhSQ1VWVnpjMU5WUmtKVFUzaEdVVlZHUms4eGJFSlNXRXBEVEVWc1FsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFVGxWSmMxSXdSa0pTZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGcFJWVTVaVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJWWkNVVlZWYzFFd1JrSlJlblJVVVZWT2JVOHlSa0pSTUdzM1YxVkdSRkpEZUVwUlZVWktURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUld4Q1VWVnJjMUV3UmtKUmVYaFVVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlZWMlVXbDRTbEZWUmtwTVJXUkNVVlZqYzFJd1JrSlNlWGhNVVZWR1RFeEZUa0pSVlUwM1YxVkdSR0ZGU1hOVFZVWkNVMU40U2xGVlJrcE1SV1JDVVZWamMxTXdSa0pUZVhoRVVWVkdSRTh4YkVKU01uQkRURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUmFVVlZPYTB4RmJFSlJWV3R6VWpCR1FsSjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWHAwV2xGVlRtMU1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGcFJWVTVwVEVWc1FsRlZhM05UVlVaQ1UxTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUwM1YxVkdSR1JGU1hOU01FWkNVbmw0UkZGVlJrUk1SWFJDVVZWemMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVHpGc1FsSXpXa05NUlRsQ1VWVTRjMU5WUmtKVFUzaEdVVlZHUms4eVpFTlJWVTVWVEVWc1FsRlZhM05UVlVaQ1UxTjRURkZWUmt4TVJXeENVVlZyYzFKVlJrSlNWSFIyVVd0R1JscHBlRXBSVlVaS1RFVmtRbEZWWTNOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNZakJLUWxFelVrTk1SVTVDVVZWTmMxRXdSa0pSZVhoVVVWVkdWRXhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUE1qbERVVlZPTWxGcGVFaFJWVVpJVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSUE1qbERVVlZPV1V4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVldRbEZWVlhOUk1FWkNVWHAwY0ZGclJrUmFhblI0VVd0R1JGTlRlRXBSVlVaS1RFVXhRbEZWTUhOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVVeFFsRlZNSE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVaUlZVWkdUekk1UTFGVlZURlNRM2hLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMGRsRnJSa1JoUlVselUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUldSQ1VWVmpjMU13UmtKVGVYaEVVVlZHUkU4eU9VTlJWVTR3VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlpFSlJWV056VWpCR1FsSjVlRXhSVlVaTVRFVk9RbEZWVFRkaFZVcENVWHBHUTA4eVpFTlJWV1JGVEVWc1FsRlZhM05VVlVaQ1ZGTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUU1UlZVWk9URVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUms4eU9VTlJWVTQyVVhsNFNsRlZSa3BNUld4Q1VWVnJjMUl3UmtKU2VYaElVVlZHU0V4RlRrSlJWVTF6VXpCR1FsTjVlRXhSVlVaTVRFVldRbEZWVlhOUk1FWkNVWHAwZGxGclJrWk9WVWx6VTFWR1FsTlRlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVbFZHUWxKVWRETlJhMFpFVGxWSmMxSXdSa0pTZVhoRVVWVkdSRXhHVGtKUlZrMXpVVEJHUWxGNWVFcFJWVVpLVEVWV1FsRlZWWE5VVlVaQ1ZGTjRSRkZWUmtSTVIwWkNVVmRGYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTTBaRFVWVk9ORkpFZERWUmEwWkVVMVIwTTFGclJrUlNRM2hJVVZWR1NFeEZUa0pSVlUxelZUQkdRbFY1ZUVSUlZVWkVURVZzUWxGVmEzTlNWVVpDVWxONFRsRlZSazVNUlU1Q1VWVk5jMWxWUmtKWlUzaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4yTlZTa0pSTTJoRlR6SnNRMUZWVGt0UE1tUkRVVlZXUlV4RmJFSlJWV3R6VWpCR1FsSjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0V0ZGVlJsaE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVbFZHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYcDBibEZyUmtoT1ZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRSbEZWUmtaUE1qbERVVlZPV1V4Rk1VSlJWVEEzWVZWS1FsRXhVVGRhTUVwQ1VsVlJjMU5WUmtKVFUzaElVVlZHU0V4RlpFSlJWV056VVRCR1FsRjZkRzVSYTBaRVYwTjRTRkZWUmtoTVJXUkNVVlZqYzFJd1JrSlNlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWklXa040U2xGVlJrcE1SVlpDVVZWVmMxTXdSa0pUZVhoS1VWVkdTa3hGVmtKUlZWVTNZakJLUWxFeVNYTlNNRVpDVW5sNFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuUndVV3RHUkZkcWRHNVJhMFpFVWtONFJsRlZSa1pNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWVTVSVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOTjFvd1NrSlJNVkZ6VTFWR1FsTlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNXVlZHUkU5VlNUZFhWVVpJVWtONFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFRkVk1FWkVUVEJKTjFWVlJraFNRM2hLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZrUWxGVlkzTlNNRVpDVW5sNFRGRlZSa3hNUlU1Q1VWVk5OMVZWUmtaa2EwbHpWREJHUWxSNWVFaFJWVVpJVEVWT1FsRlZUVGRUVlVaRVdtbDRSRkZWUmtSUE1HeENVVlZGYzFFd1JrSlJlblJLVVZWa1IweElWa05SVlVaT1RFVmtRbEZWTkhOV1ZVWkNWSGw0U2xGVlJrcFBNVVpDVVRGQmMxTlZSa0pUVTNoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFeFJWVVpNVEVWc1FsRlZhM05TVlVaQ1VsUjBXbEZWVG5sUmFYaFFVVlZHVUV4RmRFSlJWWE56VVRCR1FsRjZkRlJSVlU1dlVXcDBVbEZWVmtWTVJXeENVVlZyYzFOVlJrSlRVM2hJVVZWR1NFeEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVpPUWxGV1RYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VYazVRMHhGYkVKUlZXdHpVMVZHUWxOVGVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYcDBVbEZWVG05UmFYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTk4xVlZSa1JsUlVselUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JQTVVaQ1VUSkpjMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6RkdRbEV5VVhOVFZVWkNVMU40VEZGVlJreE1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4UmtKUk1uQkRURVZzUWxGVmEzTlNNRVpDVW5sNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVuUlNVVlZXYlV4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxTXdSa0pUZVhoS1VWVkdTa3hGVmtKUlZWVTNWMVZHUkdGclRYTlRWVVpDVTFONFNsRlZSa3BNUldSQ1VWVmpjMUl3UmtKU2VYaEVVVlZHUkU4eGJFSlNNbGx6VWxWR1FsSlRlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwV2xGVlRsRk1SVTVDVVZWTmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMDNWMVZHUkZaRGVFcFJWVVpLVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZWVjZVV2w0U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpWakJHUWxaNWVFUlJWVVpFVEVWc1FsRlZhM05TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUwM1YxVkdSazVWVFhOU01FWkNVbmw0U0ZGVlJraE1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHU0ZwRGVFcFJWVVpLVEVWa1FsRlZZM05UTUVaQ1UzbDRSRkZWUmtSTVJWWkNVVlZWTjFvd1NrSlJNV2R6VXpCR1FsTjVlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWHAwYUZGVlRtOVJhblJhVVZWa1JVeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWVGRhTUVwQ1VYcGtSVXhGYkVKUlZXdHpWRlZHUWxSVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFVd1JrSlZlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxSMGRsRnJSa1JqYTAxelUxVkdRbE5UZUVaUlZVWkdURVZrUWxGVlkzTlVWVVpDVkZONFJGRlZSa1JNUjBaQ1VWZEZjMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkaU1FcENVVE53UkV4RlRrSlJWVTF6VVRCR1FsRjVlRlJSVlVaVVRFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRTh5T1VOUlZVNHdVV2w0UkZGVlJrUk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh5YkVOUlZVNVhUek5HUTFGVlRrcE1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRWRkZWUmxSTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdUekk1UTFGVlRYcFJlWGhLVVZWR1NreEZPVUpSVlRoelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlZNRVpDVlhsNFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzWWpCS1FsRXljRVJNUld4Q1VWVnJjMVF3UmtKVWVYaE1VVlZHVEV4RmJFSlJWV3R6VWxWR1FsSlVkRE5SYTBaRVlrVkpjMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZSUlZVWlVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1ZITXdVV3RHUm1OcldYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUl3UmtKU2VYaE1VVlZHVEV4RlRrSlJWVTAzVGtWS1FsRXlVWE5VTUVaQ1ZIbDRSRkZWUmtSTVJXUkNVVlZqYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUwM1RrVktRbEV5TlVOTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVUek5zUTFGVlRuVlJhbk15VVd0R1JGTlVjekJSYTBaRVVrTjRTbEZWUmtwTVJXeENVVlZyYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelV6QkdRbE41ZUV4UlZVWk1URVZPUWxGVlRYTlJNRVpDVVhwek1GRnJSa1pOVlVselUxVkdRbE5UZUU1UlZVWk9URVZPUWxGVlRYTlVWVVpDVkZONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaFVVVlZHVkV4RlRrSlJWVTF6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbFIwYmxFd1JrUmxSVTF6VWxWR1FsSlRlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZWVmMxUlZSa0pVVTNoRVVWVkdSRXhIUmtKUlYwVnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlbk15VVd0R1JHTnJVVGRoVlU1Q1VUQnJjMU5WUmtKVFUzaE9VVlZHVGt4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVHpKa1JGRlZUVFZSZVhoR1VWVkdSa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVWc1FsRlZhM05TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFsVlJrSlpVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQZWxwRFVWVk9lVkpFY3pCUmEwWklVa040U2xGVlJrcE1SV1JDVVZWamMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSUGVsSkRVVlZOTTFGcGVFaFJWVVpJVEVWT1FsRlZUWE5TTUVaQ1VubDRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlbk13VVd0R1JGcHBlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZW5Nd1VXdEdSR0ZGU1hOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVDNwU1ExRlZUbmxSYVhoSVVWVkdTRXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWa1FsRlZZM05TTUVaQ1VubDRURkZWUmt4TVJVNUNVVlZOTjJWVlNrSlJNM0JEVHpOR1ExRlZUa3RQTW14RFVWVk9TMDh5UmtKUk1HODNWVEJHUkZOcWRGSlJWV1JGVEVWc1FsRlZhM05UTUVaQ1UzbDRURkZWUmt4TVJXeENVVlZyYzFKVlJrSlNWSFJhVVZWT2IxRnBlRXhSVlVaTVRFVk9RbEZWVFhOVFZVWkNVMU40U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMDNWMVZHUkdSclNYTlJNRVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VXpCR1FsTjVlRXhSVlVaTVRFVnNRbEZWYTNOU1ZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWMFFsRlZjM05UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWT2MxSlRlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40UmxGVlJrWk1SVTVDVVZWTk4xVXdSa1JhYW5SU1VWVmtSVXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlblJTVVZWT05GRnBlRXBSVlVaS1RFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SWFJDVVZWemMxTlZSa0pUVTNoR1VWVkdSazh4YkVKUk0wcERURVZzUWxGVmEzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMUl3UmtKU2VYaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjZkRlJSVlUxNFVXcDBVbEZWVmtWTVJUbENVVlU0YzFNd1JrSlRlWGhNVVZWR1RFeEZiRUpSVld0elVUQkdRbEY2ZEVwUlZVMTRVV2w0UkZGVlJrUlBNR3hDVVZWRmMxRXdSa0pSZW5SS1VWVldURXhIUmtKUlZUQnpVakJHUWxscGVGWlJWVVpxVEVWc1FsRlZhemRWVlVaRVdrTjRVRkZWUmxCTVJXeENVVlZyYzFNd1JrSlRlWGhLVVZWR1NreEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhwMFNsRlZUbmxSZVhoRVVWVkdSRTh3YkVKU1ZUQnpZakJLUWxGWFJYTlNNRVpDWTBWSmMxWlZSa0pqVlVselUxVkdRbE5UZUVaUlZVWkdURVZrUWxGVll6ZFZWVVpFVFZWSmMxTlZSa0pUVTNoS1VWVkdTa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pTVjJoRVRFVnNRbEZWYTNOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVaT1FsRldUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSZWtaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxSXdSa0pTZVhoR1VWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsSlVSa05NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVR6RkdRbEV5YUVOTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZaRUpSVldOelV6QkdRbE41ZUVSUlZVWkVUekZHUWxKWGNFTk1SVGxDVVZVNGMxTlZSa0pUVTNoRVVWVkdSRTh3YkVKUk1taERURVZPUWxGVlRUZFRWVVpHVkZONGRsRnJSa0paVTNoSVVWVkdkMUZwZUZaUlZVWjRVV2w0U2xGVlJrcE1SVlpDVVZWVmMxSXdSa0pTZW5SU1VWVk5lRkZwZUVwUlZVWktURVZPUWxGVlRYTlZNRVpDVlhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEdVVlZHUmt4Rk1VSlJWVEJ6VVRCR1FsRjVlR2hSVlVab1RFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT01sSlRlRkJSVlVaUVRFVXhRbEZWTUhOUk1FWkNVWGw0YUZGVlJtaE1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRjZUa1JNUlU1Q1VWVk5OMU5WUmtSVVEzaG9VVlZHUkU4d1JrSlJWVkZ6VVRCR1FsRjVlRUpSV0VwT1VrTjRSRkZWUlhKUmFYaFNVVlZHVWt4RlpFSmpWVEV3VVhwMFFsRllTazVYVTNnelVXdEdRbFJUU2praUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJmWDJWNGRHVnVaSE1nUFNBb2RHaHBjeUFtSmlCMGFHbHpMbDlmWlhoMFpXNWtjeWtnZkh3Z0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnWlhoMFpXNWtVM1JoZEdsamN5QTlJR1oxYm1OMGFXOXVJQ2hrTENCaUtTQjdYRzRnSUNBZ0lDQWdJR1Y0ZEdWdVpGTjBZWFJwWTNNZ1BTQlBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2g3SUY5ZmNISnZkRzlmWHpvZ1cxMGdmU0JwYm5OMFlXNWpaVzltSUVGeWNtRjVJQ1ltSUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3SUdRdVgxOXdjbTkwYjE5ZklEMGdZanNnZlNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3SUdadmNpQW9kbUZ5SUhBZ2FXNGdZaWtnYVdZZ0tHSXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NDa3BJR1JiY0YwZ1BTQmlXM0JkT3lCOU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYaDBaVzVrVTNSaGRHbGpjeWhrTENCaUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvWkN3Z1lpa2dlMXh1SUNBZ0lDQWdJQ0JsZUhSbGJtUlRkR0YwYVdOektHUXNJR0lwTzF4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCZlh5Z3BJSHNnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaUE5SUdRN0lIMWNiaUFnSUNBZ0lDQWdaQzV3Y205MGIzUjVjR1VnUFNCaUlEMDlQU0J1ZFd4c0lEOGdUMkpxWldOMExtTnlaV0YwWlNoaUtTQTZJQ2hmWHk1d2NtOTBiM1I1Y0dVZ1BTQmlMbkJ5YjNSdmRIbHdaU3dnYm1WM0lGOWZLQ2twTzF4dUlDQWdJSDA3WEc1OUtTZ3BPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dWRtRnlJSFp3YzJOZk1TQTlJSEpsY1hWcGNtVW9YQ0l1TDNad2MyTmNJaWs3WEc1MllYSWdjbUowY21WbFh6RWdQU0J5WlhGMWFYSmxLRndpTGk5eVluUnlaV1ZjSWlrN1hHNW1kVzVqZEdsdmJpQmpiMjF3ZFhSbFIzSnZkWEJDYjNWdVpITW9aeWtnZTF4dUlDQWdJR2N1WW05MWJtUnpJRDBnZEhsd1pXOW1JR2N1YkdWaGRtVnpJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDljYmlBZ0lDQWdJQ0FnWnk1c1pXRjJaWE11Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2h5TENCaktTQjdJSEpsZEhWeWJpQmpMbUp2ZFc1a2N5NTFibWx2YmloeUtUc2dmU3dnVW1WamRHRnVaMnhsTG1WdGNIUjVLQ2twSURwY2JpQWdJQ0FnSUNBZ1VtVmpkR0Z1WjJ4bExtVnRjSFI1S0NrN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbkxtZHliM1Z3Y3lBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlsY2JpQWdJQ0FnSUNBZ1p5NWliM1Z1WkhNZ1BTQm5MbWR5YjNWd2N5NXlaV1IxWTJVb1puVnVZM1JwYjI0Z0tISXNJR01wSUhzZ2NtVjBkWEp1SUdOdmJYQjFkR1ZIY205MWNFSnZkVzVrY3loaktTNTFibWx2YmloeUtUc2dmU3dnWnk1aWIzVnVaSE1wTzF4dUlDQWdJR2N1WW05MWJtUnpJRDBnWnk1aWIzVnVaSE11YVc1bWJHRjBaU2huTG5CaFpHUnBibWNwTzF4dUlDQWdJSEpsZEhWeWJpQm5MbUp2ZFc1a2N6dGNibjFjYm1WNGNHOXlkSE11WTI5dGNIVjBaVWR5YjNWd1FtOTFibVJ6SUQwZ1kyOXRjSFYwWlVkeWIzVndRbTkxYm1Sek8xeHVkbUZ5SUZKbFkzUmhibWRzWlNBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdablZ1WTNScGIyNGdVbVZqZEdGdVoyeGxLSGdzSUZnc0lIa3NJRmtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0SUQwZ2VEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1WUlEMGdXRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTVJRDBnZVR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVaSUQwZ1dUdGNiaUFnSUNCOVhHNGdJQ0FnVW1WamRHRnVaMnhsTG1WdGNIUjVJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2JtVjNJRkpsWTNSaGJtZHNaU2hPZFcxaVpYSXVVRTlUU1ZSSlZrVmZTVTVHU1U1SlZGa3NJRTUxYldKbGNpNU9SVWRCVkVsV1JWOUpUa1pKVGtsVVdTd2dUblZ0WW1WeUxsQlBVMGxVU1ZaRlgwbE9Sa2xPU1ZSWkxDQk9kVzFpWlhJdVRrVkhRVlJKVmtWZlNVNUdTVTVKVkZrcE95QjlPMXh1SUNBZ0lGSmxZM1JoYm1kc1pTNXdjbTkwYjNSNWNHVXVZM2dnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQW9kR2hwY3k1NElDc2dkR2hwY3k1WUtTQXZJREk3SUgwN1hHNGdJQ0FnVW1WamRHRnVaMnhsTG5CeWIzUnZkSGx3WlM1amVTQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUNoMGFHbHpMbmtnS3lCMGFHbHpMbGtwSUM4Z01qc2dmVHRjYmlBZ0lDQlNaV04wWVc1bmJHVXVjSEp2ZEc5MGVYQmxMbTkyWlhKc1lYQllJRDBnWm5WdVkzUnBiMjRnS0hJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhWNElEMGdkR2hwY3k1amVDZ3BMQ0IyZUNBOUlISXVZM2dvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFY0SUR3OUlIWjRJQ1ltSUhJdWVDQThJSFJvYVhNdVdDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsZ2dMU0J5TG5nN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyZUNBOFBTQjFlQ0FtSmlCMGFHbHpMbmdnUENCeUxsZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY2k1WUlDMGdkR2hwY3k1NE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNCOU8xeHVJQ0FnSUZKbFkzUmhibWRzWlM1d2NtOTBiM1I1Y0dVdWIzWmxjbXhoY0ZrZ1BTQm1kVzVqZEdsdmJpQW9jaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdkWGtnUFNCMGFHbHpMbU41S0Nrc0lIWjVJRDBnY2k1amVTZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RYa2dQRDBnZG5rZ0ppWWdjaTU1SUR3Z2RHaHBjeTVaS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11V1NBdElISXVlVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWjVJRHc5SUhWNUlDWW1JSFJvYVhNdWVTQThJSEl1V1NsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlMbGtnTFNCMGFHbHpMbms3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQWdJSDA3WEc0Z0lDQWdVbVZqZEdGdVoyeGxMbkJ5YjNSdmRIbHdaUzV6WlhSWVEyVnVkSEpsSUQwZ1puVnVZM1JwYjI0Z0tHTjRLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtlQ0E5SUdONElDMGdkR2hwY3k1amVDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZ2dLejBnWkhnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11V0NBclBTQmtlRHRjYmlBZ0lDQjlPMXh1SUNBZ0lGSmxZM1JoYm1kc1pTNXdjbTkwYjNSNWNHVXVjMlYwV1VObGJuUnlaU0E5SUdaMWJtTjBhVzl1SUNoamVTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pIa2dQU0JqZVNBdElIUm9hWE11WTNrb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1NUlDczlJR1I1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbGtnS3owZ1pIazdYRzRnSUNBZ2ZUdGNiaUFnSUNCU1pXTjBZVzVuYkdVdWNISnZkRzkwZVhCbExuZHBaSFJvSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1WUlDMGdkR2hwY3k1NE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVW1WamRHRnVaMnhsTG5CeWIzUnZkSGx3WlM1b1pXbG5hSFFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGxrZ0xTQjBhR2x6TG5rN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JTWldOMFlXNW5iR1V1Y0hKdmRHOTBlWEJsTG5WdWFXOXVJRDBnWm5WdVkzUnBiMjRnS0hJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJTWldOMFlXNW5iR1VvVFdGMGFDNXRhVzRvZEdocGN5NTRMQ0J5TG5ncExDQk5ZWFJvTG0xaGVDaDBhR2x6TGxnc0lISXVXQ2tzSUUxaGRHZ3ViV2x1S0hSb2FYTXVlU3dnY2k1NUtTd2dUV0YwYUM1dFlYZ29kR2hwY3k1WkxDQnlMbGtwS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRkpsWTNSaGJtZHNaUzV3Y205MGIzUjVjR1V1YkdsdVpVbHVkR1Z5YzJWamRHbHZibk1nUFNCbWRXNWpkR2x2YmlBb2VERXNJSGt4TENCNE1pd2dlVElwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5wWkdWeklEMGdXMXQwYUdsekxuZ3NJSFJvYVhNdWVTd2dkR2hwY3k1WUxDQjBhR2x6TG5sZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnVzNSb2FYTXVXQ3dnZEdocGN5NTVMQ0IwYUdsekxsZ3NJSFJvYVhNdVdWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCYmRHaHBjeTVZTENCMGFHbHpMbGtzSUhSb2FYTXVlQ3dnZEdocGN5NVpYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGdDBhR2x6TG5nc0lIUm9hWE11V1N3Z2RHaHBjeTU0TENCMGFHbHpMbmxkWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x1ZEdWeWMyVmpkR2x2Ym5NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENBME95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeUlEMGdVbVZqZEdGdVoyeGxMbXhwYm1WSmJuUmxjbk5sWTNScGIyNG9lREVzSUhreExDQjRNaXdnZVRJc0lITnBaR1Z6VzJsZFd6QmRMQ0J6YVdSbGMxdHBYVnN4WFN3Z2MybGtaWE5iYVYxYk1sMHNJSE5wWkdWelcybGRXek5kS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeUlDRTlQU0J1ZFd4c0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVkR1Z5YzJWamRHbHZibk11Y0hWemFDaDdJSGc2SUhJdWVDd2dlVG9nY2k1NUlIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwYm5SbGNuTmxZM1JwYjI1ek8xeHVJQ0FnSUgwN1hHNGdJQ0FnVW1WamRHRnVaMnhsTG5CeWIzUnZkSGx3WlM1eVlYbEpiblJsY25ObFkzUnBiMjRnUFNCbWRXNWpkR2x2YmlBb2VESXNJSGt5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwYm5SeklEMGdkR2hwY3k1c2FXNWxTVzUwWlhKelpXTjBhVzl1Y3loMGFHbHpMbU40S0Nrc0lIUm9hWE11WTNrb0tTd2dlRElzSUhreUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVkSE11YkdWdVozUm9JRDRnTUNBL0lHbHVkSE5iTUYwZ09pQnVkV3hzTzF4dUlDQWdJSDA3WEc0Z0lDQWdVbVZqZEdGdVoyeGxMbkJ5YjNSdmRIbHdaUzUyWlhKMGFXTmxjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGNiaUFnSUNBZ0lDQWdJQ0FnSUhzZ2VEb2dkR2hwY3k1NExDQjVPaUIwYUdsekxua2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIc2dlRG9nZEdocGN5NVlMQ0I1T2lCMGFHbHpMbmtnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSHNnZURvZ2RHaHBjeTVZTENCNU9pQjBhR2x6TGxrZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhzZ2VEb2dkR2hwY3k1NExDQjVPaUIwYUdsekxsa2dmVnh1SUNBZ0lDQWdJQ0JkTzF4dUlDQWdJSDA3WEc0Z0lDQWdVbVZqZEdGdVoyeGxMbXhwYm1WSmJuUmxjbk5sWTNScGIyNGdQU0JtZFc1amRHbHZiaUFvZURFc0lIa3hMQ0I0TWl3Z2VUSXNJSGd6TENCNU15d2dlRFFzSUhrMEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa2VERXlJRDBnZURJZ0xTQjRNU3dnWkhnek5DQTlJSGcwSUMwZ2VETXNJR1I1TVRJZ1BTQjVNaUF0SUhreExDQmtlVE0wSUQwZ2VUUWdMU0I1TXl3Z1pHVnViMjFwYm1GMGIzSWdQU0JrZVRNMElDb2daSGd4TWlBdElHUjRNelFnS2lCa2VURXlPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHVnViMjFwYm1GMGIzSWdQVDBnTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMllYSWdaSGd6TVNBOUlIZ3hJQzBnZURNc0lHUjVNekVnUFNCNU1TQXRJSGt6TENCdWRXMWhJRDBnWkhnek5DQXFJR1I1TXpFZ0xTQmtlVE0wSUNvZ1pIZ3pNU3dnWVNBOUlHNTFiV0VnTHlCa1pXNXZiV2x1WVhSdmNpd2diblZ0WWlBOUlHUjRNVElnS2lCa2VUTXhJQzBnWkhreE1pQXFJR1I0TXpFc0lHSWdQU0J1ZFcxaUlDOGdaR1Z1YjIxcGJtRjBiM0k3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhJRDQ5SURBZ0ppWWdZU0E4UFNBeElDWW1JR0lnUGowZ01DQW1KaUJpSUR3OUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VEb2dlREVnS3lCaElDb2daSGd4TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNU9pQjVNU0FySUdFZ0tpQmtlVEV5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgwN1hHNGdJQ0FnVW1WamRHRnVaMnhsTG5CeWIzUnZkSGx3WlM1cGJtWnNZWFJsSUQwZ1puVnVZM1JwYjI0Z0tIQmhaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGSmxZM1JoYm1kc1pTaDBhR2x6TG5nZ0xTQndZV1FzSUhSb2FYTXVXQ0FySUhCaFpDd2dkR2hwY3k1NUlDMGdjR0ZrTENCMGFHbHpMbGtnS3lCd1lXUXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUZKbFkzUmhibWRzWlR0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGxKbFkzUmhibWRzWlNBOUlGSmxZM1JoYm1kc1pUdGNibVoxYm1OMGFXOXVJRzFoYTJWRlpHZGxRbVYwZDJWbGJpaHpiM1Z5WTJVc0lIUmhjbWRsZEN3Z1lXZ3BJSHRjYmlBZ0lDQjJZWElnYzJrZ1BTQnpiM1Z5WTJVdWNtRjVTVzUwWlhKelpXTjBhVzl1S0hSaGNtZGxkQzVqZUNncExDQjBZWEpuWlhRdVkza29LU2tnZkh3Z2V5QjRPaUJ6YjNWeVkyVXVZM2dvS1N3Z2VUb2djMjkxY21ObExtTjVLQ2tnZlN3Z2RHa2dQU0IwWVhKblpYUXVjbUY1U1c1MFpYSnpaV04wYVc5dUtITnZkWEpqWlM1amVDZ3BMQ0J6YjNWeVkyVXVZM2tvS1NrZ2ZId2dleUI0T2lCMFlYSm5aWFF1WTNnb0tTd2dlVG9nZEdGeVoyVjBMbU41S0NrZ2ZTd2daSGdnUFNCMGFTNTRJQzBnYzJrdWVDd2daSGtnUFNCMGFTNTVJQzBnYzJrdWVTd2diQ0E5SUUxaGRHZ3VjM0Z5ZENoa2VDQXFJR1I0SUNzZ1pIa2dLaUJrZVNrc0lHRnNJRDBnYkNBdElHRm9PMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lITnZkWEpqWlVsdWRHVnljMlZqZEdsdmJqb2djMmtzWEc0Z0lDQWdJQ0FnSUhSaGNtZGxkRWx1ZEdWeWMyVmpkR2x2YmpvZ2RHa3NYRzRnSUNBZ0lDQWdJR0Z5Y205M1UzUmhjblE2SUhzZ2VEb2djMmt1ZUNBcklHRnNJQ29nWkhnZ0x5QnNMQ0I1T2lCemFTNTVJQ3NnWVd3Z0tpQmtlU0F2SUd3Z2ZWeHVJQ0FnSUgwN1hHNTlYRzVsZUhCdmNuUnpMbTFoYTJWRlpHZGxRbVYwZDJWbGJpQTlJRzFoYTJWRlpHZGxRbVYwZDJWbGJqdGNibVoxYm1OMGFXOXVJRzFoYTJWRlpHZGxWRzhvY3l3Z2RHRnlaMlYwTENCaGFDa2dlMXh1SUNBZ0lIWmhjaUIwYVNBOUlIUmhjbWRsZEM1eVlYbEpiblJsY25ObFkzUnBiMjRvY3k1NExDQnpMbmtwTzF4dUlDQWdJR2xtSUNnaGRHa3BYRzRnSUNBZ0lDQWdJSFJwSUQwZ2V5QjRPaUIwWVhKblpYUXVZM2dvS1N3Z2VUb2dkR0Z5WjJWMExtTjVLQ2tnZlR0Y2JpQWdJQ0IyWVhJZ1pIZ2dQU0IwYVM1NElDMGdjeTU0TENCa2VTQTlJSFJwTG5rZ0xTQnpMbmtzSUd3Z1BTQk5ZWFJvTG5OeGNuUW9aSGdnS2lCa2VDQXJJR1I1SUNvZ1pIa3BPMXh1SUNBZ0lISmxkSFZ5YmlCN0lIZzZJSFJwTG5nZ0xTQmhhQ0FxSUdSNElDOGdiQ3dnZVRvZ2RHa3VlU0F0SUdGb0lDb2daSGtnTHlCc0lIMDdYRzU5WEc1bGVIQnZjblJ6TG0xaGEyVkZaR2RsVkc4Z1BTQnRZV3RsUldSblpWUnZPMXh1ZG1GeUlFNXZaR1VnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFNXZaR1VvZGl3Z2Npd2djRzl6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZGlBOUlIWTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNpQTlJSEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjRzl6SUQwZ2NHOXpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFlnUFNCdFlXdGxVa0pVY21WbEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUcxaGEyVlNRbFJ5WldVb0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRTV2WkdVN1hHNTlLQ2twTzF4dWRtRnlJRVYyWlc1MElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJGZG1WdWRDaHBjMDl3Wlc0c0lIWXNJSEJ2Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1selQzQmxiaUE5SUdselQzQmxianRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJJRDBnZGp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3YjNNZ1BTQndiM003WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCRmRtVnVkRHRjYm4wb0tTazdYRzVtZFc1amRHbHZiaUJqYjIxd1lYSmxSWFpsYm5SektHRXNJR0lwSUh0Y2JpQWdJQ0JwWmlBb1lTNXdiM01nUGlCaUxuQnZjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dFdWNHOXpJRHdnWWk1d2IzTXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQzB4TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWVM1cGMwOXdaVzRwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1lpNXBjMDl3Wlc0cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUF3TzF4dWZWeHVablZ1WTNScGIyNGdiV0ZyWlZKQ1ZISmxaU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUhKaWRISmxaVjh4TGxKQ1ZISmxaU2htZFc1amRHbHZiaUFvWVN3Z1lpa2dleUJ5WlhSMWNtNGdZUzV3YjNNZ0xTQmlMbkJ2Y3pzZ2ZTazdYRzU5WEc1MllYSWdlRkpsWTNRZ1BTQjdYRzRnSUNBZ1oyVjBRMlZ1ZEhKbE9pQm1kVzVqZEdsdmJpQW9jaWtnZXlCeVpYUjFjbTRnY2k1amVDZ3BPeUI5TEZ4dUlDQWdJR2RsZEU5d1pXNDZJR1oxYm1OMGFXOXVJQ2h5S1NCN0lISmxkSFZ5YmlCeUxuazdJSDBzWEc0Z0lDQWdaMlYwUTJ4dmMyVTZJR1oxYm1OMGFXOXVJQ2h5S1NCN0lISmxkSFZ5YmlCeUxsazdJSDBzWEc0Z0lDQWdaMlYwVTJsNlpUb2dablZ1WTNScGIyNGdLSElwSUhzZ2NtVjBkWEp1SUhJdWQybGtkR2dvS1RzZ2ZTeGNiaUFnSUNCdFlXdGxVbVZqZERvZ1puVnVZM1JwYjI0Z0tHOXdaVzRzSUdOc2IzTmxMQ0JqWlc1MFpYSXNJSE5wZW1VcElIc2djbVYwZFhKdUlHNWxkeUJTWldOMFlXNW5iR1VvWTJWdWRHVnlJQzBnYzJsNlpTQXZJRElzSUdObGJuUmxjaUFySUhOcGVtVWdMeUF5TENCdmNHVnVMQ0JqYkc5elpTazdJSDBzWEc0Z0lDQWdabWx1WkU1bGFXZG9ZbTkxY25NNklHWnBibVJZVG1WcFoyaGliM1Z5YzF4dWZUdGNiblpoY2lCNVVtVmpkQ0E5SUh0Y2JpQWdJQ0JuWlhSRFpXNTBjbVU2SUdaMWJtTjBhVzl1SUNoeUtTQjdJSEpsZEhWeWJpQnlMbU41S0NrN0lIMHNYRzRnSUNBZ1oyVjBUM0JsYmpvZ1puVnVZM1JwYjI0Z0tISXBJSHNnY21WMGRYSnVJSEl1ZURzZ2ZTeGNiaUFnSUNCblpYUkRiRzl6WlRvZ1puVnVZM1JwYjI0Z0tISXBJSHNnY21WMGRYSnVJSEl1V0RzZ2ZTeGNiaUFnSUNCblpYUlRhWHBsT2lCbWRXNWpkR2x2YmlBb2Npa2dleUJ5WlhSMWNtNGdjaTVvWldsbmFIUW9LVHNnZlN4Y2JpQWdJQ0J0WVd0bFVtVmpkRG9nWm5WdVkzUnBiMjRnS0c5d1pXNHNJR05zYjNObExDQmpaVzUwWlhJc0lITnBlbVVwSUhzZ2NtVjBkWEp1SUc1bGR5QlNaV04wWVc1bmJHVW9iM0JsYml3Z1kyeHZjMlVzSUdObGJuUmxjaUF0SUhOcGVtVWdMeUF5TENCalpXNTBaWElnS3lCemFYcGxJQzhnTWlrN0lIMHNYRzRnSUNBZ1ptbHVaRTVsYVdkb1ltOTFjbk02SUdacGJtUlpUbVZwWjJoaWIzVnljMXh1ZlR0Y2JtWjFibU4wYVc5dUlHZGxibVZ5WVhSbFIzSnZkWEJEYjI1emRISmhhVzUwY3loeWIyOTBMQ0JtTENCdGFXNVRaWEFzSUdselEyOXVkR0ZwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLR2x6UTI5dWRHRnBibVZrSUQwOVBTQjJiMmxrSURBcElIc2dhWE5EYjI1MFlXbHVaV1FnUFNCbVlXeHpaVHNnZlZ4dUlDQWdJSFpoY2lCd1lXUmthVzVuSUQwZ2NtOXZkQzV3WVdSa2FXNW5MQ0JuYmlBOUlIUjVjR1Z2WmlCeWIyOTBMbWR5YjNWd2N5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QnliMjkwTG1keWIzVndjeTVzWlc1bmRHZ2dPaUF3TENCc2JpQTlJSFI1Y0dWdlppQnliMjkwTG14bFlYWmxjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJ5YjI5MExteGxZWFpsY3k1c1pXNW5kR2dnT2lBd0xDQmphR2xzWkVOdmJuTjBjbUZwYm5SeklEMGdJV2R1SUQ4Z1cxMWNiaUFnSUNBZ0lDQWdPaUJ5YjI5MExtZHliM1Z3Y3k1eVpXUjFZMlVvWm5WdVkzUnBiMjRnS0dOamN5d2daeWtnZXlCeVpYUjFjbTRnWTJOekxtTnZibU5oZENoblpXNWxjbUYwWlVkeWIzVndRMjl1YzNSeVlXbHVkSE1vWnl3Z1ppd2diV2x1VTJWd0xDQjBjblZsS1NrN0lIMHNJRnRkS1N3Z2JpQTlJQ2hwYzBOdmJuUmhhVzVsWkNBL0lESWdPaUF3S1NBcklHeHVJQ3NnWjI0c0lIWnpJRDBnYm1WM0lFRnljbUY1S0c0cExDQnljeUE5SUc1bGR5QkJjbkpoZVNodUtTd2dhU0E5SURBc0lHRmtaQ0E5SUdaMWJtTjBhVzl1SUNoeUxDQjJLU0I3SUhKelcybGRJRDBnY2pzZ2RuTmJhU3NyWFNBOUlIWTdJSDA3WEc0Z0lDQWdhV1lnS0dselEyOXVkR0ZwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaUlEMGdjbTl2ZEM1aWIzVnVaSE1zSUdNZ1BTQm1MbWRsZEVObGJuUnlaU2hpS1N3Z2N5QTlJR1l1WjJWMFUybDZaU2hpS1NBdklESXNJRzl3Wlc0Z1BTQm1MbWRsZEU5d1pXNG9ZaWtzSUdOc2IzTmxJRDBnWmk1blpYUkRiRzl6WlNoaUtTd2diV2x1SUQwZ1l5QXRJSE1nS3lCd1lXUmthVzVuSUM4Z01pd2diV0Y0SUQwZ1l5QXJJSE1nTFNCd1lXUmthVzVuSUM4Z01qdGNiaUFnSUNBZ0lDQWdjbTl2ZEM1dGFXNVdZWEl1WkdWemFYSmxaRkJ2YzJsMGFXOXVJRDBnYldsdU8xeHVJQ0FnSUNBZ0lDQmhaR1FvWmk1dFlXdGxVbVZqZENodmNHVnVMQ0JqYkc5elpTd2diV2x1TENCd1lXUmthVzVuS1N3Z2NtOXZkQzV0YVc1V1lYSXBPMXh1SUNBZ0lDQWdJQ0J5YjI5MExtMWhlRlpoY2k1a1pYTnBjbVZrVUc5emFYUnBiMjRnUFNCdFlYZzdYRzRnSUNBZ0lDQWdJR0ZrWkNobUxtMWhhMlZTWldOMEtHOXdaVzRzSUdOc2IzTmxMQ0J0WVhnc0lIQmhaR1JwYm1jcExDQnliMjkwTG0xaGVGWmhjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hzYmlsY2JpQWdJQ0FnSUNBZ2NtOXZkQzVzWldGMlpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9iQ2tnZXlCeVpYUjFjbTRnWVdSa0tHd3VZbTkxYm1SekxDQnNMblpoY21saFlteGxLVHNnZlNrN1hHNGdJQ0FnYVdZZ0tHZHVLVnh1SUNBZ0lDQWdJQ0J5YjI5MExtZHliM1Z3Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZaUE5SUdjdVltOTFibVJ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrS0dZdWJXRnJaVkpsWTNRb1ppNW5aWFJQY0dWdUtHSXBMQ0JtTG1kbGRFTnNiM05sS0dJcExDQm1MbWRsZEVObGJuUnlaU2hpS1N3Z1ppNW5aWFJUYVhwbEtHSXBLU3dnWnk1dGFXNVdZWElwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCMllYSWdZM01nUFNCblpXNWxjbUYwWlVOdmJuTjBjbUZwYm5SektISnpMQ0IyY3l3Z1ppd2diV2x1VTJWd0tUdGNiaUFnSUNCcFppQW9aMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RuTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9kaWtnZXlCMkxtTlBkWFFnUFNCYlhTd2dkaTVqU1c0Z1BTQmJYVHNnZlNrN1hHNGdJQ0FnSUNBZ0lHTnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR01wSUhzZ1l5NXNaV1owTG1OUGRYUXVjSFZ6YUNoaktTd2dZeTV5YVdkb2RDNWpTVzR1Y0hWemFDaGpLVHNnZlNrN1hHNGdJQ0FnSUNBZ0lISnZiM1F1WjNKdmRYQnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbllYQkJaR3AxYzNSdFpXNTBJRDBnS0djdWNHRmtaR2x1WnlBdElHWXVaMlYwVTJsNlpTaG5MbUp2ZFc1a2N5a3BJQzhnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2N1YldsdVZtRnlMbU5KYmk1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoaktTQjdJSEpsZEhWeWJpQmpMbWRoY0NBclBTQm5ZWEJCWkdwMWMzUnRaVzUwT3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdjdWJXbHVWbUZ5TG1OUGRYUXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZeWtnZXlCakxteGxablFnUFNCbkxtMWhlRlpoY2pzZ1l5NW5ZWEFnS3owZ1oyRndRV1JxZFhOMGJXVnVkRHNnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWTJocGJHUkRiMjV6ZEhKaGFXNTBjeTVqYjI1allYUW9ZM01wTzF4dWZWeHVablZ1WTNScGIyNGdaMlZ1WlhKaGRHVkRiMjV6ZEhKaGFXNTBjeWh5Y3l3Z2RtRnljeXdnY21WamRDd2diV2x1VTJWd0tTQjdYRzRnSUNBZ2RtRnlJR2tzSUc0Z1BTQnljeTVzWlc1bmRHZzdYRzRnSUNBZ2RtRnlJRTRnUFNBeUlDb2dianRjYmlBZ0lDQmpiMjV6YjJ4bExtRnpjMlZ5ZENoMllYSnpMbXhsYm1kMGFDQStQU0J1S1R0Y2JpQWdJQ0IyWVhJZ1pYWmxiblJ6SUQwZ2JtVjNJRUZ5Y21GNUtFNHBPMXh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCdU95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSElnUFNCeWMxdHBYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIWWdQU0J1WlhjZ1RtOWtaU2gyWVhKelcybGRMQ0J5TENCeVpXTjBMbWRsZEVObGJuUnlaU2h5S1NrN1hHNGdJQ0FnSUNBZ0lHVjJaVzUwYzF0cFhTQTlJRzVsZHlCRmRtVnVkQ2gwY25WbExDQjJMQ0J5WldOMExtZGxkRTl3Wlc0b2Npa3BPMXh1SUNBZ0lDQWdJQ0JsZG1WdWRITmJhU0FySUc1ZElEMGdibVYzSUVWMlpXNTBLR1poYkhObExDQjJMQ0J5WldOMExtZGxkRU5zYjNObEtISXBLVHRjYmlBZ0lDQjlYRzRnSUNBZ1pYWmxiblJ6TG5OdmNuUW9ZMjl0Y0dGeVpVVjJaVzUwY3lrN1hHNGdJQ0FnZG1GeUlHTnpJRDBnYm1WM0lFRnljbUY1S0NrN1hHNGdJQ0FnZG1GeUlITmpZVzVzYVc1bElEMGdiV0ZyWlZKQ1ZISmxaU2dwTzF4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQk9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdVZ1BTQmxkbVZ1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJSFpoY2lCMklEMGdaUzUyTzF4dUlDQWdJQ0FnSUNCcFppQW9aUzVwYzA5d1pXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmpZVzVzYVc1bExtbHVjMlZ5ZENoMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUXVabWx1WkU1bGFXZG9ZbTkxY25Nb2Rpd2djMk5oYm14cGJtVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTmhibXhwYm1VdWNtVnRiM1psS0hZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWhhMlZEYjI1emRISmhhVzUwSUQwZ1puVnVZM1JwYjI0Z0tHd3NJSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMlZ3SUQwZ0tISmxZM1F1WjJWMFUybDZaU2hzTG5JcElDc2djbVZqZEM1blpYUlRhWHBsS0hJdWNpa3BJQzhnTWlBcklHMXBibE5sY0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamN5NXdkWE5vS0c1bGR5QjJjSE5qWHpFdVEyOXVjM1J5WVdsdWRDaHNMbllzSUhJdWRpd2djMlZ3S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhacGMybDBUbVZwWjJoaWIzVnljeUE5SUdaMWJtTjBhVzl1SUNobWIzSjNZWEprTENCeVpYWmxjbk5sTENCdGEyTnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFMQ0JwZENBOUlIWmJabTl5ZDJGeVpGMHVhWFJsY21GMGIzSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9LSFVnUFNCcGRGdG1iM0ozWVhKa1hTZ3BLU0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhMk52YmloMUxDQjJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RWdHlaWFpsY25ObFhTNXlaVzF2ZG1Vb2RpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhacGMybDBUbVZwWjJoaWIzVnljeWhjSW5CeVpYWmNJaXdnWENKdVpYaDBYQ0lzSUdaMWJtTjBhVzl1SUNoMUxDQjJLU0I3SUhKbGRIVnliaUJ0WVd0bFEyOXVjM1J5WVdsdWRDaDFMQ0IyS1RzZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMmFYTnBkRTVsYVdkb1ltOTFjbk1vWENKdVpYaDBYQ0lzSUZ3aWNISmxkbHdpTENCbWRXNWpkR2x2YmlBb2RTd2dkaWtnZXlCeVpYUjFjbTRnYldGclpVTnZibk4wY21GcGJuUW9kaXdnZFNrN0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk52YkdVdVlYTnpaWEowS0hOallXNXNhVzVsTG5OcGVtVWdQVDA5SURBcE8xeHVJQ0FnSUhKbGRIVnliaUJqY3p0Y2JuMWNibVoxYm1OMGFXOXVJR1pwYm1SWVRtVnBaMmhpYjNWeWN5aDJMQ0J6WTJGdWJHbHVaU2tnZTF4dUlDQWdJSFpoY2lCbUlEMGdablZ1WTNScGIyNGdLR1p2Y25kaGNtUXNJSEpsZG1WeWMyVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbDBJRDBnYzJOaGJteHBibVV1Wm1sdVpFbDBaWElvZGlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUIxTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvS0hVZ1BTQnBkRnRtYjNKM1lYSmtYU2dwS1NBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVnZkbVZ5ZGxnZ1BTQjFMbkl1YjNabGNteGhjRmdvZGk1eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFiM1psY25aWUlEdzlJREFnZkh3Z2RXOTJaWEoyV0NBOFBTQjFMbkl1YjNabGNteGhjRmtvZGk1eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpiWm05eWQyRnlaRjB1YVc1elpYSjBLSFVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWYmNtVjJaWEp6WlYwdWFXNXpaWEowS0hZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hWdmRtVnlkbGdnUEQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JtS0Z3aWJtVjRkRndpTENCY0luQnlaWFpjSWlrN1hHNGdJQ0FnWmloY0luQnlaWFpjSWl3Z1hDSnVaWGgwWENJcE8xeHVmVnh1Wm5WdVkzUnBiMjRnWm1sdVpGbE9aV2xuYUdKdmRYSnpLSFlzSUhOallXNXNhVzVsS1NCN1hHNGdJQ0FnZG1GeUlHWWdQU0JtZFc1amRHbHZiaUFvWm05eWQyRnlaQ3dnY21WMlpYSnpaU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkU0E5SUhOallXNXNhVzVsTG1acGJtUkpkR1Z5S0hZcFcyWnZjbmRoY21SZEtDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMUlDRTlQU0J1ZFd4c0lDWW1JSFV1Y2k1dmRtVnliR0Z3V0NoMkxuSXBJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZGx0bWIzSjNZWEprWFM1cGJuTmxjblFvZFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxVzNKbGRtVnljMlZkTG1sdWMyVnlkQ2gyS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnWmloY0ltNWxlSFJjSWl3Z1hDSndjbVYyWENJcE8xeHVJQ0FnSUdZb1hDSndjbVYyWENJc0lGd2libVY0ZEZ3aUtUdGNibjFjYm1aMWJtTjBhVzl1SUdkbGJtVnlZWFJsV0VOdmJuTjBjbUZwYm5SektISnpMQ0IyWVhKektTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGJtVnlZWFJsUTI5dWMzUnlZV2x1ZEhNb2NuTXNJSFpoY25Nc0lIaFNaV04wTENBeFpTMDJLVHRjYm4xY2JtVjRjRzl5ZEhNdVoyVnVaWEpoZEdWWVEyOXVjM1J5WVdsdWRITWdQU0JuWlc1bGNtRjBaVmhEYjI1emRISmhhVzUwY3p0Y2JtWjFibU4wYVc5dUlHZGxibVZ5WVhSbFdVTnZibk4wY21GcGJuUnpLSEp6TENCMllYSnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxibVZ5WVhSbFEyOXVjM1J5WVdsdWRITW9jbk1zSUhaaGNuTXNJSGxTWldOMExDQXhaUzAyS1R0Y2JuMWNibVY0Y0c5eWRITXVaMlZ1WlhKaGRHVlpRMjl1YzNSeVlXbHVkSE1nUFNCblpXNWxjbUYwWlZsRGIyNXpkSEpoYVc1MGN6dGNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxXRWR5YjNWd1EyOXVjM1J5WVdsdWRITW9jbTl2ZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlc1bGNtRjBaVWR5YjNWd1EyOXVjM1J5WVdsdWRITW9jbTl2ZEN3Z2VGSmxZM1FzSURGbExUWXBPMXh1ZlZ4dVpYaHdiM0owY3k1blpXNWxjbUYwWlZoSGNtOTFjRU52Ym5OMGNtRnBiblJ6SUQwZ1oyVnVaWEpoZEdWWVIzSnZkWEJEYjI1emRISmhhVzUwY3p0Y2JtWjFibU4wYVc5dUlHZGxibVZ5WVhSbFdVZHliM1Z3UTI5dWMzUnlZV2x1ZEhNb2NtOXZkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm5aVzVsY21GMFpVZHliM1Z3UTI5dWMzUnlZV2x1ZEhNb2NtOXZkQ3dnZVZKbFkzUXNJREZsTFRZcE8xeHVmVnh1Wlhod2IzSjBjeTVuWlc1bGNtRjBaVmxIY205MWNFTnZibk4wY21GcGJuUnpJRDBnWjJWdVpYSmhkR1ZaUjNKdmRYQkRiMjV6ZEhKaGFXNTBjenRjYm1aMWJtTjBhVzl1SUhKbGJXOTJaVTkyWlhKc1lYQnpLSEp6S1NCN1hHNGdJQ0FnZG1GeUlIWnpJRDBnY25NdWJXRndLR1oxYm1OMGFXOXVJQ2h5S1NCN0lISmxkSFZ5YmlCdVpYY2dkbkJ6WTE4eExsWmhjbWxoWW14bEtISXVZM2dvS1NrN0lIMHBPMXh1SUNBZ0lIWmhjaUJqY3lBOUlHZGxibVZ5WVhSbFdFTnZibk4wY21GcGJuUnpLSEp6TENCMmN5azdYRzRnSUNBZ2RtRnlJSE52YkhabGNpQTlJRzVsZHlCMmNITmpYekV1VTI5c2RtVnlLSFp6TENCamN5azdYRzRnSUNBZ2MyOXNkbVZ5TG5OdmJIWmxLQ2s3WEc0Z0lDQWdkbk11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGl3Z2FTa2dleUJ5WlhSMWNtNGdjbk5iYVYwdWMyVjBXRU5sYm5SeVpTaDJMbkJ2YzJsMGFXOXVLQ2twT3lCOUtUdGNiaUFnSUNCMmN5QTlJSEp6TG0xaGNDaG1kVzVqZEdsdmJpQW9jaWtnZXlCeVpYUjFjbTRnYm1WM0lIWndjMk5mTVM1V1lYSnBZV0pzWlNoeUxtTjVLQ2twT3lCOUtUdGNiaUFnSUNCamN5QTlJR2RsYm1WeVlYUmxXVU52Ym5OMGNtRnBiblJ6S0hKekxDQjJjeWs3WEc0Z0lDQWdjMjlzZG1WeUlEMGdibVYzSUhad2MyTmZNUzVUYjJ4MlpYSW9kbk1zSUdOektUdGNiaUFnSUNCemIyeDJaWEl1YzI5c2RtVW9LVHRjYmlBZ0lDQjJjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gyTENCcEtTQjdJSEpsZEhWeWJpQnljMXRwWFM1elpYUlpRMlZ1ZEhKbEtIWXVjRzl6YVhScGIyNG9LU2s3SUgwcE8xeHVmVnh1Wlhod2IzSjBjeTV5WlcxdmRtVlBkbVZ5YkdGd2N5QTlJSEpsYlc5MlpVOTJaWEpzWVhCek8xeHVkbUZ5SUVsdVpHVjRaV1JXWVhKcFlXSnNaU0E5SUNobWRXNWpkR2x2YmlBb1gzTjFjR1Z5S1NCN1hHNGdJQ0FnWDE5bGVIUmxibVJ6S0VsdVpHVjRaV1JXWVhKcFlXSnNaU3dnWDNOMWNHVnlLVHRjYmlBZ0lDQm1kVzVqZEdsdmJpQkpibVJsZUdWa1ZtRnlhV0ZpYkdVb2FXNWtaWGdzSUhjcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnWDNOMWNHVnlMbU5oYkd3b2RHaHBjeXdnTUN3Z2R5a2dmSHdnZEdocGN6dGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFXNWtaWGdnUFNCcGJtUmxlRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdTVzVrWlhobFpGWmhjbWxoWW14bE8xeHVmU2gyY0hOalh6RXVWbUZ5YVdGaWJHVXBLVHRjYm1WNGNHOXlkSE11U1c1a1pYaGxaRlpoY21saFlteGxJRDBnU1c1a1pYaGxaRlpoY21saFlteGxPMXh1ZG1GeUlGQnliMnBsWTNScGIyNGdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUZCeWIycGxZM1JwYjI0b2JtOWtaWE1zSUdkeWIzVndjeXdnY205dmRFZHliM1Z3TENCamIyNXpkSEpoYVc1MGN5d2dZWFp2YVdSUGRtVnliR0Z3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQnBaaUFvY205dmRFZHliM1Z3SUQwOVBTQjJiMmxrSURBcElIc2djbTl2ZEVkeWIzVndJRDBnYm5Wc2JEc2dmVnh1SUNBZ0lDQWdJQ0JwWmlBb1kyOXVjM1J5WVdsdWRITWdQVDA5SUhadmFXUWdNQ2tnZXlCamIyNXpkSEpoYVc1MGN5QTlJRzUxYkd3N0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dGMmIybGtUM1psY214aGNITWdQVDA5SUhadmFXUWdNQ2tnZXlCaGRtOXBaRTkyWlhKc1lYQnpJRDBnWm1Gc2MyVTdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXViMlJsY3lBOUlHNXZaR1Z6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWR5YjNWd2N5QTlJR2R5YjNWd2N6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBSM0p2ZFhBZ1BTQnliMjkwUjNKdmRYQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYWnZhV1JQZG1WeWJHRndjeUE5SUdGMmIybGtUM1psY214aGNITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtRnlhV0ZpYkdWeklEMGdibTlrWlhNdWJXRndLR1oxYm1OMGFXOXVJQ2gyTENCcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZGk1MllYSnBZV0pzWlNBOUlHNWxkeUJKYm1SbGVHVmtWbUZ5YVdGaWJHVW9hU3dnTVNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyOXVjM1J5WVdsdWRITXBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVTnZibk4wY21GcGJuUnpLR052Ym5OMGNtRnBiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0YyYjJsa1QzWmxjbXhoY0hNZ0ppWWdjbTl2ZEVkeWIzVndJQ1ltSUhSNWNHVnZaaUJ5YjI5MFIzSnZkWEF1WjNKdmRYQnpJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZGk1M2FXUjBhQ0I4ZkNBaGRpNW9aV2xuYUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGk1aWIzVnVaSE1nUFNCdVpYY2dVbVZqZEdGdVoyeGxLSFl1ZUN3Z2RpNTRMQ0IyTG5rc0lIWXVlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGN5SUQwZ2RpNTNhV1IwYUNBdklESXNJR2d5SUQwZ2RpNW9aV2xuYUhRZ0x5QXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFl1WW05MWJtUnpJRDBnYm1WM0lGSmxZM1JoYm1kc1pTaDJMbmdnTFNCM01pd2dkaTU0SUNzZ2R6SXNJSFl1ZVNBdElHZ3lMQ0IyTG5rZ0t5Qm9NaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEIxZEdWSGNtOTFjRUp2ZFc1a2N5aHliMjkwUjNKdmRYQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2tnUFNCdWIyUmxjeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtOTFjSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5aaGNtbGhZbXhsYzF0cFhTQTlJR2N1YldsdVZtRnlJRDBnYm1WM0lFbHVaR1Y0WldSV1lYSnBZV0pzWlNocEt5c3NJSFI1Y0dWdlppQm5Mbk4wYVdabWJtVnpjeUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUdjdWMzUnBabVp1WlhOeklEb2dNQzR3TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZG1GeWFXRmliR1Z6VzJsZElEMGdaeTV0WVhoV1lYSWdQU0J1WlhjZ1NXNWtaWGhsWkZaaGNtbGhZbXhsS0drckt5d2dkSGx3Wlc5bUlHY3VjM1JwWm1adVpYTnpJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnWnk1emRHbG1abTVsYzNNZ09pQXdMakF4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJRkJ5YjJwbFkzUnBiMjR1Y0hKdmRHOTBlWEJsTG1OeVpXRjBaVk5sY0dGeVlYUnBiMjRnUFNCbWRXNWpkR2x2YmlBb1l5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhad2MyTmZNUzVEYjI1emRISmhhVzUwS0hSb2FYTXVibTlrWlhOYll5NXNaV1owWFM1MllYSnBZV0pzWlN3Z2RHaHBjeTV1YjJSbGMxdGpMbkpwWjJoMFhTNTJZWEpwWVdKc1pTd2dZeTVuWVhBc0lIUjVjR1Z2WmlCakxtVnhkV0ZzYVhSNUlDRTlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdZeTVsY1hWaGJHbDBlU0E2SUdaaGJITmxLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliMnBsWTNScGIyNHVjSEp2ZEc5MGVYQmxMbTFoYTJWR1pXRnphV0pzWlNBOUlHWjFibU4wYVc5dUlDaGpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1aGRtOXBaRTkyWlhKc1lYQnpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCMllYSWdZWGhwY3lBOUlDZDRKeXdnWkdsdElEMGdKM2RwWkhSb0p6dGNiaUFnSUNBZ0lDQWdhV1lnS0dNdVlYaHBjeUE5UFQwZ0ozZ25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYaHBjeUE5SUNkNUp5d2daR2x0SUQwZ0oyaGxhV2RvZENjN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyY3lBOUlHTXViMlptYzJWMGN5NXRZWEFvWm5WdVkzUnBiMjRnS0c4cElIc2djbVYwZFhKdUlGOTBhR2x6TG01dlpHVnpXMjh1Ym05a1pWMDdJSDBwTG5OdmNuUW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRmJZWGhwYzEwZ0xTQmlXMkY0YVhOZE95QjlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjJjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2gyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdVpYaDBVRzl6SUQwZ2NGdGhlR2x6WFNBcklIQmJaR2x0WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibVY0ZEZCdmN5QStJSFpiWVhocGMxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RsdGhlR2x6WFNBOUlHNWxlSFJRYjNNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjQ0E5SUhZN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1VISnZhbVZqZEdsdmJpNXdjbTkwYjNSNWNHVXVZM0psWVhSbFFXeHBaMjV0Wlc1MElEMGdablZ1WTNScGIyNGdLR01wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFVnUFNCMGFHbHpMbTV2WkdWelcyTXViMlptYzJWMGMxc3dYUzV1YjJSbFhTNTJZWEpwWVdKc1pUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlXdGxSbVZoYzJsaWJHVW9ZeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpjeUE5SUdNdVlYaHBjeUE5UFQwZ0ozZ25JRDhnZEdocGN5NTRRMjl1YzNSeVlXbHVkSE1nT2lCMGFHbHpMbmxEYjI1emRISmhhVzUwY3p0Y2JpQWdJQ0FnSUNBZ1l5NXZabVp6WlhSekxuTnNhV05sS0RFcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHOHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIySUQwZ1gzUm9hWE11Ym05a1pYTmJieTV1YjJSbFhTNTJZWEpwWVdKc1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOekxuQjFjMmdvYm1WM0lIWndjMk5mTVM1RGIyNXpkSEpoYVc1MEtIVXNJSFlzSUc4dWIyWm1jMlYwTENCMGNuVmxLU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVUhKdmFtVmpkR2x2Ymk1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsUTI5dWMzUnlZV2x1ZEhNZ1BTQm1kVzVqZEdsdmJpQW9ZMjl1YzNSeVlXbHVkSE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x6VTJWd0lEMGdablZ1WTNScGIyNGdLR01wSUhzZ2NtVjBkWEp1SUhSNWNHVnZaaUJqTG5SNWNHVWdQVDA5SUNkMWJtUmxabWx1WldRbklIeDhJR011ZEhsd1pTQTlQVDBnSjNObGNHRnlZWFJwYjI0bk95QjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuaERiMjV6ZEhKaGFXNTBjeUE5SUdOdmJuTjBjbUZwYm5SelhHNGdJQ0FnSUNBZ0lDQWdJQ0F1Wm1sc2RHVnlLR1oxYm1OMGFXOXVJQ2hqS1NCN0lISmxkSFZ5YmlCakxtRjRhWE1nUFQwOUlGd2llRndpSUNZbUlHbHpVMlZ3S0dNcE95QjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xtMWhjQ2htZFc1amRHbHZiaUFvWXlrZ2V5QnlaWFIxY200Z1gzUm9hWE11WTNKbFlYUmxVMlZ3WVhKaGRHbHZiaWhqS1RzZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVVTnZibk4wY21GcGJuUnpJRDBnWTI5dWMzUnlZV2x1ZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQzVtYVd4MFpYSW9ablZ1WTNScGIyNGdLR01wSUhzZ2NtVjBkWEp1SUdNdVlYaHBjeUE5UFQwZ1hDSjVYQ0lnSmlZZ2FYTlRaWEFvWXlrN0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBdWJXRndLR1oxYm1OMGFXOXVJQ2hqS1NCN0lISmxkSFZ5YmlCZmRHaHBjeTVqY21WaGRHVlRaWEJoY21GMGFXOXVLR01wT3lCOUtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNSeVlXbHVkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDNW1hV3gwWlhJb1puVnVZM1JwYjI0Z0tHTXBJSHNnY21WMGRYSnVJR011ZEhsd1pTQTlQVDBnSjJGc2FXZHViV1Z1ZENjN0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdYM1JvYVhNdVkzSmxZWFJsUVd4cFoyNXRaVzUwS0dNcE95QjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliMnBsWTNScGIyNHVjSEp2ZEc5MGVYQmxMbk5sZEhWd1ZtRnlhV0ZpYkdWelFXNWtRbTkxYm1SeklEMGdablZ1WTNScGIyNGdLSGd3TENCNU1Dd2daR1Z6YVhKbFpDd2daMlYwUkdWemFYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTV2WkdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tIWXNJR2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMkxtWnBlR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RpNTJZWEpwWVdKc1pTNTNaV2xuYUhRZ1BTQjJMbVpwZUdWa1YyVnBaMmgwSUQ4Z2RpNW1hWGhsWkZkbGFXZG9kQ0E2SURFd01EQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z6YVhKbFpGdHBYU0E5SUdkbGRFUmxjMmx5WldRb2RpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJMblpoY21saFlteGxMbmRsYVdkb2RDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkeUE5SUNoMkxuZHBaSFJvSUh4OElEQXBJQzhnTWl3Z2FDQTlJQ2gyTG1obGFXZG9kQ0I4ZkNBd0tTQXZJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVhnZ1BTQjRNRnRwWFN3Z2FYa2dQU0I1TUZ0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhZdVltOTFibVJ6SUQwZ2JtVjNJRkpsWTNSaGJtZHNaU2hwZUNBdElIY3NJR2w0SUNzZ2R5d2dhWGtnTFNCb0xDQnBlU0FySUdncE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliMnBsWTNScGIyNHVjSEp2ZEc5MGVYQmxMbmhRY205cVpXTjBJRDBnWm5WdVkzUnBiMjRnS0hnd0xDQjVNQ3dnZUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjbTl2ZEVkeWIzVndJQ1ltSUNFb2RHaHBjeTVoZG05cFpFOTJaWEpzWVhCeklIeDhJSFJvYVhNdWVFTnZibk4wY21GcGJuUnpLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y205cVpXTjBLSGd3TENCNU1Dd2dlREFzSUhnc0lHWjFibU4wYVc5dUlDaDJLU0I3SUhKbGRIVnliaUIyTG5CNE95QjlMQ0IwYUdsekxuaERiMjV6ZEhKaGFXNTBjeXdnWjJWdVpYSmhkR1ZZUjNKdmRYQkRiMjV6ZEhKaGFXNTBjeXdnWm5WdVkzUnBiMjRnS0hZcElIc2djbVYwZFhKdUlIWXVZbTkxYm1SekxuTmxkRmhEWlc1MGNtVW9lRnQyTG5aaGNtbGhZbXhsTG1sdVpHVjRYU0E5SUhZdWRtRnlhV0ZpYkdVdWNHOXphWFJwYjI0b0tTazdJSDBzSUdaMWJtTjBhVzl1SUNobktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlRzFwYmlBOUlIaGJaeTV0YVc1V1lYSXVhVzVrWlhoZElEMGdaeTV0YVc1V1lYSXVjRzl6YVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUI0YldGNElEMGdlRnRuTG0xaGVGWmhjaTVwYm1SbGVGMGdQU0JuTG0xaGVGWmhjaTV3YjNOcGRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhBeUlEMGdaeTV3WVdSa2FXNW5JQzhnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2N1WW05MWJtUnpMbmdnUFNCNGJXbHVJQzBnY0RJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuTG1KdmRXNWtjeTVZSUQwZ2VHMWhlQ0FySUhBeU8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliMnBsWTNScGIyNHVjSEp2ZEc5MGVYQmxMbmxRY205cVpXTjBJRDBnWm5WdVkzUnBiMjRnS0hnd0xDQjVNQ3dnZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVjbTl2ZEVkeWIzVndJQ1ltSUNGMGFHbHpMbmxEYjI1emRISmhhVzUwY3lsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXFaV04wS0hnd0xDQjVNQ3dnZVRBc0lIa3NJR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCMkxuQjVPeUI5TENCMGFHbHpMbmxEYjI1emRISmhhVzUwY3l3Z1oyVnVaWEpoZEdWWlIzSnZkWEJEYjI1emRISmhhVzUwY3l3Z1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJSFl1WW05MWJtUnpMbk5sZEZsRFpXNTBjbVVvZVZ0MkxuWmhjbWxoWW14bExtbHVaR1Y0WFNBOUlIWXVkbUZ5YVdGaWJHVXVjRzl6YVhScGIyNG9LU2s3SUgwc0lHWjFibU4wYVc5dUlDaG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZVcxcGJpQTlJSGxiWnk1dGFXNVdZWEl1YVc1a1pYaGRJRDBnWnk1dGFXNVdZWEl1Y0c5emFYUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCNWJXRjRJRDBnZVZ0bkxtMWhlRlpoY2k1cGJtUmxlRjBnUFNCbkxtMWhlRlpoY2k1d2IzTnBkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQXlJRDBnWnk1d1lXUmthVzVuSUM4Z01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUdjdVltOTFibVJ6TG5rZ1BTQjViV2x1SUMwZ2NESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuTG1KdmRXNWtjeTVaSUQwZ2VXMWhlQ0FySUhBeU8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGQnliMnBsWTNScGIyNHVjSEp2ZEc5MGVYQmxMbkJ5YjJwbFkzUkdkVzVqZEdsdmJuTWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvZURBc0lIa3dMQ0I0S1NCN0lISmxkSFZ5YmlCZmRHaHBjeTU0VUhKdmFtVmpkQ2g0TUN3Z2VUQXNJSGdwT3lCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0hnd0xDQjVNQ3dnZVNrZ2V5QnlaWFIxY200Z1gzUm9hWE11ZVZCeWIycGxZM1FvZURBc0lIa3dMQ0I1S1RzZ2ZWeHVJQ0FnSUNBZ0lDQmRPMXh1SUNBZ0lIMDdYRzRnSUNBZ1VISnZhbVZqZEdsdmJpNXdjbTkwYjNSNWNHVXVjSEp2YW1WamRDQTlJR1oxYm1OMGFXOXVJQ2g0TUN3Z2VUQXNJSE4wWVhKMExDQmtaWE5wY21Wa0xDQm5aWFJFWlhOcGNtVmtMQ0JqY3l3Z1oyVnVaWEpoZEdWRGIyNXpkSEpoYVc1MGN5d2dkWEJrWVhSbFRtOWtaVUp2ZFc1a2N5d2dkWEJrWVhSbFIzSnZkWEJDYjNWdVpITXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFIxY0ZaaGNtbGhZbXhsYzBGdVpFSnZkVzVrY3loNE1Dd2dlVEFzSUdSbGMybHlaV1FzSUdkbGRFUmxjMmx5WldRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXliMjkwUjNKdmRYQWdKaVlnZEdocGN5NWhkbTlwWkU5MlpYSnNZWEJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjIxd2RYUmxSM0p2ZFhCQ2IzVnVaSE1vZEdocGN5NXliMjkwUjNKdmRYQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kzTWdQU0JqY3k1amIyNWpZWFFvWjJWdVpYSmhkR1ZEYjI1emRISmhhVzUwY3loMGFHbHpMbkp2YjNSSGNtOTFjQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzI5c2RtVW9kR2hwY3k1MllYSnBZV0pzWlhNc0lHTnpMQ0J6ZEdGeWRDd2daR1Z6YVhKbFpDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaWE11Wm05eVJXRmphQ2gxY0dSaGRHVk9iMlJsUW05MWJtUnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y205dmRFZHliM1Z3SUNZbUlIUm9hWE11WVhadmFXUlBkbVZ5YkdGd2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuY205MWNITXVabTl5UldGamFDaDFjR1JoZEdWSGNtOTFjRUp2ZFc1a2N5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyMXdkWFJsUjNKdmRYQkNiM1Z1WkhNb2RHaHBjeTV5YjI5MFIzSnZkWEFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JRY205cVpXTjBhVzl1TG5CeWIzUnZkSGx3WlM1emIyeDJaU0E5SUdaMWJtTjBhVzl1SUNoMmN5d2dZM01zSUhOMFlYSjBhVzVuTENCa1pYTnBjbVZrS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6YjJ4MlpYSWdQU0J1WlhjZ2RuQnpZMTh4TGxOdmJIWmxjaWgyY3l3Z1kzTXBPMXh1SUNBZ0lDQWdJQ0J6YjJ4MlpYSXVjMlYwVTNSaGNuUnBibWRRYjNOcGRHbHZibk1vYzNSaGNuUnBibWNwTzF4dUlDQWdJQ0FnSUNCemIyeDJaWEl1YzJWMFJHVnphWEpsWkZCdmMybDBhVzl1Y3loa1pYTnBjbVZrS1R0Y2JpQWdJQ0FnSUNBZ2MyOXNkbVZ5TG5OdmJIWmxLQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1VISnZhbVZqZEdsdmJqdGNibjBvS1NrN1hHNWxlSEJ2Y25SekxsQnliMnBsWTNScGIyNGdQU0JRY205cVpXTjBhVzl1TzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwWTIxV2FtUkhSblZhTW5oc1RHMXdla2xwZDJsak1qa3hZMjFPYkZWdE9YWmtRMGsyU1dsSmMwbHVUblprV0VwcVdsaE5hVTlzYzJsTWFUUjJUR2swZGxZeVZtbFJNamx6V1ZNNWVtTnRUWFpqYlZacVpFZEdkVm95ZUd4TWJsSjZTV3d3YzBsdE5XaGlWMVo2U1dwd1lsaFRkMmxpVjBaM1kwZHNkVm96VFdsUGFVazNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZkRUpSVlVaQ1RFTjBRMUZWUm5SU1JIUkNVVlZPZFZKRGVIUlJNRVpDU3pCSk4xRlZSbkpSYWs1RFRFWk9RbEZYWkVOTVIzUkRVVlZHY2xGcGVFUlJWVVpFVEVWT1FsRlhkRU5QTUd4Q1VUSndSVXhGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hNVVZWR1RFeEdaRUpSVm1OelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFemFFUk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVaV1FsRlZUWE5STUVaQ1YxTjRSbEZWUmtaTVJVNUNVVlZOYzFOVlJrSlRlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUU1UlZVWk9URVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHY1ZGcGVFUlJWVVp3VVdsNFJsRlZSa1pNUms1Q1VWWk5jMUV3UmtKUmVYaE1VVlZHVEV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVUbFZWYzFVd1JrSlZlWGhFVVZWR1JFeEZkRUpSVlhOelVsVkdRbEpUZUVSUlZVWkVUekJzUWxFelVrTk1SV3hDVVZWcmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFeFJWVVpNVEVaa1FsRldZemRWVlVaRVREQkpjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VWpCR1FsbDVlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoV1VWVkdSRXhGVGtKUlZtdHpVbFZHUWxKVGVFUlJWVVpFVEVWc1FsRlZjM05VTUVaQ1VWTjRjbEZyUmtKaE1FbHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVkd4RFRFVk9RbEZVYUVOTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxFemNFaE1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxFeldrUk1SVGxDVVZVNGMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNmRFSlJWVTUzVVdsNFJGRlZSa1JQTUVaQ1ZXdFJjMW93VWtKVlZVMDNVVlZHUmxKRWRFcFJWVTVLVEVjeFExRlZUbGhNUlU1Q1VWWk5jMUpWUmtSV1EzaEVVVlZHVkV4RlZrSlJNVkZ6VVRCR1FsVjVlRVpSVlU1VlRFVk9RbEZXVFRkVlZVWkpWa040VGxGVlJrUk1SV1JDVVZWUmMxRXdSa0pSZVhoRVVWVkdVazh4UmtKUk1WRnpWRlZHUWxGNWVFaFJWVVpGVEVWT1FsRlZUWE5STUVaQ1ZWUjBVbEZWVGxWTVJURkNVVlZOYzFJd1JrSlNRM2hFVVZWR1JFeEZUa0pSVmtVM1ZWVkdSRlpEZUU1UlZVWkVURVZrUWxGVlVYTlJNRVpDVVhsNFJGRlZSbEpQTUd4Q1VWVnJjMUV3UmtKUmVuUktVVlZXYzFGcGVHeFJWVVpNVEVWa1FsRldiM05aTUVaQ1RrVkpjMVF3UmtKVWVYaEtVVlZHU2t4R1RrSlJWazF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOaFZVcENVVmRzUTB4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFZHNRMUZWUm5CUmFYaEdVVlZHUmt4Rk1VSlJWVEJ6VVRCR1FsRjVlSEJSYTBaQ1lWVkpjMUpWUmtKU1UzaE9VVlZHVGt4RlRrSlJWVTF6WVZWS1FsRlhiRU5NUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JrMHdiM05qTUVwQ1VWVlZjMUl3UmtKU2FYaHFVVlZHYkV4Rk9VSlJWVGh6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1HeENVbFJzUkV4SVRrTlJWVVpHVEVWa1FsRlZXWE5aTUVaQ1dsTjRVRkZWUmxCTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlZVMVVYbDNNRkZyUmtKVlUzaElVVlZHVTB4R1ZrSlJWazF6VVRCR1FsZFVkRkpSVlU1eFVXbDRTbEZWUmtwTVJWWkNVVlZWYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjZkRkpSVlU1dlVYbDRTbEZWUmtwTVJWWkNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZHUmt4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1uaEZURVZzUWxGVmEzTlNWVVpDVWxONFNsRlZSa3BNUlZaQ1VWVlZjMU5WUmtKVFUzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNV3hDVVZWVmMxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmlSVkZ6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVXV2w0UkZGVlJrUlBNR3hDVWxWUmMwNUZTa0pSVmtWelVqQkdRbFZwZUZaUlZVWlVURVZPUWxGV2F6ZFZWVVpFWVd0SmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRUZFZWVVpFWVVWTmMxTlZSa0pUVTNoR1VWVkdSa3hGYkVKUlZXdHpVbFZHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUwM1YxVkdRbEpUZUZCUlZVWlFURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1elVrTjRTbEZWUmtwTVJWWkNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEZiRUpSVld0elUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZHUmt4Rk9VSlJWVGh6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1uaEZURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VUSkpjMUV3UmtKUmVuUktVVlZXUlV4RWFFTlJWVVpXVEVWa1FsRldXWE5XVlVaQ1ZubDRSbEZWUmxaUE1VWkNVVEp3UTB4RmJFSlJWV3R6VWxWR1FsSlRlRWhSVlVaSVRFVldRbEZWVlhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMDNWVlZHUkdWRlNYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RlRrSlJWVTAzVlZWR1JGbHBlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVlpDVVZWVmMxRXdSa0pSZW5SS1VWVk9jVkZwZUVSUlZVWkVUekJzUWxKVlVYTlBSVXBDVVZaVmMxSXdSa0pXYVhoV1VWVkdXRXhGVmtKUlZsVTNWVlZHUkdGclNYTlRWVVpDVTFONFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlRqUlJhWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZUbWxNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VWxWR1FsSlRlRVJSVlVaRVR6QnNRbEV5Y0VOTVJVNUNVVlZOTjFOVlJrWlNRM2cxVVd0R1FsTjVlRWhSVlVaTlR6RkdRbEV3YTNOVU1FWkNWSGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVRUQkpjMUV3UmtKUmVuUktVVlZXUlV4RVFrTlJWVVpPVEVWa1FsRlZORGRWVlVaRVUxTjRVRkZWUmxCTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUWHBSYVhoRVVWVkdSRTh3YkVKU1ZWRnpaVlZLUWxGVmMzTlNNRVpDVkVONFZsRlZSazVNUlU1Q1VWWnJOMVZWUmtSYVEzaFFVVlZHVUV4RmJFSlJWV3R6VlRCR1FsVjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1NVUwTjRSRkZWUmtSUE1HeENWakJSYzJOVlRrSlJWMnhEVEVWa1FsRlhjRU5NUmxaQ1VWZDBRMHhGVmtKUlZsVnpVbFZHUWxKVGVFWlJWVVpXVEVWV1FsRlZWWE5TVlVaQ1ZsTjRSbEZWUmtaTVJWWkNVVlpWTjFWVlJrUk9WVkZ6VTFWR1FsTlRlRXhSVlVaTVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFWTJ0TmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUSm9SRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPZDFGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEV6VWtSTVJXeENVVlZyYzFsVlJrSlpVM2hJVVZWR1NFeEZWa0pSVlZWelVUQkdRbEY2ZEZKUlZVNHlVV2w0VEZGVlJreE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JrOHhiRUpSTTJoRFRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SazVDVVZaTmMxRXdSa0pSZVhodVVXdEdRbG93U1hOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWV1FsRlZWWE5UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR1JyWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxTlZSa0pUVkhSdVVXdEdRbEpUZUdoUlZVWm9URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVHpGT1FsRjZSa1ZQTVVaQ1VUQlJjMVF3UmtKVWVYaG9VVlZHYUV4RlRrSlJWVTAzVTFWR1JHVnJTWE5STUVaQ1VYcDBTbEZXVmtWTVJ6RkVVVlZHYkV4RlpFSlJWMWx6VmxWR1Fsb3dTWE5TVlVaQ1ZsTjRSbEZWUmtaTVJWWkNVVlpWTjFWVlJrUmlSVTF6VTFWR1FsTlRlRXBSVlVaS1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SMnhEVVZWR2NGRnBlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxSlZSa0pTVTNoS1VWVkdTa3hGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pSTW1oR1RFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVUekJzUWxGNlZrUk1SVTVDVVZWTk4xTlZSa1pTUTNjd1VXdEdRbFZUZUVoUlZVWlRUekZHUWxFd2EzTlVNRVpDVkhwMFdsRlZUa2xNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVTNWMVZHUkdWRlNYTlNWVVpDVWxONFJGRlZSa1JNUlZaQ1VWVlZjMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVkhSYVVWVk9ORkZwZUVaUlZVWkdURVZPUWxGVlRYTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWlBNV3hDVVROb1EweEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlRkVk1FWkNVWGw0UkZGVlJrUlBNR3hDVVRKNFJFeEZUa0pSVlUwM1UxVkdSbFJUZDNkUmEwWkNXakJKYzFJd1JrSmthMGx6VmxWR1JGTlRlRVpSVlVaV1RFVldRbEZWVlhOU1ZVWkNWbE40UmxGVlRqQlJhWGhHVVZWR1ZreEZWa0pSVlZWelVsVkdRbFpUZUVaUlZVNHdVV2w0UmxGVlJsWk1SVlpDVVZWVmMxSlZSa0pXVTNoR1VWVk9NRkZwZUVaUlZVWldURVZXUWxGVlZYTlNWVVpDVmxSMFVsRlZUakJSYVhoS1VWVkdTa3hGYkVKUlZXdHpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05TVlVaQ1VsTjRSbEZWUmtaTVJXeENVVlZyYzFJd1JrSlNlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVaUlZVMDFVV2w0U2xGVlJrcE1SV1JDVVZWamMxSlZSa0pTVTNoSVVWVkdTRXhGVmtKUlZWVnpVbFZHUWxKVGVFcFJWVVpLVEVWa1FsRlZZM05TVlVaQ1VsTjRTRkZWUmtoTVJWWkNVVlZWYzFKVlJrUlBWVWx6VmpCR1FsWjVlRWhSVlVaSVRFVnNRbEZWYTNOU01FWkNVbmw0U2xGVlJrcE1SV1JDVVZWamMxTlZSa0pUVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGSlJWVTB4VVhsNFNsRlZSa3BNUm1SQ1VWWmpjMU5WUmtKVFUzaEVVVlZHUkU4eGJFSlJWVlZ6VkRCR1FsUjVlRXBSVlVaS1RFVk9RbEZWVFRkVlZVWkVZa1ZOYzFOVlJrSlRVM2hLVVZWR1NreEZaRUpSVldOelVsVkdRbEpUZUVoUlZVWklURVZXUWxGVlZYTlNWVVpDVWxONFNsRlZSa3BNUldSQ1VWVmpjMUpWUmtKU1UzaElVVlZHU0V4RlZrSlJWVlZ6VWxWR1JFOVZTWE5UVlVaQ1UxTjRTRkZWUmtoTVJXeENVVlZyYzFJd1JrSlNlWGhLVVZWR1NreEZaRUpSVldOelUxVkdRbE5UZUVoUlZVWklURVZzUWxGVmEzTlNWVVpFWVVWTmMxRXdSa0pSZVhoSVVWVkdTRXhGYkVKUlZXdHpVakJHUWxKNWVGaFJWVVpZVEVWV1FsRXpVa05NUld4Q1VWVnJjMUl3UmtKU2VYaEtVVlZHU2t4RlpFSlJWV056VTFWR1FsTlRlRWhSVlVaSVRFVnNRbEZWYTNOU01FWkNVbmw0U2xGVlJrcE1SVlpDVVRKb1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURVZrUWxGVlkzTldNRVpDVm5sNFJGRlZSa1JQTVVaQ1VYcE9RMHhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1ZIUmFVVlZPTUZGNWVGQlJWVVpRVHpKa1ExRlZUa2xNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRWhSVlVaSVRFVnNRbEZWYXpkYU1FcENVVEpvUTB4RlRrSlJWVTF6VWxWR1FsSlRlRVpSVlVaR1RFVmtRbEZWWTNOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWck4xbFZSa1JpYTBselVUQkdRbEY2ZEZSUlZVNU5UekZHUWxFd1VYTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5OMU5WUmtSaFJVbHpVVEJHUWxGNmRFcFJWVlpGVEVSS1ExRlZSbEJNUldSQ1VWWkJjMVpWUmtKVlUzaElVVlZHV0U4eFJrSlJNbGx6VkRCR1FsUjVlRXBSVlVaS1RFWk9RbEZXVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGWkVKUlZXTnpVbFZHUWxKVGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJXUkNVVlZqYzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZrUWxGVlkzTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVR6QnNRbEV5Y0VkTVJVNUNVVlZOTjFOVlJrUlVRM2h1VVd0R1FsRjZkRUpSVlVaRlRFVk9RbEZWVFhOUlZVWTBVMFZSYzFOVlJqTlRSVTAzVVZWR05GTkdhM05QUlVwQ1VWWk5OMUZWUm5oVFdGSkRURVpPUWxGWFpFTk1SMVpDVVZkVmMxRXdSa0pSZVhoT1VWVkdjRkZwZUVaUlZVWkdURVV4UWxGWGJFTk1SVlpDVVZWVmMxSlZSa0pXVkhSS1VWVlZNVkpUZUVwUlZVWk9URVZXUWxGVlZYTlNNRVpDVW5sNFRsRlZSazVNUlU1Q1VWVk5jMXBWUmtKYVUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOU1ZVWkNVbE40VGxGVlJrNU1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVMVZHUWxOVGVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNVM2hHVVZWR1JreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVV4UWxGVk1ITlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZOTTFKcGVFWlJWVVpHVEVWa1FsRlZZM05VVlVaQ1ZGTjRSRkZWUmtSTVIxWkNVVmRWYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlVWVVpDVkZONFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWV3R6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOVVZVWkNWRk40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVbFZHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFKVlJrUk5NRmx6VWxWR1FsSlRlRWhSVlVaSVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUkdGRlNYTlNWVVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkVZVVZKYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40U0ZGVlJraE1SVTVDVVZWTmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkdKRlVYTlVNRVpDVkhwMFVsRlZUa2xNUjNSRFVWVkdjbEZwZUVaUlZVWkdURVZXUWxGVlZUZFZWVVpFWkVWSmMyRXdTa0pSVjNSRFRFVldRbEZWVlhOU1ZVWkNVbFIwVWxGVlRqQlJhWGhXVVZWR1ZreEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRWhSVlVaSVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05TVlVaQ1VsTjRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNWSFJNVVZWTmRsSkRlRVJSVlVaQ1R6QkdRbEV3ZDNOUk1FWkNVWHAwUWxGV2NFVk1SRUpFVVZac1JFOHdSa0pXTUZGelZUQkdRbG93U1hOV1ZVWkNWbE40UkZGVlJrUk1SVTVDVVZSS1EweEZWa0pSVlZWelZGVkdRbUZWU1hOU1ZVWkNVbE40UmxGVlJsWlBNR3hDVVRKd1IweEZiRUpSVld0elVsVkdRbEpUZUVoUlZVWklURVV4UWxGVk1ITlJNRVpDVVhsNGJGRlZSbXhNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTk4xTlZSa1JOVlUxelUxVkdRbE5UZUVSUlZVWkVURVZXUWxGVlZUZFZWVVpDVWxONFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoT1VWVkdUa3hGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWV1FsRlZWWE5STUVaQ1VYcDBTbEZWVG5GU1EzaEtVVlZHU2t4RlZrSlJWVlZ6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUk1sbHpVbFZHUWxKVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdSRnBwZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRWhSVlVaSVRFVldRbEZWVlhOU01FWkNVbmw0UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9lVkY1ZUZCUlZVWlFURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRWhSVlVaSVRFVldRbEZWVlhOU01FWkNVbmw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05TVlVaQ1VsTjRTRkZWUmtoTVJWWkNVVlZWYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY2ZEVKUlZVMHhVa040UkZGVlJrUlBNRVpDVlVWUmMxb3dUa0pVTUUwM1VWVkdSbEpFZEVwUlZXeEtURWRPUWxGWE1VTk1SVTVDVVZaamMxSlZSa0pWZVhoRVVWVkdXa3hGVmtKUlZrMXpVakJHUWxaNmRGSlJWVVozVWtONFRsRlZSa1JNUldSQ1VWVlJjMUV3UmtKUmVYaEVVVlZHVms4eFJrSlJWazF6VkZWR1FsRjVlRWhSVlVaRlRFVk9RbEZWVFhOUk1FWkNWbnAwVWxGVlJsUk1Sa1pDVVZWamMxSXdSa0pUUTNoSVVWVkdTRXhGVGtKUlZrVTNWVlZHUkdKclZYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUl3UmtKU2VYaFdVVlZHVmt4RlZrSlJWVlZ6VVRCR1FsRjZkRkpSVlU0MlVXbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hJVVZWR1NFeEdWa0pSVmxWelVsVkdRbEpUZUVSUlZVWkVUekJzUWxGNlpFTk1SVTVDVVZWTk4xTlZSa1JVUTNoWVVWVkdSRTh3UmtKUlZWRnpVVEJHUWxGNWVFSlJWa3BGVEVWc1FsVlZUVGRSVlVaR1VrUjBTbEZWVGtwTVIxWkNVVmN4UTB4Rk1VSlJWMVZ6VWxWR1FsVjVlRVJSVlVaUVRFVldRbEZXVFhOU01FWkNWbnAwVWxGVlJuVlNRM2hZVVZWR1RreEZaRUpSVlRSelZGVkdRbFJUZUVSUlZVWlVUekZHUWxGV1RYTlVWVVpDVVhsNFNGRlZSa1ZNUlU1Q1VWVk5jMUV3UmtKVVZIUlNVVlZHVkV4R1JrSlJWV056VWpCR1FsTkRlRWhSVlVaSVRFVk9RbEZXUlRkVFZVWkNVbmw0UkZGVlJrUlBNR3hDVVhwc1JreEdiRUpSVlUwM1VWVkdRbEpEZUVSUlZVWkVURVZHUWxKclVYTlRWVVpHVVhwMFFsRlZWa1ZNUms1Q1VWWk5jMWxWUmtKWlUzaEVVVlZHUkV4RlRrSlJWa1Z6VWxWR1FsSlRlRVJSVlVaU1R6QnNRbEV6U2tSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZaRUpSVldOelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFJsRlZSa1pQTVVaQ1VUSlpjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzVXpCR1JGZHFkRXBSVlU1RlRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVHpGR1FsRXlXWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJNVVZWT2FVOHdiRUpSTUZGelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkZONFJsRlZSa1pQTVVaQ1VsWlpjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXhSVlU1cFR6QnNRbEV3VVhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoR1VWVkdSazh4UmtKU1ZsbHpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUVGRUTUVaRVYycDBTbEZWVGtWTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTWtselVUQkdRbEY2ZEVKUlZWWkZURVpPUWxGV1RYTldWVVpDVmxSMFNsRlZUbTFNUlRsQ1VWVTRjMU5WUmtKVFUzaHNVVlZHVGt4RlRrSlJWVGh6VmxWR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U2xGVlJreE1SVGxDVVZWRmMxRXdSa0pSZVhoRVVWVkdSRXhGWkVKUlZXTnpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRSbEZWUm1sTVJVNUNVVmRGYzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSTTBwRlRFVk9RbEZWVFRkUlZVWllVa040U2xGVlJrcE1SWFJDVVZWemMxSXdSa0poTUVrM1UxVkdSR1JyU1hOVk1FWkNWWGw0UmxGVlJrWk1SbFpDVVZWRmMxRXdSa0pSZVhoS1VWVkdTRXhGT1VKUlZVVnpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUms5TVJVNUNVVlV3TjFOVlJrUmphMGx6VkRCR1FsUjVlRVpSVlVaR1RFWldRbEZWUlhOUk1FWkNVWGw0U2xGVlJraE1SVGxDVVZWRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxORGVFUlJWVVpJVHpCc1FsRXlhRU5NUmtaQ1VWWkZjMUpWUmtKU1UzaFdVVlZHUWt4RlRrSlJWVTF6VTFWR1FsSjVlRkJSVlVaQ1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWbmMxRXdSa0pTZW5SS1VWVk9jVkZwZUZCUlZVWlFURVZXUWxGVlZYTldWVVpDVVZONFJGRlZSa1JNUld4Q1VWVmpjMVF3UmtKUlUzaEVVVlZHUkV4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVldRbEZXVVhOUk1FWkNWWHAwU2xGVlRqQlJhWGhTVVZWR1VreEZWa0pSVlZWelZsVkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlRNRVpDVTNsNFJsRlZSa1pNUlRGQ1VWVXdjMUpWUmtKU1UzaEtVVlZHU2t4RmJFSlJWWE56VkRCR1FsRlRlRXBSVlVaS1RFWk9RbEZXVFhOUk1FWkNVWGw0VGxGVlJrNU1SV1JDVVZWamMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFNVJWVVpPVEVWa1FsRlZZM05UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hLVVZWR1NreEZWa0pSVlZWelV6QkdRbE41ZUVSUlZVWkVURVZXUWxGWGFFWk1SVTVDVVZka1JrOHdiRUpSTTNCSVRFZE9RbEZYVFhOU1ZVWkNVbE40YkZGVlJteFBNRTVDVVRKNFJFeEZUa0pSVlUwM1VWVkdSbEpwZUVwUlZVWktURVYwUWxGVmMzTlNNRVpDWVRCSk4xTlZSa1JrYTBselZUQkdRbFY1ZUVaUlZVWkdURVpXUWxGVlJYTlJNRVpDVVhsNFNsRlZSa2hNUlRsQ1VWVkZjMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VWxWR1FsSlRlRVpSVlVaUFRFVk9RbEZWTURkVFZVWkVZMnRKYzFRd1JrSlVlWGhHVVZWR1JreEdWa0pSVlVWelVUQkdRbEY1ZUVwUlZVWklURVU1UWxGVlJYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKVFEzaEVVVlZHU0U4d2JFSlJNbWhEVEVaR1FsRldSWE5TVlVaQ1VsTjRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlozTlJNRVpDVW5wMFNsRlZUbkZSYVhoUVVWVkdVRXhGVmtKUlZWVnpWbFZHUWxGVGVFUlJWVVpFVEVWc1FsRlZZM05VTUVaQ1VWTjRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hHVVZWR1JreEZWa0pSVmxselVUQkdRbFpVZEVwUlZVNHlVV2w0VWxGVlJsSk1SVlpDVVZWVmMxWlZSa0pSZVhoS1VWVkdTa3hGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVVeFFsRlZNSE5TVlVaQ1VsTjRTbEZWUmtwTVJXeENVVlZ6YzFRd1JrSlJVM2hLVVZWR1NreEdUa0pSVmsxelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZYTlRNRVpDVTNsNFJsRlZSa1pNUlRGQ1VWVXdjMUl3UmtKU2VYaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVXhRbEZWTUhOU01FWkNVbmw0U2xGVlJrcE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlYyaEdURVZPUWxGWFpFWlBNR3hDVVROd1NFeEhUa0pSVjAxelVsVkdRbEpUZUd4UlZVWnNUekJPUWxFeWVFUk1SVTVDVVZWTk4xRlZSa1pTYVhoVVVWVkdWRXhJWkVOUlZVWXpVV2w0UkZGVlJrUk1SV3hDVVZoR1EweEZWa0pSVlZWelVUQkdRbG93U1hOU1ZVWkNVbE40VGxGVlJtcE1SVlpDVVZWVmMxWXdSa0pPUlVrM1UxVkdRazVWU1hOT1JVcENVVlZGYzFKVlJrSlJVM2gwVVd0R1FrNUZTVGRUVlVaR1ltdG5jMU5WUmtKVFUzaFFVVlZHVUV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFVTVRbEZWT0hOU1ZVWkVaRVZKYzFKVlJrSlNVM2hJVVZWR1NFeEZPVUpSVlRoelUxVkdRbE5UZUVSUlZVWkVURVV4UWxGVk1ITlRNRVpDVTNsNFdGRlZSbGhNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUk1taEdURVZXUWxGVlZYTlNNRVpDVW5sNFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RmRFSlJWWE56VmpCR1FsWjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWVG05U1UzaHVVV3RHUWxvd1NYTlNNRVpDWVZWSmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlZWVGRWVlVaRVpXdE5jMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1SbFpDVVZWTmMxSXdSa0poVlVselVsVkdRbEpUZUVSUlZVWkVURVZzUWxGVmMzTlVNRVpDVVZONFNGRlZSa2hNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4SVpFTlJWVVl6VVdsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VkZWR1FsUlRlRVpSVlVaR1RFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZob1JVeEZUa0pSV0dSRlRFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVhwV1NFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVprUWxGV1kzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UmxGVlJrWk1SV1JDVVZWamMxSlZSa0pTVTNoR1VWVk9kVkY1ZUVaUlZVWkdURVZrUWxGWFZYTlRWVVpDVTFONFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJlbVJEVEVWV1FsRlZWWE5TTUVaQ1dqQkpjMU5WUmtKVFUzaE1VVlZHVEV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEY2YkVOTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSTUhkelVqQkdRbEo1ZUVoUlZVWklURVpXUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU5WUmtKVWVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtKTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSZVRsRVRFVnNRbEZWYTNOV01FWkNWbmw0UmxGVlJrWlBNVVpDVWxkSmMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlYwMXpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaRVRWVkpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRlJSVlVaVVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWT05GRjVlRXBSVlVaS1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFeFJWVVpNVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVsVkdSRTFWVFhOU01FWkNVbmw0U0ZGVlJraE1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGWkVKUlZXTnpWREJHUWxSNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRTRkZWUmtoTVJXUkNVVlZqYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVqQkdRbEo1ZUZCUlZVWlFURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUTndSVXhGYkVKUlZXdHpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5hVlVaQ1dsTjRTRkZWUmtoTVJXUkNVVlZqYzFFd1JrSlJlblJTVVZWT2MxRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoS1VWVkdTa3hGVmtKUlZWVnpVekJHUWxONWVFWlJWVVpHVEVWa1FsRlZZM05TVlVaQ1VsTjRVRkZWUmxCTVJVNUNVVlZOYzFKVlJrSlNVM2hLVVZWR1NreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRUZFZWVVpFWlVWUmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVHeFJWVVpzVEVWa1FsRlZZM05TTUVaQ1VubDRSRkZWUmtSUE1VWkNVVEo0UkV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVlZVWkNWVk40UkZGVlJrUk1SV3hDVVZWcmMxSlZSa0pTVTNoTVVWVkdURXhGVmtKUlZWVnpVakJHUWxKNWVFWlJWVVpHVEVVNVFsRlZPSE5STUVaQ1VYbDRSbEZWUmtaTVJXeENVVlZyYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVUQkdRbEY2ZEV4UlZVMTZVa1IwU2xGVlRrVk1SV3hDVVZWcmMxSlZSa0pTVkhSU1VWVkdSa3hGYkVKUlZXdHpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJsWkNVVlZGYzFFd1JrSlJlWGhLVVZWR1NreEZPVUpSVlVWelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRVpSVlVZMlVXbDRSRkZWUmpWUmFYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JFNVZVWE5UVlVaQ1UxTjRSbEZWUmtaUE1VWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUZCUlZVWlFURVZPUWxGVlRYTldWVVpDVVZONFJGRlZSa1JQTVd4Q1VUTndRMHhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpxVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOTjFkVlJrUk9WVWx6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFZGRlZSbFJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGpaU2FYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1SlRFVnNRbEZWYTNOU1ZVWkNVbE40U0ZGVlJraE1SekZEVVZWR2RGRnBlRVJSVlVaRVRFVldRbEZWVlhOU1ZVWkNVbE40UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSa3hGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXlhRVZNUld4Q1VWVnJjMUpWUmtKU1UzaEdVVlZHUms4eFJrSlJNRzl6VWxWR1FsSlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0VmxGVlJrSk1SVTVDVVZWTmMxTlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhJVVZWR1NFeEZWa0pSVlZWelVUQkdRbEZUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VYcGtSRXhGVmtKUlZWVnpVVEJHUWxGNWVGQlJWVVpRVEVWT1FsRlZUWE5XVlVaQ1VWTjRSRkZWUmtSTVJXeENVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1VWkNVWHBzUlV4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWRmMxRXdSa0pSZW5SYVVWVk9jVkZwZUVwUlZVWktURWRHUWxGWFJYTlNNRVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaFFVVlZHVUV4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVRWVlJjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWRmMxRXdSa0pSZVhoS1VWVkdTa3hGT1VKUlZVVnpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRhRkZWUm1oTVJWWkNVVmhTUTB4RlRrSlJXRTVEVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVG5OU1EzaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxWlZSa0pSVTNoRVVWVkdSRXhGYkVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlRWVVpDVTFONGFGRlZSbWhNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlUxMlVsTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJNVVZWT1QwOHdiRUpSTUZGelZEQkdRbFI1ZUc1UmEwWkNXakJKYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRUZFJWVVpFWkd0TmMxRXdSa0pSZW5SQ1VWVldSVXhHVGtKUlZrMXpZbFZLUWxGWE1VTk1SVTVDVVZWTmMxSlZSa0phVTNoR1VWVkdSa3hGYkVKUlYyUkRURVZXUWxGNlJrVk1SV3hDVVZjeFEweEZWa0pSVlZWelZGVkdRbGw2ZEVwUlZWWjFVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYcDBTbEZWVG5sUmFYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVRKUmMxUXdSa0pVZVhoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTbEZWUmtwTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTW5CRVRFVnNRbEZWYTNOVVZVWkNWRk40U0ZGVlJraE1SV3hDVVZWcmMxTXdSa0pUZVhoRVVWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXljRVJNUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSazh4UmtKUk0wSkRURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1clRFVnNRbEZWYTNOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hFVVZWR1JFeEdUa0pSVmsxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUSm9SVXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRTbEZWUmtwTVJYUkNVVlZ6YzFFd1JrSlJlWGhLVVZWR1NreEZWa0pSVlZWelVUQkdRbEY1ZUVaUlZVWkdURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1dlVrTjRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVoUlZVWklURVZzUWxGVmEzTlRNRVpDVTNsNFJGRlZSa1JNUlhSQ1VWVnpjMUpWUmtKU1UzaEVVVlZHUkV4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh3ZEVKUk0zQkZUekJzUWxFd1VYTlVWVVpDVkZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaG9VVlZHYUV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlUxNlVXbDRTbEZWUmtwTVJWWkNVVlZWYzFJd1JrSlNlWGhLVVZWR1NreEZkRUpSVlhOelVsVkdRbGw1ZUVSUlZVWkVUekJzUWxFeWNFUk1SV3hDVVZWcmMxVlZSa0pWVTNoSVVWVkdTRXhHVmtKUlZsVnpVbFZHUWxKVGVFUlJWVVpFVHpCc1FsRjZWa05NUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoR1VWVkdSazh4UmtKUk0wSkRURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1elVXbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFeGIzTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUms4eGJFSlJNVmx6VlZWR1FsVlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9kVkZwZUVwUlZVWktURVZPUWxGVlRYTlpNRVpDV1hsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaFNVVlZHVWt4RlRrSlJWVTF6VVRCR1FsRjZkRlJSVlU1M1VYcDBhRkZWUms1UE1XeENVbFZuYzFWVlJrSlZVM2hFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFdsRlZUblZSYVhoS1VWVkdTa3hIVGtKUlYwMXpVakJHUWxKNWVGWlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSUE1tUkRVVlZPTUZGcGVFcFJWVVpLVEVWa1FsRlZZM05TTUVaQ1VubDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoSVVWVkdTRXhGTVVKUlZUQnpVVEJHUWxGNmRHNVJhMFpFVERCUmMxSlZSa0pTVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVkc1ExRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkUwd1RYTlJNRVpDVVhsNFJGRlZSa1JQTVd4Q1VUQlpjMU5WUmtKVFUzaHNVVlZHYkV4RlpFSlJWV056VmxWR1FsRjVlRkJSVlVaUVRFVldRbEZWVlhOVU1FWkNWSGw0UmxGVlJrWk1SWFJDVVZWek4xb3dTa0pSZWtaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVlpDVVZWVmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSbEZWUmtaTVJVNUNVVlZOTjFvd1NrSlJNbmhFVEVVNVFsRlZPSE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRNRVpDVTNsNFNsRlZSa3BNUlZaQ1VWVlZOMkl3U2tKUk1uQkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzWWpCS1FsRXhiM05STUVaQ1VYbDRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMGNGRnJSa1JsUlVrM1YxVkdSRlJEZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFVW1sNGJGRlZSbXhNUlU1Q1VWVk5jMVJWUmtKVVUzaEdVVlZHUmt4Rk1VSlJWVEJ6VWxWR1FsSlRlRlpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SV3hDVVZWemMxUXdSa0pSVTNocVVWVkdha3hGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUm5kUmFYaEVVVlZHZGxGcGVFUlJWVVpFVEVWT1FsRlZUVGRYVlVaRVlVVlZjMXBWUmtKYVUzaEVVVlZHUkV4Rk1VSlJWVEJ6VWxWR1FsSlRlRTVSVlVaT1RFVldRbEZWVlhOV1ZVWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoS1VWVkdURXhGT1VKUlZVVnpXVEJHUWxsNWVFUlJWVVpFVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOYzFKVlJrSmpSVWx6VVRCR1FtSXdTWE5STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVEkxUms4d2RFSlJNRzgzVTFWR1JGSkRlRkJSVlVaUVRFVk9RbEZWVFhOVVZVWkNWRk40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoS1VWVkdTa3hGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRUVlVaRVkwVk5jMVF3UmtKVWVYaEdVVlZHUmt4RlRrSlJWVTAzVVZWR1JGcERlRVJSVlVaRVR6QkdRbEpWVVhOVk1FWkNWWGw0YkZGVlJteE1SVTVDVVZWTmMxRXdSa0pVZVhoR1VWVkdSa3hHUmtKUldFNURUekJzUWxFelFrVk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhHVmtKUlZVMXpWREJHUWxSNWVFWlJWVVpHVEVVNVFsRlZPRGRWVlVaRVkydEpjMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VlZWR1FsVlRlRVJSVlVaRVRFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk5OVkZwZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUazlNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVTVRbEZWT0hOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxTXdSa0pUZVhoS1VWVkdTa3hGVmtKUlZWVTNWMVZHUkdGclRYTlRWVVpDVTFONFVGRlZSbEJNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRkpSVlVaU1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk1taEVURVZzUWxGVmEzTlVNRVpDVkhsNFNsRlZSa3BNUlU1Q1VWVk5jMU5WUmtKVFUzaFFVVlZHVUV4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVHpKa1ExRlZUVFZSZVhoRVVWVkdSRXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHlaRU5SVlU1NVVXbDRSRkZWUmtSTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTWtaQ1VUTm9RMDh4YkVKUk1GRnpVMVZHUWxOVGVGQlJWVVpRVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaUE1tUkRVVlZPYTB4Rk1VSlJWVEEzV1ZWR1JGWkVkRlJSVlU1TFR6QnNRbEV3ZDNOUk1FWkNVWGw0UkZGVlJrSlBNR3hDVVRCUmMxRXdSa0pSZVhoRVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVFNVJWVVpPVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVG5OUmFYaEVVVlZHUkV4RlRrSlJWVTF6VkZWR1FsUlRlRVpSVlVaR1RFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVVROU1EweEZUa0pSVlUwM1VWVkdSbEpEZUZSUlZVWlVURWRXUWxGWFZYTlJNRVpDVVhsNFJGRlZSbEJNUlZaQ1VWVlZjMVZWUmtKak1FazNVMVZHUkdORlVYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMVpWUmtKUmVYaFFVVlZHVUV4RlZrSlJWVlZ6VkRCR1FsUjZkRkpSVlU1NVVXbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhTVVZWR1VreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTAzVlZWR1JHVkZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlZWVVpDVlZONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVldRbEZWVlRkWFZVWkVZMnROYzFFd1JrSlJlWGhFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPZVZGcGVFUlJWVVpFVEVWT1FsRlZUWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFSVlJrSlVVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZPUWxFemFFTlBNR3hDVVRCM2MxRXdSa0pSZVhoRVVWVkdRazh3YkVKUk1GRnpVVEJHUWxGNWVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsTjRUbEZWUms1TVJVNUNVVlZOYzFFd1JrSlJlblJLVVZWT2MxRnBlRVJSVlVaRVRFVk9RbEZWVFhOVVZVWkNWRk40UmxGVlJrWk1SVEZDVVZVd2MxRXdSa0pSZVhoRVVWVkdSRTh3UmtKUk0xSkRURVZPUWxGVlRUZFJWVVpHVWtONFZGRlZSbTVSYVhoMlVXdEdRbUl3U1hOUk1FWkNVWGw0UmxGVlJteE1SVlpDVVZWVmMxTlZSa0phTUVrM1UxVkdSR0pGVlhOVU1FWkNWSGw0ZEZGclJrSmlWVWx6VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOVFZVWkNVMU40UmxGVlJrWk1SWFJDVVZWemMxSlZSa0pTVTNoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVTR3VWtONFJGRlZSa1JQTUVaQ1VtdFJjMkl3VWtKU1ZVMDNVVlZHUmxKRGVGUlJWVVp1VVdsNGRsRnJSa0ppTUVselVUQkdRbEY1ZUVaUlZVWnNURVZXUWxGVlZYTlRWVVpDV2pCSk4xTlZSa1JpUlZWelZEQkdRbFI1ZUhSUmEwWkNZbFZKYzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZWelUxVkdRbE5UZUVaUlZVWkdURVYwUWxGVmMzTlNWVVpDVWxONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZPTUZKRGVFUlJWVVpFVHpCR1FsSnJVWE5pTUZKQ1VsVk5OMUZWUmtaU1EzaFVVVlZHYmxGcGVEVlJhMFpDWlZWSmMxRXdSa0pSZVhoS1VWVkdlRkZxZEVwUlZVMTZVa040VUZGVlJsQk1TR1JEVVZWR00xRnBlRVJSVlVaRVRFVnNRbEZWYTNOU1ZVWkNVbE40VEZGVlJreE1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNVVlZHUkdSclVYTlJNRVpDVVhwMFFsRlZXa1ZNUkdoRlVWVldSRTh3UmtKU1ZWRnpWVEJHUWxvd1NYTmxWVXBDVVZoc1EweEZUa0pSVlUxelUxVkdRbU5WU1RkVFZVWkVUVEJSYzFRd1JrSlVlWGd6VVd0R1FtUXdTWE5STUVaQ1VYbDRTbEZWUmtwTVJWWkNVVlZWYzFNd1JrSlRlWGhHVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVUekJHUWxFeldrVk1SVTVDVVZWTk4xRlZSa2RTUTNjMFVrVkdSbEY2ZEVKUlZWWkZURVpPUWxGWFpFTk1SMDVDVVZkTmMxRXdSa0pSZVhoR1VWVkdiRTh3YkVKUmVrWkVURVZzUWxGVmEzTlNWVVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VmxWR1FsRlRlRVJSVlVaRVRFVnNRbEZWYTNOVU1FWkNVVk40U2xGVlJrcE1SMVpDVVZaRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1kwVkpjMUV3UmtKaU1FbHpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRjZUa1JNUld4Q1VWVnJjMUpWUmtKU1UzaElVVlZHU0V4SE9VTlJWVVoyVVdsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU0d1VYbDRTbEZWUmtwTVJURkNVVlV3YzFJd1JrSlNlWGhLVVZWR1NreEhSa0pSVlRCelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSaFJVMXpWRlZHUWxSVGVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsTjRSRkZWUmtSUE1HeENVVEpaYzFKVlJrSlNVM2hFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZaUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUld4Q1VWVnpjMVF3UmtKUlUzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOV1ZVWkNWbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVa3hGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVUxVVdsNFJGRlZSVFJSYVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdOclVYTlNWVVpDVWxONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VmxWR1FsRlRlRVJSVlVaRVRFVnNRbEZWWTNOVU1FWkNVVk40U2xGVlJrcE1SMVpDVVZaRmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1kwVkpjMUV3UmtKaU1FbHpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXpVa1JNUlZaQ1VWVlZjMUl3UmtKU2VYaDJVV3RHUW1Jd1NYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JHSkZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFsVlJrSlVVM2hFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUVEZSYVhoT1VWVkdUa3hGVGtKUlZVMXpVekJHUWxONWVFWlJWVVpHVEVWT1FsRlZUVGRUVlVaRVdtbDRSbEZWUmtaTVJVNUNVVlZOYzFRd1JrSlVlWGhFVVZWR1JFeEdWa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZPUWxGVlRYTlRWVVpDVTNsNFVGRlZSa0pNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRlpSVlVaV1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1Sa1pDVVZaRmMxSlZSa0pTVTNoRVVWVkdSRXhGVmtKUlZHeERURVZPUWxGVWFFTk1SVTVDVVZWTmMxRXdSa0pSZW5SQ1VWVk9ObEpEZUVSUlZVWkVUekJHUWxkRlVYTmtNRTVDVmpCTk4xRlZSbWhTUkhSS1VWVkdlRkY1ZUhSUk1FWkNWVlIwU2xGVlRqWlJlWGcxVVd0R1FtSlZTWE5UTUVaQ1dWTjRSbEZWUmtaTVJVNUNVVlpOTjFWVlJrSk5NRTF6VjFWR1JGTlRlSEpSYTBaQ1ZGTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEdUa0pSTWxFM1ZWVkdSMkV3U1hOV01FWkNVM2w0U0ZGVlJrMU1SWFJDVVZWemMxRXdSa0pWVkhNM1UxVkdSbUZGVFhOUk1FWkNVWHAwU2xGVlRrMU1TRTVEVVZWR1JFOHdSa0pSVlZGelVUQkdRbEY1ZUVKUlZYQkZURVZPUWxGWVJrUk1SMVpDVVZaRmMxSXdSa3BPVlUwM1VWVkdTMWRUZDNkUk1FWkNXbFIwUWxGVk1ERlJhblJLVVZWMFNreEhPVU5SVlVaMlVXbDRURkZWUm5KUmFYaEdVVlZOZUZGcGVFNVJWVVkxVVdsNFJsRlZUalpSYVhoVVVWVkdjRkY1ZUVaUlZVNDJVWGw0V0ZGVlJqTlJhWGhHVVZWT2IxRnBlR2hSVlVVMFVXcDBVbEZWYjNoUmVYaHdVV3RGTkZGclRUZFZWVVV4VVd4amMwMUZTa0pSVlVWelVsVkdRbEZUZUc1UmEwWkNZVlZOTjFWVlJrUmxhMDF6VGtWS1FsRlZSWE5TVlVaQ1VWTjRjbEZyUmtKa01FazNWVlZHUkdGRlNYTlBSVXBDVVZWRmMxSlZSa0pSVTNoNFVXdEdRazlGU1RkVlZVWkxaRVZKYzFaVlJrSlRlWGhJVVZWR1RVeEZkRUpSVlhOelVUQkdRbGxVZEZKUlZVMTRVV2w0V0ZGVlJrNU1SV1JDVVZVMGMxUlZSa0pVVTNoRVVWVkdkRkZxZEZKUlZVNDJVV2w0YWxGVlJsUk1SV1JDVVZaUmMxVXdSa0pWZVhoRVVWVkdNMUZxZEZKUlZWWnhVWGw0Y2xGclJrSlpVM2hJVVZWR2FVeEhSa0pSVjBWelVUQkdRbUZWU1RkVlZVWkdaRVZOYzFOVlJrSlRVM2hFVVZWR1JFeEdUa0pSVmsxelVqQkdRbEo1ZUV4UlZVWk1URVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUmxaQ1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTAzVjFWR1JFNVZTWE5VTUVaQ1ZIbDRSRkZWUmtSTVJVNUNVVlZOYzFWVlJrSlZVM2hJVVZWR1NFeEZiRUpSVld0eldsVkdRbHBUZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZPYzFKRGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVmtsTVJXeENVVlZyYzFZd1JrSldlblJhVVZWR1JreEZiRUpSVld0elVUQkdRbEY1ZUhCUmEwWkNZVlZKYzFFd1JrSlJlWGhZVVZWR1dFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZWWjVVa040U2xGVlJrcE1SMFpDVVZkRmMxTlZSa0pUVTNoVVVWVkdWRXhGYkVKUlZXdHpWREJHUWxSNWVGUlJWVVpVVEVWT1FsRlZUWE5VVlVaQ1ZGTjRURkZWUmt4TVJtUkNVVlpqYzFKVlJrSlNWSFJhVVZWT01sSlRlRXhSVlVaTVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SbFpDVVZWRmMxRXdSa0pSZW5SdVVXdEdSRTFWU1hOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSbEZWVGpaUmFuUjJVV3RHUmxGNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFVd1JrSlZlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SMlVXdEdSRTR3VFhOVU1FWkNWSHAwY0ZGclJrUlZSSFJ1VVd0R1JGbDVlRXBSVlVaS1RFVldRbEZWVlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoSVVWVkdTRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUwM1dqQktRbEV6YUVSTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZaRUpSVldOelUxVkdRbE5UZUZSUlZVWlVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUl3UmtKU2VYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFWlJWVVpHVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNTVVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9TVXhIZEVOUlZVWnlVV2w0UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUmVteERURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTAzVjFWR1JHTnJTWE5VVlVaQ1ZGTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUwM1dqQktRbEV4YjNOVE1FWkNVMU40UkZGVlJrUk1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFwVlJrSmFVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMU13UmtKVGVYaFlVVlZHV0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVHpKa1ExRlZUbkZUUTNoTVVWVkdTa3hGVGtKUlZVMXpWVEJHUWxWNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZaRUpSVldOelUxVkdRbE5UZUd4UlZVWnNURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTF6VlRCR1FsVjVlRXhSVlVaTVRFWmtRbEZXWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhHVGtKUlZrMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmphMmR6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVk1FWkVWR3AwU2xGVlRrMU1SVTVDVVZWTk4xTlZSa2hVZVhoNFVUQkdRbG93U1hOU01FWkNaVVZKYzFaVlJrSmxWVWx6VVRCR1FsUlVkRkpSVlUxNlVXbDRVRkZWUmxCTVJXeENVVlZyYzJGVlNrSlJWbFZ6VVRCR1JHRnJTWE5UVlVaQ1UxTjRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlZWVVpDVlZONFJsRlZUWHBSYVhoS1VWVkdTa3hGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFFd1JrSlJlWGhTVVZWR1VreEZWa0pSZWxaRFRFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SVlpDVVRCM2MxUXdSa0pVZVhoRVVWVkdSRXhGVGtKUlZVMXpWVlZHUWxWVGVFeFJWVVpNVEVaa1FsRldZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSaFJWVnpVVEJHUWxGNmRFcFJWV1JRVEVkc1JGRlZSbHBNUldSQ1VWaENRMHhHVmtKUldFWkRURVZPUWxGVk1EZFZWVVpDVFRCSmMyRlZTa0poVlVwRVR6RkdRbUZGU2toTVJXeENVVlZyYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxeldWVkdRbGxVZEZwUlZVWkdURVU1UWxGVk9EZFZWVVpHWVVWTmMxTlZSa0pUVTNoS1VWVkdTa3hGWkVKUlZXTnpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05TTUVaQ1VubDRVRkZWUmxCTVJVNUNVVlZOTjFWVlJrUlBWVWx6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40VEZGVlJreE1SV1JDVVZWak4xZFZSa0pTVTNoS1VWVkdTa3hGWkVKUlZXTnpVakJHUWxKNWVFWlJWVVpHVEVWa1FsRlZZM05TTUVaQ1VubDRVbEZWUmxKTVJVNUNVVlZOTjFWVlJrUk1NRTF6VTFWR1FsTlRlRVpSVlVaR1RFVmtRbEZYWkVOTVJVNUNVVlZOYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVpXUWxGVlJYTlJNRVpDVVhsNFNsRlZSa3BNUlRsQ1VWVkZjMU13UmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZkNFEweEZUa0pSVjNSRFRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpNVEVVNVFsRlZSWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDWVd0SmMxRXdSa0poVlVselVUQkdRbEY1ZUVSUlZVWkVUekZHUWxGNU9VZE1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdha3hGYkVKUlZXdHpVVEJHUWxGNmRGSlJWVTQwVVdsNFJsRlZSa1pNUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4R1ZrSlJWVVZ6VVRCR1FsRjZkRnBSVlZaVFRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWlBNbVJEVVZWT1NVeEZiRUpSVld0elZEQkdRbFI1ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFRkYU1FcENVWGs1UTB4RmJFSlJWV3R6VkRCR1FsUjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVkhSMlVXdEdSR0pyU1hOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoSVVWVkdTRXhGT1VKUlZUaHpVVEJHUWxGNmRIQlJhMFpFWTJ0Sk4xbFZSa1JUYW5SYVVWVk9SVXhGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVZtbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJLVVZWT1VVeEZUa0pSVlUwM1UxVkdSbFI1ZUhaUk1FWkNXbE40U0ZGVlJqSlJhWGhXVVZWR00xRnBlRVJSVlVaT1R6RkdRbEZVYkVOTVIyeERVVlpHUkU4eFJrSlZSV056VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpWREJHUWxSNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY2ZEZKUlZVMTJVWGw0U2xGVlJrcE1SVTVDVVZWTmMxZFZSa0pYVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXpTa05NUld4Q1VWVnJjMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVjBRbEZWYzNOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWMVZHUWxkVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFkVlJrSlhVM2hFVVZWR1JFOHhSa0pSTW1oR1RFVk9RbEZWVFhOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxTXdSa0pUZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOTjFkVlJrUmxSVWx6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOVE1FWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5WVlVaQ1ZWTjRSRkZWUmtSUE1XeENVVE5DUkV4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVFZVWkNVMU40Y0ZGclJrSldVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMUpWUmtKU1UzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEV5ZUVWTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTVVGelVUQkdRbEY2ZEVwUlZWWlFURWhPUkZGVlJuQlJhWGhJVVZWR05sRnBlRlpSVlVWM1VXbDRXRkZWUm5KUmFuUlNVVlZGTVZGNWVIQlJhMFpZVVhwMFVsRldXa2hNUld4Q1VWVnJjMU13UmtKVGVYaElVVlZHU0V4R1ZrSlJWVVZ6VVRCR1FsRjVlRXBSVlVaS1RFVTVRbEZWUlhOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoTVVWVkdURXhHWkVKUlZtTnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRURkZWUmt4TVJteENVVlpyYzFKVlJrSmxSVkZ6VVRCR1FtUXdVWE5STUVaQ1VYcDBVbEZWVFhoU1UzaEtVVlZHU2t4RlRrSlJWVTF6VjFWR1FsZFRlRWhSVlVaSVRFWmtRbEZXWXpkWlZVWkVUVlZKYzFSVlJrSlVVM2hFVVZWR1JFeEdWa0pSVlVWelVUQkdRbEY1ZUVwUlZVWktURVU1UWxGVlJYTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMU13UmtKVGVYaElVVlZHU0V4RmJFSlJWV3R6VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJYaFJhWGhFVVZWRmQxRnBlRVJSVlVaRVR6SkdRbEV6V2tSTVJXUkNVVlZqYzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUxelUxVkdRbE5UZUZCUlZVWkNURVYwUWxGVmEzTlJNRVpDVVhsNGJsRnJSa0phTUVselVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDWlVWSmMxRXdSa0prTUVselVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFemFFUk1SV3hDVVZWcmMxRXdSa0pSZVhoYVVWVkdXa3hGWkVKUlZXTnpWakJHUWxaNmRHaFJWVTE0VVdsNFRsRlZSazVNUlU1Q1VWVk5jMVpWUmtKUlUzaEVVVlZHUkV4RmJFSlJWV3R6VkRCR1FsRlRlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40VEZGVlJreE1SV1JDVVZWamMxTlZSa0pUVTNoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRlVSa05NUlU1Q1VWUkNRMHhGVGtKUlZVMDNXVlZHUkdSclRYTlNNRVpDVW5sNFJGRlZSa1JNUmxaQ1VWVkZjMUV3UmtKUmVYaEtVVlZHU2t4Rk9VSlJWVVZ6VXpCR1FsTlRlRVJSVlVaRVRFZGtRMUZWUm01UmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlVZMFVXbDRSRkZWUmpOUmFYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHVkZUWE5XTUVaQ1ZucDBhRkZWVGs5TVJURkNVVlV3YzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUxelUxVkdRbE5UZUZCUlZVWkNURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlhSQ1VWVnpjMVl3UmtKV2VYaEdVVlZHTUZGcGVFUlJWVVo2VVdsNFJGRlZSa1JQTWtaQ1VUSTFSRXhGT1VKUlZUaHpVVEJHUWxGNWVGWlJWVVpDVEVWT1FsRlZUWE5UVlVaQ1UxTjRVRkZWUmtKTVJYUkNVVlZyYzFFd1JrSlJlWGhzVVZWR2JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGWVdrTk1SVTVDVVZoV1EweEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMTJVWGw0UkZGVlJrUlBNR3hDVWxVNGMwNUZUa0pSV0ZaRFRFVmtRbEZUT1VOTVJsWkNVVmRrUkV4RlZrSlJWbXR6VWxWR1FsSlRlRVpSVlVaYVRFVldRbEZWVlhOVU1FWkNZVlZKYzFKVlJrSlNVM2hXVVZWR2RsRjZkRkpSVlUxMlVubDRTbEZWUmtwTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZaUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JQTVd4Q1VUTkNRMHhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWMFFsRlZjM05TVlVaQ1VsUjBibEZyUmtSV1EzaEVVVlZHUkV4RlRrSlJWVTF6VlZWR1FsVlRlRVJSVlVaRVRFVXhRbEZWTUhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxWXdSa0pXZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5XTUVaQ1ZubDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUwM1dqQktRbEV6Y0VWTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWxWUmtSUFZVazNZVlZLUWxGVk1EZGFNRXBDVVRCbmMxRXdSa0pSZVhoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFNVJWVVpPVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSUE1rWkNVVE53UTA4eGJFSlJNRkZ6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxTXdSa0pUZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPZDFKRGVFcFJWVVpLVEVWV1FsRlZWWE5TTUVaQ1VubDRSbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVoUlZVWklURVZXUWxGVlZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZOZWxGcGVFUlJWVVpFVEVWT1FsRlZUWE5VVlVaQ1ZGTjRTRkZWUmtoTVJXeENVVlZyYzFVd1JrSlZlWGhFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZXUWxGVlZYTlNWVVpDVWxONFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVpSVlVaR1RFVldRbEZWVlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk5NMUpEZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUbEZNUlU1Q1VWVk5OMU5WUmtaU1EzY3lVV3RHUWxWVGVFaFJWVVpUVEVaV1FsRldUWE5TVlVaQ1YxTjRSbEZWUmtaTVJWWkNVVlpyYzFKVlJrSlNVM2hFVVZWR1dFOHhSa0pSZWxaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoS1VWVkdTa3hGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5aVlVaQ1dWTjRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhhVVZWR1dreEZUa0pSVlUwM1YxVkdRbEpUZUZCUlZVWlFUekZHUWxGNlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVEVWV1FsRlZWWE5TVlVaQ1VsTjRSbEZWUmtaTVJWWkNVVlZWYzFFd1JrSlJlWGhHVVZWR1JreEdWa0pSVlVWelVUQkdRbEY1ZUVwUlZVWklURVU1UWxGVlJYTlJNRVpDVVhsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKVGFYaEVVVlZHU2t4RlZrSlJWVlZ6VTFWR1FsTlRlRVJSVlVaRVRFWnNRbEZXYTNOU1ZVWkNVbE40TlZGclJrSmxWVWx6VWxWR1JFOVZWWE5XVlVaQ1VWTjRSRkZWUmtSTVJXeENVVlZyYzFRd1JrSlJVM2hFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVpXUWxGV1ZYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWY3hRMHhGVGtKUlZVMXpVVEJHUWxGNWVGSlJWVVpVVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUZKUlZVWlNURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSblZTYVhoRVVWVkdkRkpwZUVaUlZVNDBVbWw0VmxGVlJrSk1SVTVDVVZWTk4xZFZSa1JTZVhoS1VWVkdTa3hGYkVKUlZXdHpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlhNVU5NUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVUV4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVEZDVVZVd2MxRXdSa0pSZVhoU1VWVkdVa3hGVmtKUlZWVnpVVEJHUWxGNmRGcFJWVTR3VWxONFNsRlZSa3BNUld4Q1VWVnJjMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWekZEVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUmxCTVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMUV3UmtKUmVuUmFVVlZPTUZKVGVFcFJWVVpLVEVWV1FsRlZWWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFRd1JrSlVlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEZwUlZVNHlVV2w0UkZGVlJrUk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpVakJHUWxKNWVFcFJWVVpLVEVWa1FsRlZZM05TVlVaQ1VsTjRSRkZWUmtSUE1XeENVVE5hUTB4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOUk1FWkNVWGw0U0ZGVlJraE1SV3hDVVZWcmMxSXdSa0pTZVhoR1VWVkdSa3hGVGtKUlZVMDNWVlZHUkUwd1NYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSWFEzaEVVVlZHUkU4d2JFSlNWVkZ6VG10S1FsRldSWE5TTUVaQ1ZXbDRWbEZWUmxSTVJWWkNVVlpyYzFKVlJrSlNVM2hHVVZWR1dreEZWa0pSVlZWelVUQkdRbFo2ZEZKUlZVMHhVWGw0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhHVGtKUlZrMXpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRXbEZWUmxwUE1XeENVVlZWYzFRd1JrSlVlblJTVVZWT2MxSkRlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVmIzTlJNRVpDVTFONFJsRlZSa1pNUld4Q1VWVnJjMUV3UmtKUmVYaGFVVlZHV2t4RlZrSlJWVlZ6WlZWS1FsRlliRU5NUlZaQ1VYcHNSa3hHVmtKUlZVVnpVVEJHUWxGNWVFcFJWVVpLVEVVNVFsRlZSWE5STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhXVVZWR1ZreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWjBVV2w0UkZGVlJrUk1SVTVDVVZWTmMxVlZSa0pWZVhoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRVbEZWUmxKTVJVNUNVVlZOYzFWVlJrSlZVM2hHVVZWR1JreEZUa0pSVlUxelVsVkdRbUpyV1hOUk1FWkNZbFZaYzFKVlJrUmxSVmx6VmxWR1FsRlRlRVJSVlVaRVR6RnNRbEV3WTNOVFZVWkNVMU40U2xGVlJrcE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdkRkZwZUVSUlZVWkVURVZPUWxGVlRYTlVWVVpDVkhsNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFhOVlZVWkNWVk40UmxGVlJrWk1SVTVDVVZWTk4xZFZSa1JrUlZWelUxVkdRbE5UZUVwUlZVWktURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSblJSYVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSNWVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhPVVZWR1RreEZUa0pSVlUxelZWVkdRbFZUZUVaUlZVWkdURVZPUWxGVlRUZFhWVVpFWkVWVmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVVNVFsRlZPSE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOTjFkVlJrUmthMGx6VVRCR1FsRjVlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxTlZSa0pUVTNoSVVWVkdTRXhGVmtKUlZWVnpVVEJHUWxGNmRGcFJWVVpDVEVWT1FsRlZUVGRYVlVaRVpVVkpjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SU1VWVk5lbEZwZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUbGxNUlU1Q1VWVk5OMU5WUmtaU1EzaDRVVEJHUWxvd1NYTlNNRVpDWVVWSk4xVlZSa0pSVTNod1VXdEdURkY2ZEZKUlZYQklURVU1UWxGVk9EZFhWVVpFVTBONFZsRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaTVRFVTVRbEZWUlhOVE1FWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmpSUmFYaEVVVlZHTTFGcWRGcFJWVTR5VVhsNFZsRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1UzaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRXBSVlVaTVRFVTVRbEZWUlhOVE1FWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRXdSa0pSZVhoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmpSUmFYaEVVVlZHTTFGcWRGUlJWVTE0VVhsNFJGRlZSa1JQTUd4Q1VUQTBjMUV3UmtKUmVuUktVVlZXVUV4RVVrTlJWVVpRVEVWa1FsRlhXWE5XVlVaQ1dqQkpjMUpWUmtKWFUzaEdVVlZHUmt4RlZrSlJWbXR6VWxWR1FsSlRlRXhSVlVac1RFVldRbEZWVlhOVU1FWkNZVlZKYzFKVlJrUk5WVlZ6VmxWR1FtSXdUWE5TVlVaRVkwVk5jMUpWUmtKYU1FbHpVbFZHUkdGRlNYTmlWVXBDVVZoc1JVeEZWa0pSTTNCRlRFZGtRMUZWUmpGUmVYaEdVVlZPTWxGNWVIQlJhMFpDVDBWTk4xVlZSa1pQVlUxelUxVkdRbE5UZUVSUlZVWkVURWhXUTFGVlJqRlJhWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVaUlZVWkdURVZXUWxGVlZYTlVNRVpDVkhsNFJsRlZSa1pNUmxaQ1VWWlZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJla1pGVEVWc1FsRlZhM05UVlVaQ1UxTjRSRkZWUmtSTVJrNUNVVlpOYzFOVlJrSlRVM2hLVVZWR1NreEZUa0pSVlUxeldWVkdRbGxUZUVaUlZVWkdUekZzUWxFelVrUk1SM1JEVVZWR2NsRnBlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VkZGVlJsUk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9kVkY1ZUVaUlZVWkdURVZrUWxGVlkzTlNWVVpDVWxONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaDBVV3RHUW1KVlNYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVV3UmtKVmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRlJSVlU0eVVrUjBVbEZWVGtWTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVpPUWxGV1RYTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVlZjMU13UmtKVGVYaEdVVlZHUmt4Rk9VSlJWVGh6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEY1T1VSTVJXeENVVlZyYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelZEQkdRbFI1ZUVSUlZVWkVURWRrUTFGVlJtNVJhWGhFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSR05yVFhOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTmMxVXdSa0pWZVhoS1VWVkdTa3hGYkVKUlZXdHpVVEJHUWxGNWVHaFJWVVpvVEVWV1FsRlZWVGRYVlVaRVpFVk5jMU5WUmtKVFUzaEVVVlZHUkV4Rk1VSlJWVEJ6VVRCR1FsRjVlRkJSVlVaUVRFVk9RbEZWVFhOaFZVcENVVmRzUTB4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlU0eVVYbDRjbEZyUmtKaE1FbHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5WTUVaQ1ZYbDRSRkZWUmtSTVJVNUNVVlZOTjFVd1JrUmtSVTAzVTFWR1JGUkRlRVJSVlVaRVR6QnNRbEpWT0hOTlJVcENVVlZ6YzFJd1JrSlphWGhXVVZWR2FreEZWa0pSVjAxelVsVkdRbEpUZUVaUlZVWnVVV2w0UmxGVlJrWk1Sa1pDVVZkMFEweEZWa0pSVlZWelZEQkdRbUZWU1RkVlZVWkVZV3RaYzFOVlJrSlRVM2hPVVZWR1RreEZaRUpSVldOelUxVkdRbE5UZUdoUlZVWk9URVZPUWxGVlRYTlNWVVpDVWxONFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNbWhFVEVVeFFsRlZNSE5STUVaQ1VYbDRkbEZyUmtKaU1FbHpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVGpCUmVYaE9VVlZHVGt4RlRrSlJWVTF6WWxWS1FsRlhNVU5NUlU1Q1VWVk5jMVF3UmtKVWVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHTkZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hFVVZWR1JFOHdiRUpSTWpWRFRFVk9RbEZWVFRkVFZVWkVWRU40Y0ZGclJrSlJlblJDVVZWR1JVeEZUa0pSVlUxelVWVkdjMU13VVhOVFZVWnlVekJOTjFGVlJuTlRNV3R6V2pCT1FsRldWV2xtVVQwOUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzUyWVhJZ2NIRjFaWFZsWHpFZ1BTQnlaWEYxYVhKbEtGd2lMaTl3Y1hWbGRXVmNJaWs3WEc1MllYSWdUbVZwWjJoaWIzVnlJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCT1pXbG5hR0p2ZFhJb2FXUXNJR1JwYzNSaGJtTmxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCcFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTjBZVzVqWlNBOUlHUnBjM1JoYm1ObE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdUbVZwWjJoaWIzVnlPMXh1ZlNncEtUdGNiblpoY2lCT2IyUmxJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCT2IyUmxLR2xrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVdRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVaV2xuYUdKdmRYSnpJRDBnVzEwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQk9iMlJsTzF4dWZTZ3BLVHRjYm5aaGNpQlJkV1YxWlVWdWRISjVJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCUmRXVjFaVVZ1ZEhKNUtHNXZaR1VzSUhCeVpYWXNJR1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbElEMGdibTlrWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WMklEMGdjSEpsZGp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrSUQwZ1pEdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRkYxWlhWbFJXNTBjbms3WEc1OUtDa3BPMXh1ZG1GeUlFTmhiR04xYkdGMGIzSWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdaMWJtTjBhVzl1SUVOaGJHTjFiR0YwYjNJb2Jpd2daWE1zSUdkbGRGTnZkWEpqWlVsdVpHVjRMQ0JuWlhSVVlYSm5aWFJKYm1SbGVDd2daMlYwVEdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViaUE5SUc0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlhNZ1BTQmxjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVaV2xuYUdKdmRYSnpJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXViaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBJRDBnZEdocGN5NXVPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9hUzB0S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVpXbG5hR0p2ZFhKelcybGRJRDBnYm1WM0lFNXZaR1VvYVNrN1hHNGdJQ0FnSUNBZ0lHa2dQU0IwYUdsekxtVnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHa3RMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdVZ1BTQjBhR2x6TG1WelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFVnUFNCblpYUlRiM1Z5WTJWSmJtUmxlQ2hsS1N3Z2RpQTlJR2RsZEZSaGNtZGxkRWx1WkdWNEtHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1FnUFNCblpYUk1aVzVuZEdnb1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTVsYVdkb1ltOTFjbk5iZFYwdWJtVnBaMmhpYjNWeWN5NXdkWE5vS0c1bGR5Qk9aV2xuYUdKdmRYSW9kaXdnWkNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVaV2xuYUdKdmRYSnpXM1pkTG01bGFXZG9ZbTkxY25NdWNIVnphQ2h1WlhjZ1RtVnBaMmhpYjNWeUtIVXNJR1FwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JEWVd4amRXeGhkRzl5TG5CeWIzUnZkSGx3WlM1RWFYTjBZVzVqWlUxaGRISnBlQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUVRZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1dUtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxtNDdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnUkZ0cFhTQTlJSFJvYVhNdVpHbHFhM04wY21GT1pXbG5hR0p2ZFhKektHa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJFTzF4dUlDQWdJSDA3WEc0Z0lDQWdRMkZzWTNWc1lYUnZjaTV3Y205MGIzUjVjR1V1UkdsemRHRnVZMlZ6Um5KdmJVNXZaR1VnUFNCbWRXNWpkR2x2YmlBb2MzUmhjblFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2xxYTNOMGNtRk9aV2xuYUdKdmRYSnpLSE4wWVhKMEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUVOaGJHTjFiR0YwYjNJdWNISnZkRzkwZVhCbExsQmhkR2hHY205dFRtOWtaVlJ2VG05a1pTQTlJR1oxYm1OMGFXOXVJQ2h6ZEdGeWRDd2daVzVrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwYW10emRISmhUbVZwWjJoaWIzVnljeWh6ZEdGeWRDd2daVzVrS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRU5oYkdOMWJHRjBiM0l1Y0hKdmRHOTBlWEJsTGxCaGRHaEdjbTl0VG05a1pWUnZUbTlrWlZkcGRHaFFjbVYyUTI5emRDQTlJR1oxYm1OMGFXOXVJQ2h6ZEdGeWRDd2daVzVrTENCd2NtVjJRMjl6ZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY1NBOUlHNWxkeUJ3Y1hWbGRXVmZNUzVRY21sdmNtbDBlVkYxWlhWbEtHWjFibU4wYVc5dUlDaGhMQ0JpS1NCN0lISmxkSFZ5YmlCaExtUWdQRDBnWWk1a095QjlLU3dnZFNBOUlIUm9hWE11Ym1WcFoyaGliM1Z5YzF0emRHRnlkRjBzSUhGMUlEMGdibVYzSUZGMVpYVmxSVzUwY25rb2RTd2diblZzYkN3Z01Da3NJSFpwYzJsMFpXUkdjbTl0SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJSEV1Y0hWemFDaHhkU2s3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2doY1M1bGJYQjBlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J4ZFNBOUlIRXVjRzl3S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxSUQwZ2NYVXVibTlrWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMUxtbGtJRDA5UFNCbGJtUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcElEMGdkUzV1WldsbmFHSnZkWEp6TG14bGJtZDBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNocExTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtVnBaMmhpYjNWeUlEMGdkUzV1WldsbmFHSnZkWEp6VzJsZExDQjJJRDBnZEdocGN5NXVaV2xuYUdKdmRYSnpXMjVsYVdkb1ltOTFjaTVwWkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEYxTG5CeVpYWWdKaVlnZGk1cFpDQTlQVDBnY1hVdWNISmxkaTV1YjJSbExtbGtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbWxrZFdsa0lEMGdkaTVwWkNBcklDY3NKeUFySUhVdWFXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hacFpIVnBaQ0JwYmlCMmFYTnBkR1ZrUm5KdmJTQW1KaUIyYVhOcGRHVmtSbkp2YlZ0MmFXUjFhV1JkSUR3OUlIRjFMbVFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqWXlBOUlIRjFMbkJ5WlhZZ1B5QndjbVYyUTI5emRDaHhkUzV3Y21WMkxtNXZaR1V1YVdRc0lIVXVhV1FzSUhZdWFXUXBJRG9nTUN3Z2RDQTlJSEYxTG1RZ0t5QnVaV2xuYUdKdmRYSXVaR2x6ZEdGdVkyVWdLeUJqWXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmFYTnBkR1ZrUm5KdmJWdDJhV1IxYVdSZElEMGdkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4TG5CMWMyZ29ibVYzSUZGMVpYVmxSVzUwY25rb2Rpd2djWFVzSUhRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnY0dGMGFDQTlJRnRkTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvY1hVdWNISmxkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjWFVnUFNCeGRTNXdjbVYyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwYUM1d2RYTm9LSEYxTG01dlpHVXVhV1FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYUm9PMXh1SUNBZ0lIMDdYRzRnSUNBZ1EyRnNZM1ZzWVhSdmNpNXdjbTkwYjNSNWNHVXVaR2xxYTNOMGNtRk9aV2xuYUdKdmRYSnpJRDBnWm5WdVkzUnBiMjRnS0hOMFlYSjBMQ0JrWlhOMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoa1pYTjBJRDA5UFNCMmIybGtJREFwSUhzZ1pHVnpkQ0E5SUMweE95QjlYRzRnSUNBZ0lDQWdJSFpoY2lCeElEMGdibVYzSUhCeGRXVjFaVjh4TGxCeWFXOXlhWFI1VVhWbGRXVW9ablZ1WTNScGIyNGdLR0VzSUdJcElIc2djbVYwZFhKdUlHRXVaQ0E4UFNCaUxtUTdJSDBwTENCcElEMGdkR2hwY3k1dVpXbG5hR0p2ZFhKekxteGxibWQwYUN3Z1pDQTlJRzVsZHlCQmNuSmhlU2hwS1R0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2WkdVZ1BTQjBhR2x6TG01bGFXZG9ZbTkxY25OYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbVFnUFNCcElEMDlQU0J6ZEdGeWRDQS9JREFnT2lCT2RXMWlaWEl1VUU5VFNWUkpWa1ZmU1U1R1NVNUpWRms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5FZ1BTQnhMbkIxYzJnb2JtOWtaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0NGeExtVnRjSFI1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFJRDBnY1M1d2IzQW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmJkUzVwWkYwZ1BTQjFMbVE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZFM1cFpDQTlQVDBnWkdWemRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd1lYUm9JRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFlnUFNCMU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNoMGVYQmxiMllnZGk1d2NtVjJJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9MbkIxYzJnb2RpNXdjbVYyTG1sa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGlBOUlIWXVjSEpsZGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ2RTNXVaV2xuYUdKdmRYSnpMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm1WcFoyaGliM1Z5SUQwZ2RTNXVaV2xuYUdKdmRYSnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJJRDBnZEdocGN5NXVaV2xuYUdKdmRYSnpXMjVsYVdkb1ltOTFjaTVwWkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFFnUFNCMUxtUWdLeUJ1WldsbmFHSnZkWEl1WkdsemRHRnVZMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVXVaQ0FoUFQwZ1RuVnRZbVZ5TGsxQldGOVdRVXhWUlNBbUppQjJMbVFnUGlCMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhZdVpDQTlJSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWXVjSEpsZGlBOUlIVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhFdWNtVmtkV05sUzJWNUtIWXVjU3dnZGl3Z1puVnVZM1JwYjI0Z0tHVXNJSEVwSUhzZ2NtVjBkWEp1SUdVdWNTQTlJSEU3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pEdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGRIVnliaUJEWVd4amRXeGhkRzl5TzF4dWZTZ3BLVHRjYm1WNGNHOXlkSE11UTJGc1kzVnNZWFJ2Y2lBOUlFTmhiR04xYkdGMGIzSTdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGpNbWgyWTI1U2JHTXpVbmRaV0ZKdlkzazFjV041U1hOSmJrNTJaRmhLYWxwV1NuWmlNMUZwVDJsSmFVeERTbnBpTTFaNVdUSldla2xxY0dKSmFUUjFUSGswZFV3eFpHeFphMDUyWWtkRmRtTXpTbXBNTTA1dllqTktNRnBZVGpCalIwWXdZVWhOZFdSSVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtscWN6ZFJWVVpDVVZONGRGRXdSa0ppVlZFM1VWVkdSbUpyVVRkVFZVWkVVMU40ZEZGclJrSmlWVWx6VWxWR1FsWlRlRVpSVlVaVVRFWkdRbEZYWkVOUE1VWkNVVmMxUkV4Rk9VSlJWVlZ6VWpCR1FsSnBlRVpSVlVaR1RFVk9RbEZXUlRkVlZVWkNWWGw0YUZGVlJsSk1SV1JDVVZaSmMxVlZSa0pWVTNoRVVWVkdVazh3YkVKUlZXdHpVVEJHUWxGNmRFcFJWVTEyVWtONGJsRnJSa0pSZW5SQ1VWVkdSVXhGVGtKUlZVMXpVVlZHUjFKRGVFcFJWVlpFVHpCR1FsSlZVVGRUVlVaRVUxTjRhbEZWUm5SUmFYaEdVVlZHVms4eFJrSlJWbGx6VkRCR1FsSlRlRWhSVlVaSFRFVldRbEZWVlhOUk1FWkNWVlIwVWxGVlRqWlJhWGhLVVZWR1NreEZUa0pSVlUxelZsVkdRbFpUZUVoUlZVWklURVZXUWxGVlZYTlJNRVpDVVhwMFNsRlZUalpSYVhoRVVWVkdSRTh3YkVKVE1IZHpWakJHUWxGNmRFSlJWVVpGVEVWT1FsRlZUWE5SVlVaVFVrTjRTbEZXUmtSUE1FWkNVbFZSTjFOVlJrUlRVM2gyVVd0R1FtSlZTWE5UVlVaQ1ZsTjRSbEZWUmxSTVJXeENVVmRrUTB4RlZrSlJWazF6VVRCR1FsVjZkRkpSVlVaNVVrTjRWRkZWUmtwTVJXUkNVVlZ2YzFOVlJrSlRVM2hFVVZWR1RrOHhSa0pSVmsxelZUQkdRbE5UZUVoUlZVWkxURVZzUWxGVmEzTlJNRVpDVjFSMFVsRlZSbFJNUlRGQ1VWVk5jMUl3UmtKU1EzaEVVVlZHUkV4RlRrSlJWa1UzVTFWR1FsSjVlRVJSVlVaRVR6QnNRbEV5YUVkTVIyeERVVlZHUkU4d1JrSlJWVkZ6VVRCR1FsRjVlRUpSVlZwRlRFVnNRbEpWVFRkUlZVWlVVa1IwU2xGVlpFcE1SemxEVVZWR2RGRnBlRVJSVlVaVVRFVldRbEZXVFhOU1ZVWkNWbE40UmxGVlJrWk1SMDVDVVZjeFJFeEZWa0pSVlZWeldUQkdRbUpWVFhOU1ZVWkNVbE40VkZGVlJUUlJhblJTVVZWR01GTlRlRTVSVlVaRVRFVmtRbEZWVVhOUk1FWkNVWGw0UkZGVlJsSlBNVVpDVVZaTmMxUXdSa0pTVTNoSVVWVkdSMHhGVmtKUlZWVnpVVEJHUWxWVWRGSlJWVTE2VVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVpWUmtKV1UzaElVVlZHU0V4RmJFSlJWV3R6VXpCR1FsTjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZW5SU1VWVk9kMUY1ZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFVldRbEZWVlRkWFZVWkNVbE40U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHhSa0pTVkdSRlRFVk9RbEZWVFhOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNmRGSlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWTjFkVlJrUk9WVWx6VTFWR1FsTlRlRVJSVlVaRVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTUxVVdsNFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKV2VYaHFVVlZHYWt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJsaE1SMDVDVVZkTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTV4VWxONFNsRlZSa3BNUlU1Q1VWVk5jMUl3UmtKU2VYaFVVVlZHVkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkWFZVWkVZMnRKYzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFZsRlZSbFpNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VlRCR1FsVjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4YkVKUk0yaEZURVZzUWxGVmEzTlJNRVpDVVhsNFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VmxWR1FsWlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SazVDVVZaTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVFhwU1JIUktVVlZPVFV4RlRrSlJWVTAzVTFWR1ZsSkRlSFJSTUVaQ1dYbDRTRkZWUm10UE1VWkNVVEJyYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUV4UlZVWk1URVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJla1pEVEVWMFFsRlZjM05UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUms4eGJFSlJlbVJEVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxellUQktRbEZYZEVOTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1ZUQkdSR05yVFRkVlZVWkVVa040VUZGVlJsQk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9hVXhGVGtKUlZVMDNVMVZHVWxKRGVIcFJNRVpDWVZWSmMxSXdSa0poYTBselZsVkdRbUV3U1hOVE1FWkNXVlIwVWxGVlRYcFJhWGhRVVZWR1VFeEZiRUpSVld0elVUQkdRbEY1ZUhKUmEwWkNZVEJKYzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMTRVWGw0UkZGVlJrUlBNR3hDVWxWUmMyUlZUa0pSVjNSRFRFVmtRbEZYZUVOTVJsWkNVVmN4UTB4RmRFSlJWMFZ6VWxWR1FsSlRlRWhSVlVaWVR6RkdRbEV6Y0VSTVJUbENVVlU0YzFOVlJrSlRVM2hFVVZWR1JFeEhkRU5SVlVaeVVXbDRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEVwUlZVMTJVWGw0UkZGVlJrUlBNR3hDVXpCUmMySlZVa0pSVkdoRFRFVmtRbEZVYkVOTVJsWkNVVEJyYzFNd1JrSlpVM2hHVVZWT2FVeEZaRUpSVm1OelVsVkdSRmREZUZKUlZVVTBVWHAwVWxGVlZUVlJlWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVwUlZVWktURWhPUTFGVlJtaE1SVTVDVVZkRmMxWlZSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpNVEVVNVFsRlZSWE5STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWlhURVZPUWxGV1ZYTlJNRVpDVVhsNFJsRlZUakpTUTNoRVVWVkdSRXhGWkVKUlZrMXpVMVZHUWxOVGVFUlJWVVpFVEVaV1FsRldWWE5STUVaQ1VYbDRURkZWUmt4TVJVNUNVVlZOYzFKVlJrUmhSVTF6VWxWR1FsSlRlRWhSVlVac1RFVnNRbEZWYTNOV1ZVWkNWbE40UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pSZVhoS1VWVkdTa3hGVmtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWV1FsRXpjRVJNUm1SQ1VWWmpjMUl3UmtKU2VYaEdVVlZHUmt4RlRrSlJWVTAzVlZWR1JHTnJTWE5STUVaQ1VYbDRSRkZWUmtSTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNVpURVU1UWxGVk1ITlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMU13UmtKVGVYaEdVVlZHUmt4RlZrSlJWVlUzVjFWR1JGcERlRVpSVlVaR1RFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4YkVKUk1rbHpVVEJHUWxGNWVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOTjFkVlJrUlhhWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVYwUWxGVmMzTlNNRVpDVW5sNFJsRlZSa1pQTW1SRFVWVk9hMHhGTVVKUlZUQTNXVlZHUkZaRWRGcFJWVTVGVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlWGhXVVZWR1ZreEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVUekZzUWxGVlRYTlVNRVpDVkhsNFJGRlZSa1JNUlZaQ1VWVlZjMUpWUmtKU1ZIUnVVV3RHUkdOclRYTlRWVVpDVTFONFZGRlZSbFJNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4R1ZrSlJWbFZ6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkVUVEJKYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlZNRVpDVlhsNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEVVVlZHUkU4eVpFTlJWV1F3VVhsNFNsRlZSa3BNUlZaQ1VWVlZjMUV3UmtKUmVYaEtVVlZHU2t4RmJFSlJWV3R6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEZWVlhOVE1FWkNVM2w0UmxGVlJrWk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFWlJWVVpHVHpJNVExRlZSa1pNUms1Q1VWWk5OMW93U2tKVFYzaEZURVZzUWxGVmEzTlVWVVpDVkZONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlpFSlJWV056VWpCR1FsSjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTk4xb3dTa0pSZVRsRFRFVnNRbEZWWTNOVVZVWkNWRk40U2xGVlJrcE1SbVJDVVZaamMxTlZSa0pUVTNoWVVWVkdXRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVWc1FsRlZhM05TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjJJd1NrSlJNalZGVEVaT1FsRldUVGRhTUVwQ1VsZEpjMU5WUmtKVFUzaEdVVlZHUmt4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxVlZSa0pWVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVsVkdRbEpUZUVaUlZVWkdURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVpSVlU0MFVrTjRSRkZWUmtSTVJXUkNVVlZqYzFKVlJrSlNVM2hFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUZSUlZVWlVURVZPUWxGVlRYTlZWVVpDVlZONFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVuUnVVV3RHU0dSclRYTldNRVpDVm5sNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVpVVkpjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFWldRbEZXVlhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxSlZSa0pTVTNoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUVGRaVlVaRVkwVk5OMVV3UmtSVGFuUlNVVlZPUlV4RmJFSlJWV3R6VTFWR1FsTlRlRWhSVlVaYVRFVldRbEZWVlhOUk1FWkNVWHAwVWxGVlRqSlJhWGhRVVZWR1VFeEZWa0pSVlZWelVUQkdRbEY1ZUVwUlZVWktURVZXUWxGVlZUZFhWVVpFVjJsNFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjZkRnBSVlU1cFRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYcDBWRkZWVGpaUmFuUlNVVlZPUlV4Rk9VSlJWVGh6VTFWR1FsTlRlRVJSVlVaRVR6QnNRbEV5YUVOTVJVNUNVVlZOTjFOVlJrWlVlWGd4VVRCR1FtRXdTWE5TTUVaQ1RWVkpjMVpWUmtKTmEwbHpVekJHUWxsVGVFWlJWVVpHVEVWc1FsRlhiRU5QTVVaQ1VWZHdRMHhJUmtOUlZVWkNURVZXUWxGVlJYTlZWVVpDV2pCSmMxRXdSa0pSZW5SU1VWVk9NbEpEZUVwUlZVWktURVZPUWxGVlRYTlNNRVpDVW5sNFNsRlZSa3BNU0U1RFVWVkdhRXhGVGtKUlZUaHpWbFZHUWxGNWVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRTbEZWUmt4TVJUbENVVlZGYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSbGRNUlU1Q1VWWlZjMUV3UmtKUmVYaEdVVlZPY1ZKRGVFUlJWVVpFVEVWa1FsRlZZM05UVlVaQ1UxTjRSRkZWUmtSTVJsWkNVVlpWYzFFd1JrSlJlWGhPVVZWR1RreEZWa0pSZWtaRFRFVk9RbEZWVFhOU01FWkNXVk40U2xGVlJrcE1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTEyVVdsNFVGRlZSbEJNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUms4eGJFSlJNVWx6VTFWR1FsTlRlRXBSVlVaS1RFVmtRbEZXVFhOVFZVWkNVMU40UkZGVlJrUk1SbFpDVVZaVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGcFJWVTUzVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VXpCR1FsTjVlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFUlJWVVpFVEVkc1ExRlZSbkJSYVhoRVVWVkdSRTh4YkVKUk0wSkZURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWHAwVkZGVlRqWlJhblJTVVZWT1JVeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVTNsNFJsRlZSa1pNUlZaQ1VWVlZOMWRWUmtaYWFYaEtVVlZHU2t4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UmxGVlJrWk1SVTVDVVZWTk4xZFZSa1JoUlVselVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKU2VYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RnNRbEV5VVhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoTVVWVkdURXhGYkVKUlZXdHpVbFZHUWxKVWRHNVJhMFpFV21sNFNsRlZSa3BNUld4Q1VWVnJjMUl3UmtKWlUzaEdVVlZHUmt4RlRrSlJWVTAzV2pCS1FsRXphRU5NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRzVSYTBaRVZtbDRVRkZWUmxCTVJUbENVVlU0YzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elV6QkdRbE41ZUZoUlZVWllURVZXUWxGVlZUZGlNRXBDVVRKNFJFeEZiRUpSVld0elVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjZkSFpSYTBaRVkydEpjMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFRkaFZVcENVVEpSTjFvd1NrSlJNRkZ6VkRCR1FsUjVlRXBSVlVaS1RFVk9RbEZWVFRkWlZVWkVXbXAwV2xGVlRrVk1SVTVDVVZWTmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpWbFZHUWxaVGVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYcDBXbEZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGhHVVZWR1JreEZWa0pSVlZVM1dqQktRbEV5Y0VSTVJXeENVVlZyYzFVd1JrSlZlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY1ZUZaUlZVWldURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMW93U2tKUk1taEVURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VlRCR1FsVjVlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWT01GRjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhHVGtKUlZrMXpVVEJHUWxGNWVGSlJWVVpTVEVWT1FsRlZUVGRhTUVwQ1VUSndSRXhGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5UTUVaQ1UzbDRUbEZWUms1TVJVNUNVVlZOYzFVd1JrSlZlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSa1pQTWpsRFVWVk9lVkY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkZWcGVFUlJWVVpFVEVWT1FsRlZUWE5UVlVaQ1UxTjRTRkZWUmtoTVJVNUNVVlZOYzFFd1JrSlJlblIyVVd0R1JGZERlRVJSVlVaRVRFVk9RbEZWVFhOVk1FWkNWWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFWlJWVVpHVEVaV1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtSTVJVNUNVVlZOYzFOVlJrSlNlWGhRVVZWR1FreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFJsRlZSbEZNUlU1Q1VWVTRjMUV3UmtKUmVYaEVVVlZHUkU4eWJFTlJWVTR5VVhwMGFGRlZUa3RQTVU1Q1VUQnZOMVZWUmtSU1EzaFFVVlZHVUV4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlU1cFRFVk9RbEZWVFRkVFZVWkVWRU40Y0ZGclJrSlJlblJDVVZWR1JVeEZUa0pSVlUxelVWVkdjVk5WVVhOVFZVWndVMVZOTjFGVlJuRlRWbXR6V2pCT1FsRldWV2xtVVQwOUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzUyWVhJZ1VHOXphWFJwYjI1VGRHRjBjeUE5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z1VHOXphWFJwYjI1VGRHRjBjeWh6WTJGc1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmpZV3hsSUQwZ2MyTmhiR1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRVUlnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGRUlEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUJNaUE5SURBN1hHNGdJQ0FnZlZ4dUlDQWdJRkJ2YzJsMGFXOXVVM1JoZEhNdWNISnZkRzkwZVhCbExtRmtaRlpoY21saFlteGxJRDBnWm5WdVkzUnBiMjRnS0hZcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGcElEMGdkR2hwY3k1elkyRnNaU0F2SUhZdWMyTmhiR1U3WEc0Z0lDQWdJQ0FnSUhaaGNpQmlhU0E5SUhZdWIyWm1jMlYwSUM4Z2RpNXpZMkZzWlR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGRwSUQwZ2RpNTNaV2xuYUhRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UVVJZ0t6MGdkMmtnS2lCaGFTQXFJR0pwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0ZFSUNzOUlIZHBJQ29nWVdrZ0tpQjJMbVJsYzJseVpXUlFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1Qk1pQXJQU0IzYVNBcUlHRnBJQ29nWVdrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JRYjNOcGRHbHZibE4wWVhSekxuQnliM1J2ZEhsd1pTNW5aWFJRYjNOdUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVRVVFnTFNCMGFHbHpMa0ZDS1NBdklIUm9hWE11UVRJN1hHNGdJQ0FnZlR0Y2JpQWdJQ0J5WlhSMWNtNGdVRzl6YVhScGIyNVRkR0YwY3p0Y2JuMG9LU2s3WEc1bGVIQnZjblJ6TGxCdmMybDBhVzl1VTNSaGRITWdQU0JRYjNOcGRHbHZibE4wWVhSek8xeHVkbUZ5SUVOdmJuTjBjbUZwYm5RZ1BTQW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR1oxYm1OMGFXOXVJRU52Ym5OMGNtRnBiblFvYkdWbWRDd2djbWxuYUhRc0lHZGhjQ3dnWlhGMVlXeHBkSGtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z4ZFdGc2FYUjVJRDA5UFNCMmIybGtJREFwSUhzZ1pYRjFZV3hwZEhrZ1BTQm1ZV3h6WlRzZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG14bFpuUWdQU0JzWldaME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KcFoyaDBJRDBnY21sbmFIUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyRndJRDBnWjJGd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeGRXRnNhWFI1SUQwZ1pYRjFZV3hwZEhrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WVdOMGFYWmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXpZWFJwYzJacFlXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGxablFnUFNCc1pXWjBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnBaMmgwSUQwZ2NtbG5hSFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMkZ3SUQwZ1oyRndPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnhkV0ZzYVhSNUlEMGdaWEYxWVd4cGRIazdYRzRnSUNBZ2ZWeHVJQ0FnSUVOdmJuTjBjbUZwYm5RdWNISnZkRzkwZVhCbExuTnNZV05ySUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MWJuTmhkR2x6Wm1saFlteGxJRDhnVG5WdFltVnlMazFCV0Y5V1FVeFZSVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQjBhR2x6TG5KcFoyaDBMbk5qWVd4bElDb2dkR2hwY3k1eWFXZG9kQzV3YjNOcGRHbHZiaWdwSUMwZ2RHaHBjeTVuWVhCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdElIUm9hWE11YkdWbWRDNXpZMkZzWlNBcUlIUm9hWE11YkdWbWRDNXdiM05wZEdsdmJpZ3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUVOdmJuTjBjbUZwYm5RN1hHNTlLQ2twTzF4dVpYaHdiM0owY3k1RGIyNXpkSEpoYVc1MElEMGdRMjl1YzNSeVlXbHVkRHRjYm5aaGNpQldZWEpwWVdKc1pTQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWm5WdVkzUnBiMjRnVm1GeWFXRmliR1VvWkdWemFYSmxaRkJ2YzJsMGFXOXVMQ0IzWldsbmFIUXNJSE5qWVd4bEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoM1pXbG5hSFFnUFQwOUlIWnZhV1FnTUNrZ2V5QjNaV2xuYUhRZ1BTQXhPeUI5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpZMkZzWlNBOVBUMGdkbTlwWkNBd0tTQjdJSE5qWVd4bElEMGdNVHNnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzJseVpXUlFiM05wZEdsdmJpQTlJR1JsYzJseVpXUlFiM05wZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXbG5hSFFnUFNCM1pXbG5hSFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYkdVZ1BTQnpZMkZzWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUWdQU0F3TzF4dUlDQWdJSDFjYmlBZ0lDQldZWEpwWVdKc1pTNXdjbTkwYjNSNWNHVXVaR1prZGlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJREl1TUNBcUlIUm9hWE11ZDJWcFoyaDBJQ29nS0hSb2FYTXVjRzl6YVhScGIyNG9LU0F0SUhSb2FYTXVaR1Z6YVhKbFpGQnZjMmwwYVc5dUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUZaaGNtbGhZbXhsTG5CeWIzUnZkSGx3WlM1d2IzTnBkR2x2YmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2gwYUdsekxtSnNiMk5yTG5CekxuTmpZV3hsSUNvZ2RHaHBjeTVpYkc5amF5NXdiM051SUNzZ2RHaHBjeTV2Wm1aelpYUXBJQzhnZEdocGN5NXpZMkZzWlR0Y2JpQWdJQ0I5TzF4dUlDQWdJRlpoY21saFlteGxMbkJ5YjNSdmRIbHdaUzUyYVhOcGRFNWxhV2RvWW05MWNuTWdQU0JtZFc1amRHbHZiaUFvY0hKbGRpd2daaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdabVlnUFNCbWRXNWpkR2x2YmlBb1l5d2dibVY0ZENrZ2V5QnlaWFIxY200Z1l5NWhZM1JwZG1VZ0ppWWdjSEpsZGlBaFBUMGdibVY0ZENBbUppQm1LR01zSUc1bGVIUXBPeUI5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5QZFhRdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1l5a2dleUJ5WlhSMWNtNGdabVlvWXl3Z1l5NXlhV2RvZENrN0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTkpiaTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqS1NCN0lISmxkSFZ5YmlCbVppaGpMQ0JqTG14bFpuUXBPeUI5S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQldZWEpwWVdKc1pUdGNibjBvS1NrN1hHNWxlSEJ2Y25SekxsWmhjbWxoWW14bElEMGdWbUZ5YVdGaWJHVTdYRzUyWVhJZ1FteHZZMnNnUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFSnNiMk5yS0hZcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MllYSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIWXViMlptYzJWMElEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjeUE5SUc1bGR5QlFiM05wZEdsdmJsTjBZWFJ6S0hZdWMyTmhiR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZrWkZaaGNtbGhZbXhsS0hZcE8xeHVJQ0FnSUgxY2JpQWdJQ0JDYkc5amF5NXdjbTkwYjNSNWNHVXVZV1JrVm1GeWFXRmliR1VnUFNCbWRXNWpkR2x2YmlBb2Rpa2dlMXh1SUNBZ0lDQWdJQ0IyTG1Kc2IyTnJJRDBnZEdocGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1MllYSnpMbkIxYzJnb2RpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNITXVZV1JrVm1GeWFXRmliR1VvZGlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0c5emJpQTlJSFJvYVhNdWNITXVaMlYwVUc5emJpZ3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnN1Y0hKdmRHOTBlWEJsTG5Wd1pHRjBaVmRsYVdkb2RHVmtVRzl6YVhScGIyNGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hNdVFVSWdQU0IwYUdsekxuQnpMa0ZFSUQwZ2RHaHBjeTV3Y3k1Qk1pQTlJREE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0J1SUQwZ2RHaHBjeTUyWVhKekxteGxibWQwYURzZ2FTQThJRzQ3SUNzcmFTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSE11WVdSa1ZtRnlhV0ZpYkdVb2RHaHBjeTUyWVhKelcybGRLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiM051SUQwZ2RHaHBjeTV3Y3k1blpYUlFiM051S0NrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JDYkc5amF5NXdjbTkwYjNSNWNHVXVZMjl0Y0hWMFpWOXNiU0E5SUdaMWJtTjBhVzl1SUNoMkxDQjFMQ0J3YjNOMFFXTjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWm1SMklEMGdkaTVrWm1SMktDazdYRzRnSUNBZ0lDQWdJSFl1ZG1semFYUk9aV2xuYUdKdmRYSnpLSFVzSUdaMWJtTjBhVzl1SUNoakxDQnVaWGgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1gyUm1aSFlnUFNCZmRHaHBjeTVqYjIxd2RYUmxYMnh0S0c1bGVIUXNJSFlzSUhCdmMzUkJZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWxlSFFnUFQwOUlHTXVjbWxuYUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtabVIySUNzOUlGOWtabVIySUNvZ1l5NXNaV1owTG5OallXeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR011YkcwZ1BTQmZaR1prZGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbVpIWWdLejBnWDJSbVpIWWdLaUJqTG5KcFoyaDBMbk5qWVd4bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTXViRzBnUFNBdFgyUm1aSFk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTjBRV04wYVc5dUtHTXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSbVpIWWdMeUIyTG5OallXeGxPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnN1Y0hKdmRHOTBlWEJsTG5CdmNIVnNZWFJsVTNCc2FYUkNiRzlqYXlBOUlHWjFibU4wYVc5dUlDaDJMQ0J3Y21WMktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSFl1ZG1semFYUk9aV2xuYUdKdmRYSnpLSEJ5WlhZc0lHWjFibU4wYVc5dUlDaGpMQ0J1WlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBMbTltWm5ObGRDQTlJSFl1YjJabWMyVjBJQ3NnS0c1bGVIUWdQVDA5SUdNdWNtbG5hSFFnUHlCakxtZGhjQ0E2SUMxakxtZGhjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1aFpHUldZWEpwWVdKc1pTaHVaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuQnZjSFZzWVhSbFUzQnNhWFJDYkc5amF5aHVaWGgwTENCMktUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQkNiRzlqYXk1d2NtOTBiM1I1Y0dVdWRISmhkbVZ5YzJVZ1BTQm1kVzVqZEdsdmJpQW9kbWx6YVhRc0lHRmpZeXdnZGl3Z2NISmxkaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNCcFppQW9kaUE5UFQwZ2RtOXBaQ0F3S1NCN0lIWWdQU0IwYUdsekxuWmhjbk5iTUYwN0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hCeVpYWWdQVDA5SUhadmFXUWdNQ2tnZXlCd2NtVjJJRDBnYm5Wc2JEc2dmVnh1SUNBZ0lDQWdJQ0IyTG5acGMybDBUbVZwWjJoaWIzVnljeWh3Y21WMkxDQm1kVzVqZEdsdmJpQW9ZeXdnYm1WNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTmpMbkIxYzJnb2RtbHphWFFvWXlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVkSEpoZG1WeWMyVW9kbWx6YVhRc0lHRmpZeXdnYm1WNGRDd2dkaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUW14dlkyc3VjSEp2ZEc5MGVYQmxMbVpwYm1STmFXNU1UU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUcwZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YlhCMWRHVmZiRzBvZEdocGN5NTJZWEp6V3pCZExDQnVkV3hzTENCbWRXNWpkR2x2YmlBb1l5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqTG1WeGRXRnNhWFI1SUNZbUlDaHRJRDA5UFNCdWRXeHNJSHg4SUdNdWJHMGdQQ0J0TG14dEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRJRDBnWXp0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnRPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnN1Y0hKdmRHOTBlWEJsTG1acGJtUk5hVzVNVFVKbGRIZGxaVzRnUFNCbWRXNWpkR2x2YmlBb2JIWXNJSEoyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dGNIVjBaVjlzYlNoc2Rpd2diblZzYkN3Z1puVnVZM1JwYjI0Z0tDa2dleUI5S1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzBnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnBibVJRWVhSb0tHeDJMQ0J1ZFd4c0xDQnlkaXdnWm5WdVkzUnBiMjRnS0dNc0lHNWxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFl5NWxjWFZoYkdsMGVTQW1KaUJqTG5KcFoyaDBJRDA5UFNCdVpYaDBJQ1ltSUNodElEMDlQU0J1ZFd4c0lIeDhJR011YkcwZ1BDQnRMbXh0S1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdElEMGdZenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdE8xeHVJQ0FnSUgwN1hHNGdJQ0FnUW14dlkyc3VjSEp2ZEc5MGVYQmxMbVpwYm1SUVlYUm9JRDBnWm5WdVkzUnBiMjRnS0hZc0lIQnlaWFlzSUhSdkxDQjJhWE5wZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQjJZWElnWlc1a1JtOTFibVFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZGk1MmFYTnBkRTVsYVdkb1ltOTFjbk1vY0hKbGRpd2dablZ1WTNScGIyNGdLR01zSUc1bGVIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWlc1a1JtOTFibVFnSmlZZ0tHNWxlSFFnUFQwOUlIUnZJSHg4SUY5MGFHbHpMbVpwYm1SUVlYUm9LRzVsZUhRc0lIWXNJSFJ2TENCMmFYTnBkQ2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtSbTkxYm1RZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhacGMybDBLR01zSUc1bGVIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z1WkVadmRXNWtPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnN1Y0hKdmRHOTBlWEJsTG1selFXTjBhWFpsUkdseVpXTjBaV1JRWVhSb1FtVjBkMlZsYmlBOUlHWjFibU4wYVc5dUlDaDFMQ0IyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxSUQwOVBTQjJLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFpoY2lCcElEMGdkUzVqVDNWMExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR01nUFNCMUxtTlBkWFJiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1l5NWhZM1JwZG1VZ0ppWWdkR2hwY3k1cGMwRmpkR2wyWlVScGNtVmpkR1ZrVUdGMGFFSmxkSGRsWlc0b1l5NXlhV2RvZEN3Z2Rpa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnN1YzNCc2FYUWdQU0JtZFc1amRHbHZiaUFvWXlrZ2UxeHVJQ0FnSUNBZ0lDQmpMbUZqZEdsMlpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cwSnNiMk5yTG1OeVpXRjBaVk53YkdsMFFteHZZMnNvWXk1c1pXWjBLU3dnUW14dlkyc3VZM0psWVhSbFUzQnNhWFJDYkc5amF5aGpMbkpwWjJoMEtWMDdYRzRnSUNBZ2ZUdGNiaUFnSUNCQ2JHOWpheTVqY21WaGRHVlRjR3hwZEVKc2IyTnJJRDBnWm5WdVkzUnBiMjRnS0hOMFlYSjBWbUZ5S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpSUQwZ2JtVjNJRUpzYjJOcktITjBZWEowVm1GeUtUdGNiaUFnSUNBZ0lDQWdZaTV3YjNCMWJHRjBaVk53YkdsMFFteHZZMnNvYzNSaGNuUldZWElzSUc1MWJHd3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZanRjYmlBZ0lDQjlPMXh1SUNBZ0lFSnNiMk5yTG5CeWIzUnZkSGx3WlM1emNHeHBkRUpsZEhkbFpXNGdQU0JtZFc1amRHbHZiaUFvZG13c0lIWnlLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpJRDBnZEdocGN5NW1hVzVrVFdsdVRFMUNaWFIzWldWdUtIWnNMQ0IyY2lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1luTWdQU0JDYkc5amF5NXpjR3hwZENoaktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3SUdOdmJuTjBjbUZwYm5RNklHTXNJR3hpT2lCaWMxc3dYU3dnY21JNklHSnpXekZkSUgwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVHRjYmlBZ0lDQkNiRzlqYXk1d2NtOTBiM1I1Y0dVdWJXVnlaMlZCWTNKdmMzTWdQU0JtZFc1amRHbHZiaUFvWWl3Z1l5d2daR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpMbUZqZEdsMlpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCdUlEMGdZaTUyWVhKekxteGxibWQwYURzZ2FTQThJRzQ3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFlnUFNCaUxuWmhjbk5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyTG05bVpuTmxkQ0FyUFNCa2FYTjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSV1lYSnBZV0pzWlNoMktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQnZjMjRnUFNCMGFHbHpMbkJ6TG1kbGRGQnZjMjRvS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJRUpzYjJOckxuQnliM1J2ZEhsd1pTNWpiM04wSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzVnRJRDBnTUN3Z2FTQTlJSFJvYVhNdWRtRnljeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHBMUzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMklEMGdkR2hwY3k1MllYSnpXMmxkTENCa0lEMGdkaTV3YjNOcGRHbHZiaWdwSUMwZ2RpNWtaWE5wY21Wa1VHOXphWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFcwZ0t6MGdaQ0FxSUdRZ0tpQjJMbmRsYVdkb2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1Z0TzF4dUlDQWdJSDA3WEc0Z0lDQWdjbVYwZFhKdUlFSnNiMk5yTzF4dWZTZ3BLVHRjYm1WNGNHOXlkSE11UW14dlkyc2dQU0JDYkc5amF6dGNiblpoY2lCQ2JHOWphM01nUFNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lHWjFibU4wYVc5dUlFSnNiMk5yY3loMmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWnpJRDBnZG5NN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ1SUQwZ2RuTXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGMzUWdQU0J1WlhjZ1FYSnlZWGtvYmlrN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNodUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJpSUQwZ2JtVjNJRUpzYjJOcktIWnpXMjVkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJHbHpkRnR1WFNBOUlHSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaUxtSnNiMk5yU1c1a0lEMGdianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQkNiRzlqYTNNdWNISnZkRzkwZVhCbExtTnZjM1FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemRXMGdQU0F3TENCcElEMGdkR2hwY3k1c2FYTjBMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHa3RMU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFiU0FyUFNCMGFHbHpMbXhwYzNSYmFWMHVZMjl6ZENncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVnRPMXh1SUNBZ0lIMDdYRzRnSUNBZ1FteHZZMnR6TG5CeWIzUnZkSGx3WlM1cGJuTmxjblFnUFNCbWRXNWpkR2x2YmlBb1lpa2dlMXh1SUNBZ0lDQWdJQ0JpTG1Kc2IyTnJTVzVrSUQwZ2RHaHBjeTVzYVhOMExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVhOMExuQjFjMmdvWWlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JDYkc5amEzTXVjSEp2ZEc5MGVYQmxMbkpsYlc5MlpTQTlJR1oxYm1OMGFXOXVJQ2hpS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJzWVhOMElEMGdkR2hwY3k1c2FYTjBMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkMkZ3UW14dlkyc2dQU0IwYUdsekxteHBjM1JiYkdGemRGMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHpkQzVzWlc1bmRHZ2dQU0JzWVhOME8xeHVJQ0FnSUNBZ0lDQnBaaUFvWWlBaFBUMGdjM2RoY0VKc2IyTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14cGMzUmJZaTVpYkc5amEwbHVaRjBnUFNCemQyRndRbXh2WTJzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJGd1FteHZZMnN1WW14dlkydEpibVFnUFNCaUxtSnNiMk5yU1c1a08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCQ2JHOWphM011Y0hKdmRHOTBlWEJsTG0xbGNtZGxJRDBnWm5WdVkzUnBiMjRnS0dNcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUd3Z1BTQmpMbXhsWm5RdVlteHZZMnNzSUhJZ1BTQmpMbkpwWjJoMExtSnNiMk5yTzF4dUlDQWdJQ0FnSUNCMllYSWdaR2x6ZENBOUlHTXVjbWxuYUhRdWIyWm1jMlYwSUMwZ1l5NXNaV1owTG05bVpuTmxkQ0F0SUdNdVoyRndPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JDNTJZWEp6TG14bGJtZDBhQ0E4SUhJdWRtRnljeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISXViV1Z5WjJWQlkzSnZjM01vYkN3Z1l5d2daR2x6ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxiVzkyWlNoc0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd3dWJXVnlaMlZCWTNKdmMzTW9jaXdnWXl3Z0xXUnBjM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXMXZkbVVvY2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUVKc2IyTnJjeTV3Y205MGIzUjVjR1V1Wm05eVJXRmphQ0E5SUdaMWJtTjBhVzl1SUNobUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHpkQzVtYjNKRllXTm9LR1lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdRbXh2WTJ0ekxuQnliM1J2ZEhsd1pTNTFjR1JoZEdWQ2JHOWphMUJ2YzJsMGFXOXVjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2FYTjBMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR0lwSUhzZ2NtVjBkWEp1SUdJdWRYQmtZWFJsVjJWcFoyaDBaV1JRYjNOcGRHbHZiaWdwT3lCOUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUVKc2IyTnJjeTV3Y205MGIzUjVjR1V1YzNCc2FYUWdQU0JtZFc1amRHbHZiaUFvYVc1aFkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkNiRzlqYTFCdmMybDBhVzl1Y3lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14cGMzUXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhZZ1BTQmlMbVpwYm1STmFXNU1UU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hZZ0lUMDlJRzUxYkd3Z0ppWWdkaTVzYlNBOElGTnZiSFpsY2k1TVFVZFNRVTVIU1VGT1gxUlBURVZTUVU1RFJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0lnUFNCMkxteGxablF1WW14dlkyczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRbXh2WTJzdWMzQnNhWFFvZGlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2JtSXBJSHNnY21WMGRYSnVJRjkwYUdsekxtbHVjMlZ5ZENodVlpazdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbkpsYlc5MlpTaGlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1GamRHbDJaUzV3ZFhOb0tIWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCQ2JHOWphM003WEc1OUtDa3BPMXh1Wlhod2IzSjBjeTVDYkc5amEzTWdQU0JDYkc5amEzTTdYRzUyWVhJZ1UyOXNkbVZ5SUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQlRiMngyWlhJb2RuTXNJR056S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG5NZ1BTQjJjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpjeUE5SUdOek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5aeklEMGdkbk03WEc0Z0lDQWdJQ0FnSUhaekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWXVZMGx1SUQwZ1cxMHNJSFl1WTA5MWRDQTlJRnRkTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amN5QTlJR056TzF4dUlDQWdJQ0FnSUNCamN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpMbXhsWm5RdVkwOTFkQzV3ZFhOb0tHTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1l5NXlhV2RvZEM1alNXNHVjSFZ6YUNoaktUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVoWTNScGRtVWdQU0JqY3k1dFlYQW9ablZ1WTNScGIyNGdLR01wSUhzZ1l5NWhZM1JwZG1VZ1BTQm1ZV3h6WlRzZ2NtVjBkWEp1SUdNN0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSnpJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnVTI5c2RtVnlMbkJ5YjNSdmRIbHdaUzVqYjNOMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWljeTVqYjNOMEtDazdYRzRnSUNBZ2ZUdGNiaUFnSUNCVGIyeDJaWEl1Y0hKdmRHOTBlWEJsTG5ObGRGTjBZWEowYVc1blVHOXphWFJwYjI1eklEMGdablZ1WTNScGIyNGdLSEJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1aFkzUnBkbVVnUFNCMGFHbHpMbU56TG0xaGNDaG1kVzVqZEdsdmJpQW9ZeWtnZXlCakxtRmpkR2wyWlNBOUlHWmhiSE5sT3lCeVpYUjFjbTRnWXpzZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVluTWdQU0J1WlhjZ1FteHZZMnR6S0hSb2FYTXVkbk1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUp6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dJc0lHa3BJSHNnY21WMGRYSnVJR0l1Y0c5emJpQTlJSEJ6VzJsZE95QjlLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lGTnZiSFpsY2k1d2NtOTBiM1I1Y0dVdWMyVjBSR1Z6YVhKbFpGQnZjMmwwYVc5dWN5QTlJR1oxYm1OMGFXOXVJQ2h3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5aekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tIWXNJR2twSUhzZ2NtVjBkWEp1SUhZdVpHVnphWEpsWkZCdmMybDBhVzl1SUQwZ2NITmJhVjA3SUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnVTI5c2RtVnlMbkJ5YjNSdmRIbHdaUzV0YjNOMFZtbHZiR0YwWldRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRhVzVUYkdGamF5QTlJRTUxYldKbGNpNU5RVmhmVmtGTVZVVXNJSFlnUFNCdWRXeHNMQ0JzSUQwZ2RHaHBjeTVwYm1GamRHbDJaU3dnYmlBOUlHd3ViR1Z1WjNSb0xDQmtaV3hsZEdWUWIybHVkQ0E5SUc0N1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dianNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZeUE5SUd4YmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZeTUxYm5OaGRHbHpabWxoWW14bEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITnNZV05ySUQwZ1l5NXpiR0ZqYXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTXVaWEYxWVd4cGRIa2dmSHdnYzJ4aFkyc2dQQ0J0YVc1VGJHRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJsTnNZV05ySUQwZ2MyeGhZMnM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZGlBOUlHTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbFVHOXBiblFnUFNCcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqTG1WeGRXRnNhWFI1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9aR1ZzWlhSbFVHOXBiblFnSVQwOUlHNGdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaHRhVzVUYkdGamF5QThJRk52YkhabGNpNWFSVkpQWDFWUVVFVlNRazlWVGtRZ0ppWWdJWFl1WVdOMGFYWmxJSHg4SUhZdVpYRjFZV3hwZEhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1cyUmxiR1YwWlZCdmFXNTBYU0E5SUd4YmJpQXRJREZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiQzVzWlc1bmRHZ2dQU0J1SUMwZ01UdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkanRjYmlBZ0lDQjlPMXh1SUNBZ0lGTnZiSFpsY2k1d2NtOTBiM1I1Y0dVdWMyRjBhWE5tZVNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WW5NZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWljeUE5SUc1bGR5QkNiRzlqYTNNb2RHaHBjeTUyY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1aWN5NXpjR3hwZENoMGFHbHpMbWx1WVdOMGFYWmxLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIWWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0tIWWdQU0IwYUdsekxtMXZjM1JXYVc5c1lYUmxaQ2dwS1NBbUppQW9kaTVsY1hWaGJHbDBlU0I4ZkNCMkxuTnNZV05yS0NrZ1BDQlRiMngyWlhJdVdrVlNUMTlWVUZCRlVrSlBWVTVFSUNZbUlDRjJMbUZqZEdsMlpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJzWWlBOUlIWXViR1ZtZEM1aWJHOWpheXdnY21JZ1BTQjJMbkpwWjJoMExtSnNiMk5yTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aUlDRTlQU0J5WWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WW5NdWJXVnlaMlVvZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iR0l1YVhOQlkzUnBkbVZFYVhKbFkzUmxaRkJoZEdoQ1pYUjNaV1Z1S0hZdWNtbG5hSFFzSUhZdWJHVm1kQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTUxYm5OaGRHbHpabWxoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemNHeHBkQ0E5SUd4aUxuTndiR2wwUW1WMGQyVmxiaWgyTG14bFpuUXNJSFl1Y21sbmFIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemNHeHBkQ0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KekxtbHVjMlZ5ZENoemNHeHBkQzVzWWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVluTXVhVzV6WlhKMEtITndiR2wwTG5KaUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWljeTV5WlcxdmRtVW9iR0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdVlXTjBhWFpsTG5CMWMyZ29jM0JzYVhRdVkyOXVjM1J5WVdsdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyTG5WdWMyRjBhWE5tYVdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWXVjMnhoWTJzb0tTQStQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNWhZM1JwZG1VdWNIVnphQ2gyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WW5NdWJXVnlaMlVvZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JUYjJ4MlpYSXVjSEp2ZEc5MGVYQmxMbk52YkhabElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5oZEdselpua29LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JqYjNOMElEMGdUblZ0WW1WeUxrMUJXRjlXUVV4VlJTd2dZMjl6ZENBOUlIUm9hWE11WW5NdVkyOXpkQ2dwTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvVFdGMGFDNWhZbk1vYkdGemRHTnZjM1FnTFNCamIzTjBLU0ErSURBdU1EQXdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ellYUnBjMlo1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVhOMFkyOXpkQ0E5SUdOdmMzUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzTjBJRDBnZEdocGN5NWljeTVqYjNOMEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR052YzNRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JUYjJ4MlpYSXVURUZIVWtGT1IwbEJUbDlVVDB4RlVrRk9RMFVnUFNBdE1XVXRORHRjYmlBZ0lDQlRiMngyWlhJdVdrVlNUMTlWVUZCRlVrSlBWVTVFSUQwZ0xURmxMVEV3TzF4dUlDQWdJSEpsZEhWeWJpQlRiMngyWlhJN1hHNTlLQ2twTzF4dVpYaHdiM0owY3k1VGIyeDJaWElnUFNCVGIyeDJaWEk3WEc1bWRXNWpkR2x2YmlCeVpXMXZkbVZQZG1WeWJHRndTVzVQYm1WRWFXMWxibk5wYjI0b2MzQmhibk1zSUd4dmQyVnlRbTkxYm1Rc0lIVndjR1Z5UW05MWJtUXBJSHRjYmlBZ0lDQjJZWElnZG5NZ1BTQnpjR0Z1Y3k1dFlYQW9ablZ1WTNScGIyNGdLSE1wSUhzZ2NtVjBkWEp1SUc1bGR5QldZWEpwWVdKc1pTaHpMbVJsYzJseVpXUkRaVzUwWlhJcE95QjlLVHRjYmlBZ0lDQjJZWElnWTNNZ1BTQmJYVHRjYmlBZ0lDQjJZWElnYmlBOUlITndZVzV6TG14bGJtZDBhRHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzRnTFNBeE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3hsWm5RZ1BTQnpjR0Z1YzF0cFhTd2djbWxuYUhRZ1BTQnpjR0Z1YzF0cElDc2dNVjA3WEc0Z0lDQWdJQ0FnSUdOekxuQjFjMmdvYm1WM0lFTnZibk4wY21GcGJuUW9kbk5iYVYwc0lIWnpXMmtnS3lBeFhTd2dLR3hsWm5RdWMybDZaU0FySUhKcFoyaDBMbk5wZW1VcElDOGdNaWtwTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYkdWbWRFMXZjM1FnUFNCMmMxc3dYU3dnY21sbmFIUk5iM04wSUQwZ2RuTmJiaUF0SURGZExDQnNaV1owVFc5emRGTnBlbVVnUFNCemNHRnVjMXN3WFM1emFYcGxJQzhnTWl3Z2NtbG5hSFJOYjNOMFUybDZaU0E5SUhOd1lXNXpXMjRnTFNBeFhTNXphWHBsSUM4Z01qdGNiaUFnSUNCMllYSWdka3h2ZDJWeUlEMGdiblZzYkN3Z2RsVndjR1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQnBaaUFvYkc5M1pYSkNiM1Z1WkNrZ2UxeHVJQ0FnSUNBZ0lDQjJURzkzWlhJZ1BTQnVaWGNnVm1GeWFXRmliR1VvYkc5M1pYSkNiM1Z1WkN3Z2JHVm1kRTF2YzNRdWQyVnBaMmgwSUNvZ01UQXdNQ2s3WEc0Z0lDQWdJQ0FnSUhaekxuQjFjMmdvZGt4dmQyVnlLVHRjYmlBZ0lDQWdJQ0FnWTNNdWNIVnphQ2h1WlhjZ1EyOXVjM1J5WVdsdWRDaDJURzkzWlhJc0lHeGxablJOYjNOMExDQnNaV1owVFc5emRGTnBlbVVwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hWd2NHVnlRbTkxYm1RcElIdGNiaUFnSUNBZ0lDQWdkbFZ3Y0dWeUlEMGdibVYzSUZaaGNtbGhZbXhsS0hWd2NHVnlRbTkxYm1Rc0lISnBaMmgwVFc5emRDNTNaV2xuYUhRZ0tpQXhNREF3S1R0Y2JpQWdJQ0FnSUNBZ2RuTXVjSFZ6YUNoMlZYQndaWElwTzF4dUlDQWdJQ0FnSUNCamN5NXdkWE5vS0c1bGR5QkRiMjV6ZEhKaGFXNTBLSEpwWjJoMFRXOXpkQ3dnZGxWd2NHVnlMQ0J5YVdkb2RFMXZjM1JUYVhwbEtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnpiMngyWlhJZ1BTQnVaWGNnVTI5c2RtVnlLSFp6TENCamN5azdYRzRnSUNBZ2MyOXNkbVZ5TG5OdmJIWmxLQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdibVYzUTJWdWRHVnljem9nZG5NdWMyeHBZMlVvTUN3Z2MzQmhibk11YkdWdVozUm9LUzV0WVhBb1puVnVZM1JwYjI0Z0tIWXBJSHNnY21WMGRYSnVJSFl1Y0c5emFYUnBiMjRvS1RzZ2ZTa3NYRzRnSUNBZ0lDQWdJR3h2ZDJWeVFtOTFibVE2SUhaTWIzZGxjaUEvSUhaTWIzZGxjaTV3YjNOcGRHbHZiaWdwSURvZ2JHVm1kRTF2YzNRdWNHOXphWFJwYjI0b0tTQXRJR3hsWm5STmIzTjBVMmw2WlN4Y2JpQWdJQ0FnSUNBZ2RYQndaWEpDYjNWdVpEb2dkbFZ3Y0dWeUlEOGdkbFZ3Y0dWeUxuQnZjMmwwYVc5dUtDa2dPaUJ5YVdkb2RFMXZjM1F1Y0c5emFYUnBiMjRvS1NBcklISnBaMmgwVFc5emRGTnBlbVZjYmlBZ0lDQjlPMXh1ZlZ4dVpYaHdiM0owY3k1eVpXMXZkbVZQZG1WeWJHRndTVzVQYm1WRWFXMWxibk5wYjI0Z1BTQnlaVzF2ZG1WUGRtVnliR0Z3U1c1UGJtVkVhVzFsYm5OcGIyNDdYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybGtia0o2V1hrMWNXTjVTWE5KYms1MlpGaEthbHBXU25aaU0xRnBUMmxKYVV4RFNucGlNMVo1V1RKV2VrbHFjR0pKYVRSMVRIazBkVXd4Wkd4WmEwNTJZa2RGZG1NelNtcE1NMXAzWXpKTmRXUklUV2xZVTNkcFltMUdkRnBZVFdsUGJIUmtURU5LZEZsWVFuZGhWelZ1WTNsSk5rbHFjemRSVlVaQ1UxUjBTbEZWZEVwTVNGWkRVVlZHZEZGcGVFeFJWVVpvVHpGR1FsRlhTWE5XVlVaQ1UzbDRTRkZWUmsxTVJYUkNVVlZ6YzFFd1JrSlZWSFJTVVZWd2IxRjVlRkJSVlVaR1RFVmtRbEZXWTNOUk1FWkNVWGw0UkZGVlJrUlBNVVpDVVRKWmMxUXdSa0pTVTNoSVVWVkdXRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTV0VEVVNVFsRlZWWE5TTUVaQ1ZubDRSRkZWUmtSTVJVNUNVVlZOTjFOVlJrWmlNRWx6VVRCR1FsRjZkRXBSVlZaM1VYbDRkRkV3UmtKV2VYaElVVlZHV1V4R1ZrSlJWbXR6VVRCR1FsWjZkRkpSVlU1MVVXbDRTbEZWUmtwTVJWWkNVVlZWYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5OMVZWUmtSUFZVbHpVMVZHUWxOVGVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVUekZHUWxGNlZrTk1SV3hDVVZWcmMxSlZSa0pTVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFNVJWVVpPVEVWT1FsRlZUVGRWVlVaRVlrVkpjMU5WUmtKVFUzaEVVVlZHUkV4RlZrSlJWVlZ6VTFWR1FsTlRlRVpSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40U0ZGVlJraE1SVlpDVVZWVmMxRXdSa0pSZW5SU1VWVk9ORkZwZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDVWxONFNsRlZSa3BNUlZaQ1VWVlZjMUl3UmtKU2VYaEdVVlZHUmt4RlpFSlJWV056VVRCR1FsRjVlRVJSVlVaRVRFZFdRbEZYVlhOUk1FWkNVWHAwVWxGVlRqSlJlWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVwUlZVWktURVZXUWxGVlZYTlNNRVpDVW5sNFJsRlZSa1pNUldSQ1VWVmpjMUpWUmtKU1UzaEVVVlZHUkU4d2JFSlJlbFpEVEVWT1FsRlZUVGRUVlVaR1VrTjNjbEZyUmtKVWVYaElVVlZHVVU4eFJrSlJNR3R6VkRCR1FsUjVlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRXhGVmtKUlZWVnpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFOVlJrUmxhMDF6VVRCR1FsRjZkRXBSVlU1TlRFYzVRMUZWUmtSUE1FWkNVVlZSYzFFd1JrSlJlWGhDVVZjMVExSkRlRXBSVnpGRFVYcDBRbEZYTlVOWFUzaDZVVEJHUWxsVWRFSlJXRVpEVFZWSk4xTlZSa3hUVTNoMlVXdEdRbUpWU1hOVFZVWkNXWGw0UmxGVlJsUk1SWFJDVVZkVmMxSlZSa0pWZVhoSVVWVkdXRXhGVmtKUlZrMXpWVlZHUW1WVlNUZFZWVVpDWld0SmMyVlZTa0pSVlVWelVsVkdRbEZUZUc1UmEwWkNaVlZKTjFWVlJrSk9WVmx6VlRCR1FsTlRlRWhSVlVaTFRFVnNRbEZWYTNOUk1FWkNWbFIwVWxGVlJsUk1SbFpDVVZWemMxSXdSa0pVUTNoTVVWVkdURXhGVGtKUlZsVTNWVlZHUWxWNWVGSlJWVVpJVEVWa1FsRlZaM05TTUVaQ1VubDRSRkZWUmxKUE1VWkNVVlpOYzFsVlJrSlZVM2hJVVZWR1UweEdSa0pSVmtWelVUQkdRbUZWU1RkVlZVWkpUREJqYzFZd1JrSlVVM2hJVVZWR1dreEZkRUpSVlhOelVUQkdRbEY2ZEZKUlZVNDBVV2w0Y2xGclJrSlpVM2hJVVZWR1dreEZkRUpSVlhOelVUQkdRbEY2ZEZKUlZXTjZVV2w0U2xGVlJrcE1SVTVDVVZWTmMxTlZSa0pUVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNmRGSlJWVTV4VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMU13UmtKVGVYaElVVlZHU0V4RmRFSlJWWE56VVRCR1FsRjZkRkpSVlU1MVVXbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhJVVZWR1NFeEZaRUpSVldOelVUQkdRbEY2ZEZKUlZVNXRURVZzUWxGVmEzTlJNRVpDVVhsNFVsRlZSbEpNUldSQ1VWVmpjMVZWUmtKVlUzaEVVVlZHUkU4d2JFSlJlbVJEVEVWT1FsRlZUVGRUVlVaR1VrTjNkMUZyUmtKVGVYaElVVlZHVFU4eFJrSlJNR3R6VkRCR1FsUjVlRXBSVlVaS1RFVk9RbEZWVFhOWlZVWkNXVk40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpWVEJHUWxWNmRGcFJWVTQwVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RmRFSlJWWE56VVRCR1FsRjVlRXhSVlVaTVRFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoU1VWVkdVa3hGVmtKUlZWVnpVakJHUWxKNWVFcFJWVVpLVEVWT1FsRlZUWE5TTUVaQ1VucDBjbEZyUmtSaWExRnpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUZKUlZVWlNURVZXUWxGVlZYTlJNRVpDVVhwMFNsRlZUbkZTUTNoRVVWVkdSRTh3YkVKUk1IZHpZVlZLUWxGVlRUZFJWVVpDVWtONFJGRlZSa1JNUlVaQ1lXdEtSVXhGYkVKaFZVcEVUekJHUW1GclNscE1SMlJFVVZWR1ZrOHdSa0ppVlVveVVXcDBTbEZWTVVwTVIzUkRVVlZHZEZGcGVHeFJWVVl4VVdsNFJsRlZSbFJNUlRGQ1VWZDBRMHhGVmtKUlZrMXpVekJHUW1GVlNUZFZWVVpDVGxWTmMyUlZTa0pSVlVWelVsVkdRbEZUZUZaUlZVWnlVV3AwVWxGVlJsUk1TRTVEVVZWR1FreEZWa0pSVlVWelZUQkdRbUZWU1RkVlZVWkNUbFZWYzJJd1NrSlJWMVZ6VWpCR1FscHBlR3hSVlVac1RFVk9RbEZXUlRkVlZVWkNWWGw0V0ZGVlJrNU1SV1JDVVZVMGMxUlZSa0pVVTNoRVVWVkdXazh4UmtKUlZrMXpWbFZHUWxONWVFaFJWVVpOVEVWMFFsRlZjM05STUVaQ1YxUjBVbEZWZDNaU2FYaFlVVlZHVGt4RlpFSlJWbU56VVRCR1FsRjVlRVJSVlVaRVR6QnNRbE41ZEVaTVJVNUNVVlZOTjFOVlJrWmlhMk56WkZWS1FsRlZhM05TTUVaQ1UycDBVbEZWVGtwTVJUbENVVlU0YzFJd1JrSlNlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZrUWxGVlkzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMVZWUmtKVlUzaEdVVlZHUmt4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFZFdRbEZYVlhOUk1FWkNVWGw0UkZGVlJrUlBNR3hDVVROb1JreEZUa0pSVlUwM1UxVkdSbEpEZDNsUmEwWkNWVk40U0ZGVlJsTlBNVVpDVVRCcmMxUXdSa0pVZVhoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJYUkNVVlZ6YzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelV6QkdRbE41ZUVSUlZVWkVURVZzUWxGVmEzTlNNRVpDVW5sNFNsRlZSa3BNUlU1Q1VWVk5jMVJWUmtKVVUzaEVVVlZHUkV4RlpFSlJWV056VTFWR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWHAwU2xGVlRUVlNVM2hFVVZWR1JFOHdiRUpTTUZGellUQk9RbEZYVlhOU01FWkNXbWw0VmxGVlJtNVJhWGhLVVZWR2FreEZWa0pSVlZWelVUQkdRazFGVFRkVlZVWkVaRVZWYzFOVlJrSlRVM2hHVVZWR1JreEZaRUpSVldOelZsVkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlRWVVpDVTFONFNsRlZSa3hNUlRsQ1VWVkZjMUV3UmtKUmVYaEVVVlZHUkV4Rk1VSlJWVEJ6VTFWR1FsTlRlRXBSVlVaS1RFVjBRbEZWYzNOVFZVWkNVMU40U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRllXa1JNUlU1Q1VWaFdSRXhGVGtKUlZVMDNWVlZHUkU5VlVYTlRWVVpDVTFONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaFFVVlZHVUV4RlRrSlJWVTF6VmxWR1FsRlRlRVJSVlVaRVRFVnNRbEZWWTNOVU1FWkNVVk40UmxGVlJrWk1SVTVDVVZWTmMxRXdSa0pSZVhoR1VWVkdSa3hGVGtKUlZVMXpVVEJHUWxGNWVFeFJWVVpNVEVWT1FsRlZUWE5TVlVaQ1drTjRSRkZWUm1wTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT01GRjVlRXBSVlVaS1RFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVGxDVVZVNGMxRXdSa0pSZVhoV1VWVkdRa3hGVGtKUlZVMXpVMVZHUWxKNWVGQlJWVVpDVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVaUlZVWnBURVZPUWxGWFJYTlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VUTm9SRXhGVGtKUlZVMDNVMVZHUkZSRGVHeFJWVVpFVHpCR1FsRlZVWE5STUVaQ1VYbDRRbEZZVWtOU1EzaEtVVmhPUTFGNmRFSlJXRkpEVjFOM01GRnJSa0pWVkhSQ1VWaGtRMk5yU1RkVFZVWk9VMU40YkZGVlJscE1SVTVDVVZaak4xVlZSazFrYTBselZUQkdRbE5UZUVoUlZVWnNURVZXUWxGVlZYTlJNRVpDVVhwMFVsRlZNWE5SYVhoRVVWVkdSRXhGVGtKUlZVMXpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYcDBVbEZWVG1sTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZaRUpSVldOelUxVkdRbE5UZUdoUlZVWm9URVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMHBFVEVWc1FsRlZhM05STUVaQ1VYbDRXRkZWUmxoTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUwM1UxVkdSR1ZGU1hOUk1FWkNVWHAwU2xGVlZsQk1SRXBEVVZWR1dFeEZaRUpSVnpWRFRFWldRbEZYT1VOTVJVNUNVVlpqTjFWVlJrUk5NRWx6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOU01FWkNVbmw0U2xGVlJrcE1SVTVDVVZWTk4xVlZSa1JhYVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJTVVZWT2MxRnBlRXBSVlVaS1RFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SbVJDVVZaamMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTR5VVdsNFNsRlZSa3BNUlU1Q1VWVk5jMU5WUmtKVFUzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjVlRVpSVlVaR1RFVk9RbEZWVFhOVU1FWkNWSGw0UmxGVlJrWk1SVTVDVVZWTk4xTlZSa1JpUlUxelVUQkdRbEY2ZEVwUlZXUkZURWhPUkZGVlJucFJhWGhJVVZWR01GRnFkRkpSVlU1S1RFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoSVVWVkdTRXhGYkVKUlZXdHpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5TVlVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZUa0pSVlUxelVsVkdRbEpUZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUalpSZVhoTVVWVkdURXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWT1FsRlZUWE5TVlVaQ1VsTjRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZXUWxGVlZYTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMUpWUmtKU1UzaEdVVlZHUmt4RlRrSlJWVTAzVjFWR1JFNVZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhZVVZWR1dFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJNMUpFVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUZCUlZVWlFURVZXUWxGVlZYTlJNRVpDVVhwMFNsRlZUbk5SZVhoRVVWVkdSRTh3YkVKU1ZUaHpUVVZLUWxGV1ZYTlNNRVpDWWtWSmMxWlZSa0ppVlVselVUQkdRbFo1ZUVaUlZVWkdURVZPUWxGV1kzTlNWVVpDVWxONFZsRlZSbkJSZW5SU1VWVkZOVkpUZUhCUmEwWnFVWHAwVWxGWFNraE1SV3hDVVZWcmMxTlZSa0pUVTNoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWVG5kUmFYaEVVVlZHUkV4RlRrSlJWVTF6V2xWR1FscFRlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40VmxGVlJrUk1SVTVDVVZWTmMxSlZSa0pTVTNoS1VWVkdTazh4YkVKUk0zQkRURVZzUWxGVmEzTlRNRVpDVTNsNFNGRlZSa2hNUlhSQ1VWVnJjMUV3UmtKUmVYaFdVVlZHVmt4RlRrSlJWVTF6VTFWR1FsTlRlRVpSVlVaR1RFVk9RbEZWVFhOU1ZVWkNVbE40VmxGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZW5SYVVWVk9jVkpEZUVwUlZVWktURVZzUWxGVmEzTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMU13UmtKVGVYaEdVVlZHUms4eVpFTlJWVTV6VVdsNFNsRlZSa3BNUld4Q1VWVnJjMU13UmtKVGVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVFhOVE1FWkNVM2w0UkZGVlJrUlBNbVJEVVZWTk0xRnBlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40U0ZGVlJraE1SWFJDVVZWemMxRXdSa0pSZW5Sb1VWVk9iMUZxZEhCUmEwWkNWRlIwYmxGclJrUlRRM2hLVVZWR1NreEZiRUpSVld0elV6QkdRbE41ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkU4eVpFTlJWVTAxVVdsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaElVVlZHU0V4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVR6SkdRbEV5Y0VOUE1XeENVVEJSYzFaVlJrSldVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekZHUWxFeWVFTk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1HZHpWREJHUWxSNWVFcFJWVVpLVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlblJLVVZWTmVGRnBlRVJSVlVaRVR6QnNRbEpWT0hOaE1FNUNVVmQwUTB4RlpFSlJWRVpEVEVaV1FsRlVTa05NUlU1Q1VWWmpjMUpWUmtKU1UzaEtVVlZHYWs4eFJrSlJXRkpGVEVkc1ExRlZNVVJQTVVaQ1ZFVmpjMUV3UmtKUmVYaEVVVlZHUkV4SFZrSlJWMVZ6VVRCR1FsRjVlRXBSVlVaS1RFVldRbEZWVlhOV1ZVWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxTlZSa0pUVkhSYVVWVk5NVkZwZUVwUlZVWktURVZPUWxGVlRYTlVWVVpDVkZONFNGRlZSa2hNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRXBSVlVaS1RFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRUZFhWVVpFVGpCUmMxTXdSa0pUVTNoRVVWVkdSRXhHWkVKUlZtTnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYcDBXbEZWVGpKUmFYaE1VVlZHU2t4RlRrSlJWVTF6WVRCS1FsRlhkRU5NUlU1Q1VWVk5jMU5WUmtKVFUzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEV6U2tSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTVVGelVUQkdRbEY2ZEVwUlZXUkZURWhrUTFGVlJsSk1SV1JDVVZaSmMxWlZSa0pWZVhoTVVWVkZNbEZwZUVaUlZVWkdURVZrUWxGV1ZYTlNWVVpDVWxONFJGRlZSWGRSYVhoR1VWVkdSa3hGYkVKUlZ6RkRUekZHUWxGWE5VaE1SMnhEVVZWMFJFOHhSa0pVUnpGRlRFZDBRMUZWUmtKTVJWWkNVVlZGYzFOVlJrSlplWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZSa1pNU0VaRFVWVkdRa3hGVmtKUlZVVnpWakJHUW1KVlNUZFZWVVpFVERCWmMxRXdSa0pSZVhoRVVWVkdSRXhIVmtKUlYxVnpVVEJHUWxGNWVFcFJWVVpLVEVWV1FsRlZWWE5XVlVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRWSFJhVVZWTk1WRnBlRWhSVlVaSVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRXlOVU5NUlhSQ1VWVnJjMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VXpCR1FsTjVlRVpSVlVaR1RFVmtRbEZWWTNOU1ZVWkNVbE40U2xGVlJrcE1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWVlZHUkdSclRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMU5WUmtSVlEzaEVVVlZHUkU4d2JFSlRNRkZ6WlZWS1FsRldUWE5TTUVaQ1ZrUjBVbEZWVGtwTVJXeENVVlZyYzFFd1JrSlJlWGhJVVZWR2JFeEZiRUpSVld0elVUQkdRbEY2ZEZKUlZVNDJVV2w0U2xGVlJrcE1SVTVDVVZWTmMxWlZSa0pXVTNoRVVWVkdSRXhGYkVKUlZXdHpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJWWkNVVlZWYzFOVlJrSlRVM2hHVVZWR1JreEdWa0pSVlVWelVUQkdRbEY2ZEZwUlZVNXhVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhHUmtKUlZrVnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5UTUVaQ1UzbDRTbEZWUmtwTVJXeENVVlZyYzFFd1JrSlJlWGhFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JQTW1SRFVWVkdSa3hGVGtKUlZVMXpVakJHUWxKNWVFUlJWVVpFVEVWT1FsRlZUVGRWVlVaRVRWVlJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JGTkRlRkJSVlVaUVRFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVlRtbE1SVTVDVVZWTk4xTlZSa1pVZVhodVVUQkdRbG93U1hOU01FWkNaVVZKYzFaVlJrSmxWVWx6VWxWR1FsZFRlRVpSVlVaR1RFVldRbEZXYXpkVlZVWkVUREJOYzFOVlJrSlRVM2hFVVZWR1JFeEdWa0pSVmxWelVUQkdRbEY1ZUVaUlZVWkdURVZXUWxGVlZYTlRWVVpDVTFONFJsRlZSa1pNUjA1Q1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JHTkZUWE5UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFOHhSa0pSTWtselUxVkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlJNRVpDVVhsNFJsRlZSa1pNUlZaQ1VWVlZjMU5WUmtKVFUzaEdVVlZHUmt4RlZrSlJWVlZ6VWxWR1FsSlRlRlpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40U2xGVlJrcFBNV3hDVVRKb1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlZWVVpDVlZONFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaE1VVlZHVEV4RmRFSlJWWE56VTFWR1FsTlRlRXBSVlVaS1RFVk9RbEZWVFhOUk1FWkNVWGw0VEZGVlJreE1SV3hDVVZWcmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOTjFvd1NrSlJWVlZ6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwVWxGVlRUVlNVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVNUpURVU1UWxGVk9ITlJNRVpDVVhsNFJGRlZSa1JQTUd4Q1VUSkpjMUV3UmtKUmVuUktVVlZXVUV4SVpFTlJWVVpTVEVWa1FsRlhhRU5NUmxaQ1VWZHNRMHhGVGtKUlZtTnpVbFZHUWxKVGVFcFJWVVpxVEVWV1FsRlZWWE5TVlVaQ1YxTjRSbEZWUmtaTVJYUkNVVlJLUkU4eFJrSlJXRnBJVEVkc1ExRldWa1JQTVVaQ1ZrVmpjMU5WUmtKVFUzaFNVVlZHVWt4RlpFSlJWV056VXpCR1FsTjVlRVJSVlVaRVR6RkdRbEV6U2tOTVJVNUNVVlZOYzFFd1JrSlJlWGhzVVZWR2JFeEZUa0pSVlUxelUxVkdRbE5UZUVaUlZVWkdURVpXUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUld4Q1VWVnJOMWRWUmtST1ZVbHpVMVZHUWxOVGVFUlJWVVpFVEVaR1FsRldSWE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFNd1JrSlRlWGhHVVZWR1JreEZiRUpSVld0elV6QkdRbE5UZUVSUlZVWkVURVpHUWxGV1JYTlJNRVpDVVhsNFNsRlZSa3BNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VWxWR1FsSlRlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlRuVlNWSFJ1VVd0R1JGTlRlRkpSVlVaU1RFVmtRbEZWWTNOVFZVWkNVMU40UkZGVlJrUlBNbVJEVVZWT2IxRnBlRXhSVlVaTVRFVk9RbEZWVFhOUk1FWkNVWGw0UmxGVlJrWk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRTh5UmtKUk1uaERUekZHUWxFd2QzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMVZWUmtSVFEzaFFVVlZHVUV4R1JrSlJWa1Z6VVRCR1FsRjZkRXBSVlU1M1VXbDRSRkZWUmtSUE1HeENVMVZSYzAxclRrSlJWRXBEVEVWa1FsRlVUa05NUmxaQ1VWUlNRMHhGVGtKUlZtTnpVbFZHUWxKVGVFUlJWVVpZVHpGR1FsRXlhRVZNUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4RlRrSlJWVTAzVjFWR1FsSlRlRkJSVlVaUVRFVnNRbEZWYTNOUk1FWkNVWHAwVWxGVlRqWlJhWGhLVVZWR1NreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVuUlNVVlZPTUZGcGVGQlJWVVpPVEVWT1FsRlZUWE5TVlVaQ1VsTjRSbEZWUmtaUE1XeENVVEZCYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVuUmFVVlZPYzFGcGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJXeENVVlZyYzFOVlJrSlRVM2hFVVZWR1JFeEVTa05SVlVWNVVXbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVUekprUTFGVlRqUlNRM2hRVVZWR1VFeEZiRUpSVld0elVUQkdRbEY2ZEZSUlZVNTFVV3AwVWxGVlRrVk1SVGxDVVZVNGMxTXdSa0pUZVhoRVVWVkdSRTh3YkVKUk1uQkRURVZPUWxGVlRUZFRWVVpJVkZONFdGRlZSa3hNUldSQ1VWWnZjMVpWUmtKWlUzaEVVVlZHYUU4eFJrSlRNMUpEVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1JFOHhSa0pSTW5CRFRFVTVRbEZWT0hOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxb3dTa0pSVjJSRFRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoR1VWVkdSa3hGZEVKUlZYTnpVVEJHUWxGNWVHNVJhMFpDV2pCSmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBTbEZWVFROU1UzaEVVVlZHUkU4d2JFSlNWMDF6WXpCS1FsRlhaRU5NUldSQ1VWTTVRMHhHVmtKUlYyUkVURVpHUWxGWGRFTlBNVVpDVVhwc1JFeEZiRUpSVld0elVUQkdRbEY1ZUVoUlZVWklURVZzUWxGVmEzTlRNRVpDVTNsNFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaEVVVlZHUkU4eFJrSlJlbFpEVEVWT1FsRlZUWE5STUVaQ1VYbDRjbEZyUmtKaE1FbHpVVEJHUWxGNWVGSlJWVVpTVEVWV1FsRlZWWE5UVlVaQ1UxTjRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmphMDF6VkRCR1FsUjVlRVJSVlVaRVRFVk9RbEZWVFRkVFZVWkVXV2w0UkZGVlJrUlBNR3hDVWpCUmMwNUZTa0pSVm10elVqQkdRbGRwZUZaUlZVWm9URVZXUWxGV2EzTlNWVVpDVWxONFJsRlZSbHBQTVVaQ1V6STFSRXhGYkVKUlZXdHpVVEJHUWxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRibEZyUmtKYU1FbHpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWWE5TVlVaQ1VsTjRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmtSVTF6VTFWR1FsTlRlRVJSVlVaRVRFVjBRbEZWYzNOVFZVWkNVMU40UmxGVlJrWlBNV3hDVVRGdmMxTlZSa0pUVTNoR1VWVkdSa3hGWkVKUlZXTnpVekJHUWxONWVFUlJWVVpFVEVWMFFsRlZjM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlblJhVVZWT05GRnBlRkJSVlVaUVRFVldRbEZWVlhOV1ZVWkNWbE40UmxGVlJrWk1SVTVDVVZWTmMxSlZSa0pTVTNoR1VWVkdSa3hGVmtKUlZWVnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWUmtaTVJWWkNVVlZWYzFKVlJrSlNVM2hHVVZWR1JreEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhwMFZGRlZUbk5TUkhSU1VWVldSVXhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVHpCc1FsRXlhRU5NUlU1Q1VWVk5OMU5WUmtaU1EzZDVVV3RHUWxaNWVFaFJWVVpaVEVaV1FsRldhM05STUVaQ1ZWTjRSbEZWUmtaTVJVNUNVVmRGYzFKVlJrSlNVM2hLVVZWR1drOHhSa0pSZW1SRVRFVk9RbEZWVFhOUk1FWkNVWGw0VGxGVlJrNU1SV1JDVVZWamMxTlZSa0pUVTNoRVVWVkdSRTh4UmtKUk1taERURVYwUWxGVmMzTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEdVVlZHUmt4RlRrSlJWVTF6VWpCR1FsSjVlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxSlZSa0pTVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFWlJWVVpHVEVWV1FsRlZWWE5STUVaQ1VYbDRSbEZWUmtaUE1XeENVWHBPUkV4RmJFSlJWV3R6VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkdKRlNYTlJNRVpDVVhsNFJGRlZSa1JNUlRGQ1VWVXdjMU5WUmtKVFUzaEtVVlZHU2t4RlRrSlJWVTAzVjFWR1JHRnJTWE5UVlVaQ1UxTjRSRkZWUmtSTVJtUkNVVlpqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVNHlVV3AwVWxGVlRrVk1SV3hDVVZWcmMxRXdSa0pSZVhoS1VWVkdTa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRVRkZWUmxCTVJWWkNVVlZWYzFFd1JrSlJlblJLVVZWT2MxRjVlRVJSVlVaRVR6QnNRbEpWVVhOaU1FcENVVlZyYzFJd1JrSlRhblJTVVZWT1NreEZiRUpSVld0elVqQkdRbEo1ZUVoUlZVWklURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUldSQ1VWVmpjMU5WUmtKVFUzaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRTVSVlVaT1RFVk9RbEZWVFRkVlZVWkVZa1ZOYzFRd1JrSlVlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpVZEZwUlZVNVRURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVldRbEV5YUVOTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelZWVkdRbFZUZUVaUlZVWkdURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JNUjFaQ1VWZFZjMUV3UmtKUmVuUmFVVlZPTmxGNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVUekZPUWxGNlRrTlBNVVpDVVRCUmMxUXdSa0pVZVhoSVVWVkdTRXhGVGtKUlZVMDNVMVZHUkZwcGVFUlJWVVpFVHpCc1FsVXdkM05YVlVaQ1VYcDBRbEZWUmtWTVJVNUNVVlZOYzFGVlJuTlRNRkZ6VTFWR2NsTXdUVGRSVlVaelV6RnJjMk13U2tKUlZYTTNVVlZHZGxNeWVFTlBNR3hDVWpCcmMxb3dTa0pSVnpGRFRFVldRbEZYVFRkVlZVWkNXa040VUZGVlJrWk1SV1JDVVZWWmMxSlZSa0pTVTNoRVVWVkdXazh4UmtKUmVtUkRURVZzUWxGVmEzTlJNRVpDVVhsNFNGRlZSa2hNUlZaQ1VWVlZjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTAzVlZWR1JHSkZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJXeENVVlZyYzFJd1JrSlNlWGhLVVZWR1NreEZkRUpSVlhOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhwMFVsRlZUalpSYVhoUVVWVkdVRXhGVGtKUlZVMXpVbFZHUWxKVGVFWlJWVVpHVHpGc1FsRXhTWE5UVlVaQ1UxTjRSRkZWUmtSTVJXUkNVVlZqYzFOVlJrSlRVM2hNVVZWR1RFeEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5OMWRWUmtSbGEwbHpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUwM1YxVkdSR0ZyU1hOUk1FWkNVWGw0UkZGVlJrUk1Sa1pDVVZaRmMxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMDNWVEJHUkdKRlNUZFRWVVpFVkVONFJGRlZSa1JQTUd4Q1VsVlJjMk5WU2tKUlZXdHpVakJHUWxOcWRGSlJWVTVLVEVWc1FsRlZhM05TTUVaQ1VubDRTRkZWUmtoTVJVNUNVVlZOYzFKVlJrSlNVM2hFVVZWR1JFeEZaRUpSVldOelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5OMVZWUmtSaVJVMXpWREJHUWxSNWVFUlJWVVpFVEVWV1FsRlZWVGRYVlVaQ1VsTjRTRkZWUmtoTVJXeENVVlZyYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUlZaQ1VWVlZjMUV3UmtKUmVuUlNVVlZPTWxGNWVGQlJWVVpRVEVWa1FsRlZZM05STUVaQ1VYcDBTbEZWVG0xTVJVNUNVVlZOTjFOVlJrWlNRM2d4VVd0R1FsUlRlRWhSVlVaUFRFWldRbEZWT0hOUk1FWkNWVlIwVWxGVmJGbE1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVEVWc1FsRlZhM05STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOTjFWVlJrUlBWVWx6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHVEdSRlNYTlJNRVpDVVhwMFNsRlZWa1ZNU0ZaRFVWVkdUa3hGWkVKUlZUUnpWbFZHUWxSNWVFUlJWVVpTVHpGR1FsTXhaM05UVlVaQ1UxTjRTbEZWUmtwTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUU1UlZVWk9URVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUSm9SRXhGYkVKUlZXdHpWVEJHUWxWNWVFaFJWVVpJVEVWc1FsRlZhM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUwM1ZWVkdSR0ZGVFhOVFZVWkNVMU40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoT1VWVkdUa3hGWkVKUlZXTnpVMVZHUWxOVGVFUlJWVVpFVHpGR1FsRXphRU5NUld4Q1VWVnJjMUV3UmtKUmVYaE1VVlZHVEV4R1RrSlJWazF6VWxWR1FsSlVkRnBSVlU1eFVXbDRTbEZWUmtwTVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUZKUlZVWlNURVZPUWxGVlRYTlNNRVpDVW5sNFZGRlZSbFJNUlU1Q1VWVk5OMWRWUmtSaVJVMXpWVEJHUWxWNWVFUlJWVVpFVEVaR1FsRldSWE5TTUVaQ1VubDRSRkZWUmtSTVJVNUNVVlZOYzFWVlJrSlZVM2hFVVZWR1JFOHhUa0pUVnpWRVR6QnNRbEV3ZDNOUk1FWkNVWHAwU2xGVmJFVk1TRTVEVVZWR1RFeEZaRUpSVlhkelZsVkdRbFJUZUVSUlZVWm9UekZHUWxFeVdYTlRWVVpDVTFONFJGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VVRCR1FsRjVlRXhSVlVaTVRFVldRbEZWVlhOUk1FWkNVWGw0U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVekJHUWxONWVFUlJWVVpFVHpGR1FsTllhRVJNUld4Q1VWVnJjMU5WUmtKVFUzaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRXhSVlVaTVRFVk9RbEZWVFhOVVZVWkNWRk40U0ZGVlJraE1SVTVDVVZWTmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpWRlZHUWxSVGVFaFJWVVpJVEVWT1FsRlZUWE5STUVaQ1VYbDRTRkZWUmtoTVJVNUNVVlZOTjFWVlJrUmlSVkZ6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOVFZVWkNVMU40UkZGVlJrUk1SVEZDVVZVd2MxSXdSa0pTZVhoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVVeFFsRlZNSE5TVlVaQ1VsUjBXbEZWVFhaUmFYaEVVVlZHUkV4RlRrSlJWVTF6VmpCR1FsWjVlRVJSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVbE40UkZGVlJrUk1SVlpDVVZWVmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNWMVZHUkUxVlNYTlRWVVpDVTFONFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRlJSVlU1elVXcDBhRkZWUms1UE1XeENVVEJuYzFFd1JrSlJlWGhFVVZWR1JFeEdaRUpSVm1OelVUQkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JFMHdTWE5UVlVaQ1UxTjRSRkZWUmtSTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY2ZEZSUlZVNXpVV3AwU2xGVmRFMU1SVTVDVVZWTk4xTlZSa1pTUTNnelVXdEdRbFI1ZUVoUlZVWlJURVpXUWxGV1JYTlJNRVpDV2pCTk4xVlZSa1JqUlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFVGRlZSbEJNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVTFWR1JHVnJTWE5STUVaQ1VYcDBTbEZWWkVWTVNFWkVVVlZHZGxGcGVFaFJWVVozVVdwMFVsRlZUa3BNUld4Q1VWVnJjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VkRCR1FsUjVlRVJSVlVaRVRFWldRbEZWUlhOUk1FWkNVWGw0U2xGVlJraE1SVGxDVVZWRmMxRXdSa0pSZVhoRVVWVkdSRXhJVGtOUlZVWjZVV2w0UmxGVlJrWk1SVlpDVVZSR1EweEZUa0pSVkVKRFRFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVlRqQlNRM2hFVVZWR1JFOHdiRUpTTUZGell6QktRbEZWYzNOU01FWkNWRU40VmxGVlJrNU1Sa1pDVVZoT1EwOHhSa0pSVkZaRFRFZHNRMUZYVmtSUE1VWkNXa1ZqYzFOVlJrSlRVM2hFVVZWR1JFeEhPVU5SVlVaMlVXbDRSbEZWUmtaTVJVNUNVVlZOTjFWVlJrUk9WVWx6VTFWR1FsTlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0VUZGVlJsQk1SVTVDVVZWTmMxWlZSa0pSVTNoRVVWVkdSRTh4YkVKUk1sbHpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJrNUNVVlpOYzFKVlJrSlNVM2hFVVZWR1JFOHhiRUpSTTFKRFRFVnNRbEZWYTNOUk1FWkNVWGw0VEZGVlJreE1SV3hDVVZWcmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVbFZHUWxKVGVFaFJWVVpJVEVVeFFsRlZNSE5STUVaQ1VYbDRkbEZyUmtKaU1FbHpVbFZHUWxKVWRHNVJhMFpFWWtWUmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSUE1tUkRVVlZPY1ZGcGVFeFJWVVpNVEVWT1FsRlZUWE5UTUVaQ1UzbDRSRkZWUmtSTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFeEZPVUpSVlRoelVUQkdRbEY1ZUZaUlZVWkNURVZXUWxGVlZYTlRWVVpDVWxONFVGRlZSa0pNUlhSQ1VWVnJjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTF6VWxWR1FsSlRlRVJSVlVaRVRFVldRbEZYV1hOUk1FWkNXbE40UkZGVlJrUk1SVTVDVVZWTk4xb3dTa0pSZWxaRVRFVjBRbEZWYTNOUk1FWkNVWGw0VGxGVlJrNU1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNXakJLUWxFeVdYTlZWVVpDVlZONFJGRlZSa1JNUld4Q1VWVnJjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkR2hSVlhSM1VXcDBVbEZWVGsxTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdiRUpSTVVGelVUQkdRbEY2ZEVwUlZ6bERWRU40YUZGVlJrUlBNRVpDVVZWUmMxRXdSa0pSZVhoQ1VWZDRTVkpEZUVwUlYzUkpVWHAwUWxGWGVFbFhVM2d6VVd0R1FsUlVkRUpSVnpsSlltdEpOMU5WUmxCVFUzaHVVV3RHUW1KVlNYTlNWVVpDV1hsNFJsRlZSbFJNUlZaQ1VWZGtRMDh4UmtKUldGcEVURVU1UWxGVlZYTlNNRVpDVW1sNFJsRlZSa1pNUlU1Q1VWWnJOMVZWUmtKVmVYaFFVVlZHUmt4RlpFSlJWVmx6VWxWR1FsSlRlRVJSVlVacVR6RkdRbEV6VWtWTVJXeENVVlZyYzFFd1JrSlJlWGhHVVZWR1JreEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVUekZHUWxFeVNYTlNWVVpDVWxONFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaFdVVlZHUWt4RlRrSlJWVTAzVjFWR1JGVnBlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0U0ZGVlJraE1SVlpDVVZWVmMxSlZSa0pTVTNoRVVWVkdSRXhGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWV1FsRlZWWE5STUVaQ1VYcDBVbEZWYXpGUmFYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRkpSVlU1SlRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxSlZSa0pTVTNoRVVWVkdSRTh4UmtKUk1rbHpVbFZHUWxKVGVFUlJWVVpFVEVVNVFsRlZPSE5STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOTjFkVlJrUlZhWGhFVVZWR1JFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTAzVjFWR1JHTkZTWE5STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1UxaG9RMHhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXdaM05UVlVaQ1UxTjRSRkZWUmtSTVJrWkNVVlpGYzFJd1JrSlNlWGhHVVZWR1JreEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVpXUWxGVlJYTlJNRVpDVVhsNFNsRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VXpCR1FsTjVlRVJSVlVaRVRFVk9RbEZWVFhOVU1FWkNWSGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNmRGSlJWVTB4VWtONFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1UzaElVVlZHU0V4RmJFSlJWV3R6VVRCR1FsRjZkRXBSVlU1MVVXbDRSRkZWUmtSUE1HeENVbFZSYzJOVlNrSlJWV3R6VWpCR1FsTnFkRkpSVlU1S1RFVTVRbEZWT0hOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoS1VWVkdTa3hGVmtKUlZWVnpVVEJHUWxGNmRFcFJWVTE0VVdsNFJGRlZSa1JQTUd4Q1UxVlJjMk5WVGtKUlZ6bERURVZrUWxGWVFrTk1SbFpDVVZoR1EweEZWa0pSVm1zM1ZWVkdSRTR3U1hOVFZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxSXdSa0pTZVhoS1VWVkdTa3hGVGtKUlZVMXpVbFZHUWxKVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRWbEZWUmtKTVJVNUNVVlZOYzFOVlJrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVoUlZVWklURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlRsQ1VWVTRjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWVFRkVlZVWkVZV3RWYzFOVlJrSlRVM2hFVVZWR1JFeEZWa0pSVlZWelVqQkdRbEo1ZUVwUlZVWktURVV4UWxGVk1ITlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTAzVlZWR1JFOVZTWE5UVlVaQ1UxTjRSRkZWUmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhRVVZWR1VFeEZUa0pSVlUxelZsVkdRbEY1ZUVSUlZVWkVURVZXUWxGVlZYTlJNRVpDVVhsNFNsRlZSa3hNUlRsQ1VWVkZjMUV3UmtKUmVYaEVVVlZHUkV4RmJFSlJWV3R6VWpCR1FsSjVlRVpSVlVaR1RFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZkUmMxRXdSa0paZVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkU5VlRYTlJNRVpDVVhwMFNsRlZWa1ZNUnpsRVVWVkdkRkZwZUVoUlZVWjFVV2w0VmxGVlJuWlJhWGhHVVZWR1drOHhSa0pSZWxaRFRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxUXdSa0pVZVhoRVVWVkdSRXhHVmtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5UVlVaQ1UzbDRVRkZWUmtKTVJVNUNVVlZOYzFFd1JrSlJlWGhzVVZWR2JFeEZaRUpSVldOelVsVkdRbEpUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSalpSYVhoRVVWVkdOVkZwZUVSUlZVWkVURVZPUWxGVlRUZFRWVVpFWld0UmMxRXdSa0pSZW5SS1VWUktRMVI1ZHpKUmEwWkNWMU40U0ZGVlJuZFJhblJTVVZWT1NreEZiRUpSVld0elZWVkdRbFZUZUVoUlZVWklURVV4UWxGVk1ITlJNRVpDVVhsNFZGRlZSbFJNUlZaQ1VYcE9RMHhGVGtKUlZVMXpVakJHUWxwVGVFcFJWVVpLVEVWV1FsRXpRa05NUlU1Q1VWVk5jMUl3UmtKU2VYaEtVVlZHU2t4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlU1eFVXbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZNVUpSVlRCelVsVkdSRmRwZUZoUlZVWllURVZrUWxGVlkzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VUTkNRMHhGZEVKUlZYTnpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRSbEZWUmtaTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVsVkdRbEpUZUVSUlZVWkVURVZXUWxGVlZUZFhWVVpFWlVWSmMxTlZSa0pUVTNoRVVWVkdSRXhGWkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSUE1XeENVVEpKYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlUxeldWVkdRbGxVZEc1UmEwWkNVbE40VkZGVlJsUlBNV3hDVVhwc1EweEZiRUpSVld0elV6QkdRbE41ZUVoUlZVWklURVZPUWxGVlRYTlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMUV3UmtKUmVuUmFVVlZPTUZGcGVFcFJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYbDRVbEZWUmxKTVJXeENVVlZyYzFNd1JrSlRlWGhJVVZWR1NFeEdSa0pSVmtWelVsVkdRbEpVZEc1UmEwWkVZVVZOYzFWVlJrSlZVM2hJVVZWR1NFeEZkRUpSVlhOelVUQkdRbEY2ZEc1UmEwWkVZV3RKYzFFd1JrSlJlWGhJVVZWR1NFeEZUa0pSVlUxelVUQkdRbEY2ZEc1UmEwWkVWR2w0V0ZGVlJsaE1SV1JDVVZWamMxRXdSa0pSZVhoRVVWVkdSRTh5WkVOUlZVNXZVV2w0U2xGVlJrcE1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVazh5T1VOUlZVWkdURVV4UWxGVk1EZFpWVVpFWld0Sk4xVXdSa1JUYW5SU1VWVk9SVXhGYkVKUlZXdHpWakJHUWxaNWVFeFJWVVpNVEVWT1FsRlZUVGRYVlVaRVlXdEpjMUV3UmtKUmVYaFNVVlZHVWt4RlpFSlJWV056VkZWR1FsUlRlRVJSVlVaRVRFZFdRbEZYVlhOVFZVWkNVMU40UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoT1VWVkdUa3hGYkVKUlZXdHpVVEJHUWxGNWVFUlJWVVpFVEVaR1FsRldSWE5STUVaQ1VYbDRSbEZWVG5OU1ZIUmFVVlZPU2t4RlRrSlJWVTF6VVRCR1FsRjVlRmhSVlVaWVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoSVVWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpGc1FsRjZSa05NUlU1Q1VWVk5jMUV3UmtKUmVYaE9VVlZHVGt4RlpFSlJWV056VVRCR1FsRjVlRWhSVlVaSVRFVk9RbEZWVFhOUk1FWkNVWHAwVkZGVlRuZFJhblJTVVZWT1JVeEZPVUpSVlRoelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxFeVNYTlJNRVpDVVhwMFNsRlZiRVZNU0dSRFVWVkdVRXhGWkVKUlZrRTNWVlZHUkZOVGVFcFJWVVpLVEVWc1FsRlZhM05STUVaQ1VYbDRSbEZWUmtaTVJXeENVVlZyYzFOVlJrSlRVM2hHVVZWR1JrOHhiRUpSTW5CRFRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SV1JDVVZWamMxTlZSa0pUVTNoT1VWVkdUa3hGVGtKUlZVMXpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRSRkZWUmtSUE1VNUNVVEp3UkU4eFJrSlRWVkZ6VTFWR1FsTlRlRVJSVlVaRVRFVldRbEZWVlhOUk1FWkNVWGw0VEZGVlJreE1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhHUmtKUlZrVnpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRjZaRU5NUld4Q1VWVnJjMUV3UmtKUmVYaElVVlZHYkV4RmJFSlJWV3R6VVRCR1FsRjZkRkpSVlU0MlVXbDRVRkZWUmxCTVJVNUNVVlZOYzFFd1JrSlJlWGhJVVZWR1NFeEZiRUpSVld0elVUQkdRbEY1ZUZwUlZVWmFURVZXUWxGVlZYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4R1JrSlJWa1Z6VTFWR1FsTlRlRVJSVlVaRVRFVk9RbEZWVFhOVE1FWkNVM2w0UmxGVlJrWk1SV1JDVVZWamMxUlZSa0pVVTNoRVVWVkdSRXhIVmtKUlYxVnpVMVZHUWxOVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFKVlJrSlNWSFJhVVZWT2NWSjVlRXBSVlVaS1RFVldRbEZWVlhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGZEVKUlZYTnpVbFZHUWxKVGVFWlJWVVpHVEVWa1FsRlZZM05STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFFd1JrSlJlWGhNVVZWR1RFeEZUa0pSVlUwM1YxVkdUazFWVFhOVFZVWkNVMU40UmxGVlJrWk1SWFJDVVZWemMxSlZSa0pTVTNoR1VWVkdSazh5WkVOUlZVNVpURVZzUWxGVmEzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMU13UmtKVGVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6SkdRbEV6UWtOUE1teERVVlZHVGs4eVpFTlJWVTVKVEVWc1FsRlZhM05TVlVaQ1VsTjRSRkZWUmtSTVJFcERVVlZGZVZGcGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRURkZWUmt4TVJWWkNVVlZWYzFFd1JrSlJlWGhFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVaUlZVWkdUekk1UTFGVlZuRlNRM2hFVVZWR1JFeEZUa0pSVlUxeldWVkdRbGxUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhwMGRsRnJSa1JrYTBselZUQkdRbFY2ZEhCUmEwWkVWMnAwYmxGclJrWlNRM2hLVVZWR1NreEZkRUpSVlhOelVqQkdRbEo1ZUVaUlZVWkdURVZPUWxGVlRYTlhWVVpDVjFONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVjBRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUlBNbVJEVVZWTk0xRjVlRXBSVlVaS1RFVjBRbEZWYzNOVE1FWkNVM2w0U2xGVlJrcE1SVlpDVVZWVk4ySXdTa0pSTW1oRFRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxUlZSa0pVVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYcDBkbEZyUmtSbGEwbHpVMVZHUWxOVGVFUlJWVVpFVEVWV1FsRlZWWE5STUVaQ1VYbDRUbEZWUms1TVJVNUNVVlZOYzFNd1JrSlRlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVSUlZVWkVUekk1UTFGVlRqWlJhWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVV4UWxGVk1ITlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVuUjJVV3RHUkdKclNYTlRWVVpDVTFONFJGRlZSa1JNUmtaQ1VWWkZjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VXpCR1FsTjVlRVJSVlVaRVRFWldRbEZXVlhOUk1FWkNVWGw0UkZGVlJrUlBNbXhEVVZWT05GRjZkSGhSYTBaQ1ZGUjBkbEZyUmtwVFEzaEVVVlZHUkV4RlRrSlJWVTF6V1ZWR1FsbFRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWHAwZGxGclJrUmthMGx6VlRCR1FsVjZkSEJSYTBaRVYycDBibEZyUmtSU1EzaEtVVlZHU2t4RlRrSlJWVTF6VVRCR1FsRjVlRXhSVlVaTVRFVldRbEZWVlhOVFZVWkNVMU40UkZGVlJrUk1SVlpDVVZWVk4ySXdTa0pUTW1oRFRFVnNRbEZWYTNOUk1FWkNVWGw0VWxGVlJsSk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpKc1ExRlZUalpSYW5SNFVXdEdRbFJVZEhaUmEwWktVME40U2xGVlJrcE1SVTVDVVZWTmMxSlZSa0pTVTNoRVVWVkdSRXhGZEVKUlZYTnpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYcDBjRkZyUmtSalJVazNXVlZHUkZOcWRGUlJWVEZMVHpCc1FsTlZkM05STUVaQ1VYcDBTbEZWWkVWTVNFNURVVlZHVEV4RlpFSlJWWGMzVlZWR1JGTlRlRXBSVlVaS1RFVk9RbEZWVFhOVU1FWkNWSGw0UmxGVlJrWk1SVTVDVVZWTk4xVlZSa1JhYVhoS1VWVkdTa3hHUmtKUlZrVnpVakJHUWxKNWVFNVJWVVpPVEVWT1FsRlZUWE5WTUVaQ1ZYbDRSbEZWUmtaTVJXeENVVlZyYzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelVsVkdRbEpUZUVSUlZVWkVURVZzUWxGVmEzTlNWVVpDVWxONFJGRlZSa1JQTVVaQ1VUTmFSVXhGT1VKUlZUaHpVMVZHUWxOVGVFUlJWVVpFVEVWa1FsRlZZM05STUVaQ1VYbDRVbEZWUmxKTVJXUkNVVlZqYzFOVlJrSlRVM2hFVVZWR1JFeEZaRUpSVldOelZGVkdRbFJUZUVaUlZVWkdUekZzUWxFeldrUk1SV3hDVVZWcmMxRXdSa0pSZVhoUVVWVkdVRXhGVmtKUlZWVnpVVEJHUWxGNmRGcFJWVTV0VEVaR1FsRldSWE5TTUVaQ1VubDRTbEZWUmtwTVJVNUNVVlZOTjFkVlJrUmhSVWx6VTFWR1FsTlRlRWhSVlVaSVRFVnNRbEZWYTNOUk1FWkNVWGw0UmxGVlJrWk1SVTVDVVZWTmMxTlZSa0pUVTNoR1VWVkdSa3hGVGtKUlZVMDNWVEJHUkdWclNUZFZWVVpFVWtONFVGRlZSbEJNUld4Q1VWVnJjMUV3UmtKUmVuUktVVlZPYjFGcGVFUlJWVVpFVHpCc1FtTkZkRTVNUkVwRFVWVkdkbEZwZUVoUlZVWklURVZPUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JQTUd4Q1VYcGtRMHhJVGtOUlZVWnNURVZrUWxGVlkzTlJNRVpDVVhsNFRGRlZSa3hNUlU1Q1VWVk5OMU5WUm5aVE0wSkVURWRHUWxGVlRUZFJNRVpDVVZONFFsRlljRXhTUTNoS1VWaHNURkY2ZEVKUldIQk1WMU40TTFGclJrSlVWSFJDVVZkc1RXSnJTWE5WTUVaQ1dqQkpjMDFyU2tKUlZFcERURVZPUWxGVlRYTlRNRVpDV2pCUmMxSlZSa0pTVTNoV1VWVkdkRkZwZUVaUlZVWkdURVpXUWxGWE1VTlBNR3hDVWpKNFNreEZiRUpSVlRCelVsVkdRbEpUZUVoUlZVWnNURVYwUWxGVmMzTlJNRVpDVVhsNFNGRlZSa2hNUlU1Q1VWVk5jMVpWUmtKUlUzaEVVVlZHUkV4RmJFSlJWV3R6VkRCR1FsRlRlRXBSVlVaS1RFWkdRbEZXUlhOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxbFZSa0paVTNoRVVWVkdSRXhGVmtKUlZHUkRURVZPUWxGVVdrTk1SVTVDVVZWTmMxRXdSa0pSZW5SS1VWVk9lVkpUZUVwUlZVWk9URVZXUWxGVlZYTlNNRVpDWVZWSmMxSlZSa0pTVTNoRVVWVkdSRTh3YkVKUmVsWkRURVZzUWxGVk1ITlJNRVpDVVhsNFNGRlZSa2hNUlhSQ1VWVnpjMUV3UmtKUmVYaE9VVlZHVGt4RlRrSlJWVTAzVTFWR1JHUnJTWE5UTUVaQ1UzbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZWa0pSVlZWelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlZaQ1VWVlZjMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlUzVlZWR1JFNVZTWE5UVlVaQ1ZGTjRTbEZWUmtwTVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkdURVYwUWxGVmMzTlNNRVpDVW5sNFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVR6RkdRbEY2VmtSTVJWWkNVVlZWYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUZaUlZVWldURVZPUWxGVlRYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RlZrSlJWVlZ6VVRCR1FsRjVlRVJSVlVaRVRFVmtRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVlpDVVZWVmMxRXdSa0pSZVhoS1VWVkdTa3hGVGtKUlZVMXpVMVZHUWxOVGVFaFJWVVpJVEVWMFFsRlZjM05STUVaQ1VYbDRTbEZWUmtwTVJVNUNVVlZOYzFJd1JrSlNlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVUekIwUWxGNlRrWlBNR3hDVVRCUmMxTlZSa0pVVTNoU1VWVkdVa3hGWkVKUlZXTnpVbFZHUWxKVGVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSbEZWVG5OUmFYaFVVVlZHVkV4RlpFSlJWV056VWxWR1FsSlRlRVJSVlVaRVRFVk9RbEZWVFhOU01FWkNVbmw0UkZGVlJrUk1SVTVDVVZWTmMxSlZSa1JqYTBselYxVkdRbGRUZUVoUlZVWklURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEtVVlZHU2t4RlpFSlJWV056VVRCR1FsRjVlRVpSVlU1dlVYbDRhRkZWUm1oTVJXUkNVVlZqYzFNd1JrSlRlWGhFVVZWR1JFeEZUa0pSVlUxelVqQkdRbEo1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFNsRlZSa3BNUldSQ1VWVmpjMUV3UmtKUmVYaEVVVlZHUkU4d2JFSlJla1pFVEVWc1FsRlZhM05VVlVaQ1ZGTjRTRkZWUm1oTVJXeENVVlZyYzFKVlJrSlNVM2hPVVZWR1RreEZaRUpSVjBWelUxVkdRbE5UZUVSUlZVWkVUekJzUWxFelNrVk1SV3hDVVZWcmMxWlZSa0pXVTNoR1VWVkdSazh4UmtKUk1XOXpWRlZHUWxSVGVFaFJWVVpJVEVWc1FsRlZhM05WVlVaQ1ZWTjRSRkZWUmtSTVJsWkNVVlpWYzFKVlJrSlNVM2hTVVZWR1VreEZUa0pSVlUxelZGVkdRbFJUZUVoUlZVWklURVZzUWxGVmEzTlJNRVpDVVhsNFJGRlZSa1JQTVVaQ1VYcEdSVXhGVmtKUlZWVnpVVEJHUWxGNWVFcFJWVVpLVEVWT1FsRlZUWE5VVlVaQ1ZGTjRSRkZWUmtSTVJVNUNVVlZOTjFWVlJrUmhSVWx6VWxWR1FsSlRlRVJSVlVaRVRFVnNRbEZWYTNOUk1FWkNVWGw0U2xGVlJrcE1SbFpDVVZaVmMxRXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpWVlZHUWxWVGVFWlJWVVpHVEVac1FsRldhM05STUVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOTjFNd1JrUk5NRkUzVTFWR1JGSkRlRXBSVlVaS1RFWldRbEZXVlhOU1ZVWkNVbFIwVWxGVlRtRk1SVEZDVVZVd2MxSXdSa0pTZVhoS1VWVkdTa3hHUmtKUlZrVnpVVEJHUWxGNWVGWlJWVVpXVEVWV1FsRlZWWE5WTUVaQ1ZYbDRSRkZWUmtSTVJURkNVVlV3YzFJd1JrSlNlWGhLVVZWR1NreEZUa0pSVlUxelVUQkdRbEY2ZEZKUlZVMTZVa040UmxGVlJrWk1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGTVVKUlZUQnpVVEJHUWxGNWVFUlJWVVpFVHpGR1FsRXlhRU5NUlZaQ1VWVlZjMUV3UmtKUmVYaEtVVlZHU2t4RlRrSlJWVTF6VTFWR1FsTlRlRlpSVlVaV1RFVk9RbEZWVFhOVk1FWkNWWGw0UmxGVlJrWk1SVEZDVVZVd2MxSlZSa0pTVTNob1VWVkdhRXhGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCMFFsRjZaRVZQTUd4Q1VUQlJjMU5WUmtKVFUzaE9VVlZHVGt4RlpFSlJWV056VTFWR1FsTlRlRTVSVlVaT1RFVk9RbEZWVFhOU1ZVWkNVbE40UmxGVlJrWk1SVlpDVVZWVmMxRXdSa0pSZVhoRVVWVkdSRTh3YkVKUk1taEVURVV4UWxGVk1ITlJNRVpDVVhsNFRGRlZSa3hNUlZaQ1VWVlZjMUV3UmtKUmVuUktVVlZPYlV4Rk9VSlJWVGczVlZWR1JGTkRlRlpSVlVaV1RFVldRbEZWVlhOU1ZVWkNVbE40UkZGVlJrUk1SWFJDVVZWemMxRXdSa0pSZVhoRVVWVkdSRXhGVmtKUlZWVnpVekJHUWxONWVFUlJWVVpFVEVVeFFsRlZNSE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFFd1JrSlJlWGhXVVZWR1FreEZUa0pSVlUxelUxVkdRbE5UZUZCUlZVWkNURVZPUWxGVlRYTlJNRVpDVVhsNFVsRlZSbEpNUlZaQ1VWVlZjMUpWUmtKWGFYaEVVVlZHV2t4RlRrSlJWVTAzVlZWR1JFNVZVWE5XVlVaQ1ZsTjRSbEZWUmtaTVJURkNVVlV3YzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelZGVkdRbFJUZUVSUlZVWkVURVpHUWxGV1JYTlNWVVpDVWxONFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaFNVVlZHVWt4RlRrSlJWVTF6VlZWR1FsVlRlRVpSVlVaR1RFVmtRbEZWWTNOWFZVWkNWMVIwVWxGVlRYcFNVM2hXVVZWR1ZreEZWa0pSVlZWelZGVkdRbFJUZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFRsRlZSazVNUlU1Q1VWVk5jMVZWUmtKVlUzaEdVVlZHUmt4RlRrSlJWVTF6VVRCR1FsRjVlRVJSVlVaRVRFWk9RbEZXVFhOUk1FWkNVWGw0VWxGVlJsSk1SVlpDVVZWVmMxSXdSa0pTZVhob1VWVkdhRTh3ZEVKUk1taEhURVZPUWxGVlRUZFJWVVpFVkdsNFJGRlZSa1JQTUVaQ1lVVk9SVXhIZEVaUlYyUkVVWGxLT1NKZGZRPT1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/cola.js\n");

/***/ }),

/***/ "./src/js/color-scheme-key.js":
/*!************************************!*\
  !*** ./src/js/color-scheme-key.js ***!
  \************************************/
/*! exports provided: update */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"update\", function() { return update; });\n//import * as RGBColor from \"rgbcolor\";\n\nfunction update(/*HTMLDivElement*/ div, /*App*/app) {\n    div.textContent = \"\";\n\n    const complexColorScheme = app.getComplexColors();\n    const complexColorTable = document.createElement(\"table\");\n    complexColorTable.classList.add(\"color-key\", \"complex-colors\");\n    const th = complexColorTable.createTHead();\n    th.textContent = \"Complexes\";\n    const ccDomain = complexColorScheme.domain();\n    const ccRange = complexColorScheme.range();\n    for (let i = 0; i < ccDomain.length; i++) {\n        const tr = complexColorTable.insertRow();\n        const tc1 = tr.insertCell();\n        tc1.style.backgroundColor = ccRange[i % 6];\n        const tc2 = tr.insertCell();\n        tc2.textContent = ccDomain[i];\n        //console.log(i + \" \" + ccDomain[i] + \" \" + ccRange[i]);\n    }\n    div.appendChild(complexColorTable);\n\n    const featureColorScheme = app.getFeatureColors();\n    if (featureColorScheme) {\n        for (let [annotationSet, shown] of app.annotationSetsShown){\n            if (shown){\n                const featureColorTable = document.createElement(\"table\");\n                featureColorTable.classList.add(\"color-key\", \"feature-colors\");\n                const th2 = featureColorTable.createTHead();\n                th2.textContent = annotationSet;\n                const dupCheck = new Set();\n                for (let p of app.participants.values()){\n                    if (p.type === \"protein\"){\n                        const annos = p.annotationSets.get(annotationSet);\n                        if (annos) {\n                            for (let anno of annos) {\n                                const desc = anno.description;\n                                if (!dupCheck.has(desc)) {\n                                    dupCheck.add(desc);\n                                    const tr = featureColorTable.insertRow();\n                                    const tc1 = tr.insertCell();\n                                    tc1.style.backgroundColor = featureColorScheme(desc);\n                                    const tc2 = tr.insertCell();\n                                    tc2.textContent = desc;\n                                }\n                            }\n                        }\n                    }\n                }\n                // const domain = featureColorScheme.domain();\n                // const range = featureColorScheme.range();\n                // for (let i = 0; i < domain.length; i++) {\n                //     const tr = featureColorTable.insertRow();\n                //     const tc1 = tr.insertCell();\n                //     // make transparent version of color\n                //     //const temp = new RGBColor(range[i % 20]).;\n                //     tc1.style.backgroundColor = range[i % 20];//\"rgba(\" + temp.r + \",\" + temp.g + \",\" + temp.b + \", 0.6)\";\n                //     const tc2 = tr.insertCell();\n                //     tc2.textContent = domain[i];\n                // }\n                div.appendChild(featureColorTable);\n\n            }\n        }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvY29sb3Itc2NoZW1lLWtleS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvY29sb3Itc2NoZW1lLWtleS5qcz8wYTllIl0sInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0ICogYXMgUkdCQ29sb3IgZnJvbSBcInJnYmNvbG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUoLypIVE1MRGl2RWxlbWVudCovIGRpdiwgLypBcHAqL2FwcCkge1xuICAgIGRpdi50ZXh0Q29udGVudCA9IFwiXCI7XG5cbiAgICBjb25zdCBjb21wbGV4Q29sb3JTY2hlbWUgPSBhcHAuZ2V0Q29tcGxleENvbG9ycygpO1xuICAgIGNvbnN0IGNvbXBsZXhDb2xvclRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuICAgIGNvbXBsZXhDb2xvclRhYmxlLmNsYXNzTGlzdC5hZGQoXCJjb2xvci1rZXlcIiwgXCJjb21wbGV4LWNvbG9yc1wiKTtcbiAgICBjb25zdCB0aCA9IGNvbXBsZXhDb2xvclRhYmxlLmNyZWF0ZVRIZWFkKCk7XG4gICAgdGgudGV4dENvbnRlbnQgPSBcIkNvbXBsZXhlc1wiO1xuICAgIGNvbnN0IGNjRG9tYWluID0gY29tcGxleENvbG9yU2NoZW1lLmRvbWFpbigpO1xuICAgIGNvbnN0IGNjUmFuZ2UgPSBjb21wbGV4Q29sb3JTY2hlbWUucmFuZ2UoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNjRG9tYWluLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRyID0gY29tcGxleENvbG9yVGFibGUuaW5zZXJ0Um93KCk7XG4gICAgICAgIGNvbnN0IHRjMSA9IHRyLmluc2VydENlbGwoKTtcbiAgICAgICAgdGMxLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNjUmFuZ2VbaSAlIDZdO1xuICAgICAgICBjb25zdCB0YzIgPSB0ci5pbnNlcnRDZWxsKCk7XG4gICAgICAgIHRjMi50ZXh0Q29udGVudCA9IGNjRG9tYWluW2ldO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGkgKyBcIiBcIiArIGNjRG9tYWluW2ldICsgXCIgXCIgKyBjY1JhbmdlW2ldKTtcbiAgICB9XG4gICAgZGl2LmFwcGVuZENoaWxkKGNvbXBsZXhDb2xvclRhYmxlKTtcblxuICAgIGNvbnN0IGZlYXR1cmVDb2xvclNjaGVtZSA9IGFwcC5nZXRGZWF0dXJlQ29sb3JzKCk7XG4gICAgaWYgKGZlYXR1cmVDb2xvclNjaGVtZSkge1xuICAgICAgICBmb3IgKGxldCBbYW5ub3RhdGlvblNldCwgc2hvd25dIG9mIGFwcC5hbm5vdGF0aW9uU2V0c1Nob3duKXtcbiAgICAgICAgICAgIGlmIChzaG93bil7XG4gICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZUNvbG9yVGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG4gICAgICAgICAgICAgICAgZmVhdHVyZUNvbG9yVGFibGUuY2xhc3NMaXN0LmFkZChcImNvbG9yLWtleVwiLCBcImZlYXR1cmUtY29sb3JzXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoMiA9IGZlYXR1cmVDb2xvclRhYmxlLmNyZWF0ZVRIZWFkKCk7XG4gICAgICAgICAgICAgICAgdGgyLnRleHRDb250ZW50ID0gYW5ub3RhdGlvblNldDtcbiAgICAgICAgICAgICAgICBjb25zdCBkdXBDaGVjayA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwIG9mIGFwcC5wYXJ0aWNpcGFudHMudmFsdWVzKCkpe1xuICAgICAgICAgICAgICAgICAgICBpZiAocC50eXBlID09PSBcInByb3RlaW5cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbm5vcyA9IHAuYW5ub3RhdGlvblNldHMuZ2V0KGFubm90YXRpb25TZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFubm9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYW5ubyBvZiBhbm5vcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNjID0gYW5uby5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkdXBDaGVjay5oYXMoZGVzYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cENoZWNrLmFkZChkZXNjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyID0gZmVhdHVyZUNvbG9yVGFibGUuaW5zZXJ0Um93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YzEgPSB0ci5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YzEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZmVhdHVyZUNvbG9yU2NoZW1lKGRlc2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGMyID0gdHIuaW5zZXJ0Q2VsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGMyLnRleHRDb250ZW50ID0gZGVzYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjb25zdCBkb21haW4gPSBmZWF0dXJlQ29sb3JTY2hlbWUuZG9tYWluKCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgcmFuZ2UgPSBmZWF0dXJlQ29sb3JTY2hlbWUucmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IGRvbWFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCB0ciA9IGZlYXR1cmVDb2xvclRhYmxlLmluc2VydFJvdygpO1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCB0YzEgPSB0ci5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIG1ha2UgdHJhbnNwYXJlbnQgdmVyc2lvbiBvZiBjb2xvclxuICAgICAgICAgICAgICAgIC8vICAgICAvL2NvbnN0IHRlbXAgPSBuZXcgUkdCQ29sb3IocmFuZ2VbaSAlIDIwXSkuO1xuICAgICAgICAgICAgICAgIC8vICAgICB0YzEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcmFuZ2VbaSAlIDIwXTsvL1wicmdiYShcIiArIHRlbXAuciArIFwiLFwiICsgdGVtcC5nICsgXCIsXCIgKyB0ZW1wLmIgKyBcIiwgMC42KVwiO1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCB0YzIgPSB0ci5pbnNlcnRDZWxsKCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIHRjMi50ZXh0Q29udGVudCA9IGRvbWFpbltpXTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGZlYXR1cmVDb2xvclRhYmxlKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/color-scheme-key.js\n");

/***/ }),

/***/ "./src/js/config.js":
/*!**************************!*\
  !*** ./src/js/config.js ***!
  \**************************/
/*! exports provided: svgns, LABEL_Y, rotatePointAboutPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svgns\", function() { return svgns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LABEL_Y\", function() { return LABEL_Y; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotatePointAboutPoint\", function() { return rotatePointAboutPoint; });\nconst svgns = \"http://www.w3.org/2000/svg\";//, // namespace for svg elements\n//     xlinkNS: 'http://www.w3.org/1999/xlink', // namespace for xlink, for use/defs elements\n\nconst LABEL_Y = -5; // todo this isn't needed\n//     selectedColour: '#ffff99',\n//\n//     Polymer: {\n//         STICKHEIGHT: 20,\n//         MAXSIZE: 20,\n//         transitionTime: 650\n//     }\n// };\nfunction rotatePointAboutPoint (p, o, theta) {\n    theta = (theta / 360) * Math.PI * 2; //TODO: change theta arg to radians not degrees\n    const rx = Math.cos(theta) * (p[0] - o[0]) - Math.sin(theta) * (p[1] - o[1]) + o[0];\n    const ry = Math.sin(theta) * (p[0] - o[0]) + Math.cos(theta) * (p[1] - o[1]) + o[1];\n    return [rx, ry];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvY29uZmlnLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy9jb25maWcuanM/MTRhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc3ZnbnMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Ly8sIC8vIG5hbWVzcGFjZSBmb3Igc3ZnIGVsZW1lbnRzXG4vLyAgICAgeGxpbmtOUzogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAvLyBuYW1lc3BhY2UgZm9yIHhsaW5rLCBmb3IgdXNlL2RlZnMgZWxlbWVudHNcblxuZXhwb3J0IGNvbnN0IExBQkVMX1kgPSAtNTsgLy8gdG9kbyB0aGlzIGlzbid0IG5lZWRlZFxuLy8gICAgIHNlbGVjdGVkQ29sb3VyOiAnI2ZmZmY5OScsXG4vL1xuLy8gICAgIFBvbHltZXI6IHtcbi8vICAgICAgICAgU1RJQ0tIRUlHSFQ6IDIwLFxuLy8gICAgICAgICBNQVhTSVpFOiAyMCxcbi8vICAgICAgICAgdHJhbnNpdGlvblRpbWU6IDY1MFxuLy8gICAgIH1cbi8vIH07XG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUG9pbnRBYm91dFBvaW50IChwLCBvLCB0aGV0YSkge1xuICAgIHRoZXRhID0gKHRoZXRhIC8gMzYwKSAqIE1hdGguUEkgKiAyOyAvL1RPRE86IGNoYW5nZSB0aGV0YSBhcmcgdG8gcmFkaWFucyBub3QgZGVncmVlc1xuICAgIGNvbnN0IHJ4ID0gTWF0aC5jb3ModGhldGEpICogKHBbMF0gLSBvWzBdKSAtIE1hdGguc2luKHRoZXRhKSAqIChwWzFdIC0gb1sxXSkgKyBvWzBdO1xuICAgIGNvbnN0IHJ5ID0gTWF0aC5zaW4odGhldGEpICogKHBbMF0gLSBvWzBdKSArIE1hdGguY29zKHRoZXRhKSAqIChwWzFdIC0gb1sxXSkgKyBvWzFdO1xuICAgIHJldHVybiBbcngsIHJ5XTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/config.js\n");

/***/ }),

/***/ "./src/js/expand.js":
/*!**************************!*\
  !*** ./src/js/expand.js ***!
  \**************************/
/*! exports provided: matrix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matrix\", function() { return matrix; });\nfunction matrix (json) {\n\n    // We'll need collections of our interactions and interactors for later..\n    const interactions = json.data.filter(function (interaction) {\n        return interaction.object === \"interaction\";\n    });\n\n    const interactors = json.data.filter(function (interactor) {\n        return interactor.object === \"interactor\";\n    });\n\n    const newParticipants = [];\n\n    // Loop through our interactions\n    interactions.forEach(function (interaction) {\n\n        // Get a collection of participants where the stoichiometry is greater than one.\n        const participantsToExpand = interaction.participants.filter(function (participant) {\n            if (participant.stoichiometry > 1) {\n                return participant;\n            }\n        });\n\n        // Loop through our participants that need expanding\n        participantsToExpand.forEach(function (participant) {\n\n            // Do we have an interactor? TODO: Will this affect complexes?\n            const foundInteractor = findFirstObjWithAttr(interactors, \"id\", participant.interactorRef);\n\n            // If we found an interactor then we need to clone it.\n            if (foundInteractor) {\n\n                for (let i = 0; i < participant.stoichiometry - 1; i++) {\n                    /********** PARTICIPANTS **********/\n                    const clonedParticipant = JSON.parse(JSON.stringify(participant));\n\n                    //~ clonedParticipant.interactorRef = clonedInteractor.id;\n                    clonedParticipant.id = clonedParticipant.id + \"_\" + i;\n\n                    // Store a reference from where we were cloned\n                    clonedParticipant.cloneParentID = participant.id;\n                    clonedParticipant.cloneIteration = i;\n                    participant.cloned = true;\n\n                    // We need to relink to our binding site IDs:\n                    if (clonedParticipant.features) {\n                        clonedParticipant.features.forEach(function (feature) {\n\n                            feature.clonedfrom = feature.id;\n                            feature.id = feature.id + \"_\" + i;\n\n                            // Also, adjust our sequence data\n                            feature.sequenceData.forEach(function (sequenceData) {\n                                sequenceData.participantRef = clonedParticipant.id;\n                                //~ sequenceData.interactorRef = clonedInteractor.id;\n                            });\n                        });\n                    }\n\n                    interaction.participants.push(clonedParticipant);\n                    newParticipants.push(clonedParticipant);\n\n                }\n            }\n        });\n\n        // Get ALL of our features.\n        const featureMap = new Map();\n        interaction.participants.forEach(function (participant) {\n            if (participant.features) {\n                participant.features.forEach(function (feature) {\n                    feature.parentParticipant = participant.id;\n                    featureMap.set(feature.id, feature);\n                });\n            }\n        });\n\n\n        const values = Array.from(featureMap.values());\n\n        values.forEach(function (feature) {\n            if (feature.clonedfrom) {\n                // Find all binding sites that have a linked feature to me and add the clone id\n                values.forEach(function (nFeature) {\n                    const linkedFeatures = nFeature.linkedFeatures;\n                    if (linkedFeatures) {\n                        if (linkedFeatures.indexOf(feature.clonedfrom) > -1) {\n                            const clonedFeature = JSON.parse(JSON.stringify(nFeature));\n                            clonedFeature.id = nFeature.id + \"_\" + feature.id;\n                            clonedFeature.linkedFeatures = [];\n                            clonedFeature.linkedFeatures.push(feature.id);\n\n                            const parts = findFirstObjWithAttr(interaction.participants, \"id\", clonedFeature.parentParticipant);\n                            parts.features.push(clonedFeature);\n                        }\n                    }\n                });\n            }\n        });\n    });\n\n\n    //clear stoichiometry info from participant?\n    interactions.forEach(function (interaction) {\n        interaction.participants.forEach(function (participant) {\n            participant.stoichiometry = null;\n        });\n    });\n\n    //actually the expansion code doesn't seem to take up that much time\n    //console.log(\"Expand time:\" + ( +new Date() - startTime));\n    return json;\n}\n\n// Returns the first object in an array that has an attribute with a matching value.\nfunction findFirstObjWithAttr(collection, attribute, value) {\n    for (let i = 0; i < collection.length; i += 1) {\n        if (collection[i][attribute] === value) {\n            return collection[i];\n        }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvZXhwYW5kLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy9leHBhbmQuanM/N2Y3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWF0cml4IChqc29uKSB7XG5cbiAgICAvLyBXZSdsbCBuZWVkIGNvbGxlY3Rpb25zIG9mIG91ciBpbnRlcmFjdGlvbnMgYW5kIGludGVyYWN0b3JzIGZvciBsYXRlci4uXG4gICAgY29uc3QgaW50ZXJhY3Rpb25zID0ganNvbi5kYXRhLmZpbHRlcihmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGludGVyYWN0aW9uLm9iamVjdCA9PT0gXCJpbnRlcmFjdGlvblwiO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaW50ZXJhY3RvcnMgPSBqc29uLmRhdGEuZmlsdGVyKGZ1bmN0aW9uIChpbnRlcmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBpbnRlcmFjdG9yLm9iamVjdCA9PT0gXCJpbnRlcmFjdG9yXCI7XG4gICAgfSk7XG5cbiAgICBjb25zdCBuZXdQYXJ0aWNpcGFudHMgPSBbXTtcblxuICAgIC8vIExvb3AgdGhyb3VnaCBvdXIgaW50ZXJhY3Rpb25zXG4gICAgaW50ZXJhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG5cbiAgICAgICAgLy8gR2V0IGEgY29sbGVjdGlvbiBvZiBwYXJ0aWNpcGFudHMgd2hlcmUgdGhlIHN0b2ljaGlvbWV0cnkgaXMgZ3JlYXRlciB0aGFuIG9uZS5cbiAgICAgICAgY29uc3QgcGFydGljaXBhbnRzVG9FeHBhbmQgPSBpbnRlcmFjdGlvbi5wYXJ0aWNpcGFudHMuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0aWNpcGFudCkge1xuICAgICAgICAgICAgaWYgKHBhcnRpY2lwYW50LnN0b2ljaGlvbWV0cnkgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnRpY2lwYW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggb3VyIHBhcnRpY2lwYW50cyB0aGF0IG5lZWQgZXhwYW5kaW5nXG4gICAgICAgIHBhcnRpY2lwYW50c1RvRXhwYW5kLmZvckVhY2goZnVuY3Rpb24gKHBhcnRpY2lwYW50KSB7XG5cbiAgICAgICAgICAgIC8vIERvIHdlIGhhdmUgYW4gaW50ZXJhY3Rvcj8gVE9ETzogV2lsbCB0aGlzIGFmZmVjdCBjb21wbGV4ZXM/XG4gICAgICAgICAgICBjb25zdCBmb3VuZEludGVyYWN0b3IgPSBmaW5kRmlyc3RPYmpXaXRoQXR0cihpbnRlcmFjdG9ycywgXCJpZFwiLCBwYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmKTtcblxuICAgICAgICAgICAgLy8gSWYgd2UgZm91bmQgYW4gaW50ZXJhY3RvciB0aGVuIHdlIG5lZWQgdG8gY2xvbmUgaXQuXG4gICAgICAgICAgICBpZiAoZm91bmRJbnRlcmFjdG9yKSB7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRpY2lwYW50LnN0b2ljaGlvbWV0cnkgLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKiogUEFSVElDSVBBTlRTICoqKioqKioqKiovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZFBhcnRpY2lwYW50ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJ0aWNpcGFudCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vfiBjbG9uZWRQYXJ0aWNpcGFudC5pbnRlcmFjdG9yUmVmID0gY2xvbmVkSW50ZXJhY3Rvci5pZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFydGljaXBhbnQuaWQgPSBjbG9uZWRQYXJ0aWNpcGFudC5pZCArIFwiX1wiICsgaTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmcm9tIHdoZXJlIHdlIHdlcmUgY2xvbmVkXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZFBhcnRpY2lwYW50LmNsb25lUGFyZW50SUQgPSBwYXJ0aWNpcGFudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVkUGFydGljaXBhbnQuY2xvbmVJdGVyYXRpb24gPSBpO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5jbG9uZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcmVsaW5rIHRvIG91ciBiaW5kaW5nIHNpdGUgSURzOlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvbmVkUGFydGljaXBhbnQuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZFBhcnRpY2lwYW50LmZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuY2xvbmVkZnJvbSA9IGZlYXR1cmUuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5pZCA9IGZlYXR1cmUuaWQgKyBcIl9cIiArIGk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvLCBhZGp1c3Qgb3VyIHNlcXVlbmNlIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnNlcXVlbmNlRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChzZXF1ZW5jZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VEYXRhLnBhcnRpY2lwYW50UmVmID0gY2xvbmVkUGFydGljaXBhbnQuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfiBzZXF1ZW5jZURhdGEuaW50ZXJhY3RvclJlZiA9IGNsb25lZEludGVyYWN0b3IuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLnBhcnRpY2lwYW50cy5wdXNoKGNsb25lZFBhcnRpY2lwYW50KTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UGFydGljaXBhbnRzLnB1c2goY2xvbmVkUGFydGljaXBhbnQpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBHZXQgQUxMIG9mIG91ciBmZWF0dXJlcy5cbiAgICAgICAgY29uc3QgZmVhdHVyZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgaW50ZXJhY3Rpb24ucGFydGljaXBhbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnQuZmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUucGFyZW50UGFydGljaXBhbnQgPSBwYXJ0aWNpcGFudC5pZDtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU1hcC5zZXQoZmVhdHVyZS5pZCwgZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbShmZWF0dXJlTWFwLnZhbHVlcygpKTtcblxuICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUuY2xvbmVkZnJvbSkge1xuICAgICAgICAgICAgICAgIC8vIEZpbmQgYWxsIGJpbmRpbmcgc2l0ZXMgdGhhdCBoYXZlIGEgbGlua2VkIGZlYXR1cmUgdG8gbWUgYW5kIGFkZCB0aGUgY2xvbmUgaWRcbiAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAobkZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua2VkRmVhdHVyZXMgPSBuRmVhdHVyZS5saW5rZWRGZWF0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtlZEZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlua2VkRmVhdHVyZXMuaW5kZXhPZihmZWF0dXJlLmNsb25lZGZyb20pID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9uZWRGZWF0dXJlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShuRmVhdHVyZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZEZlYXR1cmUuaWQgPSBuRmVhdHVyZS5pZCArIFwiX1wiICsgZmVhdHVyZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWRGZWF0dXJlLmxpbmtlZEZlYXR1cmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkRmVhdHVyZS5saW5rZWRGZWF0dXJlcy5wdXNoKGZlYXR1cmUuaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBmaW5kRmlyc3RPYmpXaXRoQXR0cihpbnRlcmFjdGlvbi5wYXJ0aWNpcGFudHMsIFwiaWRcIiwgY2xvbmVkRmVhdHVyZS5wYXJlbnRQYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuZmVhdHVyZXMucHVzaChjbG9uZWRGZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuXG4gICAgLy9jbGVhciBzdG9pY2hpb21ldHJ5IGluZm8gZnJvbSBwYXJ0aWNpcGFudD9cbiAgICBpbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgaW50ZXJhY3Rpb24ucGFydGljaXBhbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnRpY2lwYW50KSB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudC5zdG9pY2hpb21ldHJ5ID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvL2FjdHVhbGx5IHRoZSBleHBhbnNpb24gY29kZSBkb2Vzbid0IHNlZW0gdG8gdGFrZSB1cCB0aGF0IG11Y2ggdGltZVxuICAgIC8vY29uc29sZS5sb2coXCJFeHBhbmQgdGltZTpcIiArICggK25ldyBEYXRlKCkgLSBzdGFydFRpbWUpKTtcbiAgICByZXR1cm4ganNvbjtcbn1cblxuLy8gUmV0dXJucyB0aGUgZmlyc3Qgb2JqZWN0IGluIGFuIGFycmF5IHRoYXQgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGEgbWF0Y2hpbmcgdmFsdWUuXG5mdW5jdGlvbiBmaW5kRmlyc3RPYmpXaXRoQXR0cihjb2xsZWN0aW9uLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uW2ldW2F0dHJpYnV0ZV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbltpXTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/expand.js\n");

/***/ }),

/***/ "./src/js/read-mijson.js":
/*!*******************************!*\
  !*** ./src/js/read-mijson.js ***!
  \*******************************/
/*! exports provided: readMijson */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readMijson\", function() { return readMijson; });\n/* harmony import */ var _viz_interactor_annotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./viz/interactor/annotation */ \"./src/js/viz/interactor/annotation.js\");\n/* harmony import */ var _viz_interactor_protein__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viz/interactor/protein */ \"./src/js/viz/interactor/protein.js\");\n/* harmony import */ var _viz_interactor_bioactive_entity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./viz/interactor/bioactive-entity */ \"./src/js/viz/interactor/bioactive-entity.js\");\n/* harmony import */ var _viz_interactor_gene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./viz/interactor/gene */ \"./src/js/viz/interactor/gene.js\");\n/* harmony import */ var _viz_interactor_dna__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./viz/interactor/dna */ \"./src/js/viz/interactor/dna.js\");\n/* harmony import */ var _viz_interactor_rna__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./viz/interactor/rna */ \"./src/js/viz/interactor/rna.js\");\n/* harmony import */ var _viz_interactor_complex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./viz/interactor/complex */ \"./src/js/viz/interactor/complex.js\");\n/* harmony import */ var _viz_interactor_complex_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./viz/interactor/complex-symbol */ \"./src/js/viz/interactor/complex-symbol.js\");\n/* harmony import */ var _viz_interactor_molecule_set__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./viz/interactor/molecule-set */ \"./src/js/viz/interactor/molecule-set.js\");\n/* harmony import */ var _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./viz/link/nary-link */ \"./src/js/viz/link/nary-link.js\");\n/* harmony import */ var _viz_link_feature_link__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./viz/link/feature-link */ \"./src/js/viz/link/feature-link.js\");\n/* harmony import */ var _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./viz/sequence-datum */ \"./src/js/viz/sequence-datum.js\");\n/* harmony import */ var _viz_link_binary_link__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./viz/link/binary-link */ \"./src/js/viz/link/binary-link.js\");\n/* harmony import */ var _viz_link_unary_link__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./viz/link/unary-link */ \"./src/js/viz/link/unary-link.js\");\n/* harmony import */ var _expand__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./expand */ \"./src/js/expand.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// reads MI JSON format\nfunction readMijson (/*miJson*/miJson, /*App*/ app, expand = true) {\n    //check that we've got a parsed javascript object here, not a String\n    miJson = (typeof miJson === \"object\") ? miJson : JSON.parse(miJson);\n    miJson.data = miJson.data.reverse();\n    app.features = new Map();\n\n    const complexes = new Map();\n    // todo - make sequence required in miJSON rather than optional, JAMI's always adding it\n    //const needsSequence = new Set(); //things that need seq looked up\n\n    //get interactors\n    app.proteinCount = 0;\n    app.interactors = new Map();\n    for (let datum of miJson.data) {\n        if (datum.object === \"interactor\") {\n            app.interactors.set(datum.id, datum);\n            if (datum.id.indexOf(\"uniprotkb_\") === 0) { // todo - is this best way to test this?\n                app.proteinCount++;\n            }\n        }\n    }\n\n    expand ? readStoichExpanded() : readStoichUnexpanded();\n\n    // loop through participants and features\n    // init binary, unary and sequence links,\n    // and make needed associations between these and containing naryLink\n    for (let datum of miJson.data) {\n        if (datum.object === \"interaction\") {\n            for (let jsonParticipant of datum.participants) {\n                let features = new Array(0);\n                if (jsonParticipant.features) features = jsonParticipant.features;\n\n                for (let feature of features) { // for each feature\n                    const fromSequenceData = feature.sequenceData;\n                    if (feature.linkedFeatures) { // if linked features\n                        const linkedFeatureIDs = feature.linkedFeatures;\n                        const linkedFeatureCount = linkedFeatureIDs.length;\n                        for (let lfi = 0; lfi < linkedFeatureCount; lfi++) { //for each linked feature\n\n                            // !! following is a hack, code can't deal with\n                            // !! composite binding region across two different interactors\n                            // break feature links to different nodes into separate binary links\n                            const toSequenceData_indexedByNodeId = new Map();\n\n                            const linkedFeature = app.features.get(linkedFeatureIDs[lfi]);\n                            for (let seqData of linkedFeature.sequenceData) {\n                                let nodeId = seqData.interactorRef;\n                                if (expand) {\n                                    nodeId = nodeId + \"(\" + seqData.participantRef + \")\";\n                                }\n                                let toSequenceData = toSequenceData_indexedByNodeId.get(nodeId);\n                                if (typeof toSequenceData === \"undefined\") {\n                                    toSequenceData = [];\n                                    toSequenceData_indexedByNodeId.set(nodeId, toSequenceData);\n                                }\n                                toSequenceData = toSequenceData.push(seqData);\n                            }\n\n                            for (let toSequenceData of toSequenceData_indexedByNodeId.values()) {\n                                const fromInteractor = getNode(fromSequenceData[0]);\n                                const toInteractor = getNode(toSequenceData[0]);\n                                let link;\n                                if (fromInteractor === toInteractor) {\n                                    link = getUnaryLink(fromInteractor, datum);\n                                } else {\n                                    link = getBinaryLink(fromInteractor, toInteractor, datum);\n                                }\n                                const sequenceLink = getFeatureLink(fromSequenceData, toSequenceData, datum);\n                                fromInteractor.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                                toInteractor.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                                link.sequenceLinks.set(sequenceLink.id, sequenceLink);\n                            }\n\n                        } // end for each linked feature\n\n                    } // end if linked features\n                } // end for each feature\n            }\n        }\n    }\n\n    //init complexes\n    app.complexes = Array.from(complexes.values()); // todo - why not just keep it in map\n    for (let c = 0; c < app.complexes.length; c++) {\n        const complex = app.complexes[c];\n        let interactionId;\n        if (expand) {\n            interactionId = complex.id.substring(0, complex.id.indexOf(\"(\"));\n        } else {\n            interactionId = complex.id;\n        }\n        for (let datum of miJson.data) {\n            if (datum.object === \"interaction\" && datum.id === interactionId) {\n                const nLinkId = getNaryLinkIdFromInteraction(datum);\n                const naryLink = app.allNaryLinks.get(nLinkId);\n                complex.initLink(naryLink);\n                naryLink.complex = complex;\n            }\n        }\n    }\n\n    //make mi features into annotations\n    for (let feature of app.features.values()) {\n        // add features to interactors/participants/nodes\n        //console.log(\"FEATURE:\" + feature.name, feature.sequenceData);\n        let annotName = \"\";\n        if (typeof feature.name !== \"undefined\") {\n            annotName += feature.name + \" \";\n        }\n        if (typeof feature.detmethod !== \"undefined\") {\n            annotName += \", \" + feature.detmethod.name;\n        }\n        // the id info we need is inside sequenceData att\n        if (feature.sequenceData) { // todo - still needed?\n            for (let seqDatum of feature.sequenceData) {\n                let mID = seqDatum.interactorRef;\n                if (expand) {\n                    mID = mID + \"(\" + seqDatum.participantRef + \")\";\n                }\n                // console.log(\"*\", mID, seqDatum);\n                const molecule = app.participants.get(mID);\n                const seqFeature = new _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_11__[\"SequenceDatum\"](molecule, seqDatum.pos);\n                const annotation = new _viz_interactor_annotation__WEBPACK_IMPORTED_MODULE_0__[\"Annotation\"](annotName, seqFeature);\n                let miFeatures = molecule.annotationSets.get(\"MI Features\");\n                if (!miFeatures) {\n                    miFeatures = [];\n                    molecule.annotationSets.set(\"MI Features\", miFeatures);\n                }\n                miFeatures.push(annotation);\n            }\n        }\n    }\n\n    function readStoichExpanded() {\n        //get maximum stoichiometry\n        let maxStoich = 0;\n        for (let datum of miJson.data) {\n            if (datum.object === \"interaction\") {\n                for (let jsonParticipant of datum.participants) {\n                    if (jsonParticipant.stoichiometry && (jsonParticipant.stoichiometry - 0) > maxStoich) {\n                        maxStoich = (jsonParticipant.stoichiometry - 0);\n                    }\n                }\n            }\n        }\n        if (maxStoich < 30) {\n            miJson = Object(_expand__WEBPACK_IMPORTED_MODULE_14__[\"matrix\"])(miJson);\n        }\n\n        indexFeatures();\n\n        //add naryLinks and participants\n        for (let datum of miJson.data) {\n            if (datum.object === \"interaction\") {\n                //init n-ary link\n                const nLinkId = datum.id || getNaryLinkIdFromInteraction(datum);\n                let nLink = app.allNaryLinks.get(nLinkId);\n                if (typeof nLink === \"undefined\") {\n                    //doesn't already exist, make new nLink\n                    nLink = new _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__[\"NaryLink\"](nLinkId, app);\n                    app.allNaryLinks.set(nLinkId, nLink);\n                    //alot of time is being spent on creating these IDs, stash them in the interaction object?\n                    datum.naryId = nLinkId;\n\n                }\n                //nLink.addEvidence(datum);\n\n                //init participants\n                for (let jsonParticipant of datum.participants) {\n                    const intRef = jsonParticipant.interactorRef;\n                    const partRef = jsonParticipant.id;\n                    const participantId = intRef + \"(\" + partRef + \")\";\n                    let participant = app.participants.get(participantId);\n                    if (typeof participant === \"undefined\") {\n                        const interactor = app.interactors.get(intRef);\n                        participant = newParticipant(interactor, participantId, intRef);\n                        app.participants.set(participantId, participant);\n                    }\n\n                    participant.naryLinks.set(nLinkId, nLink);\n                    if (nLink.participants.indexOf(participant) === -1) {\n                        nLink.participants.push(participant);\n                    }\n\n                    if (jsonParticipant.stoichiometry) {\n                        const interactor = app.participants.get(participantId);\n                        interactor.addStoichiometryLabel(jsonParticipant.stoichiometry);\n                    }\n                }\n            }\n        }\n    }\n\n    function newParticipant(interactor, participantId, interactorRef) {\n        let participant;\n        if (typeof interactor == \"undefined\" || interactor.type.id === \"MI:1302\") {\n            //must be a previously unencountered complex -\n            // MI:0314 - interaction?, MI:0317 - complex? and its many subclasses\n\n            let interactionExists = false;\n            for (let datum of miJson.data) {\n                if (datum.object === \"interaction\" && datum.id === interactorRef) {\n                    interactionExists = true;\n                    break;\n                }\n            }\n\n\n            if (interactionExists) {\n                participant = new _viz_interactor_complex__WEBPACK_IMPORTED_MODULE_6__[\"Complex\"](participantId, app, interactorRef);\n                complexes.set(participantId, participant);\n            } else {\n                participant = new _viz_interactor_complex_symbol__WEBPACK_IMPORTED_MODULE_7__[\"ComplexSymbol\"](participantId, app, interactorRef, interactor);\n            }\n        }else if (interactor.type.id === \"MI:1304\" //molecule set\n            ||\n            interactor.type.id === \"MI:1305\" //molecule set - candidate set\n            ||\n            interactor.type.id === \"MI:1307\" //molecule set - defined set\n            ||\n            interactor.type.id === \"MI:1306\" //molecule set - open set\n        ) {\n            participant = new _viz_interactor_molecule_set__WEBPACK_IMPORTED_MODULE_8__[\"MoleculeSet\"](participantId, app, interactor, interactor.label);\n        } else if (interactor.type.id === \"MI:1100\" // bioactive entity\n            ||\n            interactor.type.id === \"MI:0904\" // bioactive entity - polysaccharide\n            ||\n            interactor.type.id === \"MI:0328\" //bioactive entity - small mol\n        ) {\n            participant = new _viz_interactor_bioactive_entity__WEBPACK_IMPORTED_MODULE_2__[\"BioactiveEntity\"](participantId, app, interactor, interactor.label);\n        } else if (interactor.type.id === \"MI:0326\" || interactor.type.id === \"MI:0327\") { // proteins, peptides\n            participant = new _viz_interactor_protein__WEBPACK_IMPORTED_MODULE_1__[\"Protein\"](participantId, app, interactor, interactor.label, interactor.sequence);\n        } else if (interactor.type.id === \"MI:0250\") { //genes\n            participant = new _viz_interactor_gene__WEBPACK_IMPORTED_MODULE_3__[\"Gene\"](participantId, app, interactor, interactor.label);\n        } else if (interactor.type.id === \"MI:0320\" // RNA\n            ||\n            interactor.type.id === \"MI:0321\" // RNA - catalytic\n            ||\n            interactor.type.id === \"MI:0322\" // RNA - guide\n            ||\n            interactor.type.id === \"MI:0323\" // RNA - heterogeneous nuclear\n            ||\n            interactor.type.id === \"MI:2190\" // RNA - long non-coding\n            ||\n            interactor.type.id === \"MI:0324\" // RNA - messenger\n            ||\n            interactor.type.id === \"MI:0679\" // RNA - poly adenine\n            ||\n            interactor.type.id === \"MI:0608\" // RNA - ribosomal\n            ||\n            interactor.type.id === \"MI:0611\" // RNA - signal recognition particle\n            ||\n            interactor.type.id === \"MI:0610\" // RNA - small interfering\n            ||\n            interactor.type.id === \"MI:0607\" // RNA - small nuclear\n            ||\n            interactor.type.id === \"MI:0609\" // RNA - small nucleolar\n            ||\n            interactor.type.id === \"MI:0325\" // RNA - transfer\n        ) {\n            participant = new _viz_interactor_rna__WEBPACK_IMPORTED_MODULE_5__[\"RNA\"](participantId, app, interactor, interactor.label);\n        } else if (interactor.type.id === \"MI:0319\" // DNA\n            ||\n            interactor.type.id === \"MI:0681\" // DNA - double stranded\n            ||\n            interactor.type.id === \"MI:0680\" // DNA - single stranded\n        ) {\n            participant = new _viz_interactor_dna__WEBPACK_IMPORTED_MODULE_4__[\"DNA\"](participantId, app, interactor, interactor.label);\n        } else {\n            // MI:0329 - unknown participant ?\n            // MI:0383 - biopolymer ?\n            alert(\"Unrecognised type:\" + interactor.type.name);\n        }\n        return participant;\n    }\n\n    function indexFeatures() {\n        //create indexed collection of all features from interactions\n        // - still seems like a good starting point?\n        for (let datum of miJson.data) {\n            if (datum.object === \"interaction\") {\n                for (let jsonParticipant of datum.participants) {\n                    let features = new Array(0);\n                    if (jsonParticipant.features) features = jsonParticipant.features;\n\n                    const fCount = features.length;\n                    for (let f = 0; f < fCount; f++) {\n                        const feature = features[f];\n\n                        // jami workaround, not entirely inline with mi-json schema, but looks like mi-json has redundant info here\n                        for (let seqDatum of feature.sequenceData) {\n                            if (!seqDatum.interactorRef) {\n                                seqDatum.interactorRef = jsonParticipant.interactorRef;\n                            }\n                            if (!seqDatum.participantRef) {\n                                seqDatum.participantRef = feature.parentParticipant;\n                            }\n                        }\n\n                        app.features.set(feature.id, feature);\n                    }\n                }\n            }\n        }\n    }\n\n    function readStoichUnexpanded() {\n        //get interactors\n        for (let interactor of app.interactors.values()) {\n            const participantId = interactor.id;\n            const participant = newParticipant(interactor, participantId);\n            app.participants.set(participantId, participant);\n        }\n\n        indexFeatures();\n\n        //add naryLinks\n        for (let datum of miJson.data) {\n            if (datum.object === \"interaction\") {\n                const jsonParticipants = datum.participants;\n                const participantCount = jsonParticipants.length;\n\n                //init n-ary link\n                const nLinkId = getNaryLinkIdFromInteraction(datum);\n                let nLink = app.allNaryLinks.get(nLinkId);\n                if (typeof nLink === \"undefined\") {\n                    //doesn't already exist, make new nLink\n                    nLink = new _viz_link_nary_link__WEBPACK_IMPORTED_MODULE_9__[\"NaryLink\"](nLinkId, app);\n                    app.allNaryLinks.set(nLinkId, nLink);\n                }\n                //nLink.addEvidence(datum);\n\n                //~ //init participants\n                for (let pi = 0; pi < participantCount; pi++) {\n                    const jsonParticipant = jsonParticipants[pi];\n                    const intRef = jsonParticipant.interactorRef;\n                    let participant = app.participants.get(intRef);\n\n                    if (typeof participant === \"undefined\") {\n                        //must be a previously unencountered complex\n                        participant = new _viz_interactor_complex__WEBPACK_IMPORTED_MODULE_6__[\"Complex\"](intRef, app);\n                        complexes.set(intRef, participant);\n                        app.participants.set(intRef, participant);\n                    }\n\n\n                    participant.naryLinks.set(nLinkId, nLink);\n                    if (nLink.participants.indexOf(participant) === -1) {\n                        nLink.participants.push(participant);\n                    }\n                    //temp - to give sensible info when stoich collapsed\n                    const interactor = app.participants.get(intRef);\n                    interactor.stoich = interactor.stoich ? interactor.stoich : 0;\n                    if (jsonParticipant.stoichiometry) {\n                        interactor.stoich += +jsonParticipant.stoichiometry;\n                    } else {\n                        interactor.stoich += 1;\n                    }\n                }\n\n                const interactorArr = app.participants.values();\n                const iCount = interactorArr.length;\n                for (let ii = 0; ii < iCount; ii++) {\n                    const int = interactorArr[ii];\n                    int.addStoichiometryLabel(int.stoich);\n                }\n\n            }\n        }\n\n    }\n\n    function getNaryLinkIdFromInteraction(interaction) {\n        if (interaction.naryId) {\n            return interaction.naryId;\n        }\n        const jsonParticipants = interaction.participants;\n        const participantCount = jsonParticipants.length;\n\n        const pIDs = new Set(); //used to eliminate duplicates\n        //make id\n        for (let pi = 0; pi < participantCount; pi++) {\n            let pID = jsonParticipants[pi].interactorRef;\n            if (expand) {\n                pID = pID + \"(\" + jsonParticipants[pi].id + \")\";\n            }\n            pIDs.add(pID);\n        }\n\n        return Array.from(pIDs.values()).sort().join(\"-\");\n    }\n\n    function getNode(seqDatum) {\n        let id = seqDatum.interactorRef;\n        if (expand) {\n            id = id + \"(\" + seqDatum.participantRef + \")\";\n        }\n        return app.participants.get(id);\n    }\n\n    function getFeatureLink(fromSeqData, toSeqData, interaction) {\n        function seqDataToString(seqData) {\n            const nodeIds = new Set(); //used to eliminate duplicates\n            //make id\n            for (let s = 0; s < seqData.length; s++) {\n                const seq = seqData[s];\n                let id = seq.interactorRef;\n                if (expand) {\n                    id = id + \"(\" + seq.participantRef + \")\";\n                }\n                id = id + \":\" + seq.pos;\n                nodeIds.add(id);\n            }\n            //sort ids\n            return Array.from(nodeIds.values()).sort().join(\";\");\n        }\n\n\n        const start = seqDataToString(fromSeqData);\n        const end = seqDataToString(toSeqData);\n        let seqLinkId;//, endsSwapped;\n        if (start < end) {\n            seqLinkId = start + \"><\" + end;\n            //endsSwapped = false;\n        } else {\n            seqLinkId = end + \"><\" + start;\n            //endsSwapped = true;\n        }\n        let sequenceLink = app.allSequenceLinks.get(seqLinkId);\n        if (typeof sequenceLink === \"undefined\") {\n            const fromFeaturePositions = [];\n            for (let fromSeqDatum of fromSeqData) {\n                fromFeaturePositions.push(new _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_11__[\"SequenceDatum\"](getNode(fromSeqDatum), fromSeqDatum.pos));\n            }\n            const toFeaturePositions = [];\n            for (let toSeqDatum of toSeqData) {\n                toFeaturePositions.push(new _viz_sequence_datum__WEBPACK_IMPORTED_MODULE_11__[\"SequenceDatum\"](getNode(toSeqDatum), toSeqDatum.pos));\n            }\n            //~ if (endsSwapped === false) {\n            sequenceLink = new _viz_link_feature_link__WEBPACK_IMPORTED_MODULE_10__[\"FeatureLink\"](seqLinkId, fromFeaturePositions, toFeaturePositions, app, interaction);\n            //~ }else {\n            //~ sequenceLink = new FeatureLink(seqLinkId, toFeaturePositions, fromFeaturePositions, util, interaction);\n            //~ }\n            app.allSequenceLinks.set(seqLinkId, sequenceLink);\n        }\n\n        //sequenceLink.addEvidence(interaction);\n        const nLinkId = getNaryLinkIdFromInteraction(interaction);\n        const nLink = app.allNaryLinks.get(nLinkId);\n        nLink.sequenceLinks.set(seqLinkId, sequenceLink);\n        return sequenceLink;\n    }\n\n    function getUnaryLink(interactor, interaction) {\n        const linkID = \"-\" + interactor.id + \"-\" + interactor.id;\n        let link = app.allUnaryLinks.get(linkID);\n        if (typeof link === \"undefined\") {\n            link = new _viz_link_unary_link__WEBPACK_IMPORTED_MODULE_13__[\"UnaryLink\"](linkID, app, interactor);\n            app.allUnaryLinks.set(linkID, link);\n            interactor.appLink = link;\n        }\n        const nLinkId = getNaryLinkIdFromInteraction(interaction);\n        const nLink = app.allNaryLinks.get(nLinkId);\n        nLink.unaryLinks.set(linkID, link);\n        //link.addEvidence(interaction);\n        return link;\n    }\n\n    function getBinaryLink(sourceInteractor, targetInteractor, interaction) {\n        let linkID, fi, ti;\n        // these links are undirected and should have same ID regardless of which way round\n        // source and target are\n        if (sourceInteractor.id < targetInteractor.id) {\n            linkID = \"-\" + sourceInteractor.id + \"-\" + targetInteractor.id;\n            fi = sourceInteractor;\n            ti = targetInteractor;\n        } else {\n            linkID = \"-\" + targetInteractor.id + \"-\" + sourceInteractor.id;\n            fi = targetInteractor;\n            ti = sourceInteractor;\n        }\n        let link = app.allBinaryLinks.get(linkID);\n        if (typeof link === \"undefined\") {\n            link = new _viz_link_binary_link__WEBPACK_IMPORTED_MODULE_12__[\"BinaryLink\"](linkID, app, fi, ti);\n            fi.binaryLinks.set(linkID, link);\n            ti.binaryLinks.set(linkID, link);\n            app.allBinaryLinks.set(linkID, link);\n        }\n        const nLinkId = getNaryLinkIdFromInteraction(interaction);\n        const nLink = app.allNaryLinks.get(nLinkId);\n        nLink.binaryLinks.set(linkID, link);\n        //link.addEvidence(interaction);\n        return link;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/read-mijson.js\n");

/***/ }),

/***/ "./src/js/svgexp.js":
/*!**************************!*\
  !*** ./src/js/svgexp.js ***!
  \**************************/
/*! exports provided: svgUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"svgUtils\", function() { return svgUtils; });\n/**\n * Created by cs22 on 04/12/14.\n */\n\nconst svgUtils = {\n    \n    capture: function (svgElems) {\n        return svgElems.map (function(svg) { return svgUtils.makeSVGDoc (svg); });\n    },\n\n    getAllSVGElements: function () {\n        // search through all document objects, including those in iframes\n        var allIFrames = [].slice.apply (document.getElementsByTagName('iframe'));\n        var docs = [document];\n        allIFrames.forEach (function (iframe) {\n            try {\n                docs.push (iframe.contentDocument || iframe.contentWindow.document);\n            }\n            catch (e) {\n                console.log (\"Protected cross-domain IFrame\", iframe);\n            }\n        });\n\n        var allSvgs = [];\n        docs.forEach (function(doc) {\n            var allDocSvgs = [].slice.apply (doc.getElementsByTagName('svg'));\n            allSvgs.push.apply (allSvgs, allDocSvgs);\n        });\n        return allSvgs;\n    },\n\n\n    makeSVGDoc: function (svgElem) {\n        // clone node\n        var cloneSVG = svgElem.cloneNode (true);\n        var ownerDoc = cloneSVG.ownerDocument || document;\n        svgUtils.pruneInvisibleSubtrees (cloneSVG, svgElem);\n\n        // find all styles inherited/referenced at or below this node\n        var styles = svgUtils.usedStyles (svgElem, true, true);\n\n        // collect relevant info on parent chain of svg node\n        var predecessorInfo = svgUtils.parentChain (svgElem, styles);\n        \n        var addDummy = function (dummySVGElem, cloneSVG, origSVG, transferAttr) {\n            dummySVGElem.appendChild (cloneSVG);\n            Object.keys(transferAttr).forEach (function (attr) {\n                var val = cloneSVG.getAttribute (attr) || cloneSVG.style [attr] || svgUtils.getComputedStyleCssText (origSVG, attr);\n                if (val != null) {\n                    dummySVGElem.setAttribute (attr, val);\n                    var attrVal = transferAttr[attr];\n                    if (attrVal.replace) {\n                        cloneSVG.setAttribute (attr, attrVal.replace);\n                    } else if (attrVal.delete) {\n                        cloneSVG.removeAttribute (attr);\n                    }\n                }\n            });\n        };\n\n        // make a chain of dummy svg nodes to include classes / ids of parent chain of our original svg\n        // this means any styles referenced within the svg that depend on the presence of these classes/ids are fired\n        var transferAttr = {width: {replace: \"100%\"}, height: {replace: \"100%\"}, xmlns: {delete: true}};\n        var parentAdded = false;\n        for (var p = 0; p < predecessorInfo.length; p++) {\n            var pinf = predecessorInfo [p];\n            //var dummySVGElem = ownerDoc.createElement (\"svg\");\n            var dummySVGElem = ownerDoc.createElementNS (\"http://www.w3.org/2000/svg\", \"svg\");\n            var empty = true;\n            Object.keys(pinf).forEach (function (key) {\n                if (pinf[key]) {\n                    dummySVGElem.setAttribute (key, pinf[key]);\n                    empty = false;\n                }\n            });\n            // If the dummy svg has no relevant id, classes or computed style then ignore it, otherwise make it the new root\n            if (!empty) {\n                addDummy (dummySVGElem, cloneSVG, svgElem, transferAttr);\n                cloneSVG = dummySVGElem;\n                parentAdded = true;\n            }\n        }\n\n        // if no dummy parent added in previous section, but our svg isn't root then add one as placeholder\n        if (svgElem.parentNode != null && !parentAdded) {\n            var dummySVGElem = ownerDoc.createElementNS (\"http://www.w3.org/2000/svg\", \"svg\");\n            addDummy (dummySVGElem, cloneSVG, svgElem, transferAttr);\n            cloneSVG = dummySVGElem;\n            parentAdded = true;\n        }\n\n        // Copy svg's computed style (it's style context) if a dummy parent node has been introduced\n        if (parentAdded) {\n            cloneSVG.setAttribute (\"style\", svgUtils.getComputedStyleCssText (svgElem));\n        }\n\n        cloneSVG.setAttribute (\"version\", \"1.1\");\n        //cloneSVG.setAttribute (\"xmlns\", \"http://www.w3.org/2000/svg\");    // XMLSerializer does this\n        //cloneSVG.setAttribute (\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");  // when I used setAttributeNS it ballsed up\n\t\t// however using these attributeNS calls work, and stops errors in IE11. Win.\n\t\tcloneSVG.setAttributeNS (\"http://www.w3.org/2000/xmlns/\", \"xmlns\", \"http://www.w3.org/2000/svg\");    // XMLSerializer does this\n        cloneSVG.setAttributeNS (\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");  // when I used setAttributeNS it ballsed up\n\n\n        var styleElem = ownerDoc.createElement (\"style\");\n        styleElem.setAttribute (\"type\", \"text/css\");\n        var styleText = ownerDoc.createTextNode (styles.join(\"\\n\"));\n        styleElem.appendChild (styleText);\n        cloneSVG.insertBefore (styleElem, cloneSVG.firstChild);\n\n        return cloneSVG;\n    },\n    \n    // Because firefox returns cssText as empty\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687\n    getComputedStyleCssText: function (element, field) {\n        var style = window.getComputedStyle(element);\n        if (field) {\n            return style[field];\n        }\n\n        if (style.cssText != \"\") {\n            return style.cssText;\n        }\n\n        var cssText = \"\";\n        for (var i = 0; i < style.length; i++) {\n            var styleName = style[i];\n            var propVal = style.getPropertyValue(styleName);\n            cssText += styleName + \": \" + propVal + \"; \";\n        }\n\n        return cssText;\n    },\n    \n    doPruneInvisible: true,\n    \n    pruneConditionSets: [{\"display\": \"none\"}, {\"visibility\": \"hidden\"}, {\"opacity\": \"0\"}, {\"fill-opacity\": \"0\", \"stroke-opacity\": \"0\"}, {\"fill-opacity\": \"0\", \"stroke\": \"none\"}, {\"fill\": \"none\", \"stroke-opacity\": \"0\"}],\n    \n    pruneInvisibleSubtrees: function (clonedElement, matchingOriginalElement) {\n        if (svgUtils.doPruneInvisible) {\n            var style = window.getComputedStyle (matchingOriginalElement);  // cloned (unattached) nodes in chrome at least don't have computed styles\n            var prune = false;\n            \n            svgUtils.pruneConditionSets.forEach (function (conditionSet) {\n                if (!prune) {\n                    var allConditionsMet = true;\n                    Object.keys(conditionSet).forEach (function (condition) {\n                        var condVal = conditionSet[condition];\n                        var eStyle = style[condition];\n                        var eAttr = matchingOriginalElement.getAttribute(condition);\n                        if (!(eStyle === condVal || (!eStyle && eAttr === condVal))) {\n                            allConditionsMet = false; \n                        }\n                    });\n                    prune = allConditionsMet;\n                }\n            });\n            if (prune && clonedElement.parentNode) {\n                clonedElement.parentNode.removeChild (clonedElement);\n                //console.log (\"removed\", clonedElement);\n            } else {\n                var clonedChildren = clonedElement.children;\n                var matchingOriginalChildren = matchingOriginalElement.children;\n                //console.log (\"kept\", clonedElement, style.display, style.visibility, style.opacity, style[\"stroke-opacity\"], style[\"fill-opacity\"], style);\n                //console.log (element, \"children\", children);\n                if (clonedChildren && clonedChildren.length) {\n                    // count backwards because removing a child will break the 'i' counter if we go forwards\n                    // e.g. if children=[A,B,C,D] and i=2, if we delete[C] then children becomes [A,B,D],\n                    // and when i then increments to 3, expecting D, instead we find the end of loop, and don't test D\n                    // PS. And if we fixed that we'd then need a separate counter for the original child elements anyways so backwards it is\n                    for (var i = clonedChildren.length; --i >= 0;) {\n                        svgUtils.pruneInvisibleSubtrees (clonedChildren[i], matchingOriginalChildren[i]);\n                    }\n                }\n            }\n        }\n    },\n\n    parentChain: function (elem, styles) {\n        // Capture id / classes of svg's parent chain.\n        var ownerDoc = elem.ownerDocument || document;\n        var elemArr = [];\n        while (elem.parentNode !== ownerDoc && elem.parentNode !== null) {\n            elem = elem.parentNode;\n            elemArr.push ({id: elem.id, class: elem.getAttribute(\"class\") || \"\"});\n        }\n\n        // see if id or element class are referenced in any styles collected below the svg node\n        // if not, null the id / class as they're not going to be relevant\n        elemArr.forEach (function (elemData) {\n            var presences = {id: false, class: false};\n            var classes = elemData.class.split(\" \").filter(function(a) { return a.length > 0; });   // v1.13: may be multiple classes in a containing class attribute\n            styles.forEach (function (style) {\n                for (var c = 0; c < classes.length; c++) {\n                    if (style.indexOf (\".\"+classes[c]) >= 0) {\n                        presences.class = true;\n                        break;  // no need to keep looking through rest of classtypes if one is needed\n                    }\n                }\n                if (elemData.id && style.indexOf (\"#\"+elemData.id) >= 0) {\n                    presences.id = true;\n                }\n            });\n            Object.keys(presences).forEach (function (presence) {\n                if (!presences[presence]) { elemData[presence] = undefined; }\n            });\n        });\n\n        return elemArr;\n    },\n\n    // code adapted from user adardesign's answer in http://stackoverflow.com/questions/13204785/is-it-possible-to-read-the-styles-of-css-classes-not-being-used-in-the-dom-using\n    usedStyles: function (elem, subtree, both) {\n        var needed = [], rule;\n        var ownerDoc = elem.ownerDocument || document;\n        var CSSSheets = ownerDoc.styleSheets;\n\n        for(var j=0; j < CSSSheets.length; j++){\n\t\t\t// stop accessing empty style sheets (1.15), catch security exceptions (1.20)\n\t\t\ttry{\n\t\t\t\tif (CSSSheets[j].cssRules == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n            for(var i=0; i < CSSSheets[j].cssRules.length; i++){\n                rule = CSSSheets[j].cssRules[i];\n                var match = false;\n                // Issue reported, css rule '[ng:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak, .ng-hide:not(.ng-hide-animate)' gives error\n                // It's the [ng:cloak] bit that does the damage\n                // Fix found from https://github.com/exupero/saveSvgAsPng/issues/11 - but the css rule isn't applied\n                try {\n                    if (subtree) {\n                        match = elem.querySelectorAll(rule.selectorText).length > 0;\n                    }\n                    if (!subtree || both) {\n                        match |= elem.matches(rule.selectorText);\n                    }\n                }\n                catch (err) {\n                    console.warn (\"CSS selector error: \"+rule.selectorText+\". Often angular issue.\", err);\n                }\n                if (match) { needed.push (rule.cssText); }\n            }\n        }\n\n        return needed;\n    },\n    \n    makeXMLStr: function (xmls, svgDoc) {\n        var xmlStr = xmls.serializeToString(svgDoc);\n        // serializing adds an xmlns attribute to the style element ('cos it thinks we want xhtml), which knackers it for inkscape, here we chop it out\n        xmlStr = xmlStr.split(\"xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\").join(\"\");\n        return xmlStr;\n    },\n\n    // saveSVGDocs: function (svgDocs) {\n    //     var xmls = new XMLSerializer();\n    //     svgDocs.forEach (function (svgDoc, i) {\n    //         var xmlStr = svgUtils.makeXMLStr (xmls, svgDoc);\n    //         var blob = new Blob([xmlStr], {type: \"image/svg+xml\"});\n    //         saveAs(blob, \"saved\"+i+\".svg\");\n    //     });\n    // },\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvc3ZnZXhwLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy9zdmdleHAuanM/YWQ5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgY3MyMiBvbiAwNC8xMi8xNC5cbiAqL1xuXG5leHBvcnQgY29uc3Qgc3ZnVXRpbHMgPSB7XG4gICAgXG4gICAgY2FwdHVyZTogZnVuY3Rpb24gKHN2Z0VsZW1zKSB7XG4gICAgICAgIHJldHVybiBzdmdFbGVtcy5tYXAgKGZ1bmN0aW9uKHN2ZykgeyByZXR1cm4gc3ZnVXRpbHMubWFrZVNWR0RvYyAoc3ZnKTsgfSk7XG4gICAgfSxcblxuICAgIGdldEFsbFNWR0VsZW1lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHNlYXJjaCB0aHJvdWdoIGFsbCBkb2N1bWVudCBvYmplY3RzLCBpbmNsdWRpbmcgdGhvc2UgaW4gaWZyYW1lc1xuICAgICAgICB2YXIgYWxsSUZyYW1lcyA9IFtdLnNsaWNlLmFwcGx5IChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJykpO1xuICAgICAgICB2YXIgZG9jcyA9IFtkb2N1bWVudF07XG4gICAgICAgIGFsbElGcmFtZXMuZm9yRWFjaCAoZnVuY3Rpb24gKGlmcmFtZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkb2NzLnB1c2ggKGlmcmFtZS5jb250ZW50RG9jdW1lbnQgfHwgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAoXCJQcm90ZWN0ZWQgY3Jvc3MtZG9tYWluIElGcmFtZVwiLCBpZnJhbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgYWxsU3ZncyA9IFtdO1xuICAgICAgICBkb2NzLmZvckVhY2ggKGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgICAgdmFyIGFsbERvY1N2Z3MgPSBbXS5zbGljZS5hcHBseSAoZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdmcnKSk7XG4gICAgICAgICAgICBhbGxTdmdzLnB1c2guYXBwbHkgKGFsbFN2Z3MsIGFsbERvY1N2Z3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFsbFN2Z3M7XG4gICAgfSxcblxuXG4gICAgbWFrZVNWR0RvYzogZnVuY3Rpb24gKHN2Z0VsZW0pIHtcbiAgICAgICAgLy8gY2xvbmUgbm9kZVxuICAgICAgICB2YXIgY2xvbmVTVkcgPSBzdmdFbGVtLmNsb25lTm9kZSAodHJ1ZSk7XG4gICAgICAgIHZhciBvd25lckRvYyA9IGNsb25lU1ZHLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgIHN2Z1V0aWxzLnBydW5lSW52aXNpYmxlU3VidHJlZXMgKGNsb25lU1ZHLCBzdmdFbGVtKTtcblxuICAgICAgICAvLyBmaW5kIGFsbCBzdHlsZXMgaW5oZXJpdGVkL3JlZmVyZW5jZWQgYXQgb3IgYmVsb3cgdGhpcyBub2RlXG4gICAgICAgIHZhciBzdHlsZXMgPSBzdmdVdGlscy51c2VkU3R5bGVzIChzdmdFbGVtLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAvLyBjb2xsZWN0IHJlbGV2YW50IGluZm8gb24gcGFyZW50IGNoYWluIG9mIHN2ZyBub2RlXG4gICAgICAgIHZhciBwcmVkZWNlc3NvckluZm8gPSBzdmdVdGlscy5wYXJlbnRDaGFpbiAoc3ZnRWxlbSwgc3R5bGVzKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBhZGREdW1teSA9IGZ1bmN0aW9uIChkdW1teVNWR0VsZW0sIGNsb25lU1ZHLCBvcmlnU1ZHLCB0cmFuc2ZlckF0dHIpIHtcbiAgICAgICAgICAgIGR1bW15U1ZHRWxlbS5hcHBlbmRDaGlsZCAoY2xvbmVTVkcpO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModHJhbnNmZXJBdHRyKS5mb3JFYWNoIChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBjbG9uZVNWRy5nZXRBdHRyaWJ1dGUgKGF0dHIpIHx8IGNsb25lU1ZHLnN0eWxlIFthdHRyXSB8fCBzdmdVdGlscy5nZXRDb21wdXRlZFN0eWxlQ3NzVGV4dCAob3JpZ1NWRywgYXR0cik7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGR1bW15U1ZHRWxlbS5zZXRBdHRyaWJ1dGUgKGF0dHIsIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyVmFsID0gdHJhbnNmZXJBdHRyW2F0dHJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0clZhbC5yZXBsYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZVNWRy5zZXRBdHRyaWJ1dGUgKGF0dHIsIGF0dHJWYWwucmVwbGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0clZhbC5kZWxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lU1ZHLnJlbW92ZUF0dHJpYnV0ZSAoYXR0cik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBtYWtlIGEgY2hhaW4gb2YgZHVtbXkgc3ZnIG5vZGVzIHRvIGluY2x1ZGUgY2xhc3NlcyAvIGlkcyBvZiBwYXJlbnQgY2hhaW4gb2Ygb3VyIG9yaWdpbmFsIHN2Z1xuICAgICAgICAvLyB0aGlzIG1lYW5zIGFueSBzdHlsZXMgcmVmZXJlbmNlZCB3aXRoaW4gdGhlIHN2ZyB0aGF0IGRlcGVuZCBvbiB0aGUgcHJlc2VuY2Ugb2YgdGhlc2UgY2xhc3Nlcy9pZHMgYXJlIGZpcmVkXG4gICAgICAgIHZhciB0cmFuc2ZlckF0dHIgPSB7d2lkdGg6IHtyZXBsYWNlOiBcIjEwMCVcIn0sIGhlaWdodDoge3JlcGxhY2U6IFwiMTAwJVwifSwgeG1sbnM6IHtkZWxldGU6IHRydWV9fTtcbiAgICAgICAgdmFyIHBhcmVudEFkZGVkID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcHJlZGVjZXNzb3JJbmZvLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICB2YXIgcGluZiA9IHByZWRlY2Vzc29ySW5mbyBbcF07XG4gICAgICAgICAgICAvL3ZhciBkdW1teVNWR0VsZW0gPSBvd25lckRvYy5jcmVhdGVFbGVtZW50IChcInN2Z1wiKTtcbiAgICAgICAgICAgIHZhciBkdW1teVNWR0VsZW0gPSBvd25lckRvYy5jcmVhdGVFbGVtZW50TlMgKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIik7XG4gICAgICAgICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocGluZikuZm9yRWFjaCAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChwaW5mW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZHVtbXlTVkdFbGVtLnNldEF0dHJpYnV0ZSAoa2V5LCBwaW5mW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGR1bW15IHN2ZyBoYXMgbm8gcmVsZXZhbnQgaWQsIGNsYXNzZXMgb3IgY29tcHV0ZWQgc3R5bGUgdGhlbiBpZ25vcmUgaXQsIG90aGVyd2lzZSBtYWtlIGl0IHRoZSBuZXcgcm9vdFxuICAgICAgICAgICAgaWYgKCFlbXB0eSkge1xuICAgICAgICAgICAgICAgIGFkZER1bW15IChkdW1teVNWR0VsZW0sIGNsb25lU1ZHLCBzdmdFbGVtLCB0cmFuc2ZlckF0dHIpO1xuICAgICAgICAgICAgICAgIGNsb25lU1ZHID0gZHVtbXlTVkdFbGVtO1xuICAgICAgICAgICAgICAgIHBhcmVudEFkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vIGR1bW15IHBhcmVudCBhZGRlZCBpbiBwcmV2aW91cyBzZWN0aW9uLCBidXQgb3VyIHN2ZyBpc24ndCByb290IHRoZW4gYWRkIG9uZSBhcyBwbGFjZWhvbGRlclxuICAgICAgICBpZiAoc3ZnRWxlbS5wYXJlbnROb2RlICE9IG51bGwgJiYgIXBhcmVudEFkZGVkKSB7XG4gICAgICAgICAgICB2YXIgZHVtbXlTVkdFbGVtID0gb3duZXJEb2MuY3JlYXRlRWxlbWVudE5TIChcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuICAgICAgICAgICAgYWRkRHVtbXkgKGR1bW15U1ZHRWxlbSwgY2xvbmVTVkcsIHN2Z0VsZW0sIHRyYW5zZmVyQXR0cik7XG4gICAgICAgICAgICBjbG9uZVNWRyA9IGR1bW15U1ZHRWxlbTtcbiAgICAgICAgICAgIHBhcmVudEFkZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvcHkgc3ZnJ3MgY29tcHV0ZWQgc3R5bGUgKGl0J3Mgc3R5bGUgY29udGV4dCkgaWYgYSBkdW1teSBwYXJlbnQgbm9kZSBoYXMgYmVlbiBpbnRyb2R1Y2VkXG4gICAgICAgIGlmIChwYXJlbnRBZGRlZCkge1xuICAgICAgICAgICAgY2xvbmVTVkcuc2V0QXR0cmlidXRlIChcInN0eWxlXCIsIHN2Z1V0aWxzLmdldENvbXB1dGVkU3R5bGVDc3NUZXh0IChzdmdFbGVtKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjbG9uZVNWRy5zZXRBdHRyaWJ1dGUgKFwidmVyc2lvblwiLCBcIjEuMVwiKTtcbiAgICAgICAgLy9jbG9uZVNWRy5zZXRBdHRyaWJ1dGUgKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTsgICAgLy8gWE1MU2VyaWFsaXplciBkb2VzIHRoaXNcbiAgICAgICAgLy9jbG9uZVNWRy5zZXRBdHRyaWJ1dGUgKFwieG1sbnM6eGxpbmtcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpOyAgLy8gd2hlbiBJIHVzZWQgc2V0QXR0cmlidXRlTlMgaXQgYmFsbHNlZCB1cFxuXHRcdC8vIGhvd2V2ZXIgdXNpbmcgdGhlc2UgYXR0cmlidXRlTlMgY2FsbHMgd29yaywgYW5kIHN0b3BzIGVycm9ycyBpbiBJRTExLiBXaW4uXG5cdFx0Y2xvbmVTVkcuc2V0QXR0cmlidXRlTlMgKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIiwgXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpOyAgICAvLyBYTUxTZXJpYWxpemVyIGRvZXMgdGhpc1xuICAgICAgICBjbG9uZVNWRy5zZXRBdHRyaWJ1dGVOUyAoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiLCBcInhtbG5zOnhsaW5rXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKTsgIC8vIHdoZW4gSSB1c2VkIHNldEF0dHJpYnV0ZU5TIGl0IGJhbGxzZWQgdXBcblxuXG4gICAgICAgIHZhciBzdHlsZUVsZW0gPSBvd25lckRvYy5jcmVhdGVFbGVtZW50IChcInN0eWxlXCIpO1xuICAgICAgICBzdHlsZUVsZW0uc2V0QXR0cmlidXRlIChcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcbiAgICAgICAgdmFyIHN0eWxlVGV4dCA9IG93bmVyRG9jLmNyZWF0ZVRleHROb2RlIChzdHlsZXMuam9pbihcIlxcblwiKSk7XG4gICAgICAgIHN0eWxlRWxlbS5hcHBlbmRDaGlsZCAoc3R5bGVUZXh0KTtcbiAgICAgICAgY2xvbmVTVkcuaW5zZXJ0QmVmb3JlIChzdHlsZUVsZW0sIGNsb25lU1ZHLmZpcnN0Q2hpbGQpO1xuXG4gICAgICAgIHJldHVybiBjbG9uZVNWRztcbiAgICB9LFxuICAgIFxuICAgIC8vIEJlY2F1c2UgZmlyZWZveCByZXR1cm5zIGNzc1RleHQgYXMgZW1wdHlcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzc2ODdcbiAgICBnZXRDb21wdXRlZFN0eWxlQ3NzVGV4dDogZnVuY3Rpb24gKGVsZW1lbnQsIGZpZWxkKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZVtmaWVsZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGUuY3NzVGV4dCAhPSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGUuY3NzVGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjc3NUZXh0ID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHN0eWxlTmFtZSA9IHN0eWxlW2ldO1xuICAgICAgICAgICAgdmFyIHByb3BWYWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlTmFtZSk7XG4gICAgICAgICAgICBjc3NUZXh0ICs9IHN0eWxlTmFtZSArIFwiOiBcIiArIHByb3BWYWwgKyBcIjsgXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3NzVGV4dDtcbiAgICB9LFxuICAgIFxuICAgIGRvUHJ1bmVJbnZpc2libGU6IHRydWUsXG4gICAgXG4gICAgcHJ1bmVDb25kaXRpb25TZXRzOiBbe1wiZGlzcGxheVwiOiBcIm5vbmVcIn0sIHtcInZpc2liaWxpdHlcIjogXCJoaWRkZW5cIn0sIHtcIm9wYWNpdHlcIjogXCIwXCJ9LCB7XCJmaWxsLW9wYWNpdHlcIjogXCIwXCIsIFwic3Ryb2tlLW9wYWNpdHlcIjogXCIwXCJ9LCB7XCJmaWxsLW9wYWNpdHlcIjogXCIwXCIsIFwic3Ryb2tlXCI6IFwibm9uZVwifSwge1wiZmlsbFwiOiBcIm5vbmVcIiwgXCJzdHJva2Utb3BhY2l0eVwiOiBcIjBcIn1dLFxuICAgIFxuICAgIHBydW5lSW52aXNpYmxlU3VidHJlZXM6IGZ1bmN0aW9uIChjbG9uZWRFbGVtZW50LCBtYXRjaGluZ09yaWdpbmFsRWxlbWVudCkge1xuICAgICAgICBpZiAoc3ZnVXRpbHMuZG9QcnVuZUludmlzaWJsZSkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgKG1hdGNoaW5nT3JpZ2luYWxFbGVtZW50KTsgIC8vIGNsb25lZCAodW5hdHRhY2hlZCkgbm9kZXMgaW4gY2hyb21lIGF0IGxlYXN0IGRvbid0IGhhdmUgY29tcHV0ZWQgc3R5bGVzXG4gICAgICAgICAgICB2YXIgcHJ1bmUgPSBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3ZnVXRpbHMucHJ1bmVDb25kaXRpb25TZXRzLmZvckVhY2ggKGZ1bmN0aW9uIChjb25kaXRpb25TZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBydW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxDb25kaXRpb25zTWV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZGl0aW9uU2V0KS5mb3JFYWNoIChmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZFZhbCA9IGNvbmRpdGlvblNldFtjb25kaXRpb25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVTdHlsZSA9IHN0eWxlW2NvbmRpdGlvbl07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZUF0dHIgPSBtYXRjaGluZ09yaWdpbmFsRWxlbWVudC5nZXRBdHRyaWJ1dGUoY29uZGl0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGVTdHlsZSA9PT0gY29uZFZhbCB8fCAoIWVTdHlsZSAmJiBlQXR0ciA9PT0gY29uZFZhbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29uZGl0aW9uc01ldCA9IGZhbHNlOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHBydW5lID0gYWxsQ29uZGl0aW9uc01ldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwcnVuZSAmJiBjbG9uZWRFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBjbG9uZWRFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQgKGNsb25lZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cgKFwicmVtb3ZlZFwiLCBjbG9uZWRFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsb25lZENoaWxkcmVuID0gY2xvbmVkRWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hpbmdPcmlnaW5hbENoaWxkcmVuID0gbWF0Y2hpbmdPcmlnaW5hbEVsZW1lbnQuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyAoXCJrZXB0XCIsIGNsb25lZEVsZW1lbnQsIHN0eWxlLmRpc3BsYXksIHN0eWxlLnZpc2liaWxpdHksIHN0eWxlLm9wYWNpdHksIHN0eWxlW1wic3Ryb2tlLW9wYWNpdHlcIl0sIHN0eWxlW1wiZmlsbC1vcGFjaXR5XCJdLCBzdHlsZSk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyAoZWxlbWVudCwgXCJjaGlsZHJlblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgaWYgKGNsb25lZENoaWxkcmVuICYmIGNsb25lZENoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb3VudCBiYWNrd2FyZHMgYmVjYXVzZSByZW1vdmluZyBhIGNoaWxkIHdpbGwgYnJlYWsgdGhlICdpJyBjb3VudGVyIGlmIHdlIGdvIGZvcndhcmRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gaWYgY2hpbGRyZW49W0EsQixDLERdIGFuZCBpPTIsIGlmIHdlIGRlbGV0ZVtDXSB0aGVuIGNoaWxkcmVuIGJlY29tZXMgW0EsQixEXSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdoZW4gaSB0aGVuIGluY3JlbWVudHMgdG8gMywgZXhwZWN0aW5nIEQsIGluc3RlYWQgd2UgZmluZCB0aGUgZW5kIG9mIGxvb3AsIGFuZCBkb24ndCB0ZXN0IERcbiAgICAgICAgICAgICAgICAgICAgLy8gUFMuIEFuZCBpZiB3ZSBmaXhlZCB0aGF0IHdlJ2QgdGhlbiBuZWVkIGEgc2VwYXJhdGUgY291bnRlciBmb3IgdGhlIG9yaWdpbmFsIGNoaWxkIGVsZW1lbnRzIGFueXdheXMgc28gYmFja3dhcmRzIGl0IGlzXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBjbG9uZWRDaGlsZHJlbi5sZW5ndGg7IC0taSA+PSAwOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnVXRpbHMucHJ1bmVJbnZpc2libGVTdWJ0cmVlcyAoY2xvbmVkQ2hpbGRyZW5baV0sIG1hdGNoaW5nT3JpZ2luYWxDaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcGFyZW50Q2hhaW46IGZ1bmN0aW9uIChlbGVtLCBzdHlsZXMpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSBpZCAvIGNsYXNzZXMgb2Ygc3ZnJ3MgcGFyZW50IGNoYWluLlxuICAgICAgICB2YXIgb3duZXJEb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgIHZhciBlbGVtQXJyID0gW107XG4gICAgICAgIHdoaWxlIChlbGVtLnBhcmVudE5vZGUgIT09IG93bmVyRG9jICYmIGVsZW0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIGVsZW1BcnIucHVzaCAoe2lkOiBlbGVtLmlkLCBjbGFzczogZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwifSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZWUgaWYgaWQgb3IgZWxlbWVudCBjbGFzcyBhcmUgcmVmZXJlbmNlZCBpbiBhbnkgc3R5bGVzIGNvbGxlY3RlZCBiZWxvdyB0aGUgc3ZnIG5vZGVcbiAgICAgICAgLy8gaWYgbm90LCBudWxsIHRoZSBpZCAvIGNsYXNzIGFzIHRoZXkncmUgbm90IGdvaW5nIHRvIGJlIHJlbGV2YW50XG4gICAgICAgIGVsZW1BcnIuZm9yRWFjaCAoZnVuY3Rpb24gKGVsZW1EYXRhKSB7XG4gICAgICAgICAgICB2YXIgcHJlc2VuY2VzID0ge2lkOiBmYWxzZSwgY2xhc3M6IGZhbHNlfTtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gZWxlbURhdGEuY2xhc3Muc3BsaXQoXCIgXCIpLmZpbHRlcihmdW5jdGlvbihhKSB7IHJldHVybiBhLmxlbmd0aCA+IDA7IH0pOyAgIC8vIHYxLjEzOiBtYXkgYmUgbXVsdGlwbGUgY2xhc3NlcyBpbiBhIGNvbnRhaW5pbmcgY2xhc3MgYXR0cmlidXRlXG4gICAgICAgICAgICBzdHlsZXMuZm9yRWFjaCAoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjbGFzc2VzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZS5pbmRleE9mIChcIi5cIitjbGFzc2VzW2NdKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZXMuY2xhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAvLyBubyBuZWVkIHRvIGtlZXAgbG9va2luZyB0aHJvdWdoIHJlc3Qgb2YgY2xhc3N0eXBlcyBpZiBvbmUgaXMgbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1EYXRhLmlkICYmIHN0eWxlLmluZGV4T2YgKFwiI1wiK2VsZW1EYXRhLmlkKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlcy5pZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcmVzZW5jZXMpLmZvckVhY2ggKGZ1bmN0aW9uIChwcmVzZW5jZSkge1xuICAgICAgICAgICAgICAgIGlmICghcHJlc2VuY2VzW3ByZXNlbmNlXSkgeyBlbGVtRGF0YVtwcmVzZW5jZV0gPSB1bmRlZmluZWQ7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZWxlbUFycjtcbiAgICB9LFxuXG4gICAgLy8gY29kZSBhZGFwdGVkIGZyb20gdXNlciBhZGFyZGVzaWduJ3MgYW5zd2VyIGluIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTMyMDQ3ODUvaXMtaXQtcG9zc2libGUtdG8tcmVhZC10aGUtc3R5bGVzLW9mLWNzcy1jbGFzc2VzLW5vdC1iZWluZy11c2VkLWluLXRoZS1kb20tdXNpbmdcbiAgICB1c2VkU3R5bGVzOiBmdW5jdGlvbiAoZWxlbSwgc3VidHJlZSwgYm90aCkge1xuICAgICAgICB2YXIgbmVlZGVkID0gW10sIHJ1bGU7XG4gICAgICAgIHZhciBvd25lckRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICAgICAgdmFyIENTU1NoZWV0cyA9IG93bmVyRG9jLnN0eWxlU2hlZXRzO1xuXG4gICAgICAgIGZvcih2YXIgaj0wOyBqIDwgQ1NTU2hlZXRzLmxlbmd0aDsgaisrKXtcblx0XHRcdC8vIHN0b3AgYWNjZXNzaW5nIGVtcHR5IHN0eWxlIHNoZWV0cyAoMS4xNSksIGNhdGNoIHNlY3VyaXR5IGV4Y2VwdGlvbnMgKDEuMjApXG5cdFx0XHR0cnl7XG5cdFx0XHRcdGlmIChDU1NTaGVldHNbal0uY3NzUnVsZXMgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgQ1NTU2hlZXRzW2pdLmNzc1J1bGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBydWxlID0gQ1NTU2hlZXRzW2pdLmNzc1J1bGVzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIElzc3VlIHJlcG9ydGVkLCBjc3MgcnVsZSAnW25nOmNsb2FrXSwgW25nLWNsb2FrXSwgW2RhdGEtbmctY2xvYWtdLCBbeC1uZy1jbG9ha10sIC5uZy1jbG9haywgLngtbmctY2xvYWssIC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKScgZ2l2ZXMgZXJyb3JcbiAgICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBbbmc6Y2xvYWtdIGJpdCB0aGF0IGRvZXMgdGhlIGRhbWFnZVxuICAgICAgICAgICAgICAgIC8vIEZpeCBmb3VuZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9leHVwZXJvL3NhdmVTdmdBc1BuZy9pc3N1ZXMvMTEgLSBidXQgdGhlIGNzcyBydWxlIGlzbid0IGFwcGxpZWRcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VidHJlZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBlbGVtLnF1ZXJ5U2VsZWN0b3JBbGwocnVsZS5zZWxlY3RvclRleHQpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJ0cmVlIHx8IGJvdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoIHw9IGVsZW0ubWF0Y2hlcyhydWxlLnNlbGVjdG9yVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4gKFwiQ1NTIHNlbGVjdG9yIGVycm9yOiBcIitydWxlLnNlbGVjdG9yVGV4dCtcIi4gT2Z0ZW4gYW5ndWxhciBpc3N1ZS5cIiwgZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7IG5lZWRlZC5wdXNoIChydWxlLmNzc1RleHQpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVlZGVkO1xuICAgIH0sXG4gICAgXG4gICAgbWFrZVhNTFN0cjogZnVuY3Rpb24gKHhtbHMsIHN2Z0RvYykge1xuICAgICAgICB2YXIgeG1sU3RyID0geG1scy5zZXJpYWxpemVUb1N0cmluZyhzdmdEb2MpO1xuICAgICAgICAvLyBzZXJpYWxpemluZyBhZGRzIGFuIHhtbG5zIGF0dHJpYnV0ZSB0byB0aGUgc3R5bGUgZWxlbWVudCAoJ2NvcyBpdCB0aGlua3Mgd2Ugd2FudCB4aHRtbCksIHdoaWNoIGtuYWNrZXJzIGl0IGZvciBpbmtzY2FwZSwgaGVyZSB3ZSBjaG9wIGl0IG91dFxuICAgICAgICB4bWxTdHIgPSB4bWxTdHIuc3BsaXQoXCJ4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFxcXCJcIikuam9pbihcIlwiKTtcbiAgICAgICAgcmV0dXJuIHhtbFN0cjtcbiAgICB9LFxuXG4gICAgLy8gc2F2ZVNWR0RvY3M6IGZ1bmN0aW9uIChzdmdEb2NzKSB7XG4gICAgLy8gICAgIHZhciB4bWxzID0gbmV3IFhNTFNlcmlhbGl6ZXIoKTtcbiAgICAvLyAgICAgc3ZnRG9jcy5mb3JFYWNoIChmdW5jdGlvbiAoc3ZnRG9jLCBpKSB7XG4gICAgLy8gICAgICAgICB2YXIgeG1sU3RyID0gc3ZnVXRpbHMubWFrZVhNTFN0ciAoeG1scywgc3ZnRG9jKTtcbiAgICAvLyAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3htbFN0cl0sIHt0eXBlOiBcImltYWdlL3N2Zyt4bWxcIn0pO1xuICAgIC8vICAgICAgICAgc2F2ZUFzKGJsb2IsIFwic2F2ZWRcIitpK1wiLnN2Z1wiKTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gfSxcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/svgexp.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/annotation.js":
/*!*********************************************!*\
  !*** ./src/js/viz/interactor/annotation.js ***!
  \*********************************************/
/*! exports provided: Annotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Annotation\", function() { return Annotation; });\n//constructor for annotations\nfunction Annotation(annotationName, seqDatum) {\n    // console.log(\"**\", annotationName, seqDatum);\n    this.description = annotationName.trim();\n    this.seqDatum = seqDatum;\n}\n\nAnnotation.prototype.toString = function () {\n    return this.description + \" [\" + (this.seqDatum ? this.seqDatum.toString() : this.seqDatum.begin + \" - \" + this.seqDatum.end) + \"]\";\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvYW5ub3RhdGlvbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvYW5ub3RhdGlvbi5qcz8yYTZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vY29uc3RydWN0b3IgZm9yIGFubm90YXRpb25zXG5leHBvcnQgZnVuY3Rpb24gQW5ub3RhdGlvbihhbm5vdGF0aW9uTmFtZSwgc2VxRGF0dW0pIHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIioqXCIsIGFubm90YXRpb25OYW1lLCBzZXFEYXR1bSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGFubm90YXRpb25OYW1lLnRyaW0oKTtcbiAgICB0aGlzLnNlcURhdHVtID0gc2VxRGF0dW07XG59XG5cbkFubm90YXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uICsgXCIgW1wiICsgKHRoaXMuc2VxRGF0dW0gPyB0aGlzLnNlcURhdHVtLnRvU3RyaW5nKCkgOiB0aGlzLnNlcURhdHVtLmJlZ2luICsgXCIgLSBcIiArIHRoaXMuc2VxRGF0dW0uZW5kKSArIFwiXVwiO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/annotation.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/bioactive-entity.js":
/*!***************************************************!*\
  !*** ./src/js/viz/interactor/bioactive-entity.js ***!
  \***************************************************/
/*! exports provided: BioactiveEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BioactiveEntity\", function() { return BioactiveEntity; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction BioactiveEntity(id, app, json, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    const points = \"0, -10  8.66,5 -8.66,5\";\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"polygon\");\n    this.outline.setAttribute(\"points\", points);\n    this.initOutline();\n    this.initListeners();\n}\n\nBioactiveEntity.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\n/*\nBioactiveEntity.prototype.showData = function() {\n    const url = \"https://www.ebi.ac.uk/chebi/searchId.do;?chebiId=\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvYmlvYWN0aXZlLWVudGl0eS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvYmlvYWN0aXZlLWVudGl0eS5qcz9mZGIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW50ZXJhY3Rvcn0gZnJvbSBcIi4vaW50ZXJhY3RvclwiO1xuaW1wb3J0IHtzdmduc30gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQmlvYWN0aXZlRW50aXR5KGlkLCBhcHAsIGpzb24sIG5hbWUpIHtcbiAgICB0aGlzLmluaXQoaWQsIGFwcCwganNvbiwgbmFtZSk7XG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5pbml0TGFiZWwoKTtcbiAgICBjb25zdCBwb2ludHMgPSBcIjAsIC0xMCAgOC42Niw1IC04LjY2LDVcIjtcbiAgICB0aGlzLm91dGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgdGhpcy5pbml0T3V0bGluZSgpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycygpO1xufVxuXG5CaW9hY3RpdmVFbnRpdHkucHJvdG90eXBlID0gbmV3IEludGVyYWN0b3IoKTtcblxuLypcbkJpb2FjdGl2ZUVudGl0eS5wcm90b3R5cGUuc2hvd0RhdGEgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB1cmwgPSBcImh0dHBzOi8vd3d3LmViaS5hYy51ay9jaGViaS9zZWFyY2hJZC5kbzs/Y2hlYmlJZD1cIiArIHRoaXMuanNvbi5pZGVudGlmaWVyLmlkO1xuICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xufVxuKi9cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/bioactive-entity.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/complex-symbol.js":
/*!*************************************************!*\
  !*** ./src/js/viz/interactor/complex-symbol.js ***!
  \*************************************************/
/*! exports provided: ComplexSymbol */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ComplexSymbol\", function() { return ComplexSymbol; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction ComplexSymbol(id, app, name, json) { //, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    const points = \"15,0 8,-13 -7,-13 -15,0 -8,13 7,13\";\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"polygon\");\n    this.outline.setAttribute(\"points\", points);\n    this.initOutline();\n    this.initListeners();\n }\n\nComplexSymbol.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\n\nComplexSymbol.prototype.getSymbolRadius = function () {\n    return 20;\n};\n\n/*\nComplexSymbol.prototype.showData = function() {\n    if (this.name.startsWith(\"intact_\")) {\n        const url = \"http://www.ebi.ac.uk/intact/complex/details/\" + this.name.substr(7);\n        window.open(url, '_blank');\n    }\n}\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvY29tcGxleC1zeW1ib2wuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vc3JjL2pzL3Zpei9pbnRlcmFjdG9yL2NvbXBsZXgtc3ltYm9sLmpzPzA1NjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnRlcmFjdG9yfSBmcm9tIFwiLi9pbnRlcmFjdG9yXCI7XG5pbXBvcnQge3N2Z25zfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb21wbGV4U3ltYm9sKGlkLCBhcHAsIG5hbWUsIGpzb24pIHsgLy8sIG5hbWUpIHtcbiAgICB0aGlzLmluaXQoaWQsIGFwcCwganNvbiwgbmFtZSk7XG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5pbml0TGFiZWwoKTtcbiAgICBjb25zdCBwb2ludHMgPSBcIjE1LDAgOCwtMTMgLTcsLTEzIC0xNSwwIC04LDEzIDcsMTNcIjtcbiAgICB0aGlzLm91dGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwicG9seWdvblwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgdGhpcy5pbml0T3V0bGluZSgpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycygpO1xuIH1cblxuQ29tcGxleFN5bWJvbC5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG5cbkNvbXBsZXhTeW1ib2wucHJvdG90eXBlLmdldFN5bWJvbFJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMjA7XG59O1xuXG4vKlxuQ29tcGxleFN5bWJvbC5wcm90b3R5cGUuc2hvd0RhdGEgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5uYW1lLnN0YXJ0c1dpdGgoXCJpbnRhY3RfXCIpKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IFwiaHR0cDovL3d3dy5lYmkuYWMudWsvaW50YWN0L2NvbXBsZXgvZGV0YWlscy9cIiArIHRoaXMubmFtZS5zdWJzdHIoNyk7XG4gICAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xuICAgIH1cbn1cbiovXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/complex-symbol.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/complex.js":
/*!******************************************!*\
  !*** ./src/js/viz/interactor/complex.js ***!
  \******************************************/
/*! exports provided: Complex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Complex\", function() { return Complex; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var point2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! point2d */ \"./node_modules/point2d/index.js\");\n/* harmony import */ var point2d__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(point2d__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var intersectionjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intersectionjs */ \"./node_modules/intersectionjs/intersection.js\");\n/* harmony import */ var intersectionjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(intersectionjs__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nfunction Complex(id, app) {\n    this.init(id, app);\n    this.type = \"complex\";\n    this.padding = 22;\n\n    // const self = this;\n    // // its bad if you end up with these getting called\n    // Object.defineProperty(this, \"width\", {\n    //     get: function height() {\n    //         return self.naryLink.path.getBBox().width;\n    //         //return 160;\n    //     }\n    // });\n    // Object.defineProperty(this, \"height\", {\n    //     get: function height() {\n    //         return self.naryLink.path.getBBox().height;\n    //         //return 160;\n    //     }\n    // });\n}\n\nComplex.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\nComplex.prototype.initLink = function (naryLink) {\n    this.naryLink = naryLink;\n    this.naryLink.path.classList.add(\"complex-outline\");\n};\n\nComplex.prototype.setLinked = function () {\n\n    this.naryLink.path2.classList.add(\"linked-complex\");\n};\n\n\nComplex.prototype.getPosition = function (originPoint) {\n    const mapped = this.naryLink.mapped;//getMappedCoordinates();\n    const mc = mapped.length;\n    let xSum = 0,\n        ySum = 0;\n    for (let m = 0; m < mc; m++) {\n        xSum += mapped[m][0];\n        ySum += mapped[m][1];\n    }\n    let center = [xSum / mc, ySum / mc];\n    if (originPoint) {\n    // if (participant.type === \"complex\"){\n    //     startPoint = participant.getPosition();\n        let naryPath = this.naryLink.hull;\n        let iPath = [];\n        for (let p of naryPath) {\n            iPath.push(new point2d__WEBPACK_IMPORTED_MODULE_1__(p[0], p[1]));\n        }\n        let a1 = new point2d__WEBPACK_IMPORTED_MODULE_1__(center[0], center[1]);\n        let a2 = new point2d__WEBPACK_IMPORTED_MODULE_1__(originPoint[0], originPoint[1]);\n        let intersect = intersectionjs__WEBPACK_IMPORTED_MODULE_2__[\"intersectLinePolygon\"](a1, a2, iPath);\n        if (intersect.points[0]) {\n            return [intersect.points[0].x, intersect.points[0].y];\n        }\n        this.setLinked();\n    }\n    return center;\n};\n\nComplex.prototype.setPosition = function () {\n    console.error(\"bad - called setPosition on \", this);\n};\n\nComplex.prototype.changePosition = function (dx, dy) {\n    for (let participant of this.naryLink.participants){\n        participant.changePosition(dx, dy);\n    }\n};\n\nComplex.prototype.getResidueCoordinates = function () {\n    return this.getPosition();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvY29tcGxleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvY29tcGxleC5qcz8zOTQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW50ZXJhY3Rvcn0gZnJvbSBcIi4vaW50ZXJhY3RvclwiO1xuaW1wb3J0ICogYXMgUG9pbnQyRCBmcm9tIFwicG9pbnQyZFwiO1xuaW1wb3J0ICogYXMgSW50ZXJzZWN0aW9uIGZyb20gXCJpbnRlcnNlY3Rpb25qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29tcGxleChpZCwgYXBwKSB7XG4gICAgdGhpcy5pbml0KGlkLCBhcHApO1xuICAgIHRoaXMudHlwZSA9IFwiY29tcGxleFwiO1xuICAgIHRoaXMucGFkZGluZyA9IDIyO1xuXG4gICAgLy8gY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgLy8gLy8gaXRzIGJhZCBpZiB5b3UgZW5kIHVwIHdpdGggdGhlc2UgZ2V0dGluZyBjYWxsZWRcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ3aWR0aFwiLCB7XG4gICAgLy8gICAgIGdldDogZnVuY3Rpb24gaGVpZ2h0KCkge1xuICAgIC8vICAgICAgICAgcmV0dXJuIHNlbGYubmFyeUxpbmsucGF0aC5nZXRCQm94KCkud2lkdGg7XG4gICAgLy8gICAgICAgICAvL3JldHVybiAxNjA7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9KTtcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJoZWlnaHRcIiwge1xuICAgIC8vICAgICBnZXQ6IGZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBzZWxmLm5hcnlMaW5rLnBhdGguZ2V0QkJveCgpLmhlaWdodDtcbiAgICAvLyAgICAgICAgIC8vcmV0dXJuIDE2MDtcbiAgICAvLyAgICAgfVxuICAgIC8vIH0pO1xufVxuXG5Db21wbGV4LnByb3RvdHlwZSA9IG5ldyBJbnRlcmFjdG9yKCk7XG5cbkNvbXBsZXgucHJvdG90eXBlLmluaXRMaW5rID0gZnVuY3Rpb24gKG5hcnlMaW5rKSB7XG4gICAgdGhpcy5uYXJ5TGluayA9IG5hcnlMaW5rO1xuICAgIHRoaXMubmFyeUxpbmsucGF0aC5jbGFzc0xpc3QuYWRkKFwiY29tcGxleC1vdXRsaW5lXCIpO1xufTtcblxuQ29tcGxleC5wcm90b3R5cGUuc2V0TGlua2VkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5uYXJ5TGluay5wYXRoMi5jbGFzc0xpc3QuYWRkKFwibGlua2VkLWNvbXBsZXhcIik7XG59O1xuXG5cbkNvbXBsZXgucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24gKG9yaWdpblBvaW50KSB7XG4gICAgY29uc3QgbWFwcGVkID0gdGhpcy5uYXJ5TGluay5tYXBwZWQ7Ly9nZXRNYXBwZWRDb29yZGluYXRlcygpO1xuICAgIGNvbnN0IG1jID0gbWFwcGVkLmxlbmd0aDtcbiAgICBsZXQgeFN1bSA9IDAsXG4gICAgICAgIHlTdW0gPSAwO1xuICAgIGZvciAobGV0IG0gPSAwOyBtIDwgbWM7IG0rKykge1xuICAgICAgICB4U3VtICs9IG1hcHBlZFttXVswXTtcbiAgICAgICAgeVN1bSArPSBtYXBwZWRbbV1bMV07XG4gICAgfVxuICAgIGxldCBjZW50ZXIgPSBbeFN1bSAvIG1jLCB5U3VtIC8gbWNdO1xuICAgIGlmIChvcmlnaW5Qb2ludCkge1xuICAgIC8vIGlmIChwYXJ0aWNpcGFudC50eXBlID09PSBcImNvbXBsZXhcIil7XG4gICAgLy8gICAgIHN0YXJ0UG9pbnQgPSBwYXJ0aWNpcGFudC5nZXRQb3NpdGlvbigpO1xuICAgICAgICBsZXQgbmFyeVBhdGggPSB0aGlzLm5hcnlMaW5rLmh1bGw7XG4gICAgICAgIGxldCBpUGF0aCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwIG9mIG5hcnlQYXRoKSB7XG4gICAgICAgICAgICBpUGF0aC5wdXNoKG5ldyBQb2ludDJEKHBbMF0sIHBbMV0pKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYTEgPSBuZXcgUG9pbnQyRChjZW50ZXJbMF0sIGNlbnRlclsxXSk7XG4gICAgICAgIGxldCBhMiA9IG5ldyBQb2ludDJEKG9yaWdpblBvaW50WzBdLCBvcmlnaW5Qb2ludFsxXSk7XG4gICAgICAgIGxldCBpbnRlcnNlY3QgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24oYTEsIGEyLCBpUGF0aCk7XG4gICAgICAgIGlmIChpbnRlcnNlY3QucG9pbnRzWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gW2ludGVyc2VjdC5wb2ludHNbMF0ueCwgaW50ZXJzZWN0LnBvaW50c1swXS55XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldExpbmtlZCgpO1xuICAgIH1cbiAgICByZXR1cm4gY2VudGVyO1xufTtcblxuQ29tcGxleC5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5lcnJvcihcImJhZCAtIGNhbGxlZCBzZXRQb3NpdGlvbiBvbiBcIiwgdGhpcyk7XG59O1xuXG5Db21wbGV4LnByb3RvdHlwZS5jaGFuZ2VQb3NpdGlvbiA9IGZ1bmN0aW9uIChkeCwgZHkpIHtcbiAgICBmb3IgKGxldCBwYXJ0aWNpcGFudCBvZiB0aGlzLm5hcnlMaW5rLnBhcnRpY2lwYW50cyl7XG4gICAgICAgIHBhcnRpY2lwYW50LmNoYW5nZVBvc2l0aW9uKGR4LCBkeSk7XG4gICAgfVxufTtcblxuQ29tcGxleC5wcm90b3R5cGUuZ2V0UmVzaWR1ZUNvb3JkaW5hdGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFBvc2l0aW9uKCk7XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/complex.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/dna.js":
/*!**************************************!*\
  !*** ./src/js/viz/interactor/dna.js ***!
  \**************************************/
/*! exports provided: DNA */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DNA\", function() { return DNA; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction DNA(id, app, json, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    const points = \"0, -5  10, -10 0, 10 -10, -10\";\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"polygon\");\n    this.outline.setAttribute(\"points\", points);\n    this.initOutline();\n    this.initListeners();\n}\n\nDNA.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvZG5hLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy92aXovaW50ZXJhY3Rvci9kbmEuanM/MjdiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ludGVyYWN0b3J9IGZyb20gXCIuL2ludGVyYWN0b3JcIjtcbmltcG9ydCB7c3ZnbnN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEROQShpZCwgYXBwLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pbml0KGlkLCBhcHAsIGpzb24sIG5hbWUpO1xuICAgIHRoaXMudXBwZXJHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJnXCIpO1xuICAgIHRoaXMuaW5pdExhYmVsKCk7XG4gICAgY29uc3QgcG9pbnRzID0gXCIwLCAtNSAgMTAsIC0xMCAwLCAxMCAtMTAsIC0xMFwiO1xuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJwb2x5Z29uXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmluaXRPdXRsaW5lKCk7XG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG59XG5cbkROQS5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/dna.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/gene.js":
/*!***************************************!*\
  !*** ./src/js/viz/interactor/gene.js ***!
  \***************************************/
/*! exports provided: Gene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Gene\", function() { return Gene; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction Gene(id, app, json, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    this.outline.setAttribute(\"x\", \"-16\");\n    this.outline.setAttribute(\"y\", \"-8\");\n    this.outline.setAttribute(\"width\", \"32\");\n    this.outline.setAttribute(\"height\", \"16\");\n    this.outline.setAttribute(\"rx\", \"6\");\n    this.outline.setAttribute(\"ry\", \"6\");\n    this.initOutline();\n    this.initListeners();\n}\n\nGene.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\nGene.prototype.getSymbolRadius = function () {\n    return 21;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvZ2VuZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvZ2VuZS5qcz8yMmYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW50ZXJhY3Rvcn0gZnJvbSBcIi4vaW50ZXJhY3RvclwiO1xuaW1wb3J0IHtzdmduc30gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gR2VuZShpZCwgYXBwLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pbml0KGlkLCBhcHAsIGpzb24sIG5hbWUpO1xuICAgIHRoaXMudXBwZXJHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJnXCIpO1xuICAgIHRoaXMuaW5pdExhYmVsKCk7XG4gICAgdGhpcy5vdXRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInhcIiwgXCItMTZcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInlcIiwgXCItOFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIzMlwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMTZcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInJ4XCIsIFwiNlwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicnlcIiwgXCI2XCIpO1xuICAgIHRoaXMuaW5pdE91dGxpbmUoKTtcbiAgICB0aGlzLmluaXRMaXN0ZW5lcnMoKTtcbn1cblxuR2VuZS5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG5HZW5lLnByb3RvdHlwZS5nZXRTeW1ib2xSYWRpdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDIxO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/gene.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/interactor.js":
/*!*********************************************!*\
  !*** ./src/js/viz/interactor/interactor.js ***!
  \*********************************************/
/*! exports provided: Interactor, trig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Interactor\", function() { return Interactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"trig\", function() { return trig; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\nfunction Interactor() {\n}\n\nInteractor.prototype = {\n    get width() {\n        // todo - things not working quite right in firefox, work around...\n        // console.log(this.upperGroup.getBBox().width);\n        // const bbox = this.upperGroup.getBBox(); //firefox buggy?\n        // return bbox.width;\n        if (!this.expanded) {\n            return (2 * this.getSymbolRadius()) + 5 + this.labelSVG.getComputedTextLength();\n        } else {\n            return (this.size * this.stickZoom) + 5 + this.labelSVG.getComputedTextLength();\n        }\n    },\n    get height() {\n        return 40;//this.upperGroup.getBBox().height;\n    },\n};\n\nInteractor.prototype.init = function (id, app, json, name) {\n    this.id = id;\n    this.app = app;\n    this.json = json;\n    this.name = name;\n\n    // this.type = json.type.name;\n\n    this.expanded = false;\n\n    //todo - think 'type' should be  a property here (except for complex, can just return json.type.name)\n\n    //annotations indexed by annotation set name (\"MI Features\", \"Superfamily\", etc)\n    this.annotationSets = new Map();\n    //links\n    this.naryLinks = new Map();\n    this.binaryLinks = new Map();\n    this.sequenceLinks = new Map();\n};\n\nInteractor.prototype.initLabel = function () {\n    this.labelSVG = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__[\"svgns\"], \"text\");\n    this.labelSVG.setAttribute(\"x\", \"0\"); // css?\n    this.labelSVG.setAttribute(\"y\", \"10\");\n    this.labelSVG.classList.add(\"label\");\n    //choose label text\n    if (this.name) {\n        this.labelText = this.name;\n    } else {\n        this.labelText = this.id;\n    }\n    if (this.labelText.length > 25) {\n        this.labelText = this.labelText.substr(0, 16) + \"...\";\n    }\n    this.labelText = this.name;\n    this.labelTextNode = document.createTextNode(this.labelText);\n    this.labelSVG.appendChild(this.labelTextNode);\n    this.labelSVG.setAttribute(\"transform\",\n        \"translate( -\" + this.getSymbolRadius() + \" \" + _config__WEBPACK_IMPORTED_MODULE_0__[\"LABEL_Y\"] + \")\");\n    this.upperGroup.appendChild(this.labelSVG);\n};\n\nInteractor.prototype.initOutline = function () {\n    this.outline.classList.add(\"outline\");\n    this.upperGroup.appendChild(this.outline);\n};\n\nInteractor.prototype.initListeners = function () {\n    // events\n    const self = this;\n    //    this.upperGroup.setAttribute('pointer-events','all');\n    this.upperGroup.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.upperGroup.onmouseenter = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.upperGroup.onmouseleave = function (evt) {\n        self.mouseOut(evt);\n    };\n    this.upperGroup.ontouchstart = function (evt) {\n        //console.log(\"interactor touch start\");\n        self.touchStart(evt);\n    };\n};\n\nInteractor.prototype.addStoichiometryLabel = function (stoichiometry) {\n    if (this.labelSVG) { //complexes don't have labels (yet?)\n        // noinspection JSUndefinedPropertyAssignment\n        this.labelSVG.childNodes[0].data = this.labelSVG.childNodes[0].data + \" [\" + stoichiometry + \"]\";\n    }\n};\n\nInteractor.prototype.mouseDown = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.app.d3cola.stop();\n    this.app.dragElement = this;\n    this.app.dragStart = evt;\n    return false;\n};\n\nInteractor.prototype.touchStart = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.app.d3cola.stop();\n    this.app.dragElement = this;\n    this.app.dragStart = evt;\n    return false;\n};\n\nInteractor.prototype.mouseOver = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.showHighlight(true);\n    this.app.notifyHoverListeners([this.json.id]);\n    return false;\n};\n\nInteractor.prototype.mouseOut = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.showHighlight(false);\n    this.app.hideTooltip();\n    this.app.notifyHoverListeners([]);\n    return false;\n};\n\nInteractor.prototype.getSymbolRadius = function () {\n    return 15;\n};\n\nInteractor.prototype.showHighlight = function () {\n};\n\nInteractor.prototype.getPosition = function () {\n    return [this.ix, this.iy]; // todo - type of return is kind of inconsistent\n};\n\nInteractor.prototype.setPosition = function (x, y) {\n    this.px = this.ix;\n    this.py = this.iy;\n    this.ix = x;\n    this.iy = y;\n    this.upperGroup.setAttribute(\"transform\", \"translate(\" + this.ix + \" \" + this.iy + \")\");\n};\n\nInteractor.prototype.changePosition = function (x, y) {\n    this.px = this.ix;\n    this.py = this.iy;\n    this.ix -= x;\n    this.iy -= y;\n    this.upperGroup.setAttribute(\"transform\", \"translate(\" + this.ix + \" \" + this.iy + \")\");\n    // this.setAllLinkCoordinates(); // todo - look at calls\n};\n\nInteractor.prototype.getAggregateSelfLinkPath = function () {\n    const intraR = this.getSymbolRadius() + 7;\n    const sectorSize = 45;\n    const arcStart = trig(intraR, 25 + sectorSize);\n    const arcEnd = trig(intraR, -25 + sectorSize);\n    const cp1 = trig(intraR, 40 + sectorSize);\n    const cp2 = trig(intraR, -40 + sectorSize);\n    return \"M 0,0 \" +\n        \"Q \" + cp1.x + \",\" + -cp1.y + \" \" + arcStart.x + \",\" + -arcStart.y +\n        \" A \" + intraR + \" \" + intraR + \" 0 0 1 \" + arcEnd.x + \",\" + -arcEnd.y +\n        \" Q \" + cp2.x + \",\" + -cp2.y + \" 0,0\";\n};\n\nInteractor.prototype.checkLinks = function () {\n    function checkAll(linkMap) {\n        for (let link of linkMap.values()) {\n            link.check();\n        }\n    }\n\n    // checkAll(this.naryLinks); // hacked out to fix ordering of nLinks\n    checkAll(this.binaryLinks);\n    checkAll(this.sequenceLinks);\n    if (this.selfLink) {\n        this.selfLink.check();\n    }\n};\n\n// update all lines (e.g after a move)\nInteractor.prototype.setAllLinkCoordinates = function () {\n    for (let link of this.naryLinks.values()) {\n        link.setLinkCoordinates();\n    }\n    for (let link of this.binaryLinks.values()) {\n        link.setLinkCoordinates();\n    }\n    if (this.selfLink) {\n        this.selfLink.setLinkCoordinates();\n    }\n    for (let link of this.sequenceLinks.values()) {\n        link.setLinkCoordinates();\n    }\n};\n\nfunction trig(radius, angleDegrees) {\n    //x = rx + radius * cos(theta) and y = ry + radius * sin(theta)\n    const radians = (angleDegrees / 360) * Math.PI * 2;\n    return {\n        x: (radius * Math.cos(radians)),\n        y: (radius * Math.sin(radians))\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvaW50ZXJhY3Rvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvaW50ZXJhY3Rvci5qcz9lODA4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TEFCRUxfWSwgc3ZnbnN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEludGVyYWN0b3IoKSB7XG59XG5cbkludGVyYWN0b3IucHJvdG90eXBlID0ge1xuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgLy8gdG9kbyAtIHRoaW5ncyBub3Qgd29ya2luZyBxdWl0ZSByaWdodCBpbiBmaXJlZm94LCB3b3JrIGFyb3VuZC4uLlxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnVwcGVyR3JvdXAuZ2V0QkJveCgpLndpZHRoKTtcbiAgICAgICAgLy8gY29uc3QgYmJveCA9IHRoaXMudXBwZXJHcm91cC5nZXRCQm94KCk7IC8vZmlyZWZveCBidWdneT9cbiAgICAgICAgLy8gcmV0dXJuIGJib3gud2lkdGg7XG4gICAgICAgIGlmICghdGhpcy5leHBhbmRlZCkge1xuICAgICAgICAgICAgcmV0dXJuICgyICogdGhpcy5nZXRTeW1ib2xSYWRpdXMoKSkgKyA1ICsgdGhpcy5sYWJlbFNWRy5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zaXplICogdGhpcy5zdGlja1pvb20pICsgNSArIHRoaXMubGFiZWxTVkcuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiA0MDsvL3RoaXMudXBwZXJHcm91cC5nZXRCQm94KCkuaGVpZ2h0O1xuICAgIH0sXG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGlkLCBhcHAsIGpzb24sIG5hbWUpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgLy8gdGhpcy50eXBlID0ganNvbi50eXBlLm5hbWU7XG5cbiAgICB0aGlzLmV4cGFuZGVkID0gZmFsc2U7XG5cbiAgICAvL3RvZG8gLSB0aGluayAndHlwZScgc2hvdWxkIGJlICBhIHByb3BlcnR5IGhlcmUgKGV4Y2VwdCBmb3IgY29tcGxleCwgY2FuIGp1c3QgcmV0dXJuIGpzb24udHlwZS5uYW1lKVxuXG4gICAgLy9hbm5vdGF0aW9ucyBpbmRleGVkIGJ5IGFubm90YXRpb24gc2V0IG5hbWUgKFwiTUkgRmVhdHVyZXNcIiwgXCJTdXBlcmZhbWlseVwiLCBldGMpXG4gICAgdGhpcy5hbm5vdGF0aW9uU2V0cyA9IG5ldyBNYXAoKTtcbiAgICAvL2xpbmtzXG4gICAgdGhpcy5uYXJ5TGlua3MgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5iaW5hcnlMaW5rcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnNlcXVlbmNlTGlua3MgPSBuZXcgTWFwKCk7XG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5pbml0TGFiZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sYWJlbFNWRyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJ0ZXh0XCIpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwieFwiLCBcIjBcIik7IC8vIGNzcz9cbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInlcIiwgXCIxMFwiKTtcbiAgICB0aGlzLmxhYmVsU1ZHLmNsYXNzTGlzdC5hZGQoXCJsYWJlbFwiKTtcbiAgICAvL2Nob29zZSBsYWJlbCB0ZXh0XG4gICAgaWYgKHRoaXMubmFtZSkge1xuICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMuaWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhYmVsVGV4dC5sZW5ndGggPiAyNSkge1xuICAgICAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMubGFiZWxUZXh0LnN1YnN0cigwLCAxNikgKyBcIi4uLlwiO1xuICAgIH1cbiAgICB0aGlzLmxhYmVsVGV4dCA9IHRoaXMubmFtZTtcbiAgICB0aGlzLmxhYmVsVGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLmxhYmVsVGV4dCk7XG4gICAgdGhpcy5sYWJlbFNWRy5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsVGV4dE5vZGUpO1xuICAgIHRoaXMubGFiZWxTVkcuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsXG4gICAgICAgIFwidHJhbnNsYXRlKCAtXCIgKyB0aGlzLmdldFN5bWJvbFJhZGl1cygpICsgXCIgXCIgKyBMQUJFTF9ZICsgXCIpXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsU1ZHKTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLmluaXRPdXRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub3V0bGluZS5jbGFzc0xpc3QuYWRkKFwib3V0bGluZVwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5vdXRsaW5lKTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLmluaXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXZlbnRzXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgLy8gICAgdGhpcy51cHBlckdyb3VwLnNldEF0dHJpYnV0ZSgncG9pbnRlci1ldmVudHMnLCdhbGwnKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnVwcGVyR3JvdXAub25tb3VzZWVudGVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3ZlcihldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU91dChldnQpO1xuICAgIH07XG4gICAgdGhpcy51cHBlckdyb3VwLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImludGVyYWN0b3IgdG91Y2ggc3RhcnRcIik7XG4gICAgICAgIHNlbGYudG91Y2hTdGFydChldnQpO1xuICAgIH07XG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5hZGRTdG9pY2hpb21ldHJ5TGFiZWwgPSBmdW5jdGlvbiAoc3RvaWNoaW9tZXRyeSkge1xuICAgIGlmICh0aGlzLmxhYmVsU1ZHKSB7IC8vY29tcGxleGVzIGRvbid0IGhhdmUgbGFiZWxzICh5ZXQ/KVxuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbmRlZmluZWRQcm9wZXJ0eUFzc2lnbm1lbnRcbiAgICAgICAgdGhpcy5sYWJlbFNWRy5jaGlsZE5vZGVzWzBdLmRhdGEgPSB0aGlzLmxhYmVsU1ZHLmNoaWxkTm9kZXNbMF0uZGF0YSArIFwiIFtcIiArIHN0b2ljaGlvbWV0cnkgKyBcIl1cIjtcbiAgICB9XG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5tb3VzZURvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdGhpcy5hcHAucHJldmVudERlZmF1bHRzQW5kU3RvcFByb3BhZ2F0aW9uKGV2dCk7XG4gICAgdGhpcy5hcHAuZDNjb2xhLnN0b3AoKTtcbiAgICB0aGlzLmFwcC5kcmFnRWxlbWVudCA9IHRoaXM7XG4gICAgdGhpcy5hcHAuZHJhZ1N0YXJ0ID0gZXZ0O1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLnRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdGhpcy5hcHAucHJldmVudERlZmF1bHRzQW5kU3RvcFByb3BhZ2F0aW9uKGV2dCk7XG4gICAgdGhpcy5hcHAuZDNjb2xhLnN0b3AoKTtcbiAgICB0aGlzLmFwcC5kcmFnRWxlbWVudCA9IHRoaXM7XG4gICAgdGhpcy5hcHAuZHJhZ1N0YXJ0ID0gZXZ0O1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLm1vdXNlT3ZlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB0aGlzLmFwcC5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24oZXZ0KTtcbiAgICB0aGlzLnNob3dIaWdobGlnaHQodHJ1ZSk7XG4gICAgdGhpcy5hcHAubm90aWZ5SG92ZXJMaXN0ZW5lcnMoW3RoaXMuanNvbi5pZF0pO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLm1vdXNlT3V0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuYXBwLnByZXZlbnREZWZhdWx0c0FuZFN0b3BQcm9wYWdhdGlvbihldnQpO1xuICAgIHRoaXMuc2hvd0hpZ2hsaWdodChmYWxzZSk7XG4gICAgdGhpcy5hcHAuaGlkZVRvb2x0aXAoKTtcbiAgICB0aGlzLmFwcC5ub3RpZnlIb3Zlckxpc3RlbmVycyhbXSk7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuSW50ZXJhY3Rvci5wcm90b3R5cGUuZ2V0U3ltYm9sUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAxNTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLnNob3dIaWdobGlnaHQgPSBmdW5jdGlvbiAoKSB7XG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW3RoaXMuaXgsIHRoaXMuaXldOyAvLyB0b2RvIC0gdHlwZSBvZiByZXR1cm4gaXMga2luZCBvZiBpbmNvbnNpc3RlbnRcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLnB4ID0gdGhpcy5peDtcbiAgICB0aGlzLnB5ID0gdGhpcy5peTtcbiAgICB0aGlzLml4ID0geDtcbiAgICB0aGlzLml5ID0geTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpcy5peCArIFwiIFwiICsgdGhpcy5peSArIFwiKVwiKTtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLmNoYW5nZVBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICB0aGlzLnB4ID0gdGhpcy5peDtcbiAgICB0aGlzLnB5ID0gdGhpcy5peTtcbiAgICB0aGlzLml4IC09IHg7XG4gICAgdGhpcy5peSAtPSB5O1xuICAgIHRoaXMudXBwZXJHcm91cC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLml4ICsgXCIgXCIgKyB0aGlzLml5ICsgXCIpXCIpO1xuICAgIC8vIHRoaXMuc2V0QWxsTGlua0Nvb3JkaW5hdGVzKCk7IC8vIHRvZG8gLSBsb29rIGF0IGNhbGxzXG59O1xuXG5JbnRlcmFjdG9yLnByb3RvdHlwZS5nZXRBZ2dyZWdhdGVTZWxmTGlua1BhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaW50cmFSID0gdGhpcy5nZXRTeW1ib2xSYWRpdXMoKSArIDc7XG4gICAgY29uc3Qgc2VjdG9yU2l6ZSA9IDQ1O1xuICAgIGNvbnN0IGFyY1N0YXJ0ID0gdHJpZyhpbnRyYVIsIDI1ICsgc2VjdG9yU2l6ZSk7XG4gICAgY29uc3QgYXJjRW5kID0gdHJpZyhpbnRyYVIsIC0yNSArIHNlY3RvclNpemUpO1xuICAgIGNvbnN0IGNwMSA9IHRyaWcoaW50cmFSLCA0MCArIHNlY3RvclNpemUpO1xuICAgIGNvbnN0IGNwMiA9IHRyaWcoaW50cmFSLCAtNDAgKyBzZWN0b3JTaXplKTtcbiAgICByZXR1cm4gXCJNIDAsMCBcIiArXG4gICAgICAgIFwiUSBcIiArIGNwMS54ICsgXCIsXCIgKyAtY3AxLnkgKyBcIiBcIiArIGFyY1N0YXJ0LnggKyBcIixcIiArIC1hcmNTdGFydC55ICtcbiAgICAgICAgXCIgQSBcIiArIGludHJhUiArIFwiIFwiICsgaW50cmFSICsgXCIgMCAwIDEgXCIgKyBhcmNFbmQueCArIFwiLFwiICsgLWFyY0VuZC55ICtcbiAgICAgICAgXCIgUSBcIiArIGNwMi54ICsgXCIsXCIgKyAtY3AyLnkgKyBcIiAwLDBcIjtcbn07XG5cbkludGVyYWN0b3IucHJvdG90eXBlLmNoZWNrTGlua3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tBbGwobGlua01hcCkge1xuICAgICAgICBmb3IgKGxldCBsaW5rIG9mIGxpbmtNYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGxpbmsuY2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrQWxsKHRoaXMubmFyeUxpbmtzKTsgLy8gaGFja2VkIG91dCB0byBmaXggb3JkZXJpbmcgb2YgbkxpbmtzXG4gICAgY2hlY2tBbGwodGhpcy5iaW5hcnlMaW5rcyk7XG4gICAgY2hlY2tBbGwodGhpcy5zZXF1ZW5jZUxpbmtzKTtcbiAgICBpZiAodGhpcy5zZWxmTGluaykge1xuICAgICAgICB0aGlzLnNlbGZMaW5rLmNoZWNrKCk7XG4gICAgfVxufTtcblxuLy8gdXBkYXRlIGFsbCBsaW5lcyAoZS5nIGFmdGVyIGEgbW92ZSlcbkludGVyYWN0b3IucHJvdG90eXBlLnNldEFsbExpbmtDb29yZGluYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGxldCBsaW5rIG9mIHRoaXMubmFyeUxpbmtzLnZhbHVlcygpKSB7XG4gICAgICAgIGxpbmsuc2V0TGlua0Nvb3JkaW5hdGVzKCk7XG4gICAgfVxuICAgIGZvciAobGV0IGxpbmsgb2YgdGhpcy5iaW5hcnlMaW5rcy52YWx1ZXMoKSkge1xuICAgICAgICBsaW5rLnNldExpbmtDb29yZGluYXRlcygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWxmTGluaykge1xuICAgICAgICB0aGlzLnNlbGZMaW5rLnNldExpbmtDb29yZGluYXRlcygpO1xuICAgIH1cbiAgICBmb3IgKGxldCBsaW5rIG9mIHRoaXMuc2VxdWVuY2VMaW5rcy52YWx1ZXMoKSkge1xuICAgICAgICBsaW5rLnNldExpbmtDb29yZGluYXRlcygpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlnKHJhZGl1cywgYW5nbGVEZWdyZWVzKSB7XG4gICAgLy94ID0gcnggKyByYWRpdXMgKiBjb3ModGhldGEpIGFuZCB5ID0gcnkgKyByYWRpdXMgKiBzaW4odGhldGEpXG4gICAgY29uc3QgcmFkaWFucyA9IChhbmdsZURlZ3JlZXMgLyAzNjApICogTWF0aC5QSSAqIDI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogKHJhZGl1cyAqIE1hdGguY29zKHJhZGlhbnMpKSxcbiAgICAgICAgeTogKHJhZGl1cyAqIE1hdGguc2luKHJhZGlhbnMpKVxuICAgIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/interactor.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/molecule-set.js":
/*!***********************************************!*\
  !*** ./src/js/viz/interactor/molecule-set.js ***!
  \***********************************************/
/*! exports provided: MoleculeSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MoleculeSet\", function() { return MoleculeSet; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction MoleculeSet(id, app, json, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    this.outline.setAttribute(\"x\", \"-20\");\n    this.outline.setAttribute(\"y\", \"-10\");\n    this.outline.setAttribute(\"width\", \"40\");\n    this.outline.setAttribute(\"height\", \"20\");\n    this.outline.setAttribute(\"rx\", \"5\");\n    this.outline.setAttribute(\"ry\", \"5\");\n    //todo - css... (initOutline hasn't been called so it doesn't have outlin in its classList)\n    this.outline.setAttribute(\"stroke\", \"black\");\n    this.outline.setAttribute(\"stroke-width\", \"4\");\n    this.outline.setAttribute(\"stroke-opacity\", \"1\");\n    this.outline.setAttribute(\"fill-opacity\", \"1\");\n    this.outline.setAttribute(\"fill\", \"#ffffff\");\n    //append outline\n    this.upperGroup.appendChild(this.outline);\n    this.upperLine = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    this.upperLine.setAttribute(\"x\", \"-20\");\n    this.upperLine.setAttribute(\"y\", \"-10\");\n    this.upperLine.setAttribute(\"width\", \"40\");\n    this.upperLine.setAttribute(\"height\", \"20\");\n    this.upperLine.setAttribute(\"rx\", \"5\");\n    this.upperLine.setAttribute(\"ry\", \"5\");\n    this.upperLine.setAttribute(\"stroke\", \"white\");\n    this.upperLine.setAttribute(\"stroke-width\", \"2\");\n    this.upperLine.setAttribute(\"stroke-opacity\", \"1\");\n    this.upperLine.setAttribute(\"fill\", \"none\");\n    this.upperGroup.appendChild(this.upperLine);\n    this.initListeners();\n}\n\nMoleculeSet.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\nMoleculeSet.prototype.getSymbolRadius = function () {\n    return 25;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvbW9sZWN1bGUtc2V0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy92aXovaW50ZXJhY3Rvci9tb2xlY3VsZS1zZXQuanM/YjZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ludGVyYWN0b3J9IGZyb20gXCIuL2ludGVyYWN0b3JcIjtcbmltcG9ydCB7c3ZnbnN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIE1vbGVjdWxlU2V0KGlkLCBhcHAsIGpzb24sIG5hbWUpIHtcbiAgICB0aGlzLmluaXQoaWQsIGFwcCwganNvbiwgbmFtZSk7XG4gICAgdGhpcy51cHBlckdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImdcIik7XG4gICAgdGhpcy5pbml0TGFiZWwoKTtcbiAgICB0aGlzLm91dGxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwicmVjdFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwieFwiLCBcIi0yMFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwieVwiLCBcIi0xMFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCI0MFwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMjBcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInJ4XCIsIFwiNVwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicnlcIiwgXCI1XCIpO1xuICAgIC8vdG9kbyAtIGNzcy4uLiAoaW5pdE91dGxpbmUgaGFzbid0IGJlZW4gY2FsbGVkIHNvIGl0IGRvZXNuJ3QgaGF2ZSBvdXRsaW4gaW4gaXRzIGNsYXNzTGlzdClcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjRcIik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS1vcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbC1vcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIiNmZmZmZmZcIik7XG4gICAgLy9hcHBlbmQgb3V0bGluZVxuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLm91dGxpbmUpO1xuICAgIHRoaXMudXBwZXJMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy51cHBlckxpbmUuc2V0QXR0cmlidXRlKFwieFwiLCBcIi0yMFwiKTtcbiAgICB0aGlzLnVwcGVyTGluZS5zZXRBdHRyaWJ1dGUoXCJ5XCIsIFwiLTEwXCIpO1xuICAgIHRoaXMudXBwZXJMaW5lLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiNDBcIik7XG4gICAgdGhpcy51cHBlckxpbmUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMjBcIik7XG4gICAgdGhpcy51cHBlckxpbmUuc2V0QXR0cmlidXRlKFwicnhcIiwgXCI1XCIpO1xuICAgIHRoaXMudXBwZXJMaW5lLnNldEF0dHJpYnV0ZShcInJ5XCIsIFwiNVwiKTtcbiAgICB0aGlzLnVwcGVyTGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKTtcbiAgICB0aGlzLnVwcGVyTGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIyXCIpO1xuICAgIHRoaXMudXBwZXJMaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS1vcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB0aGlzLnVwcGVyTGluZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy51cHBlckxpbmUpO1xuICAgIHRoaXMuaW5pdExpc3RlbmVycygpO1xufVxuXG5Nb2xlY3VsZVNldC5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG5Nb2xlY3VsZVNldC5wcm90b3R5cGUuZ2V0U3ltYm9sUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAyNTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/molecule-set.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/polymer.js":
/*!******************************************!*\
  !*** ./src/js/viz/interactor/polymer.js ***!
  \******************************************/
/*! exports provided: Polymer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Polymer\", function() { return Polymer; });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _annotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotation */ \"./src/js/viz/interactor/annotation.js\");\n/* harmony import */ var _sequence_datum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sequence-datum */ \"./src/js/viz/sequence-datum.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n // transitions and other stuff\n\n\n\n\n\nPolymer.STICKHEIGHT = 20; //height of stick in pixels\nPolymer.MAXSIZE = 0; // residue count of longest sequence\nPolymer.transitionTime = 650;\n\nfunction Polymer() {\n}\n\nPolymer.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_1__[\"Interactor\"]();\n\nPolymer.prototype.getSymbolRadius = function () {\n    return 15;\n};\n\nPolymer.prototype.showHighlight = function (show) {\n    this.highlight.setAttribute(\"stroke-opacity\", show ? \"1\" : \"0\");\n};\n\nPolymer.minXDist = 30;\nPolymer.prototype.setStickScale = function (scale, svgP) {\n    const oldScale = this.stickZoom;\n\n    //dist from centre\n    const dx = (this.ix - svgP.x);\n    const dy = (this.iy - svgP.y);\n\n    // new dist from centre\n    const nx = dx * scale / oldScale;\n    const ny = dy * scale / oldScale;\n\n    //required change\n    const rx = nx - dx;\n    let ry = ny - dy;\n\n    if (this.rotation === 0 || this.rotation === 180) {\n        ry = 0;\n    }\n\n    //new pos\n    const x = this.ix + rx;\n    const y = this.iy + ry;\n\n    this.stickZoom = scale;\n    this.scale();\n    this.setPosition(x, y);\n    this.setAllLinkCoordinates();\n};\n\nPolymer.prototype.scale = function () {\n    const protLength = (this.size) * this.stickZoom;\n    if (this.expanded) {\n        const labelTransform = d3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"](this.labelSVG.getAttribute(\"transform\"));\n        const k = this.app.svgElement.createSVGMatrix().rotate(labelTransform.rotate)\n            .translate((-(((this.size / 2) * this.stickZoom) + (this.nTerminusFeature ? 25 : 10))), _config__WEBPACK_IMPORTED_MODULE_4__[\"LABEL_Y\"]); //.scale(z).translate(-c.x, -c.y);\n        this.labelSVG.transform.baseVal.initialize(this.app.svgElement.createSVGTransformFromMatrix(k));\n        this.updateAnnotationRectanglesNoTransition();\n\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.background)\n            .attr(\"width\", protLength)\n            .attr(\"x\", this.getResXWithStickZoom(0.5));\n\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.outline)\n            .attr(\"width\", protLength)\n            .attr(\"x\", this.getResXWithStickZoom(0.5));\n\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.highlight)\n            .attr(\"width\", protLength + 5)\n            .attr(\"x\", this.getResXWithStickZoom(0.5) - 2.5);\n\n        this.setScaleGroup();\n    }\n};\n\nPolymer.prototype.setScaleGroup = function () {\n    this.upperGroup.appendChild(this.ticks); //will do nothing if this.ticks already appended to this.uppergroup\n    this.ticks.textContent = \"\";\n    this.scaleLabels = [];\n    const ScaleTicksPerLabel = 2;\n    let tick = -1;\n    const lastTickX = this.getResXWithStickZoom(this.size);\n    for (let res = 1; res <= this.size; res++) {\n        if (res === 1 ||\n            ((res % 100 === 0) && (200 * this.stickZoom > Polymer.minXDist)) ||\n            ((res % 10 === 0) && (20 * this.stickZoom > Polymer.minXDist))\n        ) {\n            const tx = this.getResXWithStickZoom(res);\n            if (this.stickZoom >= 8 || res !== 1) {\n                tickAt(this, tx);\n            }\n            tick = (tick + 1) % ScaleTicksPerLabel;\n            // does this one get a label?\n            if (tick === 0) { // && tx > 20) {\n                if ((tx + Polymer.minXDist) < lastTickX) {\n                    scaleLabelAt(this, res, tx);\n                }\n            }\n        }\n        if (this.stickZoom >= 8) {\n            const seqLabelGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"g\");\n            seqLabelGroup.setAttribute(\"transform\", \"translate(\" + this.getResXWithStickZoom(res) + \" \" + 0 + \")\");\n            const seqLabel = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"text\");\n            seqLabel.classList.add(\"label\", \"sequence\");\n            //css?\n            seqLabel.setAttribute(\"x\", \"0\");\n            seqLabel.setAttribute(\"y\", \"3\");\n            seqLabel.appendChild(document.createTextNode(this.sequence[res - 1]));\n            seqLabelGroup.appendChild(seqLabel);\n            this.scaleLabels.push(seqLabel);\n            this.ticks.appendChild(seqLabelGroup);\n        }\n    }\n    scaleLabelAt(this, this.size, lastTickX);\n    if (this.stickZoom >= 8) {\n        tickAt(this, lastTickX);\n    }\n\n    function scaleLabelAt(self, text, tickX) {\n        const scaleLabelGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"g\");\n        scaleLabelGroup.setAttribute(\"transform\", \"translate(\" + tickX + \" \" + 0 + \")\");\n        const scaleLabel = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"text\");\n        scaleLabel.classList.add(\"label\", \"scale-label\");\n        scaleLabel.setAttribute(\"x\", \"0\");\n        scaleLabel.setAttribute(\"y\", Polymer.STICKHEIGHT + 4);\n        scaleLabel.appendChild(document.createTextNode(text));\n        scaleLabelGroup.appendChild(scaleLabel);\n        self.scaleLabels.push(scaleLabel);\n        self.ticks.appendChild(scaleLabelGroup);\n    }\n\n    function tickAt(self, tickX) {\n        const tick = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"line\");\n        tick.classList.add(\"tick\");\n        tick.setAttribute(\"x1\", tickX);\n        tick.setAttribute(\"y1\", \"5\");\n        tick.setAttribute(\"x2\", tickX);\n        tick.setAttribute(\"y2\", \"10\");\n        self.ticks.appendChild(tick);\n    }\n};\n\nPolymer.prototype.setForm = function (form, svgP) {\n    if (this.busy !== true) {\n        if (form === 1) {\n            this.toStick();\n        } else {\n            this.toCircle(svgP);\n        }\n    }\n};\n\nPolymer.prototype.toCircle = function (svgP) {\n    //svgP = null;// temp hack - you can uncomment this is you experience things 'flying off screen'\n    this.busy = true;\n\n    const r = this.getSymbolRadius();\n    //\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.background).transition()\n        .attr(\"x\", -r).attr(\"y\", -r)\n        .attr(\"width\", r * 2).attr(\"height\", r * 2)\n        .attr(\"rx\", r).attr(\"ry\", r)\n        .duration(Polymer.transitionTime);\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.outline).transition()\n        .attr(\"x\", -r).attr(\"y\", -r)\n        .attr(\"width\", r * 2).attr(\"height\", r * 2)\n        .attr(\"rx\", r).attr(\"ry\", r)\n        .duration(Polymer.transitionTime);\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.highlight).transition()\n        .attr(\"width\", (r * 2) + 5).attr(\"height\", (r * 2) + 5)\n        .attr(\"x\", -r - 2.5).attr(\"y\", -r - 2.5)\n        .attr(\"rx\", r + 2.5).attr(\"ry\", r + 2.5)\n        .duration(Polymer.transitionTime);\n\n    const stickZoomInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](this.stickZoom, 0);\n    // var rotationInterpol = d3.interpolate((this.rotation > 180) ? this.rotation - 360 : this.rotation, 0);\n    const labelTransform = d3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"](this.labelSVG.getAttribute(\"transform\"));\n    const labelStartPoint = labelTransform.translate[0];\n    const labelTranslateInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](labelStartPoint, -(r + 5));\n\n    let xInterpol = null,\n        yInterpol = null;\n    if (typeof svgP !== \"undefined\" && svgP !== null) {\n        xInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](this.ix, svgP.x);\n        yInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](this.iy, svgP.y);\n    }\n\n    const self = this;\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.ticks).transition().attr(\"opacity\", 0).duration(Polymer.transitionTime / 4)\n        .each(\"end\",\n            function () {\n                d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this).selectAll(\"*\").remove();\n            }\n        );\n\n    for (let [annotationType, annotations] of this.annotationSets) {\n        if (this.app.annotationSetsShown.get(annotationType) === true) {\n            for (let anno of annotations) {\n                if (anno.fuzzyStart) {\n                    const fuzzyStart = anno.fuzzyStart;\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyStart).transition().attr(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno, false))\n                        .duration(Polymer.transitionTime);\n                }\n\n                if (anno.certain) {\n                    const certain = anno.certain;\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](certain).transition().attr(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.begin, anno.seqDatum.end, anno, false))\n                        .duration(Polymer.transitionTime);\n                }\n\n                if (anno.fuzzyEnd) {\n                    const fuzzyEnd = anno.fuzzyEnd;\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyEnd).transition().attr(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno, false))\n                        .duration(Polymer.transitionTime);\n                }\n            }\n        }\n    }\n\n    const originalStickZoom = this.stickZoom;\n    const originalRotation = this.rotation;\n    const cubicInOut = d3__WEBPACK_IMPORTED_MODULE_0__[\"ease\"](\"cubic-in-out\");\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"timer\"](function (elapsed) {\n        return update(elapsed / Polymer.transitionTime);\n    });\n\n    function update(interp) {\n        const labelTransform = d3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"](self.labelSVG.getAttribute(\"transform\"));\n        const k = self.app.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(cubicInOut(interp)), _config__WEBPACK_IMPORTED_MODULE_4__[\"LABEL_Y\"]); //.scale(z).translate(-c.x, -c.y);\n        self.labelSVG.transform.baseVal.initialize(self.app.svgElement.createSVGTransformFromMatrix(k));\n        //~\n        if (xInterpol !== null) {\n            self.setPosition(xInterpol(cubicInOut(interp)), yInterpol(cubicInOut(interp)));\n        }\n\n        self.stickZoom = stickZoomInterpol(cubicInOut(interp));\n        self.setAllLinkCoordinates();\n\n        if (interp === 1) { // finished - tidy up\n            self.expanded = false;\n            self.checkLinks();\n\n            for (let [annotationType, annotations] of self.annotationSets) {\n                if (self.app.annotationSetsShown.get(annotationType) === true) {\n                    for (let anno of annotations) {\n                        if (anno.fuzzyStart) {\n                            const fuzzyStart = anno.fuzzyStart;\n                            d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyStart).attr(\"d\", self.getAnnotationPieSlicePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n                        }\n\n                        if (anno.certain) {\n                            const certain = anno.certain;\n                            d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](certain).attr(\"d\", self.getAnnotationPieSlicePath(anno.seqDatum.begin, anno.seqDatum.end, anno));\n                        }\n\n                        if (anno.fuzzyEnd) {\n                            const fuzzyEnd = anno.fuzzyEnd;\n                            d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyEnd).attr(\"d\", self.getAnnotationPieSlicePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n                        }\n                    }\n                }\n            }\n\n            self.stickZoom = originalStickZoom;\n            self.rotation = originalRotation;\n            self.busy = false;\n            return true;\n        } else if (interp > 1) {\n            return update(1);\n        } else {\n            return false;\n        }\n    }\n};\n\nPolymer.prototype.toStick = function () {\n    this.busy = true;\n    this.expanded = true;\n\n    const protLength = this.size * this.stickZoom;\n    const r = this.getSymbolRadius();\n\n    //d3.interpolate paths, update them along with everything else\n\n    const lengthInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"]((2 * r), protLength);\n    const stickZoomInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](0, this.stickZoom);\n    const labelTranslateInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](-(r + 5), -(((this.size / 2) * this.stickZoom) + (this.nTerminusFeature ? 25 : 10)));\n\n    const origStickZoom = this.stickZoom;\n    this.stickZoom = 0;\n    this.checkLinks();\n    this.stickZoom = origStickZoom;\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.background).transition() //.attr(\"stroke-opacity\", 1)\n        .attr(\"height\", Polymer.STICKHEIGHT)\n        .attr(\"y\", -Polymer.STICKHEIGHT / 2)\n        .attr(\"rx\", 0).attr(\"ry\", 0)\n        .duration(Polymer.transitionTime);\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.outline).transition() //.attr(\"stroke-opacity\", 1)\n        .attr(\"height\", Polymer.STICKHEIGHT)\n        .attr(\"y\", -Polymer.STICKHEIGHT / 2)\n        .attr(\"rx\", 0).attr(\"ry\", 0)\n        .duration(Polymer.transitionTime);\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.highlight).transition()\n        .attr(\"width\", protLength + 5).attr(\"height\", Polymer.STICKHEIGHT + 5)\n        .attr(\"x\", this.getResXWithStickZoom(0.5) - 2.5).attr(\"y\", (-Polymer.STICKHEIGHT / 2) - 2.5)\n        .attr(\"rx\", 0).attr(\"ry\", 0)\n        .duration(Polymer.transitionTime);\n\n    for (let [annotationType, annotations] of this.annotationSets) {\n        if (this.app.annotationSetsShown.get(annotationType) === true) {\n            for (let anno of annotations) {\n                if (anno.fuzzyStart) {\n                    const fuzzyStart = anno.fuzzyStart;\n                    fuzzyStart.setAttribute(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno, false));\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyStart).transition().attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno))\n                        .duration(Polymer.transitionTime);\n                }\n                if (anno.certain) {\n                    const certain = anno.certain;\n                    let tempBegin = anno.seqDatum.begin; //todo - might be better to have seperate att in SequenceData for end of uncertain start\n                    let tempEnd = anno.seqDatum.end;\n                    if (anno.seqDatum.uncertainBegin) {\n                        tempBegin += 1;\n                    }\n                    if (anno.seqDatum.uncertainEnd) {\n                        tempEnd -= 1;\n                    }\n\n                    certain.setAttribute(\"d\", this.getAnnotationPieSlicePath(tempBegin, tempEnd, anno, false));\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](certain).transition().attr(\"d\", this.getAnnotationRectPath(tempBegin, tempEnd, anno))\n                        .duration(Polymer.transitionTime);\n                }\n                if (anno.fuzzyEnd) {\n                    const fuzzyEnd = anno.fuzzyEnd;\n                    fuzzyEnd.setAttribute(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno, false));\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyEnd).transition().attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno))\n                        .duration(Polymer.transitionTime);\n                }\n            }\n        }\n    }\n\n    const self = this;\n    const cubicInOut = d3__WEBPACK_IMPORTED_MODULE_0__[\"ease\"](\"cubic-in-out\");\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"timer\"](function (elapsed) {\n        return update(elapsed / Polymer.transitionTime);\n    });\n\n    function update(interp) {\n        const labelTransform = d3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"](self.labelSVG.getAttribute(\"transform\"));\n        const k = self.app.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(cubicInOut(interp)), _config__WEBPACK_IMPORTED_MODULE_4__[\"LABEL_Y\"]); //.scale(z).translate(-c.x, -c.y);\n        self.labelSVG.transform.baseVal.initialize(self.app.svgElement.createSVGTransformFromMatrix(k));\n\n        const currentLength = lengthInterpol(cubicInOut(interp));\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.highlight).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.outline).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n        d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.background).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n        self.stickZoom = stickZoomInterpol(cubicInOut(interp));\n        self.setAllLinkCoordinates();\n\n        if (interp === 1) { // finished - tidy up\n            self.updateAnnotationRectanglesNoTransition();\n            self.busy = false;\n            return true;\n        } else if (interp > 1) {\n            return update(1);\n        } else {\n            return false;\n        }\n    }\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.ticks).attr(\"opacity\", 0);\n    this.setScaleGroup();\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.ticks).transition().attr(\"opacity\", 1)\n        .delay(Polymer.transitionTime * 0.8).duration(Polymer.transitionTime / 2);\n};\n\nPolymer.prototype.toStickNoTransition = function () {\n    this.busy = true;\n    this.expanded = true;\n\n    const protLength = this.size * this.stickZoom;\n    const r = this.getSymbolRadius();\n\n    const lengthInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"]((2 * r), protLength);\n    const labelTranslateInterpol = d3__WEBPACK_IMPORTED_MODULE_0__[\"interpolate\"](-(r + 5), -(((this.size / 2) * this.stickZoom) + (this.nTerminusFeature ? 25 : 10)));\n\n    this.checkLinks();\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.background)\n        .attr(\"height\", Polymer.STICKHEIGHT)\n        .attr(\"y\", -Polymer.STICKHEIGHT / 2)\n        .attr(\"rx\", 0).attr(\"ry\", 0);\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.outline)\n        .attr(\"height\", Polymer.STICKHEIGHT)\n        .attr(\"y\", -Polymer.STICKHEIGHT / 2)\n        .attr(\"rx\", 0).attr(\"ry\", 0);\n\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.highlight)\n        .attr(\"width\", protLength + 5).attr(\"height\", Polymer.STICKHEIGHT + 5)\n        .attr(\"x\", this.getResXWithStickZoom(0.5) - 2.5).attr(\"y\", (-Polymer.STICKHEIGHT / 2) - 2.5)\n        .attr(\"rx\", 0).attr(\"ry\", 0);\n\n\n    const self = this;\n\n    self.updateAnnotationRectanglesNoTransition();\n\n    const labelTransform = d3__WEBPACK_IMPORTED_MODULE_0__[\"transform\"](self.labelSVG.getAttribute(\"transform\"));\n    const k = self.app.svgElement.createSVGMatrix().rotate(labelTransform.rotate).translate(labelTranslateInterpol(1), _config__WEBPACK_IMPORTED_MODULE_4__[\"LABEL_Y\"]); //.scale(z).translate(-c.x, -c.y);\n    self.labelSVG.transform.baseVal.initialize(self.app.svgElement.createSVGTransformFromMatrix(k));\n\n    const currentLength = lengthInterpol(1);\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.highlight).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.outline).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](self.background).attr(\"width\", currentLength).attr(\"x\", -(currentLength / 2) + (0.5 * self.stickZoom));\n    self.setAllLinkCoordinates();\n\n    this.setScaleGroup();\n    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](this.ticks).attr(\"opacity\", 1);\n\n    self.busy = false;\n};\n\nPolymer.prototype.updateAnnotationRectanglesNoTransition = function () {\n    for (let [annotationType, annotations] of this.annotationSets) {\n        if (this.app.annotationSetsShown.get(annotationType) === true) {\n            for (let anno of annotations) {\n                if (anno.fuzzyStart) {\n                    const fuzzyStart = anno.fuzzyStart;\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyStart).attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n                }\n                if (anno.certain) {\n                    let tempBegin = anno.seqDatum.begin; //todo - might be better to have seperate att in SequenceData for end of uncertain start\n                    let tempEnd = anno.seqDatum.end;\n                    if (anno.seqDatum.uncertainBegin) {\n                        tempBegin += 1;\n                    }\n                    if (anno.seqDatum.uncertainEnd) {\n                        tempEnd -= 1;\n                    }\n                    anno.certain.setAttribute(\"d\", this.getAnnotationRectPath(tempBegin, tempEnd, anno));\n                }\n                if (anno.fuzzyEnd) {\n                    const fuzzyEnd = anno.fuzzyEnd;\n                    d3__WEBPACK_IMPORTED_MODULE_0__[\"select\"](fuzzyEnd) /*.transition()*/ .attr(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n                }\n            }\n        }\n    }\n};\n\nPolymer.prototype.getResXWithStickZoom = function (r) {\n    // if (isNaN(r)) {\n    //     console.error(\"NOT NUMBER\");\n    // }\n    if (r === \"n-n\") {\n        return (-this.size / 2 * this.stickZoom) - 20;\n    } else if (r === \"c-c\") {\n        return (this.size / 2 * this.stickZoom) + 20;\n    } else {\n        return (r - (this.size / 2)) * this.stickZoom;\n    }\n};\n\n//calculate the coordinates of a residue (relative to this.app.container)\nPolymer.prototype.getResidueCoordinates = function (r, yOff) {\n    if (typeof r === \"undefined\") {\n        console.error(\"ERROR: residue number is undefined\");\n    }\n    let x = this.getResXWithStickZoom(r * 1);// * this.app.z;\n    // console.log(\"***\", this.app.z);\n    // coz prots don't scale, don't multiple by app.z\n    let y;\n    if (x !== 0) {\n        const l = Math.abs(x);\n        const a = Math.acos(x / l);\n        const rotRad = (this.rotation / 360) * Math.PI * 2;\n        x = l * Math.cos(rotRad + a);\n        y = l * Math.sin(rotRad + a);\n        if (typeof yOff !== \"undefined\") {\n            x += yOff /** this.app.z*/ * Math.cos(rotRad + (Math.PI / 2));\n            y += yOff /** this.app.z*/ * Math.sin(rotRad + (Math.PI / 2));\n        }\n    } else {\n        y = yOff;\n    }\n    x += this.ix;\n    y += this.iy;\n    return [x, y];\n};\n\nPolymer.prototype.clearPositionalFeatures = function () {\n    this.annotations = [];\n    this.annotationTypes = [];\n    this.annotationsSvgGroup.textContent = \"\";\n};\n\nPolymer.prototype.updatePositionalFeatures = function () {\n    const self = this;\n\n    const toolTipFunc = function (evt) {\n        const el = (evt.target.correspondingUseElement) ? evt.target.correspondingUseElement : evt.target;\n        self.app.preventDefaultsAndStopPropagation(evt);\n        self.app.setTooltip(el.name, el.getAttribute(\"fill\"));\n        self.showHighlight(true);\n    };\n\n    let r = -1;\n    const rungs = [];\n\n    function overlaps(rungArr, anno) {\n        for (let earlierAnno of rungArr) {\n            if (earlierAnno.seqDatum.overlaps(anno.seqDatum)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    for (let [annotationType, annotations] of this.annotationSets) {\n        if (this.app.annotationSetsShown.get(annotationType) === true) {\n            if (annotations && annotations.length > 0) {\n                r++;\n                rungs[r] = [];\n            }\n            const dupCheck = new Set();\n            //need to sort by description\n            const sortedAnnos = Array.from(annotations.values()).sort(function (a, b) {\n                const nameA = a.description;\n                const nameB = b.description;\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                // names must be equal\n                return 0;\n            });\n            for (let anno of sortedAnnos) {\n                if (!dupCheck.has(anno.toString())) {\n                    dupCheck.add(anno.toString());\n                    if (anno.seqDatum.sequenceDatumString === \"n-n\" || anno.seqDatum.sequenceDatumString === \"c-c\") {\n                        anno.rung = -1;\n                    } else {\n                        let rung = rungs[r];\n                        if (overlaps(rung, anno)) {\n                            r++;\n                            rungs[r] = [];\n                            rung = rungs[r];\n                        }\n                        anno.rung = r;\n                        rung.push(anno);\n                    }\n                }\n            }\n        }\n    }\n    this.rungCount = r + 1;\n\n    for (let [annotationType, annotations] of this.annotationSets) {\n        if (this.app.annotationSetsShown.get(annotationType) === true) {\n            const dupCheck = new Set();\n            for (let anno of annotations.values()) {\n                if (!dupCheck.has(anno.toString())) {\n                    dupCheck.add(anno.toString());\n                    let text = anno.toString();\n                    if (anno.seqDatum.uncertainBegin) {\n                        anno.fuzzyStart = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"path\");\n                        if (!this.expanded) {\n                            anno.fuzzyStart.setAttribute(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n                        } else {\n                            anno.fuzzyStart.setAttribute(\"d\", this.getAnnotationRectPath(anno.seqDatum.uncertainBegin, anno.seqDatum.begin, anno));\n                        }\n                        anno.fuzzyStart.setAttribute(\"stroke-width\", \"1\"); // todo - should be css\n                        anno.fuzzyStart.setAttribute(\"fill-opacity\", \"0.6\");\n                        anno.fuzzyStart.name = text;\n                        anno.fuzzyStart.onmouseover = toolTipFunc;\n                        this.annotationsSvgGroup.appendChild(anno.fuzzyStart);\n                    }\n\n                    if (anno.seqDatum.begin && anno.seqDatum.end) {\n                        anno.certain = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"path\");\n                        let tempBegin = anno.seqDatum.begin; //todo - might be better to have seperate att in SequenceData for end of uncertain start\n                        let tempEnd = anno.seqDatum.end;\n                        if (anno.seqDatum.uncertainBegin) {\n                            tempBegin += 1;\n                        }\n                        if (anno.seqDatum.uncertainEnd) {\n                            tempEnd -= 1;\n                        }\n                        if (!this.expanded) {\n                            anno.certain.setAttribute(\"d\", this.getAnnotationPieSlicePath(tempBegin, tempEnd, anno));\n                        } else {\n                            anno.certain.setAttribute(\"d\", this.getAnnotationRectPath(tempBegin, tempEnd, anno));\n                        }\n                        anno.certain.setAttribute(\"stroke-width\", \"1\");\n                        // anno.certain.setAttribute(\"fill-opacity\", \"0.6\");\n                        anno.certain.name = text;\n                        anno.certain.onmouseover = toolTipFunc;\n                        this.annotationsSvgGroup.appendChild(anno.certain);\n                    }\n                    if (anno.seqDatum.uncertainEnd) {\n                        anno.fuzzyEnd = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_4__[\"svgns\"], \"path\");\n                        if (!this.expanded) {\n                            anno.fuzzyEnd.setAttribute(\"d\", this.getAnnotationPieSlicePath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n                        } else {\n                            anno.fuzzyEnd.setAttribute(\"d\", this.getAnnotationRectPath(anno.seqDatum.end, anno.seqDatum.uncertainEnd, anno));\n                        }\n                        anno.fuzzyEnd.setAttribute(\"stroke-width\", \"1\");\n                        anno.fuzzyEnd.setAttribute(\"fill-opacity\", \"0.6\");\n                        anno.fuzzyEnd.name = text;\n                        anno.fuzzyEnd.onmouseover = toolTipFunc;\n                        this.annotationsSvgGroup.appendChild(anno.fuzzyEnd);\n                    }\n                }\n            }\n        }\n    }\n};\n\nPolymer.stepsInArc = 5;\n\nPolymer.prototype.getAnnotationPieSlicePath = function (startRes, endRes, annotation, arc = true) {\n    const radius = this.getSymbolRadius();\n    let top, bottom, rungHeight;\n    const rung = annotation.rung;\n    if (rung === -1) {\n        bottom = 0;\n        top = radius;\n    } else {\n        rungHeight = radius / this.rungCount;\n        bottom = (rung * rungHeight);\n        top = bottom + rungHeight;\n    }\n\n    let startAngle, endAngle;\n    if (startRes === \"n-n\") {\n        startAngle = -20;\n        endAngle = 0;\n    } else if (endRes === \"c-c\") {\n        startAngle = 0;\n        endAngle = +20;\n    } else {\n        startAngle = ((startRes - 1) / this.size) * 360;\n        endAngle = ((endRes - 1) / this.size) * 360;\n    }\n\n    let largeArch = 0;\n    if ((endAngle - startAngle) > 180 || (endAngle === startAngle)) {\n        largeArch = 1;\n    }\n\n    const p1 = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, bottom], [0, 0], startAngle - 180);\n    const p2 = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, top], [0, 0], startAngle - 180);\n    const p3 = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, top], [0, 0], endAngle - 180);\n    const p4 = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, bottom], [0, 0], endAngle - 180);\n\n    //'left' edge\n    let path = \"M\" + p1[0] + \",\" + p1[1] + \" L\" + p2[0] + \",\" + p2[1];\n\n    //top edge\n    if (arc) {\n        path += \" A\" + top + \",\" + top + \" 0 \" + largeArch + \" 1 \" + p3[0] + \",\" + p3[1];\n    } else {\n        //path += \" L\" + p3[0] + \",\" + p3[1];\n        for (let sia = 0; sia <= Polymer.stepsInArc; sia++) {\n            const angle = startAngle + ((endAngle - startAngle) / Polymer.stepsInArc) * sia;\n            const p = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, top], [0, 0], angle - 180);\n            path += \" L\" + p[0] + \",\" + p[1];\n        }\n    }\n\n    //bottom edge\n    if (arc) {\n        //'right' edge\n        path += \" L\" + p4[0] + \",\" + p4[1];\n        //bottom edge\n        path += \" A\" + bottom + \",\" + bottom + \" 0 \" + largeArch + \" 0 \" + p1[0] + \",\" + p1[1];\n    } else {\n        // path += \" L\" + p1[0] + \",\" + p1[1];\n        //bottom edge\n        for (let sia = Polymer.stepsInArc; sia >= 0; sia--) {\n            const angle = startAngle + ((endAngle - startAngle) / Polymer.stepsInArc) * sia;\n            const p = Object(_config__WEBPACK_IMPORTED_MODULE_4__[\"rotatePointAboutPoint\"])([0, bottom], [0, 0], angle - 180);\n            path += \" L\" + p[0] + \",\" + p[1];\n        }\n    }\n\n    //close\n    path += \" Z\";\n\n    return path;\n};\n\nPolymer.prototype.getAnnotationRectPath = function (startRes, endRes, annotation) {\n    //domain as rectangle path\n    let top, bottom, rungHeight;\n    const rung = annotation.rung;\n    if (rung === -1) {\n        bottom = Polymer.STICKHEIGHT / 2;\n        top = -Polymer.STICKHEIGHT / 2;\n    } else {\n        rungHeight = Polymer.STICKHEIGHT / this.rungCount;//annotationTypes.length;\n        top = (-Polymer.STICKHEIGHT / 2) + (rung * rungHeight);\n        bottom = top + rungHeight;\n    }\n    let annoX, annoSize, annoLength;\n    if (startRes === \"n-n\") {\n        annoX = this.getResXWithStickZoom(0.5) - 20;\n        annoLength = 20;\n    } else if (endRes === \"c-c\") {\n        annoX = this.getResXWithStickZoom(this.size + 0.5);\n        annoLength = 20;\n    } else {\n        annoX = this.getResXWithStickZoom(startRes - 0.5);\n        annoSize = (1 + (endRes - startRes));\n        annoLength = annoSize * this.stickZoom;\n    }\n\n    //'left' edge\n    let path = \"M\" + annoX + \",\" + bottom + \" L\" + annoX + \",\" + top;\n    //top edge\n    for (let sia = 0; sia <= Polymer.stepsInArc; sia++) {\n        const step = annoX + (annoLength * (sia / Polymer.stepsInArc));\n        path += \" L \" + step + \",\" + top;\n    }\n    //'right' edge - no need\n    // bottom edge\n    for (let sia = Polymer.stepsInArc; sia >= 0; sia--) {\n        const step = annoX + (annoLength * (sia / Polymer.stepsInArc));\n        path += \" L \" + step + \",\" + bottom;\n    }\n    //close\n    path += \" Z\";\n\n    return path;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvcG9seW1lci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvcG9seW1lci5qcz8wNGY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiOyAvLyB0cmFuc2l0aW9ucyBhbmQgb3RoZXIgc3R1ZmZcbmltcG9ydCB7SW50ZXJhY3RvciwgdHJpZ30gZnJvbSBcIi4vaW50ZXJhY3RvclwiO1xuaW1wb3J0IHtBbm5vdGF0aW9ufSBmcm9tIFwiLi9hbm5vdGF0aW9uXCI7XG5pbXBvcnQge1NlcXVlbmNlRGF0dW19IGZyb20gXCIuLi9zZXF1ZW5jZS1kYXR1bVwiO1xuaW1wb3J0IHtzdmducywgTEFCRUxfWSwgcm90YXRlUG9pbnRBYm91dFBvaW50fSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cblBvbHltZXIuU1RJQ0tIRUlHSFQgPSAyMDsgLy9oZWlnaHQgb2Ygc3RpY2sgaW4gcGl4ZWxzXG5Qb2x5bWVyLk1BWFNJWkUgPSAwOyAvLyByZXNpZHVlIGNvdW50IG9mIGxvbmdlc3Qgc2VxdWVuY2VcblBvbHltZXIudHJhbnNpdGlvblRpbWUgPSA2NTA7XG5cbmV4cG9ydCBmdW5jdGlvbiBQb2x5bWVyKCkge1xufVxuXG5Qb2x5bWVyLnByb3RvdHlwZSA9IG5ldyBJbnRlcmFjdG9yKCk7XG5cblBvbHltZXIucHJvdG90eXBlLmdldFN5bWJvbFJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gMTU7XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5zaG93SGlnaGxpZ2h0ID0gZnVuY3Rpb24gKHNob3cpIHtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utb3BhY2l0eVwiLCBzaG93ID8gXCIxXCIgOiBcIjBcIik7XG59O1xuXG5Qb2x5bWVyLm1pblhEaXN0ID0gMzA7XG5Qb2x5bWVyLnByb3RvdHlwZS5zZXRTdGlja1NjYWxlID0gZnVuY3Rpb24gKHNjYWxlLCBzdmdQKSB7XG4gICAgY29uc3Qgb2xkU2NhbGUgPSB0aGlzLnN0aWNrWm9vbTtcblxuICAgIC8vZGlzdCBmcm9tIGNlbnRyZVxuICAgIGNvbnN0IGR4ID0gKHRoaXMuaXggLSBzdmdQLngpO1xuICAgIGNvbnN0IGR5ID0gKHRoaXMuaXkgLSBzdmdQLnkpO1xuXG4gICAgLy8gbmV3IGRpc3QgZnJvbSBjZW50cmVcbiAgICBjb25zdCBueCA9IGR4ICogc2NhbGUgLyBvbGRTY2FsZTtcbiAgICBjb25zdCBueSA9IGR5ICogc2NhbGUgLyBvbGRTY2FsZTtcblxuICAgIC8vcmVxdWlyZWQgY2hhbmdlXG4gICAgY29uc3QgcnggPSBueCAtIGR4O1xuICAgIGxldCByeSA9IG55IC0gZHk7XG5cbiAgICBpZiAodGhpcy5yb3RhdGlvbiA9PT0gMCB8fCB0aGlzLnJvdGF0aW9uID09PSAxODApIHtcbiAgICAgICAgcnkgPSAwO1xuICAgIH1cblxuICAgIC8vbmV3IHBvc1xuICAgIGNvbnN0IHggPSB0aGlzLml4ICsgcng7XG4gICAgY29uc3QgeSA9IHRoaXMuaXkgKyByeTtcblxuICAgIHRoaXMuc3RpY2tab29tID0gc2NhbGU7XG4gICAgdGhpcy5zY2FsZSgpO1xuICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XG4gICAgdGhpcy5zZXRBbGxMaW5rQ29vcmRpbmF0ZXMoKTtcbn07XG5cblBvbHltZXIucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHByb3RMZW5ndGggPSAodGhpcy5zaXplKSAqIHRoaXMuc3RpY2tab29tO1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsVHJhbnNmb3JtID0gZDMudHJhbnNmb3JtKHRoaXMubGFiZWxTVkcuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKTtcbiAgICAgICAgY29uc3QgayA9IHRoaXMuYXBwLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KCkucm90YXRlKGxhYmVsVHJhbnNmb3JtLnJvdGF0ZSlcbiAgICAgICAgICAgIC50cmFuc2xhdGUoKC0oKCh0aGlzLnNpemUgLyAyKSAqIHRoaXMuc3RpY2tab29tKSArICh0aGlzLm5UZXJtaW51c0ZlYXR1cmUgPyAyNSA6IDEwKSkpLCBMQUJFTF9ZKTsgLy8uc2NhbGUoeikudHJhbnNsYXRlKC1jLngsIC1jLnkpO1xuICAgICAgICB0aGlzLmxhYmVsU1ZHLnRyYW5zZm9ybS5iYXNlVmFsLmluaXRpYWxpemUodGhpcy5hcHAuc3ZnRWxlbWVudC5jcmVhdGVTVkdUcmFuc2Zvcm1Gcm9tTWF0cml4KGspKTtcbiAgICAgICAgdGhpcy51cGRhdGVBbm5vdGF0aW9uUmVjdGFuZ2xlc05vVHJhbnNpdGlvbigpO1xuXG4gICAgICAgIGQzLnNlbGVjdCh0aGlzLmJhY2tncm91bmQpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHByb3RMZW5ndGgpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgdGhpcy5nZXRSZXNYV2l0aFN0aWNrWm9vbSgwLjUpKTtcblxuICAgICAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBwcm90TGVuZ3RoKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuZ2V0UmVzWFdpdGhTdGlja1pvb20oMC41KSk7XG5cbiAgICAgICAgZDMuc2VsZWN0KHRoaXMuaGlnaGxpZ2h0KVxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBwcm90TGVuZ3RoICsgNSlcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmdldFJlc1hXaXRoU3RpY2tab29tKDAuNSkgLSAyLjUpO1xuXG4gICAgICAgIHRoaXMuc2V0U2NhbGVHcm91cCgpO1xuICAgIH1cbn07XG5cblBvbHltZXIucHJvdG90eXBlLnNldFNjYWxlR3JvdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51cHBlckdyb3VwLmFwcGVuZENoaWxkKHRoaXMudGlja3MpOyAvL3dpbGwgZG8gbm90aGluZyBpZiB0aGlzLnRpY2tzIGFscmVhZHkgYXBwZW5kZWQgdG8gdGhpcy51cHBlcmdyb3VwXG4gICAgdGhpcy50aWNrcy50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgdGhpcy5zY2FsZUxhYmVscyA9IFtdO1xuICAgIGNvbnN0IFNjYWxlVGlja3NQZXJMYWJlbCA9IDI7XG4gICAgbGV0IHRpY2sgPSAtMTtcbiAgICBjb25zdCBsYXN0VGlja1ggPSB0aGlzLmdldFJlc1hXaXRoU3RpY2tab29tKHRoaXMuc2l6ZSk7XG4gICAgZm9yIChsZXQgcmVzID0gMTsgcmVzIDw9IHRoaXMuc2l6ZTsgcmVzKyspIHtcbiAgICAgICAgaWYgKHJlcyA9PT0gMSB8fFxuICAgICAgICAgICAgKChyZXMgJSAxMDAgPT09IDApICYmICgyMDAgKiB0aGlzLnN0aWNrWm9vbSA+IFBvbHltZXIubWluWERpc3QpKSB8fFxuICAgICAgICAgICAgKChyZXMgJSAxMCA9PT0gMCkgJiYgKDIwICogdGhpcy5zdGlja1pvb20gPiBQb2x5bWVyLm1pblhEaXN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHRoaXMuZ2V0UmVzWFdpdGhTdGlja1pvb20ocmVzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0aWNrWm9vbSA+PSA4IHx8IHJlcyAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRpY2tBdCh0aGlzLCB0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aWNrID0gKHRpY2sgKyAxKSAlIFNjYWxlVGlja3NQZXJMYWJlbDtcbiAgICAgICAgICAgIC8vIGRvZXMgdGhpcyBvbmUgZ2V0IGEgbGFiZWw/XG4gICAgICAgICAgICBpZiAodGljayA9PT0gMCkgeyAvLyAmJiB0eCA+IDIwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eCArIFBvbHltZXIubWluWERpc3QpIDwgbGFzdFRpY2tYKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlTGFiZWxBdCh0aGlzLCByZXMsIHR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RpY2tab29tID49IDgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcUxhYmVsR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwiZ1wiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsR3JvdXAuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgdGhpcy5nZXRSZXNYV2l0aFN0aWNrWm9vbShyZXMpICsgXCIgXCIgKyAwICsgXCIpXCIpO1xuICAgICAgICAgICAgY29uc3Qgc2VxTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwidGV4dFwiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLmNsYXNzTGlzdC5hZGQoXCJsYWJlbFwiLCBcInNlcXVlbmNlXCIpO1xuICAgICAgICAgICAgLy9jc3M/XG4gICAgICAgICAgICBzZXFMYWJlbC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgIHNlcUxhYmVsLnNldEF0dHJpYnV0ZShcInlcIiwgXCIzXCIpO1xuICAgICAgICAgICAgc2VxTGFiZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5zZXF1ZW5jZVtyZXMgLSAxXSkpO1xuICAgICAgICAgICAgc2VxTGFiZWxHcm91cC5hcHBlbmRDaGlsZChzZXFMYWJlbCk7XG4gICAgICAgICAgICB0aGlzLnNjYWxlTGFiZWxzLnB1c2goc2VxTGFiZWwpO1xuICAgICAgICAgICAgdGhpcy50aWNrcy5hcHBlbmRDaGlsZChzZXFMYWJlbEdyb3VwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY2FsZUxhYmVsQXQodGhpcywgdGhpcy5zaXplLCBsYXN0VGlja1gpO1xuICAgIGlmICh0aGlzLnN0aWNrWm9vbSA+PSA4KSB7XG4gICAgICAgIHRpY2tBdCh0aGlzLCBsYXN0VGlja1gpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlTGFiZWxBdChzZWxmLCB0ZXh0LCB0aWNrWCkge1xuICAgICAgICBjb25zdCBzY2FsZUxhYmVsR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwiZ1wiKTtcbiAgICAgICAgc2NhbGVMYWJlbEdyb3VwLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHRpY2tYICsgXCIgXCIgKyAwICsgXCIpXCIpO1xuICAgICAgICBjb25zdCBzY2FsZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInRleHRcIik7XG4gICAgICAgIHNjYWxlTGFiZWwuY2xhc3NMaXN0LmFkZChcImxhYmVsXCIsIFwic2NhbGUtbGFiZWxcIik7XG4gICAgICAgIHNjYWxlTGFiZWwuc2V0QXR0cmlidXRlKFwieFwiLCBcIjBcIik7XG4gICAgICAgIHNjYWxlTGFiZWwuc2V0QXR0cmlidXRlKFwieVwiLCBQb2x5bWVyLlNUSUNLSEVJR0hUICsgNCk7XG4gICAgICAgIHNjYWxlTGFiZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuICAgICAgICBzY2FsZUxhYmVsR3JvdXAuYXBwZW5kQ2hpbGQoc2NhbGVMYWJlbCk7XG4gICAgICAgIHNlbGYuc2NhbGVMYWJlbHMucHVzaChzY2FsZUxhYmVsKTtcbiAgICAgICAgc2VsZi50aWNrcy5hcHBlbmRDaGlsZChzY2FsZUxhYmVsR3JvdXApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRpY2tBdChzZWxmLCB0aWNrWCkge1xuICAgICAgICBjb25zdCB0aWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImxpbmVcIik7XG4gICAgICAgIHRpY2suY2xhc3NMaXN0LmFkZChcInRpY2tcIik7XG4gICAgICAgIHRpY2suc2V0QXR0cmlidXRlKFwieDFcIiwgdGlja1gpO1xuICAgICAgICB0aWNrLnNldEF0dHJpYnV0ZShcInkxXCIsIFwiNVwiKTtcbiAgICAgICAgdGljay5zZXRBdHRyaWJ1dGUoXCJ4MlwiLCB0aWNrWCk7XG4gICAgICAgIHRpY2suc2V0QXR0cmlidXRlKFwieTJcIiwgXCIxMFwiKTtcbiAgICAgICAgc2VsZi50aWNrcy5hcHBlbmRDaGlsZCh0aWNrKTtcbiAgICB9XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5zZXRGb3JtID0gZnVuY3Rpb24gKGZvcm0sIHN2Z1ApIHtcbiAgICBpZiAodGhpcy5idXN5ICE9PSB0cnVlKSB7XG4gICAgICAgIGlmIChmb3JtID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnRvU3RpY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9DaXJjbGUoc3ZnUCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS50b0NpcmNsZSA9IGZ1bmN0aW9uIChzdmdQKSB7XG4gICAgLy9zdmdQID0gbnVsbDsvLyB0ZW1wIGhhY2sgLSB5b3UgY2FuIHVuY29tbWVudCB0aGlzIGlzIHlvdSBleHBlcmllbmNlIHRoaW5ncyAnZmx5aW5nIG9mZiBzY3JlZW4nXG4gICAgdGhpcy5idXN5ID0gdHJ1ZTtcblxuICAgIGNvbnN0IHIgPSB0aGlzLmdldFN5bWJvbFJhZGl1cygpO1xuICAgIC8vXG4gICAgZDMuc2VsZWN0KHRoaXMuYmFja2dyb3VuZCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtcikuYXR0cihcInlcIiwgLXIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgciAqIDIpLmF0dHIoXCJoZWlnaHRcIiwgciAqIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgcikuYXR0cihcInJ5XCIsIHIpXG4gICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKS50cmFuc2l0aW9uKClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIC1yKS5hdHRyKFwieVwiLCAtcilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCByICogMikuYXR0cihcImhlaWdodFwiLCByICogMilcbiAgICAgICAgLmF0dHIoXCJyeFwiLCByKS5hdHRyKFwicnlcIiwgcilcbiAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuICAgIGQzLnNlbGVjdCh0aGlzLmhpZ2hsaWdodCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgKHIgKiAyKSArIDUpLmF0dHIoXCJoZWlnaHRcIiwgKHIgKiAyKSArIDUpXG4gICAgICAgIC5hdHRyKFwieFwiLCAtciAtIDIuNSkuYXR0cihcInlcIiwgLXIgLSAyLjUpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgciArIDIuNSkuYXR0cihcInJ5XCIsIHIgKyAyLjUpXG4gICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcblxuICAgIGNvbnN0IHN0aWNrWm9vbUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUodGhpcy5zdGlja1pvb20sIDApO1xuICAgIC8vIHZhciByb3RhdGlvbkludGVycG9sID0gZDMuaW50ZXJwb2xhdGUoKHRoaXMucm90YXRpb24gPiAxODApID8gdGhpcy5yb3RhdGlvbiAtIDM2MCA6IHRoaXMucm90YXRpb24sIDApO1xuICAgIGNvbnN0IGxhYmVsVHJhbnNmb3JtID0gZDMudHJhbnNmb3JtKHRoaXMubGFiZWxTVkcuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKTtcbiAgICBjb25zdCBsYWJlbFN0YXJ0UG9pbnQgPSBsYWJlbFRyYW5zZm9ybS50cmFuc2xhdGVbMF07XG4gICAgY29uc3QgbGFiZWxUcmFuc2xhdGVJbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKGxhYmVsU3RhcnRQb2ludCwgLShyICsgNSkpO1xuXG4gICAgbGV0IHhJbnRlcnBvbCA9IG51bGwsXG4gICAgICAgIHlJbnRlcnBvbCA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBzdmdQICE9PSBcInVuZGVmaW5lZFwiICYmIHN2Z1AgIT09IG51bGwpIHtcbiAgICAgICAgeEludGVycG9sID0gZDMuaW50ZXJwb2xhdGUodGhpcy5peCwgc3ZnUC54KTtcbiAgICAgICAgeUludGVycG9sID0gZDMuaW50ZXJwb2xhdGUodGhpcy5peSwgc3ZnUC55KTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBkMy5zZWxlY3QodGhpcy50aWNrcykudHJhbnNpdGlvbigpLmF0dHIoXCJvcGFjaXR5XCIsIDApLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUgLyA0KVxuICAgICAgICAuZWFjaChcImVuZFwiLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCIqXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgZm9yIChsZXQgW2Fubm90YXRpb25UeXBlLCBhbm5vdGF0aW9uc10gb2YgdGhpcy5hbm5vdGF0aW9uU2V0cykge1xuICAgICAgICBpZiAodGhpcy5hcHAuYW5ub3RhdGlvblNldHNTaG93bi5nZXQoYW5ub3RhdGlvblR5cGUpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBhbm5vIG9mIGFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFubm8uZnV6enlTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdXp6eVN0YXJ0ID0gYW5uby5mdXp6eVN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlTdGFydCkudHJhbnNpdGlvbigpLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlUGF0aChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luLCBhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFubm8uY2VydGFpbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZXJ0YWluID0gYW5uby5jZXJ0YWluO1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoY2VydGFpbikudHJhbnNpdGlvbigpLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblBpZVNsaWNlUGF0aChhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vLnNlcURhdHVtLmVuZCwgYW5ubywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhbm5vLmZ1enp5RW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1enp5RW5kID0gYW5uby5mdXp6eUVuZDtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGZ1enp5RW5kKS50cmFuc2l0aW9uKCkuYXR0cihcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCwgYW5ubywgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsU3RpY2tab29tID0gdGhpcy5zdGlja1pvb207XG4gICAgY29uc3Qgb3JpZ2luYWxSb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG4gICAgY29uc3QgY3ViaWNJbk91dCA9IGQzLmVhc2UoXCJjdWJpYy1pbi1vdXRcIik7XG4gICAgZDMudGltZXIoZnVuY3Rpb24gKGVsYXBzZWQpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZShlbGFwc2VkIC8gUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGUoaW50ZXJwKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsVHJhbnNmb3JtID0gZDMudHJhbnNmb3JtKHNlbGYubGFiZWxTVkcuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKTtcbiAgICAgICAgY29uc3QgayA9IHNlbGYuYXBwLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KCkucm90YXRlKGxhYmVsVHJhbnNmb3JtLnJvdGF0ZSkudHJhbnNsYXRlKGxhYmVsVHJhbnNsYXRlSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKSwgTEFCRUxfWSk7IC8vLnNjYWxlKHopLnRyYW5zbGF0ZSgtYy54LCAtYy55KTtcbiAgICAgICAgc2VsZi5sYWJlbFNWRy50cmFuc2Zvcm0uYmFzZVZhbC5pbml0aWFsaXplKHNlbGYuYXBwLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHVHJhbnNmb3JtRnJvbU1hdHJpeChrKSk7XG4gICAgICAgIC8vflxuICAgICAgICBpZiAoeEludGVycG9sICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzZWxmLnNldFBvc2l0aW9uKHhJbnRlcnBvbChjdWJpY0luT3V0KGludGVycCkpLCB5SW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnN0aWNrWm9vbSA9IHN0aWNrWm9vbUludGVycG9sKGN1YmljSW5PdXQoaW50ZXJwKSk7XG4gICAgICAgIHNlbGYuc2V0QWxsTGlua0Nvb3JkaW5hdGVzKCk7XG5cbiAgICAgICAgaWYgKGludGVycCA9PT0gMSkgeyAvLyBmaW5pc2hlZCAtIHRpZHkgdXBcbiAgICAgICAgICAgIHNlbGYuZXhwYW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGYuY2hlY2tMaW5rcygpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBbYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25zXSBvZiBzZWxmLmFubm90YXRpb25TZXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYXBwLmFubm90YXRpb25TZXRzU2hvd24uZ2V0KGFubm90YXRpb25UeXBlKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhbm5vIG9mIGFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnV6enlTdGFydCA9IGFubm8uZnV6enlTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlTdGFydCkuYXR0cihcImRcIiwgc2VsZi5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4sIGFubm8uc2VxRGF0dW0uYmVnaW4sIGFubm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uY2VydGFpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlcnRhaW4gPSBhbm5vLmNlcnRhaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGNlcnRhaW4pLmF0dHIoXCJkXCIsIHNlbGYuZ2V0QW5ub3RhdGlvblBpZVNsaWNlUGF0aChhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vLnNlcURhdHVtLmVuZCwgYW5ubykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eUVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1enp5RW5kID0gYW5uby5mdXp6eUVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QoZnV6enlFbmQpLmF0dHIoXCJkXCIsIHNlbGYuZ2V0QW5ub3RhdGlvblBpZVNsaWNlUGF0aChhbm5vLnNlcURhdHVtLmVuZCwgYW5uby5zZXFEYXR1bS51bmNlcnRhaW5FbmQsIGFubm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5zdGlja1pvb20gPSBvcmlnaW5hbFN0aWNrWm9vbTtcbiAgICAgICAgICAgIHNlbGYucm90YXRpb24gPSBvcmlnaW5hbFJvdGF0aW9uO1xuICAgICAgICAgICAgc2VsZi5idXN5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnAgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUG9seW1lci5wcm90b3R5cGUudG9TdGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmJ1c3kgPSB0cnVlO1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgcHJvdExlbmd0aCA9IHRoaXMuc2l6ZSAqIHRoaXMuc3RpY2tab29tO1xuICAgIGNvbnN0IHIgPSB0aGlzLmdldFN5bWJvbFJhZGl1cygpO1xuXG4gICAgLy9kMy5pbnRlcnBvbGF0ZSBwYXRocywgdXBkYXRlIHRoZW0gYWxvbmcgd2l0aCBldmVyeXRoaW5nIGVsc2VcblxuICAgIGNvbnN0IGxlbmd0aEludGVycG9sID0gZDMuaW50ZXJwb2xhdGUoKDIgKiByKSwgcHJvdExlbmd0aCk7XG4gICAgY29uc3Qgc3RpY2tab29tSW50ZXJwb2wgPSBkMy5pbnRlcnBvbGF0ZSgwLCB0aGlzLnN0aWNrWm9vbSk7XG4gICAgY29uc3QgbGFiZWxUcmFuc2xhdGVJbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKC0ociArIDUpLCAtKCgodGhpcy5zaXplIC8gMikgKiB0aGlzLnN0aWNrWm9vbSkgKyAodGhpcy5uVGVybWludXNGZWF0dXJlID8gMjUgOiAxMCkpKTtcblxuICAgIGNvbnN0IG9yaWdTdGlja1pvb20gPSB0aGlzLnN0aWNrWm9vbTtcbiAgICB0aGlzLnN0aWNrWm9vbSA9IDA7XG4gICAgdGhpcy5jaGVja0xpbmtzKCk7XG4gICAgdGhpcy5zdGlja1pvb20gPSBvcmlnU3RpY2tab29tO1xuXG4gICAgZDMuc2VsZWN0KHRoaXMuYmFja2dyb3VuZCkudHJhbnNpdGlvbigpIC8vLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAxKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBQb2x5bWVyLlNUSUNLSEVJR0hUKVxuICAgICAgICAuYXR0cihcInlcIiwgLVBvbHltZXIuU1RJQ0tIRUlHSFQgLyAyKVxuICAgICAgICAuYXR0cihcInJ4XCIsIDApLmF0dHIoXCJyeVwiLCAwKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5vdXRsaW5lKS50cmFuc2l0aW9uKCkgLy8uYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApXG4gICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcblxuICAgIGQzLnNlbGVjdCh0aGlzLmhpZ2hsaWdodCkudHJhbnNpdGlvbigpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcHJvdExlbmd0aCArIDUpLmF0dHIoXCJoZWlnaHRcIiwgUG9seW1lci5TVElDS0hFSUdIVCArIDUpXG4gICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmdldFJlc1hXaXRoU3RpY2tab29tKDAuNSkgLSAyLjUpLmF0dHIoXCJ5XCIsICgtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpIC0gMi41KVxuICAgICAgICAuYXR0cihcInJ4XCIsIDApLmF0dHIoXCJyeVwiLCAwKVxuICAgICAgICAuZHVyYXRpb24oUG9seW1lci50cmFuc2l0aW9uVGltZSk7XG5cbiAgICBmb3IgKGxldCBbYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25zXSBvZiB0aGlzLmFubm90YXRpb25TZXRzKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC5hbm5vdGF0aW9uU2V0c1Nob3duLmdldChhbm5vdGF0aW9uVHlwZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGFubm8gb2YgYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1enp5U3RhcnQgPSBhbm5vLmZ1enp5U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25QaWVTbGljZVBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbiwgYW5ubywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGZ1enp5U3RhcnQpLnRyYW5zaXRpb24oKS5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luLCBhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFubm8uY2VydGFpbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZXJ0YWluID0gYW5uby5jZXJ0YWluO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEJlZ2luID0gYW5uby5zZXFEYXR1bS5iZWdpbjsgLy90b2RvIC0gbWlnaHQgYmUgYmV0dGVyIHRvIGhhdmUgc2VwZXJhdGUgYXR0IGluIFNlcXVlbmNlRGF0YSBmb3IgZW5kIG9mIHVuY2VydGFpbiBzdGFydFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEVuZCA9IGFubm8uc2VxRGF0dW0uZW5kO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEJlZ2luICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW5kIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjZXJ0YWluLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKHRlbXBCZWdpbiwgdGVtcEVuZCwgYW5ubywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGNlcnRhaW4pLnRyYW5zaXRpb24oKS5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aCh0ZW1wQmVnaW4sIHRlbXBFbmQsIGFubm8pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKFBvbHltZXIudHJhbnNpdGlvblRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eUVuZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdXp6eUVuZCA9IGFubm8uZnV6enlFbmQ7XG4gICAgICAgICAgICAgICAgICAgIGZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCwgYW5ubywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KGZ1enp5RW5kKS50cmFuc2l0aW9uKCkuYXR0cihcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS5lbmQsIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kLCBhbm5vKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBjdWJpY0luT3V0ID0gZDMuZWFzZShcImN1YmljLWluLW91dFwiKTtcbiAgICBkMy50aW1lcihmdW5jdGlvbiAoZWxhcHNlZCkge1xuICAgICAgICByZXR1cm4gdXBkYXRlKGVsYXBzZWQgLyBQb2x5bWVyLnRyYW5zaXRpb25UaW1lKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZShpbnRlcnApIHtcbiAgICAgICAgY29uc3QgbGFiZWxUcmFuc2Zvcm0gPSBkMy50cmFuc2Zvcm0oc2VsZi5sYWJlbFNWRy5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpO1xuICAgICAgICBjb25zdCBrID0gc2VsZi5hcHAuc3ZnRWxlbWVudC5jcmVhdGVTVkdNYXRyaXgoKS5yb3RhdGUobGFiZWxUcmFuc2Zvcm0ucm90YXRlKS50cmFuc2xhdGUobGFiZWxUcmFuc2xhdGVJbnRlcnBvbChjdWJpY0luT3V0KGludGVycCkpLCBMQUJFTF9ZKTsgLy8uc2NhbGUoeikudHJhbnNsYXRlKC1jLngsIC1jLnkpO1xuICAgICAgICBzZWxmLmxhYmVsU1ZHLnRyYW5zZm9ybS5iYXNlVmFsLmluaXRpYWxpemUoc2VsZi5hcHAuc3ZnRWxlbWVudC5jcmVhdGVTVkdUcmFuc2Zvcm1Gcm9tTWF0cml4KGspKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50TGVuZ3RoID0gbGVuZ3RoSW50ZXJwb2woY3ViaWNJbk91dChpbnRlcnApKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGYuaGlnaGxpZ2h0KS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICAgICAgZDMuc2VsZWN0KHNlbGYub3V0bGluZSkuYXR0cihcIndpZHRoXCIsIGN1cnJlbnRMZW5ndGgpLmF0dHIoXCJ4XCIsIC0oY3VycmVudExlbmd0aCAvIDIpICsgKDAuNSAqIHNlbGYuc3RpY2tab29tKSk7XG4gICAgICAgIGQzLnNlbGVjdChzZWxmLmJhY2tncm91bmQpLmF0dHIoXCJ3aWR0aFwiLCBjdXJyZW50TGVuZ3RoKS5hdHRyKFwieFwiLCAtKGN1cnJlbnRMZW5ndGggLyAyKSArICgwLjUgKiBzZWxmLnN0aWNrWm9vbSkpO1xuICAgICAgICBzZWxmLnN0aWNrWm9vbSA9IHN0aWNrWm9vbUludGVycG9sKGN1YmljSW5PdXQoaW50ZXJwKSk7XG4gICAgICAgIHNlbGYuc2V0QWxsTGlua0Nvb3JkaW5hdGVzKCk7XG5cbiAgICAgICAgaWYgKGludGVycCA9PT0gMSkgeyAvLyBmaW5pc2hlZCAtIHRpZHkgdXBcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQW5ub3RhdGlvblJlY3RhbmdsZXNOb1RyYW5zaXRpb24oKTtcbiAgICAgICAgICAgIHNlbGYuYnVzeSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW50ZXJwID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZSgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGQzLnNlbGVjdCh0aGlzLnRpY2tzKS5hdHRyKFwib3BhY2l0eVwiLCAwKTtcbiAgICB0aGlzLnNldFNjYWxlR3JvdXAoKTtcbiAgICBkMy5zZWxlY3QodGhpcy50aWNrcykudHJhbnNpdGlvbigpLmF0dHIoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5kZWxheShQb2x5bWVyLnRyYW5zaXRpb25UaW1lICogMC44KS5kdXJhdGlvbihQb2x5bWVyLnRyYW5zaXRpb25UaW1lIC8gMik7XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS50b1N0aWNrTm9UcmFuc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYnVzeSA9IHRydWU7XG4gICAgdGhpcy5leHBhbmRlZCA9IHRydWU7XG5cbiAgICBjb25zdCBwcm90TGVuZ3RoID0gdGhpcy5zaXplICogdGhpcy5zdGlja1pvb207XG4gICAgY29uc3QgciA9IHRoaXMuZ2V0U3ltYm9sUmFkaXVzKCk7XG5cbiAgICBjb25zdCBsZW5ndGhJbnRlcnBvbCA9IGQzLmludGVycG9sYXRlKCgyICogciksIHByb3RMZW5ndGgpO1xuICAgIGNvbnN0IGxhYmVsVHJhbnNsYXRlSW50ZXJwb2wgPSBkMy5pbnRlcnBvbGF0ZSgtKHIgKyA1KSwgLSgoKHRoaXMuc2l6ZSAvIDIpICogdGhpcy5zdGlja1pvb20pICsgKHRoaXMublRlcm1pbnVzRmVhdHVyZSA/IDI1IDogMTApKSk7XG5cbiAgICB0aGlzLmNoZWNrTGlua3MoKTtcblxuICAgIGQzLnNlbGVjdCh0aGlzLmJhY2tncm91bmQpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIFBvbHltZXIuU1RJQ0tIRUlHSFQpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpXG4gICAgICAgIC5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApO1xuXG4gICAgZDMuc2VsZWN0KHRoaXMub3V0bGluZSlcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgUG9seW1lci5TVElDS0hFSUdIVClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIC1Qb2x5bWVyLlNUSUNLSEVJR0hUIC8gMilcbiAgICAgICAgLmF0dHIoXCJyeFwiLCAwKS5hdHRyKFwicnlcIiwgMCk7XG5cbiAgICBkMy5zZWxlY3QodGhpcy5oaWdobGlnaHQpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgcHJvdExlbmd0aCArIDUpLmF0dHIoXCJoZWlnaHRcIiwgUG9seW1lci5TVElDS0hFSUdIVCArIDUpXG4gICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmdldFJlc1hXaXRoU3RpY2tab29tKDAuNSkgLSAyLjUpLmF0dHIoXCJ5XCIsICgtUG9seW1lci5TVElDS0hFSUdIVCAvIDIpIC0gMi41KVxuICAgICAgICAuYXR0cihcInJ4XCIsIDApLmF0dHIoXCJyeVwiLCAwKTtcblxuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBzZWxmLnVwZGF0ZUFubm90YXRpb25SZWN0YW5nbGVzTm9UcmFuc2l0aW9uKCk7XG5cbiAgICBjb25zdCBsYWJlbFRyYW5zZm9ybSA9IGQzLnRyYW5zZm9ybShzZWxmLmxhYmVsU1ZHLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSk7XG4gICAgY29uc3QgayA9IHNlbGYuYXBwLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHTWF0cml4KCkucm90YXRlKGxhYmVsVHJhbnNmb3JtLnJvdGF0ZSkudHJhbnNsYXRlKGxhYmVsVHJhbnNsYXRlSW50ZXJwb2woMSksIExBQkVMX1kpOyAvLy5zY2FsZSh6KS50cmFuc2xhdGUoLWMueCwgLWMueSk7XG4gICAgc2VsZi5sYWJlbFNWRy50cmFuc2Zvcm0uYmFzZVZhbC5pbml0aWFsaXplKHNlbGYuYXBwLnN2Z0VsZW1lbnQuY3JlYXRlU1ZHVHJhbnNmb3JtRnJvbU1hdHJpeChrKSk7XG5cbiAgICBjb25zdCBjdXJyZW50TGVuZ3RoID0gbGVuZ3RoSW50ZXJwb2woMSk7XG4gICAgZDMuc2VsZWN0KHNlbGYuaGlnaGxpZ2h0KS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICBkMy5zZWxlY3Qoc2VsZi5vdXRsaW5lKS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICBkMy5zZWxlY3Qoc2VsZi5iYWNrZ3JvdW5kKS5hdHRyKFwid2lkdGhcIiwgY3VycmVudExlbmd0aCkuYXR0cihcInhcIiwgLShjdXJyZW50TGVuZ3RoIC8gMikgKyAoMC41ICogc2VsZi5zdGlja1pvb20pKTtcbiAgICBzZWxmLnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuXG4gICAgdGhpcy5zZXRTY2FsZUdyb3VwKCk7XG4gICAgZDMuc2VsZWN0KHRoaXMudGlja3MpLmF0dHIoXCJvcGFjaXR5XCIsIDEpO1xuXG4gICAgc2VsZi5idXN5ID0gZmFsc2U7XG59O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS51cGRhdGVBbm5vdGF0aW9uUmVjdGFuZ2xlc05vVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGxldCBbYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25zXSBvZiB0aGlzLmFubm90YXRpb25TZXRzKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC5hbm5vdGF0aW9uU2V0c1Nob3duLmdldChhbm5vdGF0aW9uVHlwZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGFubm8gb2YgYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eVN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1enp5U3RhcnQgPSBhbm5vLmZ1enp5U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChmdXp6eVN0YXJ0KS5hdHRyKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luLCBhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbm5vLmNlcnRhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBCZWdpbiA9IGFubm8uc2VxRGF0dW0uYmVnaW47IC8vdG9kbyAtIG1pZ2h0IGJlIGJldHRlciB0byBoYXZlIHNlcGVyYXRlIGF0dCBpbiBTZXF1ZW5jZURhdGEgZm9yIGVuZCBvZiB1bmNlcnRhaW4gc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBFbmQgPSBhbm5vLnNlcURhdHVtLmVuZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluQmVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBCZWdpbiArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVuZCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbi5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKHRlbXBCZWdpbiwgdGVtcEVuZCwgYW5ubykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5uby5mdXp6eUVuZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmdXp6eUVuZCA9IGFubm8uZnV6enlFbmQ7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChmdXp6eUVuZCkgLyoudHJhbnNpdGlvbigpKi8gLmF0dHIoXCJkXCIsIHRoaXMuZ2V0QW5ub3RhdGlvblJlY3RQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCwgYW5ubykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cblBvbHltZXIucHJvdG90eXBlLmdldFJlc1hXaXRoU3RpY2tab29tID0gZnVuY3Rpb24gKHIpIHtcbiAgICAvLyBpZiAoaXNOYU4ocikpIHtcbiAgICAvLyAgICAgY29uc29sZS5lcnJvcihcIk5PVCBOVU1CRVJcIik7XG4gICAgLy8gfVxuICAgIGlmIChyID09PSBcIm4tblwiKSB7XG4gICAgICAgIHJldHVybiAoLXRoaXMuc2l6ZSAvIDIgKiB0aGlzLnN0aWNrWm9vbSkgLSAyMDtcbiAgICB9IGVsc2UgaWYgKHIgPT09IFwiYy1jXCIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNpemUgLyAyICogdGhpcy5zdGlja1pvb20pICsgMjA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChyIC0gKHRoaXMuc2l6ZSAvIDIpKSAqIHRoaXMuc3RpY2tab29tO1xuICAgIH1cbn07XG5cbi8vY2FsY3VsYXRlIHRoZSBjb29yZGluYXRlcyBvZiBhIHJlc2lkdWUgKHJlbGF0aXZlIHRvIHRoaXMuYXBwLmNvbnRhaW5lcilcblBvbHltZXIucHJvdG90eXBlLmdldFJlc2lkdWVDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChyLCB5T2ZmKSB7XG4gICAgaWYgKHR5cGVvZiByID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFUlJPUjogcmVzaWR1ZSBudW1iZXIgaXMgdW5kZWZpbmVkXCIpO1xuICAgIH1cbiAgICBsZXQgeCA9IHRoaXMuZ2V0UmVzWFdpdGhTdGlja1pvb20ociAqIDEpOy8vICogdGhpcy5hcHAuejtcbiAgICAvLyBjb25zb2xlLmxvZyhcIioqKlwiLCB0aGlzLmFwcC56KTtcbiAgICAvLyBjb3ogcHJvdHMgZG9uJ3Qgc2NhbGUsIGRvbid0IG11bHRpcGxlIGJ5IGFwcC56XG4gICAgbGV0IHk7XG4gICAgaWYgKHggIT09IDApIHtcbiAgICAgICAgY29uc3QgbCA9IE1hdGguYWJzKHgpO1xuICAgICAgICBjb25zdCBhID0gTWF0aC5hY29zKHggLyBsKTtcbiAgICAgICAgY29uc3Qgcm90UmFkID0gKHRoaXMucm90YXRpb24gLyAzNjApICogTWF0aC5QSSAqIDI7XG4gICAgICAgIHggPSBsICogTWF0aC5jb3Mocm90UmFkICsgYSk7XG4gICAgICAgIHkgPSBsICogTWF0aC5zaW4ocm90UmFkICsgYSk7XG4gICAgICAgIGlmICh0eXBlb2YgeU9mZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgeCArPSB5T2ZmIC8qKiB0aGlzLmFwcC56Ki8gKiBNYXRoLmNvcyhyb3RSYWQgKyAoTWF0aC5QSSAvIDIpKTtcbiAgICAgICAgICAgIHkgKz0geU9mZiAvKiogdGhpcy5hcHAueiovICogTWF0aC5zaW4ocm90UmFkICsgKE1hdGguUEkgLyAyKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB5ID0geU9mZjtcbiAgICB9XG4gICAgeCArPSB0aGlzLml4O1xuICAgIHkgKz0gdGhpcy5peTtcbiAgICByZXR1cm4gW3gsIHldO1xufTtcblxuUG9seW1lci5wcm90b3R5cGUuY2xlYXJQb3NpdGlvbmFsRmVhdHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hbm5vdGF0aW9ucyA9IFtdO1xuICAgIHRoaXMuYW5ub3RhdGlvblR5cGVzID0gW107XG4gICAgdGhpcy5hbm5vdGF0aW9uc1N2Z0dyb3VwLnRleHRDb250ZW50ID0gXCJcIjtcbn07XG5cblBvbHltZXIucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uYWxGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGNvbnN0IHRvb2xUaXBGdW5jID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBjb25zdCBlbCA9IChldnQudGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KSA/IGV2dC50YXJnZXQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQgOiBldnQudGFyZ2V0O1xuICAgICAgICBzZWxmLmFwcC5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24oZXZ0KTtcbiAgICAgICAgc2VsZi5hcHAuc2V0VG9vbHRpcChlbC5uYW1lLCBlbC5nZXRBdHRyaWJ1dGUoXCJmaWxsXCIpKTtcbiAgICAgICAgc2VsZi5zaG93SGlnaGxpZ2h0KHRydWUpO1xuICAgIH07XG5cbiAgICBsZXQgciA9IC0xO1xuICAgIGNvbnN0IHJ1bmdzID0gW107XG5cbiAgICBmdW5jdGlvbiBvdmVybGFwcyhydW5nQXJyLCBhbm5vKSB7XG4gICAgICAgIGZvciAobGV0IGVhcmxpZXJBbm5vIG9mIHJ1bmdBcnIpIHtcbiAgICAgICAgICAgIGlmIChlYXJsaWVyQW5uby5zZXFEYXR1bS5vdmVybGFwcyhhbm5vLnNlcURhdHVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBbYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25zXSBvZiB0aGlzLmFubm90YXRpb25TZXRzKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC5hbm5vdGF0aW9uU2V0c1Nob3duLmdldChhbm5vdGF0aW9uVHlwZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChhbm5vdGF0aW9ucyAmJiBhbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcisrO1xuICAgICAgICAgICAgICAgIHJ1bmdzW3JdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkdXBDaGVjayA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIC8vbmVlZCB0byBzb3J0IGJ5IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICBjb25zdCBzb3J0ZWRBbm5vcyA9IEFycmF5LmZyb20oYW5ub3RhdGlvbnMudmFsdWVzKCkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lQSA9IGEuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZUIgPSBiLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lQSA8IG5hbWVCKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVBID4gbmFtZUIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG5hbWVzIG11c3QgYmUgZXF1YWxcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChsZXQgYW5ubyBvZiBzb3J0ZWRBbm5vcykge1xuICAgICAgICAgICAgICAgIGlmICghZHVwQ2hlY2suaGFzKGFubm8udG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVwQ2hlY2suYWRkKGFubm8udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbm5vLnNlcURhdHVtLnNlcXVlbmNlRGF0dW1TdHJpbmcgPT09IFwibi1uXCIgfHwgYW5uby5zZXFEYXR1bS5zZXF1ZW5jZURhdHVtU3RyaW5nID09PSBcImMtY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLnJ1bmcgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydW5nID0gcnVuZ3Nbcl07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxhcHMocnVuZywgYW5ubykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuZ3Nbcl0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5nID0gcnVuZ3Nbcl07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLnJ1bmcgPSByO1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVuZy5wdXNoKGFubm8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMucnVuZ0NvdW50ID0gciArIDE7XG5cbiAgICBmb3IgKGxldCBbYW5ub3RhdGlvblR5cGUsIGFubm90YXRpb25zXSBvZiB0aGlzLmFubm90YXRpb25TZXRzKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC5hbm5vdGF0aW9uU2V0c1Nob3duLmdldChhbm5vdGF0aW9uVHlwZSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cENoZWNrID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgZm9yIChsZXQgYW5ubyBvZiBhbm5vdGF0aW9ucy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmICghZHVwQ2hlY2suaGFzKGFubm8udG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVwQ2hlY2suYWRkKGFubm8udG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0ID0gYW5uby50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5uby5mdXp6eVN0YXJ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInBhdGhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25QaWVTbGljZVBhdGgoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbiwgYW5uby5zZXFEYXR1bS5iZWdpbiwgYW5ubykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aChhbm5vLnNlcURhdHVtLnVuY2VydGFpbkJlZ2luLCBhbm5vLnNlcURhdHVtLmJlZ2luLCBhbm5vKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMVwiKTsgLy8gdG9kbyAtIHNob3VsZCBiZSBjc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlTdGFydC5zZXRBdHRyaWJ1dGUoXCJmaWxsLW9wYWNpdHlcIiwgXCIwLjZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQubmFtZSA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5U3RhcnQub25tb3VzZW92ZXIgPSB0b29sVGlwRnVuYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cC5hcHBlbmRDaGlsZChhbm5vLmZ1enp5U3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0uYmVnaW4gJiYgYW5uby5zZXFEYXR1bS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJwYXRoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBCZWdpbiA9IGFubm8uc2VxRGF0dW0uYmVnaW47IC8vdG9kbyAtIG1pZ2h0IGJlIGJldHRlciB0byBoYXZlIHNlcGVyYXRlIGF0dCBpbiBTZXF1ZW5jZURhdGEgZm9yIGVuZCBvZiB1bmNlcnRhaW4gc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wRW5kID0gYW5uby5zZXFEYXR1bS5lbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5uby5zZXFEYXR1bS51bmNlcnRhaW5CZWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBCZWdpbiArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVuZCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKHRlbXBCZWdpbiwgdGVtcEVuZCwgYW5ubykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmNlcnRhaW4uc2V0QXR0cmlidXRlKFwiZFwiLCB0aGlzLmdldEFubm90YXRpb25SZWN0UGF0aCh0ZW1wQmVnaW4sIHRlbXBFbmQsIGFubm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbi5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5uby5jZXJ0YWluLnNldEF0dHJpYnV0ZShcImZpbGwtb3BhY2l0eVwiLCBcIjAuNlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbi5uYW1lID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uY2VydGFpbi5vbm1vdXNlb3ZlciA9IHRvb2xUaXBGdW5jO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uc1N2Z0dyb3VwLmFwcGVuZENoaWxkKGFubm8uY2VydGFpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInBhdGhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoKGFubm8uc2VxRGF0dW0uZW5kLCBhbm5vLnNlcURhdHVtLnVuY2VydGFpbkVuZCwgYW5ubykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImRcIiwgdGhpcy5nZXRBbm5vdGF0aW9uUmVjdFBhdGgoYW5uby5zZXFEYXR1bS5lbmQsIGFubm8uc2VxRGF0dW0udW5jZXJ0YWluRW5kLCBhbm5vKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLnNldEF0dHJpYnV0ZShcImZpbGwtb3BhY2l0eVwiLCBcIjAuNlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm8uZnV6enlFbmQubmFtZSA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbm5vLmZ1enp5RW5kLm9ubW91c2VvdmVyID0gdG9vbFRpcEZ1bmM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25zU3ZnR3JvdXAuYXBwZW5kQ2hpbGQoYW5uby5mdXp6eUVuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qb2x5bWVyLnN0ZXBzSW5BcmMgPSA1O1xuXG5Qb2x5bWVyLnByb3RvdHlwZS5nZXRBbm5vdGF0aW9uUGllU2xpY2VQYXRoID0gZnVuY3Rpb24gKHN0YXJ0UmVzLCBlbmRSZXMsIGFubm90YXRpb24sIGFyYyA9IHRydWUpIHtcbiAgICBjb25zdCByYWRpdXMgPSB0aGlzLmdldFN5bWJvbFJhZGl1cygpO1xuICAgIGxldCB0b3AsIGJvdHRvbSwgcnVuZ0hlaWdodDtcbiAgICBjb25zdCBydW5nID0gYW5ub3RhdGlvbi5ydW5nO1xuICAgIGlmIChydW5nID09PSAtMSkge1xuICAgICAgICBib3R0b20gPSAwO1xuICAgICAgICB0b3AgPSByYWRpdXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcnVuZ0hlaWdodCA9IHJhZGl1cyAvIHRoaXMucnVuZ0NvdW50O1xuICAgICAgICBib3R0b20gPSAocnVuZyAqIHJ1bmdIZWlnaHQpO1xuICAgICAgICB0b3AgPSBib3R0b20gKyBydW5nSGVpZ2h0O1xuICAgIH1cblxuICAgIGxldCBzdGFydEFuZ2xlLCBlbmRBbmdsZTtcbiAgICBpZiAoc3RhcnRSZXMgPT09IFwibi1uXCIpIHtcbiAgICAgICAgc3RhcnRBbmdsZSA9IC0yMDtcbiAgICAgICAgZW5kQW5nbGUgPSAwO1xuICAgIH0gZWxzZSBpZiAoZW5kUmVzID09PSBcImMtY1wiKSB7XG4gICAgICAgIHN0YXJ0QW5nbGUgPSAwO1xuICAgICAgICBlbmRBbmdsZSA9ICsyMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydEFuZ2xlID0gKChzdGFydFJlcyAtIDEpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICAgICAgZW5kQW5nbGUgPSAoKGVuZFJlcyAtIDEpIC8gdGhpcy5zaXplKSAqIDM2MDtcbiAgICB9XG5cbiAgICBsZXQgbGFyZ2VBcmNoID0gMDtcbiAgICBpZiAoKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgPiAxODAgfHwgKGVuZEFuZ2xlID09PSBzdGFydEFuZ2xlKSkge1xuICAgICAgICBsYXJnZUFyY2ggPSAxO1xuICAgIH1cblxuICAgIGNvbnN0IHAxID0gcm90YXRlUG9pbnRBYm91dFBvaW50KFswLCBib3R0b21dLCBbMCwgMF0sIHN0YXJ0QW5nbGUgLSAxODApO1xuICAgIGNvbnN0IHAyID0gcm90YXRlUG9pbnRBYm91dFBvaW50KFswLCB0b3BdLCBbMCwgMF0sIHN0YXJ0QW5nbGUgLSAxODApO1xuICAgIGNvbnN0IHAzID0gcm90YXRlUG9pbnRBYm91dFBvaW50KFswLCB0b3BdLCBbMCwgMF0sIGVuZEFuZ2xlIC0gMTgwKTtcbiAgICBjb25zdCBwNCA9IHJvdGF0ZVBvaW50QWJvdXRQb2ludChbMCwgYm90dG9tXSwgWzAsIDBdLCBlbmRBbmdsZSAtIDE4MCk7XG5cbiAgICAvLydsZWZ0JyBlZGdlXG4gICAgbGV0IHBhdGggPSBcIk1cIiArIHAxWzBdICsgXCIsXCIgKyBwMVsxXSArIFwiIExcIiArIHAyWzBdICsgXCIsXCIgKyBwMlsxXTtcblxuICAgIC8vdG9wIGVkZ2VcbiAgICBpZiAoYXJjKSB7XG4gICAgICAgIHBhdGggKz0gXCIgQVwiICsgdG9wICsgXCIsXCIgKyB0b3AgKyBcIiAwIFwiICsgbGFyZ2VBcmNoICsgXCIgMSBcIiArIHAzWzBdICsgXCIsXCIgKyBwM1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvL3BhdGggKz0gXCIgTFwiICsgcDNbMF0gKyBcIixcIiArIHAzWzFdO1xuICAgICAgICBmb3IgKGxldCBzaWEgPSAwOyBzaWEgPD0gUG9seW1lci5zdGVwc0luQXJjOyBzaWErKykge1xuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBzdGFydEFuZ2xlICsgKChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpIC8gUG9seW1lci5zdGVwc0luQXJjKSAqIHNpYTtcbiAgICAgICAgICAgIGNvbnN0IHAgPSByb3RhdGVQb2ludEFib3V0UG9pbnQoWzAsIHRvcF0sIFswLCAwXSwgYW5nbGUgLSAxODApO1xuICAgICAgICAgICAgcGF0aCArPSBcIiBMXCIgKyBwWzBdICsgXCIsXCIgKyBwWzFdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9ib3R0b20gZWRnZVxuICAgIGlmIChhcmMpIHtcbiAgICAgICAgLy8ncmlnaHQnIGVkZ2VcbiAgICAgICAgcGF0aCArPSBcIiBMXCIgKyBwNFswXSArIFwiLFwiICsgcDRbMV07XG4gICAgICAgIC8vYm90dG9tIGVkZ2VcbiAgICAgICAgcGF0aCArPSBcIiBBXCIgKyBib3R0b20gKyBcIixcIiArIGJvdHRvbSArIFwiIDAgXCIgKyBsYXJnZUFyY2ggKyBcIiAwIFwiICsgcDFbMF0gKyBcIixcIiArIHAxWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhdGggKz0gXCIgTFwiICsgcDFbMF0gKyBcIixcIiArIHAxWzFdO1xuICAgICAgICAvL2JvdHRvbSBlZGdlXG4gICAgICAgIGZvciAobGV0IHNpYSA9IFBvbHltZXIuc3RlcHNJbkFyYzsgc2lhID49IDA7IHNpYS0tKSB7XG4gICAgICAgICAgICBjb25zdCBhbmdsZSA9IHN0YXJ0QW5nbGUgKyAoKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgLyBQb2x5bWVyLnN0ZXBzSW5BcmMpICogc2lhO1xuICAgICAgICAgICAgY29uc3QgcCA9IHJvdGF0ZVBvaW50QWJvdXRQb2ludChbMCwgYm90dG9tXSwgWzAsIDBdLCBhbmdsZSAtIDE4MCk7XG4gICAgICAgICAgICBwYXRoICs9IFwiIExcIiArIHBbMF0gKyBcIixcIiArIHBbMV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2Nsb3NlXG4gICAgcGF0aCArPSBcIiBaXCI7XG5cbiAgICByZXR1cm4gcGF0aDtcbn07XG5cblBvbHltZXIucHJvdG90eXBlLmdldEFubm90YXRpb25SZWN0UGF0aCA9IGZ1bmN0aW9uIChzdGFydFJlcywgZW5kUmVzLCBhbm5vdGF0aW9uKSB7XG4gICAgLy9kb21haW4gYXMgcmVjdGFuZ2xlIHBhdGhcbiAgICBsZXQgdG9wLCBib3R0b20sIHJ1bmdIZWlnaHQ7XG4gICAgY29uc3QgcnVuZyA9IGFubm90YXRpb24ucnVuZztcbiAgICBpZiAocnVuZyA9PT0gLTEpIHtcbiAgICAgICAgYm90dG9tID0gUG9seW1lci5TVElDS0hFSUdIVCAvIDI7XG4gICAgICAgIHRvcCA9IC1Qb2x5bWVyLlNUSUNLSEVJR0hUIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBydW5nSGVpZ2h0ID0gUG9seW1lci5TVElDS0hFSUdIVCAvIHRoaXMucnVuZ0NvdW50Oy8vYW5ub3RhdGlvblR5cGVzLmxlbmd0aDtcbiAgICAgICAgdG9wID0gKC1Qb2x5bWVyLlNUSUNLSEVJR0hUIC8gMikgKyAocnVuZyAqIHJ1bmdIZWlnaHQpO1xuICAgICAgICBib3R0b20gPSB0b3AgKyBydW5nSGVpZ2h0O1xuICAgIH1cbiAgICBsZXQgYW5ub1gsIGFubm9TaXplLCBhbm5vTGVuZ3RoO1xuICAgIGlmIChzdGFydFJlcyA9PT0gXCJuLW5cIikge1xuICAgICAgICBhbm5vWCA9IHRoaXMuZ2V0UmVzWFdpdGhTdGlja1pvb20oMC41KSAtIDIwO1xuICAgICAgICBhbm5vTGVuZ3RoID0gMjA7XG4gICAgfSBlbHNlIGlmIChlbmRSZXMgPT09IFwiYy1jXCIpIHtcbiAgICAgICAgYW5ub1ggPSB0aGlzLmdldFJlc1hXaXRoU3RpY2tab29tKHRoaXMuc2l6ZSArIDAuNSk7XG4gICAgICAgIGFubm9MZW5ndGggPSAyMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhbm5vWCA9IHRoaXMuZ2V0UmVzWFdpdGhTdGlja1pvb20oc3RhcnRSZXMgLSAwLjUpO1xuICAgICAgICBhbm5vU2l6ZSA9ICgxICsgKGVuZFJlcyAtIHN0YXJ0UmVzKSk7XG4gICAgICAgIGFubm9MZW5ndGggPSBhbm5vU2l6ZSAqIHRoaXMuc3RpY2tab29tO1xuICAgIH1cblxuICAgIC8vJ2xlZnQnIGVkZ2VcbiAgICBsZXQgcGF0aCA9IFwiTVwiICsgYW5ub1ggKyBcIixcIiArIGJvdHRvbSArIFwiIExcIiArIGFubm9YICsgXCIsXCIgKyB0b3A7XG4gICAgLy90b3AgZWRnZVxuICAgIGZvciAobGV0IHNpYSA9IDA7IHNpYSA8PSBQb2x5bWVyLnN0ZXBzSW5BcmM7IHNpYSsrKSB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBhbm5vWCArIChhbm5vTGVuZ3RoICogKHNpYSAvIFBvbHltZXIuc3RlcHNJbkFyYykpO1xuICAgICAgICBwYXRoICs9IFwiIEwgXCIgKyBzdGVwICsgXCIsXCIgKyB0b3A7XG4gICAgfVxuICAgIC8vJ3JpZ2h0JyBlZGdlIC0gbm8gbmVlZFxuICAgIC8vIGJvdHRvbSBlZGdlXG4gICAgZm9yIChsZXQgc2lhID0gUG9seW1lci5zdGVwc0luQXJjOyBzaWEgPj0gMDsgc2lhLS0pIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGFubm9YICsgKGFubm9MZW5ndGggKiAoc2lhIC8gUG9seW1lci5zdGVwc0luQXJjKSk7XG4gICAgICAgIHBhdGggKz0gXCIgTCBcIiArIHN0ZXAgKyBcIixcIiArIGJvdHRvbTtcbiAgICB9XG4gICAgLy9jbG9zZVxuICAgIHBhdGggKz0gXCIgWlwiO1xuXG4gICAgcmV0dXJuIHBhdGg7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/polymer.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/protein.js":
/*!******************************************!*\
  !*** ./src/js/viz/interactor/protein.js ***!
  \******************************************/
/*! exports provided: Protein */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Protein\", function() { return Protein; });\n/* harmony import */ var _polymer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polymer */ \"./src/js/viz/interactor/polymer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n/* harmony import */ var _annotation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotation */ \"./src/js/viz/interactor/annotation.js\");\n/* harmony import */ var _sequence_datum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sequence-datum */ \"./src/js/viz/sequence-datum.js\");\n\n\n\n\n\nfunction Protein(id, /*App*/ app, json, name, sequence) {\n    this.init(id, app, json, name);\n    this.type = \"protein\"; // this isn't absolutely necessary, could do without it\n\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.rotation = 0;\n    this.stickZoom = 1;\n    // this.expanded = false; //done by init()\n    //make highlight\n    this.highlight = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    this.highlight.classList.add(\"highlight\", \"participant-highlight\");\n    this.upperGroup.appendChild(this.highlight);\n\n    //make background\n    //http://stackoverflow.com/questions/17437408/how-do-i-change-a-circle-to-a-square-using-d3\n    this.background = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    this.background.setAttribute(\"fill\", \"#FFFFFF\");\n    this.upperGroup.appendChild(this.background);\n    //create label - we will move this svg element around when protein form changes\n    this.initLabel();\n    //ticks (and amino acid letters)\n    this.ticks = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    //svg group for annotations\n    this.annotationsSvgGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.annotationsSvgGroup.setAttribute(\"opacity\", \"1\");\n    this.upperGroup.appendChild(this.annotationsSvgGroup);\n\n    //make outline\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"rect\");\n    // css...\n    this.outline.setAttribute(\"stroke\", \"black\");\n    this.outline.setAttribute(\"stroke-width\", \"1\");\n    this.outline.setAttribute(\"fill\", \"none\");\n    this.upperGroup.appendChild(this.outline);\n\n    this.scaleLabels = [];\n\n    //since form is set to 0, make this a circle, this stuff is equivalent to\n    // end result of toCircle but without transition\n    const r = this.getSymbolRadius();\n\n    this.outline.setAttribute(\"x\", -r);\n    this.outline.setAttribute(\"y\", -r);\n    this.outline.setAttribute(\"width\", r * 2);\n    this.outline.setAttribute(\"height\", r * 2);\n    this.outline.setAttribute(\"rx\", r);\n    this.outline.setAttribute(\"ry\", r);\n\n    this.background.setAttribute(\"x\", -r);\n    this.background.setAttribute(\"y\", -r);\n    this.background.setAttribute(\"width\", r * 2);\n    this.background.setAttribute(\"height\", r * 2);\n    this.background.setAttribute(\"rx\", r);\n    this.background.setAttribute(\"ry\", r);\n\n    // this.annotationsSvgGroup.setAttribute(\"transform\", \"scale(1, 1)\");\n\n    this.highlight.setAttribute(\"width\", (r * 2) + 5);\n    this.highlight.setAttribute(\"height\", (r * 2) + 5);\n    this.highlight.setAttribute(\"x\", -r - 2.5);\n    this.highlight.setAttribute(\"y\", -r - 2.5);\n    this.highlight.setAttribute(\"rx\", r + 2.5);\n    this.highlight.setAttribute(\"ry\", r + 2.5);\n    this.highlight.setAttribute(\"stroke-opacity\", \"0\");\n\n    this.labelSVG.setAttribute(\"transform\", \"translate(\" + (-(r + 5)) + \",\" + \"-5)\");\n\n    this.initListeners();\n\n    const self = this;\n    Object.defineProperty(this, \"height\", {\n        get: function height() {\n            return self.expanded ? 120 : 40;\n            //return 160;\n        }\n    });\n\n    this.showHighlight(false);\n\n    //sequence = amino acids in UPPERCASE, digits or lowercase can be used for modification info\n    if (!sequence) {\n        sequence = \"SEQUENCEMISSING\";\n    }\n    this.sequence = sequence.replace(/[^A-Z]/g, \"\");//remove modification site info from sequence\n    this.size = this.sequence.length;\n\n    //annotations indexed by annotation set name (\"MI Features\", \"Superfamily\", etc)\n    //this.annotationSets // = new Map(); is declared in Interactor, other types of interactor can have features from MIJSON\n\n    this.annotationSets.set(\"Interactor\", [new _annotation__WEBPACK_IMPORTED_MODULE_2__[\"Annotation\"](this.json.label, new _sequence_datum__WEBPACK_IMPORTED_MODULE_3__[\"SequenceDatum\"](null, 1 + \"-\" + this.size))]);\n\n}\n\nProtein.prototype = new _polymer__WEBPACK_IMPORTED_MODULE_0__[\"Polymer\"]();\n\n/*\nProtein.prototype.showData = function(evt) {\n    const url = \"http://www.uniprot.org/uniprot/\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3IvcHJvdGVpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2ludGVyYWN0b3IvcHJvdGVpbi5qcz9kMmFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UG9seW1lcn0gZnJvbSBcIi4vcG9seW1lclwiO1xuaW1wb3J0IHtzdmduc30gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtBbm5vdGF0aW9ufSBmcm9tIFwiLi9hbm5vdGF0aW9uXCI7XG5pbXBvcnQge1NlcXVlbmNlRGF0dW19IGZyb20gXCIuLi9zZXF1ZW5jZS1kYXR1bVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gUHJvdGVpbihpZCwgLypBcHAqLyBhcHAsIGpzb24sIG5hbWUsIHNlcXVlbmNlKSB7XG4gICAgdGhpcy5pbml0KGlkLCBhcHAsIGpzb24sIG5hbWUpO1xuICAgIHRoaXMudHlwZSA9IFwicHJvdGVpblwiOyAvLyB0aGlzIGlzbid0IGFic29sdXRlbHkgbmVjZXNzYXJ5LCBjb3VsZCBkbyB3aXRob3V0IGl0XG5cbiAgICB0aGlzLnVwcGVyR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsIFwiZ1wiKTtcbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcbiAgICB0aGlzLnN0aWNrWm9vbSA9IDE7XG4gICAgLy8gdGhpcy5leHBhbmRlZCA9IGZhbHNlOyAvL2RvbmUgYnkgaW5pdCgpXG4gICAgLy9tYWtlIGhpZ2hsaWdodFxuICAgIHRoaXMuaGlnaGxpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy5oaWdobGlnaHQuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodFwiLCBcInBhcnRpY2lwYW50LWhpZ2hsaWdodFwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5oaWdobGlnaHQpO1xuXG4gICAgLy9tYWtlIGJhY2tncm91bmRcbiAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc0Mzc0MDgvaG93LWRvLWktY2hhbmdlLWEtY2lyY2xlLXRvLWEtc3F1YXJlLXVzaW5nLWQzXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInJlY3RcIik7XG4gICAgdGhpcy5iYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCIjRkZGRkZGXCIpO1xuICAgIHRoaXMudXBwZXJHcm91cC5hcHBlbmRDaGlsZCh0aGlzLmJhY2tncm91bmQpO1xuICAgIC8vY3JlYXRlIGxhYmVsIC0gd2Ugd2lsbCBtb3ZlIHRoaXMgc3ZnIGVsZW1lbnQgYXJvdW5kIHdoZW4gcHJvdGVpbiBmb3JtIGNoYW5nZXNcbiAgICB0aGlzLmluaXRMYWJlbCgpO1xuICAgIC8vdGlja3MgKGFuZCBhbWlubyBhY2lkIGxldHRlcnMpXG4gICAgdGhpcy50aWNrcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJnXCIpO1xuICAgIC8vc3ZnIGdyb3VwIGZvciBhbm5vdGF0aW9uc1xuICAgIHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJnXCIpO1xuICAgIHRoaXMuYW5ub3RhdGlvbnNTdmdHcm91cC5zZXRBdHRyaWJ1dGUoXCJvcGFjaXR5XCIsIFwiMVwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5hbm5vdGF0aW9uc1N2Z0dyb3VwKTtcblxuICAgIC8vbWFrZSBvdXRsaW5lXG4gICAgdGhpcy5vdXRsaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInJlY3RcIik7XG4gICAgLy8gY3NzLi4uXG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICB0aGlzLnVwcGVyR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5vdXRsaW5lKTtcblxuICAgIHRoaXMuc2NhbGVMYWJlbHMgPSBbXTtcblxuICAgIC8vc2luY2UgZm9ybSBpcyBzZXQgdG8gMCwgbWFrZSB0aGlzIGEgY2lyY2xlLCB0aGlzIHN0dWZmIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAvLyBlbmQgcmVzdWx0IG9mIHRvQ2lyY2xlIGJ1dCB3aXRob3V0IHRyYW5zaXRpb25cbiAgICBjb25zdCByID0gdGhpcy5nZXRTeW1ib2xSYWRpdXMoKTtcblxuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJ4XCIsIC1yKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwieVwiLCAtcik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHIgKiAyKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHIgKiAyKTtcbiAgICB0aGlzLm91dGxpbmUuc2V0QXR0cmlidXRlKFwicnhcIiwgcik7XG4gICAgdGhpcy5vdXRsaW5lLnNldEF0dHJpYnV0ZShcInJ5XCIsIHIpO1xuXG4gICAgdGhpcy5iYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZShcInhcIiwgLXIpO1xuICAgIHRoaXMuYmFja2dyb3VuZC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIC1yKTtcbiAgICB0aGlzLmJhY2tncm91bmQuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgciAqIDIpO1xuICAgIHRoaXMuYmFja2dyb3VuZC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgciAqIDIpO1xuICAgIHRoaXMuYmFja2dyb3VuZC5zZXRBdHRyaWJ1dGUoXCJyeFwiLCByKTtcbiAgICB0aGlzLmJhY2tncm91bmQuc2V0QXR0cmlidXRlKFwicnlcIiwgcik7XG5cbiAgICAvLyB0aGlzLmFubm90YXRpb25zU3ZnR3JvdXAuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwic2NhbGUoMSwgMSlcIik7XG5cbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCAociAqIDIpICsgNSk7XG4gICAgdGhpcy5oaWdobGlnaHQuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIChyICogMikgKyA1KTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIC1yIC0gMi41KTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIC1yIC0gMi41KTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJyeFwiLCByICsgMi41KTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJyeVwiLCByICsgMi41KTtcbiAgICB0aGlzLmhpZ2hsaWdodC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utb3BhY2l0eVwiLCBcIjBcIik7XG5cbiAgICB0aGlzLmxhYmVsU1ZHLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICgtKHIgKyA1KSkgKyBcIixcIiArIFwiLTUpXCIpO1xuXG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG5cbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJoZWlnaHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmV4cGFuZGVkID8gMTIwIDogNDA7XG4gICAgICAgICAgICAvL3JldHVybiAxNjA7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuc2hvd0hpZ2hsaWdodChmYWxzZSk7XG5cbiAgICAvL3NlcXVlbmNlID0gYW1pbm8gYWNpZHMgaW4gVVBQRVJDQVNFLCBkaWdpdHMgb3IgbG93ZXJjYXNlIGNhbiBiZSB1c2VkIGZvciBtb2RpZmljYXRpb24gaW5mb1xuICAgIGlmICghc2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2UgPSBcIlNFUVVFTkNFTUlTU0lOR1wiO1xuICAgIH1cbiAgICB0aGlzLnNlcXVlbmNlID0gc2VxdWVuY2UucmVwbGFjZSgvW15BLVpdL2csIFwiXCIpOy8vcmVtb3ZlIG1vZGlmaWNhdGlvbiBzaXRlIGluZm8gZnJvbSBzZXF1ZW5jZVxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuc2VxdWVuY2UubGVuZ3RoO1xuXG4gICAgLy9hbm5vdGF0aW9ucyBpbmRleGVkIGJ5IGFubm90YXRpb24gc2V0IG5hbWUgKFwiTUkgRmVhdHVyZXNcIiwgXCJTdXBlcmZhbWlseVwiLCBldGMpXG4gICAgLy90aGlzLmFubm90YXRpb25TZXRzIC8vID0gbmV3IE1hcCgpOyBpcyBkZWNsYXJlZCBpbiBJbnRlcmFjdG9yLCBvdGhlciB0eXBlcyBvZiBpbnRlcmFjdG9yIGNhbiBoYXZlIGZlYXR1cmVzIGZyb20gTUlKU09OXG5cbiAgICB0aGlzLmFubm90YXRpb25TZXRzLnNldChcIkludGVyYWN0b3JcIiwgW25ldyBBbm5vdGF0aW9uKHRoaXMuanNvbi5sYWJlbCwgbmV3IFNlcXVlbmNlRGF0dW0obnVsbCwgMSArIFwiLVwiICsgdGhpcy5zaXplKSldKTtcblxufVxuXG5Qcm90ZWluLnByb3RvdHlwZSA9IG5ldyBQb2x5bWVyKCk7XG5cbi8qXG5Qcm90ZWluLnByb3RvdHlwZS5zaG93RGF0YSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGNvbnN0IHVybCA9IFwiaHR0cDovL3d3dy51bmlwcm90Lm9yZy91bmlwcm90L1wiICsgdGhpcy5qc29uLmlkZW50aWZpZXIuaWQ7XG4gICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG59XG4qL1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/protein.js\n");

/***/ }),

/***/ "./src/js/viz/interactor/rna.js":
/*!**************************************!*\
  !*** ./src/js/viz/interactor/rna.js ***!
  \**************************************/
/*! exports provided: RNA */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNA\", function() { return RNA; });\n/* harmony import */ var _interactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactor */ \"./src/js/viz/interactor/interactor.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n\nfunction RNA(id, app, json, name) {\n    this.init(id, app, json, name);\n    this.upperGroup = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"g\");\n    this.initLabel();\n    const points = \"0, -10  10, 0 0, 10 -10, 0\";\n    this.outline = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"polygon\");\n    this.outline.setAttribute(\"points\", points);\n    this.initOutline();\n    this.initListeners();\n}\n\nRNA.prototype = new _interactor__WEBPACK_IMPORTED_MODULE_0__[\"Interactor\"]();\n\n/*\nRNA.prototype.showData = function(evt) {\n    const url = \"http://rnacentral.org/rna/\" + this.json.identifier.id;\n    window.open(url, '_blank');\n}\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2ludGVyYWN0b3Ivcm5hLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy92aXovaW50ZXJhY3Rvci9ybmEuanM/ZGNhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ludGVyYWN0b3J9IGZyb20gXCIuL2ludGVyYWN0b3JcIjtcbmltcG9ydCB7c3ZnbnN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFJOQShpZCwgYXBwLCBqc29uLCBuYW1lKSB7XG4gICAgdGhpcy5pbml0KGlkLCBhcHAsIGpzb24sIG5hbWUpO1xuICAgIHRoaXMudXBwZXJHcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJnXCIpO1xuICAgIHRoaXMuaW5pdExhYmVsKCk7XG4gICAgY29uc3QgcG9pbnRzID0gXCIwLCAtMTAgIDEwLCAwIDAsIDEwIC0xMCwgMFwiO1xuICAgIHRoaXMub3V0bGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJwb2x5Z29uXCIpO1xuICAgIHRoaXMub3V0bGluZS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICB0aGlzLmluaXRPdXRsaW5lKCk7XG4gICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG59XG5cblJOQS5wcm90b3R5cGUgPSBuZXcgSW50ZXJhY3RvcigpO1xuXG4vKlxuUk5BLnByb3RvdHlwZS5zaG93RGF0YSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGNvbnN0IHVybCA9IFwiaHR0cDovL3JuYWNlbnRyYWwub3JnL3JuYS9cIiArIHRoaXMuanNvbi5pZGVudGlmaWVyLmlkO1xuICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xufVxuKi9cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/interactor/rna.js\n");

/***/ }),

/***/ "./src/js/viz/link/binary-link.js":
/*!****************************************!*\
  !*** ./src/js/viz/link/binary-link.js ***!
  \****************************************/
/*! exports provided: BinaryLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BinaryLink\", function() { return BinaryLink; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./link */ \"./src/js/viz/link/link.js\");\n/* harmony import */ var intersectionjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intersectionjs */ \"./node_modules/intersectionjs/intersection.js\");\n/* harmony import */ var intersectionjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(intersectionjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var point2d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! point2d */ \"./node_modules/point2d/index.js\");\n/* harmony import */ var point2d__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(point2d__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nfunction BinaryLink(id, app, fromI, toI) {\n    this.id = id;\n    // this.evidences = d3.map();\n    this.participants = [fromI, toI];\n    this.sequenceLinks = new Map();\n    this.app = app;\n    this.line = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__[\"svgns\"], \"line\");\n    this.highlightLine = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__[\"svgns\"], \"line\");\n    this.initSVG();\n}\n\nBinaryLink.prototype = new _link__WEBPACK_IMPORTED_MODULE_1__[\"Link\"]();\n\nBinaryLink.prototype.check = function () {\n    if (!this.participants[0].expanded && !this.participants[1].expanded) { //checks if form not defined or is 0\n        this.show();\n        return true;\n    } else { //at least one end was in stick form\n        this.hide();\n        return false;\n    }\n};\n\nBinaryLink.prototype.show = function () {\n    // if (typeof this.line === \"undefined\") {\n    //     this.initSVG();\n    // }\n    this.line.setAttribute(\"stroke-width\", this.app.z * 1);\n    this.highlightLine.setAttribute(\"stroke-width\", this.app.z * 10);\n    this.setLinkCoordinates(this.participants[0]);\n    this.setLinkCoordinates(this.participants[1]);\n    this.app.highlights.appendChild(this.highlightLine);\n    this.app.p_pLinks.appendChild(this.line);\n};\n\n\nBinaryLink.prototype.setLinkCoordinates = function () {\n    if (typeof this.line === \"undefined\") {\n        this.initSVG();\n    }\n    let pos1 = this.participants[0].getPosition();\n    let pos2 = this.participants[1].getPosition();\n\n    let naryPath, iPath, a1, a2, intersect;\n    if (this.participants[0].type === \"complex\") {\n        naryPath = this.participants[0].naryLink.hull;\n        iPath = [];\n        for (let p of naryPath) {\n            iPath.push(new point2d__WEBPACK_IMPORTED_MODULE_3__(p[0], p[1]));\n        }\n        a1 = new point2d__WEBPACK_IMPORTED_MODULE_3__(pos1[0], pos1[1]);\n        a2 = new point2d__WEBPACK_IMPORTED_MODULE_3__(pos2[0], pos2[1]);\n        intersect = intersectionjs__WEBPACK_IMPORTED_MODULE_2__[\"intersectLinePolygon\"](a1, a2, iPath);\n        if (intersect.points[0]) {\n            pos1 = [intersect.points[0].x, intersect.points[0].y];\n        }\n\n        // this.line.setAttribute(\"marker-start\", \"url(#marker_diamond)\");\n        // this.line.setAttribute(\"marker-end\", \"url(#marker_diamond)\");\n    }\n\n    if (this.participants[1].type === \"complex\") {\n        naryPath = this.participants[1].naryLink.hull;\n        iPath = [];\n        for (let p of naryPath) {\n            iPath.push(new point2d__WEBPACK_IMPORTED_MODULE_3__(p[0], p[1]));\n        }\n        a1 = new point2d__WEBPACK_IMPORTED_MODULE_3__(pos1[0], pos1[1]);\n        a2 = new point2d__WEBPACK_IMPORTED_MODULE_3__(pos2[0], pos2[1]);\n        intersect = intersectionjs__WEBPACK_IMPORTED_MODULE_2__[\"intersectLinePolygon\"](a1, a2, iPath);\n        if (intersect.points[0]) {\n            pos2 = [intersect.points[0].x, intersect.points[0].y];\n        }\n        // this.line.setAttribute(\"marker-start\", \"url(#marker_diamond)\");\n        // this.line.setAttribute(\"marker-end\", \"url(#marker_diamond)\");\n    }\n\n    this.line.setAttribute(\"x1\", pos1[0]);\n    this.line.setAttribute(\"y1\", pos1[1]);\n    this.highlightLine.setAttribute(\"x1\", pos1[0]);\n    this.highlightLine.setAttribute(\"y1\", pos1[1]);\n\n    this.line.setAttribute(\"x2\", pos2[0]);\n    this.line.setAttribute(\"y2\", pos2[1]);\n    this.highlightLine.setAttribute(\"x2\", pos2[0]);\n    this.highlightLine.setAttribute(\"y2\", pos2[1]);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2xpbmsvYmluYXJ5LWxpbmsuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wbGV4dmlld2VyLy4vc3JjL2pzL3Zpei9saW5rL2JpbmFyeS1saW5rLmpzPzAzMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdmduc30gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtMaW5rfSBmcm9tIFwiLi9saW5rXCI7XG5pbXBvcnQgKiBhcyBJbnRlcnNlY3Rpb24gZnJvbSBcImludGVyc2VjdGlvbmpzXCI7XG5pbXBvcnQgKiBhcyBQb2ludDJEIGZyb20gXCJwb2ludDJkXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBCaW5hcnlMaW5rKGlkLCBhcHAsIGZyb21JLCB0b0kpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgLy8gdGhpcy5ldmlkZW5jZXMgPSBkMy5tYXAoKTtcbiAgICB0aGlzLnBhcnRpY2lwYW50cyA9IFtmcm9tSSwgdG9JXTtcbiAgICB0aGlzLnNlcXVlbmNlTGlua3MgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5saW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImxpbmVcIik7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcImxpbmVcIik7XG4gICAgdGhpcy5pbml0U1ZHKCk7XG59XG5cbkJpbmFyeUxpbmsucHJvdG90eXBlID0gbmV3IExpbmsoKTtcblxuQmluYXJ5TGluay5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnBhcnRpY2lwYW50c1swXS5leHBhbmRlZCAmJiAhdGhpcy5wYXJ0aWNpcGFudHNbMV0uZXhwYW5kZWQpIHsgLy9jaGVja3MgaWYgZm9ybSBub3QgZGVmaW5lZCBvciBpcyAwXG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgeyAvL2F0IGxlYXN0IG9uZSBlbmQgd2FzIGluIHN0aWNrIGZvcm1cbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5CaW5hcnlMaW5rLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGlmICh0eXBlb2YgdGhpcy5saW5lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gICAgIHRoaXMuaW5pdFNWRygpO1xuICAgIC8vIH1cbiAgICB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIHRoaXMuYXBwLnogKiAxKTtcbiAgICB0aGlzLmhpZ2hsaWdodExpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIHRoaXMuYXBwLnogKiAxMCk7XG4gICAgdGhpcy5zZXRMaW5rQ29vcmRpbmF0ZXModGhpcy5wYXJ0aWNpcGFudHNbMF0pO1xuICAgIHRoaXMuc2V0TGlua0Nvb3JkaW5hdGVzKHRoaXMucGFydGljaXBhbnRzWzFdKTtcbiAgICB0aGlzLmFwcC5oaWdobGlnaHRzLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0TGluZSk7XG4gICAgdGhpcy5hcHAucF9wTGlua3MuYXBwZW5kQ2hpbGQodGhpcy5saW5lKTtcbn07XG5cblxuQmluYXJ5TGluay5wcm90b3R5cGUuc2V0TGlua0Nvb3JkaW5hdGVzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5saW5lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMuaW5pdFNWRygpO1xuICAgIH1cbiAgICBsZXQgcG9zMSA9IHRoaXMucGFydGljaXBhbnRzWzBdLmdldFBvc2l0aW9uKCk7XG4gICAgbGV0IHBvczIgPSB0aGlzLnBhcnRpY2lwYW50c1sxXS5nZXRQb3NpdGlvbigpO1xuXG4gICAgbGV0IG5hcnlQYXRoLCBpUGF0aCwgYTEsIGEyLCBpbnRlcnNlY3Q7XG4gICAgaWYgKHRoaXMucGFydGljaXBhbnRzWzBdLnR5cGUgPT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgIG5hcnlQYXRoID0gdGhpcy5wYXJ0aWNpcGFudHNbMF0ubmFyeUxpbmsuaHVsbDtcbiAgICAgICAgaVBhdGggPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCBvZiBuYXJ5UGF0aCkge1xuICAgICAgICAgICAgaVBhdGgucHVzaChuZXcgUG9pbnQyRChwWzBdLCBwWzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgYTEgPSBuZXcgUG9pbnQyRChwb3MxWzBdLCBwb3MxWzFdKTtcbiAgICAgICAgYTIgPSBuZXcgUG9pbnQyRChwb3MyWzBdLCBwb3MyWzFdKTtcbiAgICAgICAgaW50ZXJzZWN0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGExLCBhMiwgaVBhdGgpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0LnBvaW50c1swXSkge1xuICAgICAgICAgICAgcG9zMSA9IFtpbnRlcnNlY3QucG9pbnRzWzBdLngsIGludGVyc2VjdC5wb2ludHNbMF0ueV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwibWFya2VyLXN0YXJ0XCIsIFwidXJsKCNtYXJrZXJfZGlhbW9uZClcIik7XG4gICAgICAgIC8vIHRoaXMubGluZS5zZXRBdHRyaWJ1dGUoXCJtYXJrZXItZW5kXCIsIFwidXJsKCNtYXJrZXJfZGlhbW9uZClcIik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFydGljaXBhbnRzWzFdLnR5cGUgPT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgIG5hcnlQYXRoID0gdGhpcy5wYXJ0aWNpcGFudHNbMV0ubmFyeUxpbmsuaHVsbDtcbiAgICAgICAgaVBhdGggPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCBvZiBuYXJ5UGF0aCkge1xuICAgICAgICAgICAgaVBhdGgucHVzaChuZXcgUG9pbnQyRChwWzBdLCBwWzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgYTEgPSBuZXcgUG9pbnQyRChwb3MxWzBdLCBwb3MxWzFdKTtcbiAgICAgICAgYTIgPSBuZXcgUG9pbnQyRChwb3MyWzBdLCBwb3MyWzFdKTtcbiAgICAgICAgaW50ZXJzZWN0ID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKGExLCBhMiwgaVBhdGgpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0LnBvaW50c1swXSkge1xuICAgICAgICAgICAgcG9zMiA9IFtpbnRlcnNlY3QucG9pbnRzWzBdLngsIGludGVyc2VjdC5wb2ludHNbMF0ueV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcy5saW5lLnNldEF0dHJpYnV0ZShcIm1hcmtlci1zdGFydFwiLCBcInVybCgjbWFya2VyX2RpYW1vbmQpXCIpO1xuICAgICAgICAvLyB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwibWFya2VyLWVuZFwiLCBcInVybCgjbWFya2VyX2RpYW1vbmQpXCIpO1xuICAgIH1cblxuICAgIHRoaXMubGluZS5zZXRBdHRyaWJ1dGUoXCJ4MVwiLCBwb3MxWzBdKTtcbiAgICB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwieTFcIiwgcG9zMVsxXSk7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLnNldEF0dHJpYnV0ZShcIngxXCIsIHBvczFbMF0pO1xuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5zZXRBdHRyaWJ1dGUoXCJ5MVwiLCBwb3MxWzFdKTtcblxuICAgIHRoaXMubGluZS5zZXRBdHRyaWJ1dGUoXCJ4MlwiLCBwb3MyWzBdKTtcbiAgICB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwieTJcIiwgcG9zMlsxXSk7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLnNldEF0dHJpYnV0ZShcIngyXCIsIHBvczJbMF0pO1xuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5zZXRBdHRyaWJ1dGUoXCJ5MlwiLCBwb3MyWzFdKTtcbn07XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/viz/link/binary-link.js\n");

/***/ }),

/***/ "./src/js/viz/link/feature-link.js":
/*!*****************************************!*\
  !*** ./src/js/viz/link/feature-link.js ***!
  \*****************************************/
/*! exports provided: FeatureLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FeatureLink\", function() { return FeatureLink; });\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./link */ \"./src/js/viz/link/link.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\n\n// import * as Point2D from \"point2d\";\n// import * as Intersection from \"intersectionjs\";\n\nfunction FeatureLink(id, fromFeatPos, toFeatPos, app) {\n    this.init(id, fromFeatPos, toFeatPos, app);\n}\n\nFeatureLink.prototype = new _link__WEBPACK_IMPORTED_MODULE_0__[\"Link\"]();\n\nFeatureLink.prototype.init = function (id, fromFeatPos, toFeatPos, app) {\n    this.id = id;\n    this.app = app;\n    this.fromSequenceData = fromFeatPos;\n    this.toSequenceData = toFeatPos;\n\n    this.participants = [this.fromSequenceData[0].participant, this.toSequenceData[0].participant]; //*\n    // *potentially, this over simplifies the situation,\n    // but there is a workaround in way ReadMiJson init's links so OK for now\n\n    this.glyph = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"path\");\n    this.uncertainGlyph = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_1__[\"svgns\"], \"path\");\n    this.glyph.classList.add(\"link\", \"feature-link\", \"certain-link\");\n    this.uncertainGlyph.classList.add(\"link\", \"feature-link\", \"uncertain-link\");\n\n    //set the events for it\n    const self = this;\n    this.uncertainGlyph.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.uncertainGlyph.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.uncertainGlyph.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    this.glyph.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.glyph.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.glyph.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    // this.highlightGlyph.onmousedown = function (evt) {\n    //     self.mouseDown(evt);\n    // };\n    // this.highlightGlyph.onmouseover = function (evt) {\n    //     self.mouseOver(evt);\n    // };\n    // this.highlightGlyph.onmouseout = function (evt) {\n    //     self.mouseOut(evt);\n    // };\n};\n\n//andAlternatives means highlight alternative links in case of site ambiguity\n// FeatureLink.prototype.showHighlight = function (show) {\n//     if (show) {\n//         this.highlightGlyph.setAttribute(\"stroke-opacity\", \"1\");\n//     } else {\n//         this.highlightGlyph.setAttribute(\"stroke-opacity\", \"0\");\n//     }\n// };\n\n//used when filter changed\nFeatureLink.prototype.check = function () {\n    if (this.anyParticipantIsBar() === true) {\n        this.show();\n        return true;\n    } else {\n        this.hide();\n        return false;\n    }\n};\n\nFeatureLink.prototype.anyParticipantIsBar = function () {\n    const ic = this.participants.length;\n    for (let i = 0; i < ic; i++) {\n        if (this.participants[i].expanded) {\n            return true;\n        }\n    }\n    return false;\n};\n\nFeatureLink.prototype.show = function () {\n    // //this.glyph.setAttribute(\"stroke-width\", this.util.z * xiNET.linkWidth);\n    // this.uncertainGlyph.setAttribute(\"stroke-width\", this.util.z * 10);\n    // this.highlightGlyph.setAttribute(\"stroke-width\", this.util.z * 10);\n    this.setLinkCoordinates();\n    let containingGroup = this.app.res_resLinks;\n    if (this.participants[0] === this.participants[1]) {\n        containingGroup = this.app.selfRes_resLinks;\n    }\n    // containingGroup.appendChild(this.highlightGlyph);\n    containingGroup.appendChild(this.glyph);\n    containingGroup.appendChild(this.uncertainGlyph);\n};\n\nFeatureLink.prototype.hide = function () {\n    this.glyph.remove();\n    this.uncertainGlyph.remove();\n};\n\n// update the links(polygons/lines) to fit to the protein\nFeatureLink.prototype.setLinkCoordinates = function () {\n    function isNumber(thing) {\n        return (!isNaN(parseFloat(thing)) && isFinite(thing));\n    }\n\n    function getSegment(midPoint, controlPoint, startRes, endRes, participant, yOffset, originPoint) {\n        let startPoint, endPoint;\n        if (!participant.expanded) {\n            startPoint = participant.getPosition(originPoint);\n            endPoint = startPoint;\n        } else {\n            startPoint = participant.getResidueCoordinates(startRes, yOffset);\n            endPoint = participant.getResidueCoordinates(endRes, yOffset);\n        }\n        return \" Q\" + controlPoint[0] + \",\" + controlPoint[1] + \" \" + startPoint[0] + \",\" + startPoint[1] +\n            \" L\" + endPoint[0] + \",\" + endPoint[1] +\n            \" Q\" + controlPoint[0] + \",\" + controlPoint[1] + \" \" + midPoint[0] + \",\" + midPoint[1];\n    }\n\n    function sequenceDataMidPoint(sequenceData, participant) {\n        //get the smallest start and the biggest end\n        let lowestLinkedRes = null,\n            highestLinkedRes = null;\n        const sdCount = sequenceData.length;\n        for (let s = 0; s < sdCount; s++) {\n            const seqDatum = sequenceData[s];\n            if (!isNaN(parseFloat(seqDatum.begin)) && isFinite(seqDatum.begin)) {\n                // noinspection PointlessArithmeticExpressionJS\n                const start = seqDatum.begin * 1; // the * 1 is necessary (type conversion)\n                if (lowestLinkedRes === null || start < lowestLinkedRes) {\n                    lowestLinkedRes = start;\n                }\n            }\n            if (!isNaN(parseFloat(seqDatum.uncertainBegin)) && isFinite(seqDatum.uncertainBegin)) {\n                const uncertainBegin = seqDatum.uncertainBegin * 1;\n                if (lowestLinkedRes === null || uncertainBegin < lowestLinkedRes) {\n                    lowestLinkedRes = uncertainBegin;\n                }\n            }\n            if (!isNaN(parseFloat(seqDatum.end)) && isFinite(seqDatum.end)) {\n                const end = seqDatum.end * 1;\n                if (highestLinkedRes === null || end > highestLinkedRes) {\n                    highestLinkedRes = end;\n                }\n            }\n            if (!isNaN(parseFloat(seqDatum.uncertainEnd)) && isFinite(seqDatum.uncertainEnd)) {\n                const uncertainEnd = seqDatum.uncertainEnd * 1;\n                if (highestLinkedRes === null || uncertainEnd > highestLinkedRes) {\n                    highestLinkedRes = uncertainEnd;\n                }\n            }\n        }\n        return participant.getResidueCoordinates((lowestLinkedRes + highestLinkedRes) / 2, 0);\n    }\n\n    const fromParticipant = this.fromSequenceData[0].participant;\n    const toParticipant = this.toSequenceData[0].participant;\n    //calculate mid points of from and to sequence data\n    let fMid, tMid;\n\n    if (fromParticipant.expanded)  {\n        fMid = sequenceDataMidPoint(this.fromSequenceData, fromParticipant);\n    }\n    if (toParticipant.expanded)  {\n        tMid = sequenceDataMidPoint(this.toSequenceData, toParticipant);\n    }\n    if (!fromParticipant.expanded) {\n        fMid = fromParticipant.getPosition(tMid);//toOriginPoint);\n    }\n    if (!toParticipant.expanded) {\n        tMid = toParticipant.getPosition(fMid);//fromOriginPoint);\n    }\n\n    const fromOriginPoint = fMid;//null;//[fromParticipant.cy, fromParticipant.cy];\n    const toOriginPoint = tMid;//null;//[toParticipant.cy, toParticipant.cy];\n\n    // if (!fromParticipant.expanded) {\n    //     fMid = fromParticipant.getPosition();//toOriginPoint);\n    // } else {\n    //     fMid = sequenceDataMidPoint(this.fromSequenceData, fromParticipant);\n    // }\n    // if (!toParticipant.expanded) {\n    //     tMid = toParticipant.getPosition();//fromOriginPoint);\n    // } else {\n    //     tMid = sequenceDataMidPoint(this.toSequenceData, toParticipant);\n    // }\n\n    //calculate angle from fromParticipant mid point to toParticipant mid point\n    const deltaX = fMid[0] - tMid[0];\n    const deltaY = fMid[1] - tMid[1];\n    const angleBetweenMidPoints = Math.atan2(deltaY, deltaX);\n    //todo: tidy up trig code so everything is always in radian\n    let abmpDeg = angleBetweenMidPoints / (2 * Math.PI) * 360;\n    if (abmpDeg < 0) {\n        abmpDeg += 360;\n    }\n\n    //out is value we use to decide which side of bar the link glyph is drawn\n    //first for 'from' participant\n    let out = (abmpDeg - fromParticipant.rotation);\n    if (out < 0) {\n        out += 360;\n    }\n    let fyOffset = 10;\n    if (out < 180) {\n        fyOffset = -10;\n    }\n    let fRotRad = (fromParticipant.rotation / 360) * Math.PI * 2;\n    if (out > 180) {\n        fRotRad -= Math.PI;\n    }\n    //now for 'to' participant\n    out = (abmpDeg - toParticipant.rotation);\n    if (out < 0) {\n        out += 360;\n    }\n    let tyOffset = 10;\n    if (out > 180) {\n        tyOffset = -10;\n    }\n    let tRotRad = (toParticipant.rotation / 360) * Math.PI * 2;\n    if (out < 180) {\n        tRotRad -= Math.PI;\n    }\n\n    let ftMid = [fMid[0] + (30 * Math.sin(fRotRad) * this.app.z),\n        fMid[1] - (30 * Math.cos(fRotRad) * this.app.z)\n    ];\n    if (!fromParticipant.expanded) {\n        ftMid = fMid;\n    }\n\n    let ttMid = [tMid[0] + (30 * Math.sin(tRotRad) * this.app.z),\n        tMid[1] - (30 * Math.cos(tRotRad) * this.app.z)\n    ];\n    if (!toParticipant.expanded) {\n        ttMid = tMid;\n    }\n\n    const triPointMid = [(ftMid[0] + ttMid[0]) / 2, (ftMid[1] + ttMid[1]) / 2];\n    const fSDCount = this.fromSequenceData.length;\n    const tSDCount = this.toSequenceData.length;\n    let seqDatum;//, highlightStartRes, highlightEndRes;\n    let glyphPath = \"M\" + triPointMid[0] + \",\" + triPointMid[1];\n    let uncertainGlyphPath = \"M\" + triPointMid[0] + \",\" + triPointMid[1];\n    // let highlightGlyphPath = \"M\" + triPointMid[0] + \",\" + triPointMid[1];\n    for (let f = 0; f < fSDCount; f++) {\n        seqDatum = this.fromSequenceData[f];\n        if (isNumber(seqDatum.begin)  && isNumber(seqDatum.end) || fromParticipant.type === \"complex\") {\n            glyphPath += getSegment(triPointMid, ftMid, seqDatum.begin, seqDatum.end, fromParticipant, fyOffset, toOriginPoint);\n        }\n        // highlightStartRes = seqDatum.begin;\n        // highlightEndRes = seqDatum.end;\n        if (isNumber(seqDatum.uncertainBegin)) {\n            uncertainGlyphPath += getSegment(triPointMid, ftMid,\n                seqDatum.uncertainBegin, seqDatum.begin, fromParticipant, fyOffset, toOriginPoint);\n            // highlightStartRes = seqDatum.uncertainBegin;\n        }\n        if (isNumber(seqDatum.uncertainEnd)) {\n            uncertainGlyphPath += getSegment(triPointMid, ftMid,\n                seqDatum.end, seqDatum.uncertainEnd, fromParticipant, fyOffset, toOriginPoint);\n            // highlightEndRes = seqDatum.uncertainEnd;\n        }\n        // highlightGlyphPath += getPathSegments(triPointMid, ftMid,\n        //     highlightStartRes, highlightEndRes, fromParticipant, fyOffset);\n    }\n    for (let t = 0; t < tSDCount; t++) {\n        seqDatum = this.toSequenceData[t];\n        if (isNumber(seqDatum.begin) && isNumber(seqDatum.end) || toParticipant.type === \"complex\") {\n            glyphPath += getSegment(triPointMid, ttMid, seqDatum.begin, seqDatum.end, toParticipant, tyOffset, fromOriginPoint);\n        }\n        // highlightStartRes = seqDatum.begin;\n        // highlightEndRes = seqDatum.end;\n        if (isNumber(seqDatum.uncertainBegin)) {\n            uncertainGlyphPath += getSegment(triPointMid, ttMid,\n                seqDatum.uncertainBegin, seqDatum.begin, toParticipant, tyOffset, fromOriginPoint);\n            // highlightStartRes = seqDatum.uncertainBegin;\n        }\n        if (isNumber(seqDatum.uncertainEnd)) {\n            uncertainGlyphPath += getSegment(triPointMid, ttMid,\n                seqDatum.end, seqDatum.uncertainEnd, toParticipant, tyOffset, fromOriginPoint);\n            // highlightEndRes = seqDatum.uncertainEnd;\n        }\n        // highlightGlyphPath += getPathSegments(triPointMid, ttMid,\n        //     highlightStartRes, highlightEndRes, toParticipant, tyOffset);\n    }\n\n    if (!this.glyph) {\n        this.initSVG();\n    }\n\n    this.glyph.setAttribute(\"d\", glyphPath);\n    this.uncertainGlyph.setAttribute(\"d\", uncertainGlyphPath);\n    // this.highlightGlyph.setAttribute(\"d\", highlightGlyphPath);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/viz/link/feature-link.js\n");

/***/ }),

/***/ "./src/js/viz/link/link.js":
/*!*********************************!*\
  !*** ./src/js/viz/link/link.js ***!
  \*********************************/
/*! exports provided: Link */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Link\", function() { return Link; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n\nfunction Link () {}\n\nLink.prototype.highlightParticipants = function (show) {\n    for (let participant of this.participants) {\n        participant.showHighlight(show);\n    }\n};\n\nLink.prototype.initSVG = function () {\n    this.line.classList.add(\"link\",\"link-line\");//, \"certain-link\");\n    this.highlightLine.classList.add(\"link\", \"highlight\", \"link-highlight\");\n    //set the events for it\n    const self = this;\n    this.line.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.line.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.line.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    // this.line.ontouchstart = function (evt) {\n    //     self.touchStart(evt);\n    // };\n\n    this.highlightLine.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.highlightLine.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.highlightLine.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    // this.highlightLine.ontouchstart = function (evt) {\n    //     self.touchStart(evt);\n    // };\n};\n// event handler for starting dragging or rotation (or flipping internal links)\nLink.prototype.mouseDown = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    //stop layout\n    this.app.d3cola.stop();\n    this.app.dragElement = this;\n    //store start location\n    this.app.dragStart = evt;\n    return false;\n};\n\nLink.prototype.mouseOver = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.app.setTooltip(this.getToolTip(), this.color);\n    return false;\n};\n\nLink.prototype.getToolTip = function () {\n    return this.id;\n};\n\nLink.prototype.mouseOut = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt);\n    this.app.hideTooltip();\n    return false;\n};\n\n\nLink.prototype.touchStart = function (evt) {\n    this.app.preventDefaultsAndStopPropagation(evt); //see MouseEvents.js\n    //stop layout\n    this.app.d3cola.stop();\n    this.app.dragElement = this;\n    //store start location\n    this.app.dragStart = evt;\n    return false;\n};\n\n//used by BinaryLink and UnaryLink\nLink.prototype.hide = function () {\n    this.highlightLine.remove();\n    this.line.remove();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2xpbmsvbGluay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2xpbmsvbGluay5qcz8xMmU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGlnaGxpZ2h0Q29sb3VyfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5leHBvcnQgZnVuY3Rpb24gTGluayAoKSB7fVxuXG5MaW5rLnByb3RvdHlwZS5oaWdobGlnaHRQYXJ0aWNpcGFudHMgPSBmdW5jdGlvbiAoc2hvdykge1xuICAgIGZvciAobGV0IHBhcnRpY2lwYW50IG9mIHRoaXMucGFydGljaXBhbnRzKSB7XG4gICAgICAgIHBhcnRpY2lwYW50LnNob3dIaWdobGlnaHQoc2hvdyk7XG4gICAgfVxufTtcblxuTGluay5wcm90b3R5cGUuaW5pdFNWRyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxpbmUuY2xhc3NMaXN0LmFkZChcImxpbmtcIixcImxpbmstbGluZVwiKTsvLywgXCJjZXJ0YWluLWxpbmtcIik7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLmNsYXNzTGlzdC5hZGQoXCJsaW5rXCIsIFwiaGlnaGxpZ2h0XCIsIFwibGluay1oaWdobGlnaHRcIik7XG4gICAgLy9zZXQgdGhlIGV2ZW50cyBmb3IgaXRcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLmxpbmUub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLmxpbmUub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdmVyKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLmxpbmUub25tb3VzZW91dCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU91dChldnQpO1xuICAgIH07XG4gICAgLy8gdGhpcy5saW5lLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAvLyAgICAgc2VsZi50b3VjaFN0YXJ0KGV2dCk7XG4gICAgLy8gfTtcblxuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZURvd24oZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi5tb3VzZU92ZXIoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5vbm1vdXNlb3V0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3V0KGV2dCk7XG4gICAgfTtcbiAgICAvLyB0aGlzLmhpZ2hsaWdodExpbmUub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIC8vICAgICBzZWxmLnRvdWNoU3RhcnQoZXZ0KTtcbiAgICAvLyB9O1xufTtcbi8vIGV2ZW50IGhhbmRsZXIgZm9yIHN0YXJ0aW5nIGRyYWdnaW5nIG9yIHJvdGF0aW9uIChvciBmbGlwcGluZyBpbnRlcm5hbCBsaW5rcylcbkxpbmsucHJvdG90eXBlLm1vdXNlRG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB0aGlzLmFwcC5wcmV2ZW50RGVmYXVsdHNBbmRTdG9wUHJvcGFnYXRpb24oZXZ0KTtcbiAgICAvL3N0b3AgbGF5b3V0XG4gICAgdGhpcy5hcHAuZDNjb2xhLnN0b3AoKTtcbiAgICB0aGlzLmFwcC5kcmFnRWxlbWVudCA9IHRoaXM7XG4gICAgLy9zdG9yZSBzdGFydCBsb2NhdGlvblxuICAgIHRoaXMuYXBwLmRyYWdTdGFydCA9IGV2dDtcbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5MaW5rLnByb3RvdHlwZS5tb3VzZU92ZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdGhpcy5hcHAucHJldmVudERlZmF1bHRzQW5kU3RvcFByb3BhZ2F0aW9uKGV2dCk7XG4gICAgdGhpcy5hcHAuc2V0VG9vbHRpcCh0aGlzLmdldFRvb2xUaXAoKSwgdGhpcy5jb2xvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuTGluay5wcm90b3R5cGUuZ2V0VG9vbFRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pZDtcbn07XG5cbkxpbmsucHJvdG90eXBlLm1vdXNlT3V0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuYXBwLnByZXZlbnREZWZhdWx0c0FuZFN0b3BQcm9wYWdhdGlvbihldnQpO1xuICAgIHRoaXMuYXBwLmhpZGVUb29sdGlwKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuXG5MaW5rLnByb3RvdHlwZS50b3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuYXBwLnByZXZlbnREZWZhdWx0c0FuZFN0b3BQcm9wYWdhdGlvbihldnQpOyAvL3NlZSBNb3VzZUV2ZW50cy5qc1xuICAgIC8vc3RvcCBsYXlvdXRcbiAgICB0aGlzLmFwcC5kM2NvbGEuc3RvcCgpO1xuICAgIHRoaXMuYXBwLmRyYWdFbGVtZW50ID0gdGhpcztcbiAgICAvL3N0b3JlIHN0YXJ0IGxvY2F0aW9uXG4gICAgdGhpcy5hcHAuZHJhZ1N0YXJ0ID0gZXZ0O1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8vdXNlZCBieSBCaW5hcnlMaW5rIGFuZCBVbmFyeUxpbmtcbkxpbmsucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLnJlbW92ZSgpO1xuICAgIHRoaXMubGluZS5yZW1vdmUoKTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/viz/link/link.js\n");

/***/ }),

/***/ "./src/js/viz/link/nary-link.js":
/*!**************************************!*\
  !*** ./src/js/viz/link/nary-link.js ***!
  \**************************************/
/*! exports provided: NaryLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NaryLink\", function() { return NaryLink; });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./link */ \"./src/js/viz/link/link.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n //used for d3.geom.hull\n\n\n\n//NaryLink.naryColors; // init'ed in clear function of util\nNaryLink.orbitNodes = 20;\nNaryLink.orbitRadius = 22;\n\nfunction NaryLink(id, app) {\n    this.id = id;\n    this.participants = [];\n    this.sequenceLinks = new Map();\n    this.binaryLinks = new Map();\n    this.unaryLinks = new Map();\n    this.app = app;\n    // this.tooltip = this.id;\n    this.initSVG();\n}\n\nNaryLink.prototype = new _link__WEBPACK_IMPORTED_MODULE_1__[\"Link\"]();\n\n/*\nNaryLink.prototype.getTotalParticipantCount = function () {\n    let result = 0;\n    const c = this.participants.length;\n    for (let p = 0; p < c; p++) {\n        const participant = this.participants[p];\n        //console.log(\"! \" + typeof participant);\n        if (participant.type !== \"complex\") {\n            result++;\n        } else {\n            result += participant.naryLink.getTotalParticipantCount();\n        }\n    }\n    return result;\n};\n*/\n\nNaryLink.prototype.initSVG = function () {\n    this.path = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_2__[\"svgns\"], \"path\");\n    this.color = NaryLink.naryColors(this.id);\n    this.path.setAttribute(\"fill\", this.color);\n    //set the events for it\n    const self = this;\n    this.path.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.path.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.path.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    this.path.ontouchstart = function (evt) {\n        self.touchStart(evt);\n    };\n    // todo - prob better way todo this\n    this.path2 = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_2__[\"svgns\"], \"path\");\n    this.path2.setAttribute(\"fill\", \"none\");\n    //set the events for it\n    this.path2.onmousedown = function (evt) {\n        self.mouseDown(evt);\n    };\n    this.path2.onmouseover = function (evt) {\n        self.mouseOver(evt);\n    };\n    this.path2.onmouseout = function (evt) {\n        self.mouseOut(evt);\n    };\n    this.path2.ontouchstart = function (evt) {\n        self.touchStart(evt);\n    };\n};\n\nNaryLink.prototype.showHighlight = function (show) {\n    this.highlightParticipants(show);\n};\n\nNaryLink.prototype.check = function () {\n    this.show();\n    return true;\n};\n\nNaryLink.prototype.show = function () {\n    // this.path.setAttribute(\"stroke-width\", this.app.z);\n    this.setLinkCoordinates();\n    this.app.naryLinks.appendChild(this.path);\n    this.app.naryLinks.appendChild(this.path2);\n};\n\nNaryLink.prototype.hide = function () {\n};\n\nNaryLink.prototype.setLinkCoordinates = function (dontPropogate) {\n    // Uses d3.geom.hull to calculate a bounding path around an array of vertices\n    const calculateHullPath = function (values) {\n        const hullPath = d3__WEBPACK_IMPORTED_MODULE_0__[\"geom\"].hull(values);\n        self.hull = hullPath; //hack?\n        return \"M\" + hullPath.join(\"L\") + \"Z\";\n    };\n    const self = this; // TODO: - tidy hack above?\n    this.mapped = this.orbitNodes(this.getMappedCoordinates());\n    const hullValues = calculateHullPath(this.mapped);\n    if (hullValues) {\n        this.path.setAttribute(\"d\", hullValues);\n        this.path2.setAttribute(\"d\", hullValues);\n    }\n    if (this.complex && !dontPropogate) {\n        this.complex.setAllLinkCoordinates();\n    }\n};\n\nNaryLink.prototype.getMappedCoordinates = function () {\n    const participants = this.participants;\n    let mapped = [];\n    const ic = participants.length;\n    for (let i = 0; i < ic; i++) {\n        const participant = participants[i];\n        if (participant.type === \"complex\") {\n            mapped = mapped.concat(this.orbitNodes(participant.naryLink.getMappedCoordinates()));\n        } else if (participant.expanded) {\n            const start = participant.getResidueCoordinates(0);\n            const end = participant.getResidueCoordinates(participant.size);\n            if (!isNaN(start[0]) && !isNaN(start[1]) &&\n                !isNaN(end[0]) && !isNaN(end[1])) {\n                mapped.push(start);\n                mapped.push(end);\n            } else {\n                mapped.push(participant.getPosition());\n            }\n        } else {\n            mapped.push(participant.getPosition());\n        }\n    }\n    return mapped;\n};\n\n//'orbit' nodes - several nodes around participant positions to give margin\nNaryLink.prototype.orbitNodes = function (mapped) {\n\n\n    const orbitNodes = [];\n    const mc = mapped.length;\n    for (let mi = 0; mi < mc; mi++) {\n        const m = mapped[mi];\n        for (let o = 0; o < NaryLink.orbitNodes; o++) {\n            const angle = (360 / NaryLink.orbitNodes) * o;\n            const p = [m[0] + NaryLink.orbitRadius, m[1]];\n            orbitNodes.push(Object(_config__WEBPACK_IMPORTED_MODULE_2__[\"rotatePointAboutPoint\"])(p, m, angle));\n        }\n    }\n    return orbitNodes;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2xpbmsvbmFyeS1saW5rLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29tcGxleHZpZXdlci8uL3NyYy9qcy92aXovbGluay9uYXJ5LWxpbmsuanM/NmYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjsgLy91c2VkIGZvciBkMy5nZW9tLmh1bGxcbmltcG9ydCB7TGlua30gZnJvbSBcIi4vbGlua1wiO1xuaW1wb3J0IHtzdmducywgcm90YXRlUG9pbnRBYm91dFBvaW50fSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XG5cbi8vTmFyeUxpbmsubmFyeUNvbG9yczsgLy8gaW5pdCdlZCBpbiBjbGVhciBmdW5jdGlvbiBvZiB1dGlsXG5OYXJ5TGluay5vcmJpdE5vZGVzID0gMjA7XG5OYXJ5TGluay5vcmJpdFJhZGl1cyA9IDIyO1xuXG5leHBvcnQgZnVuY3Rpb24gTmFyeUxpbmsoaWQsIGFwcCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLnBhcnRpY2lwYW50cyA9IFtdO1xuICAgIHRoaXMuc2VxdWVuY2VMaW5rcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmJpbmFyeUxpbmtzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMudW5hcnlMaW5rcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICAvLyB0aGlzLnRvb2x0aXAgPSB0aGlzLmlkO1xuICAgIHRoaXMuaW5pdFNWRygpO1xufVxuXG5OYXJ5TGluay5wcm90b3R5cGUgPSBuZXcgTGluaygpO1xuXG4vKlxuTmFyeUxpbmsucHJvdG90eXBlLmdldFRvdGFsUGFydGljaXBhbnRDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICBjb25zdCBjID0gdGhpcy5wYXJ0aWNpcGFudHMubGVuZ3RoO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDwgYzsgcCsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5wYXJ0aWNpcGFudHNbcF07XG4gICAgICAgIC8vY29uc29sZS5sb2coXCIhIFwiICsgdHlwZW9mIHBhcnRpY2lwYW50KTtcbiAgICAgICAgaWYgKHBhcnRpY2lwYW50LnR5cGUgIT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgICAgICByZXN1bHQrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBwYXJ0aWNpcGFudC5uYXJ5TGluay5nZXRUb3RhbFBhcnRpY2lwYW50Q291bnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbiovXG5cbk5hcnlMaW5rLnByb3RvdHlwZS5pbml0U1ZHID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywgXCJwYXRoXCIpO1xuICAgIHRoaXMuY29sb3IgPSBOYXJ5TGluay5uYXJ5Q29sb3JzKHRoaXMuaWQpO1xuICAgIHRoaXMucGF0aC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIHRoaXMuY29sb3IpO1xuICAgIC8vc2V0IHRoZSBldmVudHMgZm9yIGl0XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5wYXRoLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlRG93bihldnQpO1xuICAgIH07XG4gICAgdGhpcy5wYXRoLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3ZlcihldnQpO1xuICAgIH07XG4gICAgdGhpcy5wYXRoLm9ubW91c2VvdXQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VPdXQoZXZ0KTtcbiAgICB9O1xuICAgIHRoaXMucGF0aC5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYudG91Y2hTdGFydChldnQpO1xuICAgIH07XG4gICAgLy8gdG9kbyAtIHByb2IgYmV0dGVyIHdheSB0b2RvIHRoaXNcbiAgICB0aGlzLnBhdGgyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInBhdGhcIik7XG4gICAgdGhpcy5wYXRoMi5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAvL3NldCB0aGUgZXZlbnRzIGZvciBpdFxuICAgIHRoaXMucGF0aDIub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHNlbGYubW91c2VEb3duKGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnBhdGgyLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3ZlcihldnQpO1xuICAgIH07XG4gICAgdGhpcy5wYXRoMi5vbm1vdXNlb3V0ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICBzZWxmLm1vdXNlT3V0KGV2dCk7XG4gICAgfTtcbiAgICB0aGlzLnBhdGgyLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgc2VsZi50b3VjaFN0YXJ0KGV2dCk7XG4gICAgfTtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5zaG93SGlnaGxpZ2h0ID0gZnVuY3Rpb24gKHNob3cpIHtcbiAgICB0aGlzLmhpZ2hsaWdodFBhcnRpY2lwYW50cyhzaG93KTtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5jaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNob3coKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHRoaXMucGF0aC5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgdGhpcy5hcHAueik7XG4gICAgdGhpcy5zZXRMaW5rQ29vcmRpbmF0ZXMoKTtcbiAgICB0aGlzLmFwcC5uYXJ5TGlua3MuYXBwZW5kQ2hpbGQodGhpcy5wYXRoKTtcbiAgICB0aGlzLmFwcC5uYXJ5TGlua3MuYXBwZW5kQ2hpbGQodGhpcy5wYXRoMik7XG59O1xuXG5OYXJ5TGluay5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5zZXRMaW5rQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoZG9udFByb3BvZ2F0ZSkge1xuICAgIC8vIFVzZXMgZDMuZ2VvbS5odWxsIHRvIGNhbGN1bGF0ZSBhIGJvdW5kaW5nIHBhdGggYXJvdW5kIGFuIGFycmF5IG9mIHZlcnRpY2VzXG4gICAgY29uc3QgY2FsY3VsYXRlSHVsbFBhdGggPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGh1bGxQYXRoID0gZDMuZ2VvbS5odWxsKHZhbHVlcyk7XG4gICAgICAgIHNlbGYuaHVsbCA9IGh1bGxQYXRoOyAvL2hhY2s/XG4gICAgICAgIHJldHVybiBcIk1cIiArIGh1bGxQYXRoLmpvaW4oXCJMXCIpICsgXCJaXCI7XG4gICAgfTtcbiAgICBjb25zdCBzZWxmID0gdGhpczsgLy8gVE9ETzogLSB0aWR5IGhhY2sgYWJvdmU/XG4gICAgdGhpcy5tYXBwZWQgPSB0aGlzLm9yYml0Tm9kZXModGhpcy5nZXRNYXBwZWRDb29yZGluYXRlcygpKTtcbiAgICBjb25zdCBodWxsVmFsdWVzID0gY2FsY3VsYXRlSHVsbFBhdGgodGhpcy5tYXBwZWQpO1xuICAgIGlmIChodWxsVmFsdWVzKSB7XG4gICAgICAgIHRoaXMucGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIGh1bGxWYWx1ZXMpO1xuICAgICAgICB0aGlzLnBhdGgyLnNldEF0dHJpYnV0ZShcImRcIiwgaHVsbFZhbHVlcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbXBsZXggJiYgIWRvbnRQcm9wb2dhdGUpIHtcbiAgICAgICAgdGhpcy5jb21wbGV4LnNldEFsbExpbmtDb29yZGluYXRlcygpO1xuICAgIH1cbn07XG5cbk5hcnlMaW5rLnByb3RvdHlwZS5nZXRNYXBwZWRDb29yZGluYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLnBhcnRpY2lwYW50cztcbiAgICBsZXQgbWFwcGVkID0gW107XG4gICAgY29uc3QgaWMgPSBwYXJ0aWNpcGFudHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWM7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50c1tpXTtcbiAgICAgICAgaWYgKHBhcnRpY2lwYW50LnR5cGUgPT09IFwiY29tcGxleFwiKSB7XG4gICAgICAgICAgICBtYXBwZWQgPSBtYXBwZWQuY29uY2F0KHRoaXMub3JiaXROb2RlcyhwYXJ0aWNpcGFudC5uYXJ5TGluay5nZXRNYXBwZWRDb29yZGluYXRlcygpKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFydGljaXBhbnQuZXhwYW5kZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcGFydGljaXBhbnQuZ2V0UmVzaWR1ZUNvb3JkaW5hdGVzKDApO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gcGFydGljaXBhbnQuZ2V0UmVzaWR1ZUNvb3JkaW5hdGVzKHBhcnRpY2lwYW50LnNpemUpO1xuICAgICAgICAgICAgaWYgKCFpc05hTihzdGFydFswXSkgJiYgIWlzTmFOKHN0YXJ0WzFdKSAmJlxuICAgICAgICAgICAgICAgICFpc05hTihlbmRbMF0pICYmICFpc05hTihlbmRbMV0pKSB7XG4gICAgICAgICAgICAgICAgbWFwcGVkLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKHBhcnRpY2lwYW50LmdldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFwcGVkLnB1c2gocGFydGljaXBhbnQuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcHBlZDtcbn07XG5cbi8vJ29yYml0JyBub2RlcyAtIHNldmVyYWwgbm9kZXMgYXJvdW5kIHBhcnRpY2lwYW50IHBvc2l0aW9ucyB0byBnaXZlIG1hcmdpblxuTmFyeUxpbmsucHJvdG90eXBlLm9yYml0Tm9kZXMgPSBmdW5jdGlvbiAobWFwcGVkKSB7XG5cblxuICAgIGNvbnN0IG9yYml0Tm9kZXMgPSBbXTtcbiAgICBjb25zdCBtYyA9IG1hcHBlZC5sZW5ndGg7XG4gICAgZm9yIChsZXQgbWkgPSAwOyBtaSA8IG1jOyBtaSsrKSB7XG4gICAgICAgIGNvbnN0IG0gPSBtYXBwZWRbbWldO1xuICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IE5hcnlMaW5rLm9yYml0Tm9kZXM7IG8rKykge1xuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAoMzYwIC8gTmFyeUxpbmsub3JiaXROb2RlcykgKiBvO1xuICAgICAgICAgICAgY29uc3QgcCA9IFttWzBdICsgTmFyeUxpbmsub3JiaXRSYWRpdXMsIG1bMV1dO1xuICAgICAgICAgICAgb3JiaXROb2Rlcy5wdXNoKHJvdGF0ZVBvaW50QWJvdXRQb2ludChwLCBtLCBhbmdsZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcmJpdE5vZGVzO1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/viz/link/nary-link.js\n");

/***/ }),

/***/ "./src/js/viz/link/unary-link.js":
/*!***************************************!*\
  !*** ./src/js/viz/link/unary-link.js ***!
  \***************************************/
/*! exports provided: UnaryLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnaryLink\", function() { return UnaryLink; });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config */ \"./src/js/config.js\");\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./link */ \"./src/js/viz/link/link.js\");\n//todo - is this even working? you never see it\n\n\n\n// var FeatureLink = require('./FeatureLink');\n\nfunction UnaryLink(id, app, participant) {\n    this.id = id;\n    this.participants = [participant];\n    this.sequenceLinks = new Map();\n    this.app = app;\n    this.line = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__[\"svgns\"], \"path\");\n    this.highlightLine = document.createElementNS(_config__WEBPACK_IMPORTED_MODULE_0__[\"svgns\"], \"path\");\n    this.initSVG();\n}\n\nUnaryLink.prototype = new _link__WEBPACK_IMPORTED_MODULE_1__[\"Link\"]();\n\nUnaryLink.prototype.initSelfLinkSVG = function () {\n    const path = this.participants[0].getAggregateSelfLinkPath();\n    this.line.setAttribute(\"d\", path);\n    this.highlightLine.setAttribute(\"d\", path);\n};\n\nUnaryLink.prototype.check = function () {\n    if (!this.participants[0].expanded) {\n        this.show();\n        return true;\n    } else {\n        this.hide();\n        return false;\n    }\n};\n\nUnaryLink.prototype.show = function () {\n    this.line.setAttribute(\"transform\", \"translate(\" + this.participants[0].ix+\n        \" \" + this.participants[0].iy + \")\" + \" scale(\" + (this.app.z) + \")\");\n    this.highlightLine.setAttribute(\"transform\", \"translate(\" + this.participants[0].ix+\n        \" \" + this.participants[0].iy + \")\" + \" scale(\" + (this.app.z) + \")\");\n    this.app.highlights.appendChild(this.highlightLine);\n    this.app.p_pLinks.appendChild(this.line);\n};\n\n\nUnaryLink.prototype.setLinkCoordinates = function () {\n    const participant = this.participants[0];\n    this.line.setAttribute(\"transform\", \"translate(\" + participant.ix+\n        \" \" + participant.iy + \")\" + \" scale(\" + (this.app.z) + \")\");\n    this.highlightLine.setAttribute(\"transform\", \"translate(\" + participant.ix+\n        \" \" + participant.iy + \")\" + \" scale(\" + (this.app.z) + \")\");\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvdml6L2xpbmsvdW5hcnktbGluay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbXBsZXh2aWV3ZXIvLi9zcmMvanMvdml6L2xpbmsvdW5hcnktbGluay5qcz8zNzRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vdG9kbyAtIGlzIHRoaXMgZXZlbiB3b3JraW5nPyB5b3UgbmV2ZXIgc2VlIGl0XG5cbmltcG9ydCB7c3ZnbnN9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcbmltcG9ydCB7TGlua30gZnJvbSBcIi4vbGlua1wiO1xuLy8gdmFyIEZlYXR1cmVMaW5rID0gcmVxdWlyZSgnLi9GZWF0dXJlTGluaycpO1xuXG5leHBvcnQgZnVuY3Rpb24gVW5hcnlMaW5rKGlkLCBhcHAsIHBhcnRpY2lwYW50KSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMucGFydGljaXBhbnRzID0gW3BhcnRpY2lwYW50XTtcbiAgICB0aGlzLnNlcXVlbmNlTGlua3MgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5saW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInBhdGhcIik7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCBcInBhdGhcIik7XG4gICAgdGhpcy5pbml0U1ZHKCk7XG59XG5cblVuYXJ5TGluay5wcm90b3R5cGUgPSBuZXcgTGluaygpO1xuXG5VbmFyeUxpbmsucHJvdG90eXBlLmluaXRTZWxmTGlua1NWRyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5wYXJ0aWNpcGFudHNbMF0uZ2V0QWdncmVnYXRlU2VsZkxpbmtQYXRoKCk7XG4gICAgdGhpcy5saW5lLnNldEF0dHJpYnV0ZShcImRcIiwgcGF0aCk7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLnNldEF0dHJpYnV0ZShcImRcIiwgcGF0aCk7XG59O1xuXG5VbmFyeUxpbmsucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wYXJ0aWNpcGFudHNbMF0uZXhwYW5kZWQpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuVW5hcnlMaW5rLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGluZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnBhcnRpY2lwYW50c1swXS5peCtcbiAgICAgICAgXCIgXCIgKyB0aGlzLnBhcnRpY2lwYW50c1swXS5peSArIFwiKVwiICsgXCIgc2NhbGUoXCIgKyAodGhpcy5hcHAueikgKyBcIilcIik7XG4gICAgdGhpcy5oaWdobGlnaHRMaW5lLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHRoaXMucGFydGljaXBhbnRzWzBdLml4K1xuICAgICAgICBcIiBcIiArIHRoaXMucGFydGljaXBhbnRzWzBdLml5ICsgXCIpXCIgKyBcIiBzY2FsZShcIiArICh0aGlzLmFwcC56KSArIFwiKVwiKTtcbiAgICB0aGlzLmFwcC5oaWdobGlnaHRzLmFwcGVuZENoaWxkKHRoaXMuaGlnaGxpZ2h0TGluZSk7XG4gICAgdGhpcy5hcHAucF9wTGlua3MuYXBwZW5kQ2hpbGQodGhpcy5saW5lKTtcbn07XG5cblxuVW5hcnlMaW5rLnByb3RvdHlwZS5zZXRMaW5rQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLnBhcnRpY2lwYW50c1swXTtcbiAgICB0aGlzLmxpbmUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgcGFydGljaXBhbnQuaXgrXG4gICAgICAgIFwiIFwiICsgcGFydGljaXBhbnQuaXkgKyBcIilcIiArIFwiIHNjYWxlKFwiICsgKHRoaXMuYXBwLnopICsgXCIpXCIpO1xuICAgIHRoaXMuaGlnaGxpZ2h0TGluZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBwYXJ0aWNpcGFudC5peCtcbiAgICAgICAgXCIgXCIgKyBwYXJ0aWNpcGFudC5peSArIFwiKVwiICsgXCIgc2NhbGUoXCIgKyAodGhpcy5hcHAueikgKyBcIilcIik7XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/viz/link/unary-link.js\n");

/***/ }),

/***/ "./src/js/viz/sequence-datum.js":
/*!**************************************!*\
  !*** ./src/js/viz/sequence-datum.js ***!
  \**************************************/
/*! exports provided: SequenceDatum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SequenceDatum\", function() { return SequenceDatum; });\n/* constructor parameter sequenceDatumString is string with following format:\n *\n *              \"?-?\" = unknown\n *              \"n-n\" = n-terminal range (to be represented as link to box beside n terminal)\n *              \"c-c\" = c-terminal range (to be represented as link to box beside c terminal)\n *              \"123-123\" = specific residue\n *              \"123-456\" = feature sequence\n *              \"86..123-456..464\" = feature sequence with uncertain boundaries\n *              \"86..123-456\" = feature sequence with one uncertain boundary\n *              \"<8-123\" = feature sequence w uncertain start between 1 and 8 to 123\n *              \"123->256\" = feature sequence w uncertain end between 256 and interactor.sequence.length\n */\n\nfunction SequenceDatum(participant, sequenceDatumString) {\n    this.participant = participant;\n    this.sequenceDatumString = sequenceDatumString.trim();\n\n    function tidyPosition(pos){\n        if (parseInt(pos)) return parseInt(pos);\n        else return pos;\n    }\n\n    if (this.sequenceDatumString === \"?-?\") {\n        //this.begin = 1;\n        this.end = 1; //todo - having it at begining is affecting shape of line, look at why\n        this.uncertainEnd = participant.size ? participant.size : 1;\n    } else if (this.sequenceDatumString === \"n-n\") {\n        this.uncertainBegin = \"n-n\";\n        participant.nTerminusFeature = true;\n    } else if (this.sequenceDatumString === \"c-c\") {\n        this.uncertainEnd = \"c-c\";\n    } else {\n        const dashPosition = sequenceDatumString.indexOf(\"-\");\n        const firstPart = sequenceDatumString.substring(0, dashPosition);\n        const secondPart = sequenceDatumString.substring(dashPosition + 1);\n\n        let firstDotPosition;\n        if (firstPart.indexOf(\".\") === -1) {\n            this.begin = tidyPosition(firstPart);\n        } else {\n            firstDotPosition = firstPart.indexOf(\".\");\n            this.uncertainBegin = tidyPosition(firstPart.substring(0, firstDotPosition));\n            this.begin = tidyPosition(firstPart.substring(firstDotPosition + 2));\n        }\n\n        if (secondPart.indexOf(\".\") === -1) {\n            this.end = tidyPosition(secondPart);\n        } else {\n            firstDotPosition = secondPart.indexOf(\".\");\n            this.end = tidyPosition(secondPart.substring(0, firstDotPosition));\n            this.uncertainEnd = tidyPosition(secondPart.substring(firstDotPosition + 2));\n        }\n\n        if (this.begin === \"n\") {\n            this.uncertainBegin = 1;\n            this.begin = tidyPosition(this.end);\n            // this.uncertainEnd = this.end;\n            this.end = null;\n        }\n\n        if (this.end === \"c\") {\n            this.uncertainEnd = participant.size;\n            this.end = tidyPosition(this.begin);\n            // this.uncertainBegin = this.begin;\n            this.begin = null;\n        }\n\n        if (firstPart.indexOf(\"<\") > -1) {\n            this.uncertainBegin = 0;\n            this.begin = tidyPosition(firstPart.substring(1, firstPart.length));\n        }\n        if (secondPart.indexOf(\">\") > -1) {\n            this.end = tidyPosition(secondPart.substring(1, firstPart.length));\n            this.uncertainEnd = participant.size;\n        }\n\n        if (firstPart.indexOf(\">\") > -1 && secondPart.indexOf(\"<\") > -1) {\n            this.uncertainBegin = tidyPosition(firstPart.substring(1, firstPart.length));\n            this.begin = tidyPosition(secondPart.substring(1, firstPart.length));\n            this.end = null;//this.begin;\n        }\n    }\n}\n\nSequenceDatum.prototype.toString = function () {\n    return this.sequenceDatumString;\n};\n\nSequenceDatum.prototype.overlaps = function (seqDatum) {\n    if (this.participant === seqDatum.participant) {\n        const first = this.uncertainBegin || this.begin || this.end || this.uncertainEnd;\n        const last = this.uncertainEnd || this.end || this.begin || this.uncertainBegin;\n\n        const otherFirst = seqDatum.uncertainBegin || seqDatum.begin || seqDatum.end;\n        const otherLast = seqDatum.uncertainEnd || seqDatum.end || seqDatum.begin;\n\n        if (first <= otherLast && otherFirst <= last) { // i wouldn't have got that tbh\n            return true;\n        }\n\n    }\n    return false;\n};\n\n\n//On 06/06/13 09:22, marine@ebi.ac.uk wrote:\n//> Concerning the ranges, I think there was a confusion :\n//>\n//> \"n\" = residue 1\n//> \"c\" = residue at interactor.sequence.length\n//>\n//> In fact n is always used to describe a position that is unknown but we\n//> know it is in the N-terminal portion (somewhere at the beginning of the\n//> sequence) and c is always used to describe a position that is unknown but\n//> we know it is in the C-terminal portion of the sequence (somewhere at the\n//> end of the sequence). If we have an exact N-terminal position (residue 1),\n//> it will be represented as a certain position of 1. Same for C-terminal\n//> position (residue at interactor.sequence.length). We always use '-' to\n//> separate the start position from the end position so c-c means that the\n//> start and end positions of a feature are unknown but are bot in the\n//> C-terminal portion of the sequence.\n//>\n//> You will never have \"123\" = specific residue but rather \"123-123\" =\n//> specific residue which means the start and the end of the feature are\n//> known and are the same so it represents a single residue. If you want,\n//> JAMI could merge the start and end and give you 123 instead of 123-123 if\n//> it is what you want.\n//> \"123-456\" does not mean residue range, it means that the feature sequence\n//> is a sequence of 133 amino acids where the start position and the end\n//> positions are certain. For me, residue range is what you call 'residue\n//> range with fuzzy boundaries'. If the start is 22..25, it means that the\n//> starting amino acid position for the feature sequence is fuzzy and is\n//> between the 22nd and the 25th amino acid but we don't know which one it\n//> is. 22..22 will mean that the starting amino acid position for the feature\n//> sequence is fuzzy and is around amino acid 22 in the interactor sequence.\n//>\n//> \"<8\" = range between 1 and 8 : I have the same comment as for \"123\"\n//> instead of \"123-123\". JAMI could give you \"<8\" if both start and end\n//> positions of the feature are <8 but it could happen that you have a\n//> feature such as \"<8->22\" or \"<8-22\", etc.\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/viz/sequence-datum.js\n");

/***/ })

/******/ });
});